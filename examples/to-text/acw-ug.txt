Amazon CloudWatch
User Guide
Amazon CloudWatch User Guide
Amazon CloudWatch: User Guide
Copyright © 2023 Amazon Web Services, Inc. and/or its aﬃliates. All rights reserved.
Amazon's trademarks and trade dress may not be used in connection with any product or service that is not 
Amazon's, in any manner that is likely to cause confusion among customers, or in any manner that disparages or 
discredits Amazon. All other trademarks not owned by Amazon are the property of their respective owners, who may 
or may not be aﬃliated with, connected to, or sponsored by Amazon.Amazon CloudWatch User Guide
Table of Contents
What is Amazon CloudWatch?.............................................................................................................1
Accessing CloudWatch................................................................................................................1
Related AWS services..................................................................................................................1
How CloudWatch works..............................................................................................................2
Concepts...................................................................................................................................2
Namespaces......................................................................................................................3
Metrics ..............................................................................................................................3
Dimensions ........................................................................................................................4
Resolution.........................................................................................................................5
Statistics ...........................................................................................................................6
Units ................................................................................................................................6
Periods.............................................................................................................................6
Aggregation.......................................................................................................................7
Percentiles.........................................................................................................................7
Alarms ..............................................................................................................................8
Billing and costs........................................................................................................................8
Resources..................................................................................................................................8
Getting set up.................................................................................................................................10
Sign up for an AWS account......................................................................................................10
Create an administrative user....................................................................................................10
Sign in to the Amazon CloudWatch console.................................................................................11
Set up the AWS CLI..................................................................................................................11
Getting started................................................................................................................................12
See key metrics from all AWS services........................................................................................14
Remove a service from appearing in the cross-service dashboard............................................15
Focus on a single service...........................................................................................................16
Focus on a resource group........................................................................................................17
CloudWatch billing and cost..............................................................................................................18
Analyze CloudWatch cost and usage data with Cost Explorer........................................................18
To visualize and analyze CloudWatch cost and usage data.....................................................18
Analyze CloudWatch cost and usage data with AWS Cost and Usage Reports and Athena...................21
To analyze cost and usage data with AWS Cost and Usage Reports and Athena.........................21
Best practices for optimizing and reducing costs..........................................................................23
CloudWatch metrics..........................................................................................................23
CloudWatch alarms...........................................................................................................28
CloudWatch Logs.............................................................................................................30
Dashboards......................................................................................................................................33
Create a dashboard..................................................................................................................34
CloudWatch cross-account observability dashboard......................................................................34
Cross-account cross-Region dashboards.......................................................................................35
Creating and using a cross-account cross-Region dashboard with the AWS Management 
Console ...........................................................................................................................35
Create a cross-account cross-Region dashboard programmatically...........................................36
Create ﬂexible dashboards with dashboard variables.....................................................................38
Types of dashboard variables.............................................................................................38
Tutorial: Create a Lambda dashboard with function name as the variable.................................39
Tutorial: Create a dashboard that uses a regular expression pattern to switch between Regions....40
Copy a variable to another dashboard................................................................................41
Create and work with widgets on CloudWatch dashboards.............................................................42
Add or remove a graph....................................................................................................42
Graph metrics manually on a CloudWatch dashboard...........................................................44
Edit a graph....................................................................................................................45
Add an explorer widget to a CloudWatch dashboard............................................................49
Add or remove a line widget............................................................................................51
iiiAmazon CloudWatch User Guide
Add or remove a number widget.......................................................................................52
Add or remove a gauge widget.........................................................................................53
Add a custom widget to a CloudWatch dashboard................................................................54
Add or remove a text widget............................................................................................61
Add or remove an alarm widget........................................................................................62
Link and unlink graphs .....................................................................................................63
Sharing dashboards..................................................................................................................63
Permissions required to share a dashboard..........................................................................64
Permissions that are granted to people who you share the dashboard with..............................65
Share a single dashboard with speciﬁc users........................................................................65
Share a single dashboard publicly......................................................................................66
Share all CloudWatch dashboards in the account by using SSO...............................................67
Set up SSO for CloudWatch dashboard sharing....................................................................67
See how many of your dashboards are shared.....................................................................68
See which of your dashboards are shared............................................................................68
Stop sharing one or more dashboards................................................................................68
Review shared dashboard permissions and change permission scope.......................................69
Allowing people that you share with to see composite alarms................................................70
Allowing people that you share with to see logs table widgets...............................................71
Allowing people that you share with to see custom widgets...................................................72
Use live data...........................................................................................................................73
Viewing an animated dashboard................................................................................................73
Add a dashboard to your favorites list.......................................................................................74
Change the period override setting or refresh interval..................................................................74
Change the time range or time zone format................................................................................75
Metrics ............................................................................................................................................77
Basic monitoring and detailed monitoring ...................................................................................77
Query your metrics with CloudWatch Metrics Insights...................................................................78
Build your queries............................................................................................................79
Query components and syntax...........................................................................................80
Create alarms on Metrics Insights queries............................................................................85
Use Metrics Insights queries with metric math .....................................................................88
SQL inference..................................................................................................................88
Sample queries ................................................................................................................89
Metrics Insights limits .......................................................................................................95
Metrics Insights glossary...................................................................................................96
Troubleshooting Metrics Insights........................................................................................96
Use metrics explorer to monitor resources by their tags and properties...........................................97
CloudWatch agent conﬁguration for metrics explorer............................................................98
Use metric streams...................................................................................................................99
Set up a metric stream...................................................................................................100
Statistics that can be streamed........................................................................................103
Metric stream operation and maintenance.........................................................................104
Monitor your metric streams with CloudWatch metrics........................................................105
Trust between CloudWatch and Kinesis Data Firehose.........................................................105
Metric streams output formats.........................................................................................106
Troubleshooting.............................................................................................................117
View available metrics.............................................................................................................117
Search for available metrics.............................................................................................120
Graphing metrics ....................................................................................................................121
Graph a metric ...............................................................................................................122
Merge two graphs into one.............................................................................................125
Use dynamic labels .........................................................................................................126
Modify the time range or time zone format for a graph......................................................128
Zooming in on a graph..................................................................................................129
Modify the y-axis for a graph...........................................................................................131
Create an alarm from a metric on a graph.........................................................................132
ivAmazon CloudWatch User Guide
Using anomaly detection.........................................................................................................133
How anomaly detection works.........................................................................................135
Anomaly detection on metric math...................................................................................135
Use metric math .....................................................................................................................136
Add a math expression to a CloudWatch graph..................................................................136
Metric math syntax and functions.....................................................................................137
Using IF expressions........................................................................................................154
Anomaly detection on metric math...................................................................................157
Use search expressions in graphs..............................................................................................157
Search expression syntax.................................................................................................158
Search expression examples.............................................................................................162
Creating a graph with a search expression.........................................................................164
Get statistics for a metric ........................................................................................................166
CloudWatch statistics deﬁnitions......................................................................................166
Get statistics for a speciﬁc resource..................................................................................169
Aggregate statistics across resources.................................................................................172
Aggregate statistics by Auto Scaling group........................................................................173
Aggregating statistics by AMI...........................................................................................175
Publish custom metrics ...........................................................................................................176
High-resolution metrics...................................................................................................176
Use dimensions ..............................................................................................................177
Publish single data points ................................................................................................177
Publish statistic sets .......................................................................................................178
Publish the value zero.....................................................................................................178
Stop publishing metrics ..................................................................................................179
Alarms ..........................................................................................................................................180
Metric alarm states .................................................................................................................180
Evaluating an alarm ................................................................................................................181
Alarm actions.........................................................................................................................182
Conﬁguring how alarms treat missing data................................................................................182
How alarm state is evaluated when data is missing.............................................................183
High-resolution alarms............................................................................................................185
Alarms on math expressions....................................................................................................186
Percentile-based alarms and low data samples...........................................................................186
CloudWatch alarms and Amazon EventBridge............................................................................186
Common features of CloudWatch alarms...................................................................................186
Setting up an SNS topic..........................................................................................................187
Setting up an Amazon SNS topic using the AWS Management Console..................................188
Setting up an SNS topic using the AWS CLI.......................................................................189
Create an alarm based on a static threshold..............................................................................190
Create an alarm based on a Metrics Insights query.....................................................................191
Create an alarm based on anomaly detection.............................................................................192
Modifying an anomaly detection model...........................................................................194
Deleting an anomaly detection model...............................................................................194
Create an alarm based on a log group-metric ﬁlter.....................................................................195
Create an alarm based on a metric math expression...................................................................196
Create a composite alarm........................................................................................................198
Create a composite alarm................................................................................................199
Composite alarm action suppression................................................................................201
Editing or deleting a CloudWatch alarm....................................................................................205
Create a CPU usage alarm.......................................................................................................206
Setting up a CPU usage alarm using the AWS Management Console......................................206
Setting up a CPU usage alarm using the AWS CLI...............................................................208
Create a load balancer latency alarm........................................................................................208
Setting up a latency alarm using the AWS Management Console..........................................208
Setting up a latency alarm using the AWS CLI....................................................................209
Create a storage throughput alarm...........................................................................................210
vAmazon CloudWatch User Guide
Setting up a storage throughput alarm using the AWS Management Console..........................210
Setting up a storage throughput alarm using the AWS CLI...................................................210
Create alarms to stop, terminate, reboot, or recover an EC2 instance.............................................211
Adding stop actions to Amazon CloudWatch alarms............................................................212
Adding terminate actions to Amazon CloudWatch alarms....................................................213
Adding reboot actions to Amazon CloudWatch alarms.........................................................214
Adding recover actions to Amazon CloudWatch alarms........................................................215
Viewing the history of triggered alarms and actions............................................................216
Create a billing alarm.............................................................................................................216
Enabling billing alerts.....................................................................................................217
Create a billing alarm.....................................................................................................217
Deleting a billing alarm ...................................................................................................218
Hiding Auto Scaling alarms ......................................................................................................219
Alarm events and EventBridge.................................................................................................219
Sample events from CloudWatch......................................................................................219
Application monitoring ....................................................................................................................229
Using ServiceLens to monitor the health of your applications.......................................................229
Deploying ServiceLens.....................................................................................................230
Using the service map.....................................................................................................239
Using the resource health view........................................................................................240
ServiceLens troubleshooting............................................................................................242
Using Internet Monitor ............................................................................................................243
Supported Regions.........................................................................................................245
Pricing ...........................................................................................................................246
Components ..................................................................................................................246
How Internet Monitor works............................................................................................248
Use cases .......................................................................................................................252
Getting started...............................................................................................................252
Examples with the CLI .....................................................................................................260
Internet Monitor dashboard.............................................................................................267
Log ﬁle insights .............................................................................................................273
Create alarms.................................................................................................................282
EventBridge integration...................................................................................................282
Data protection and data privacy.....................................................................................283
Identity and Access Management......................................................................................283
Quotas ..........................................................................................................................291
Using synthetic monitoring ......................................................................................................292
Required roles and permissions........................................................................................293
Creating a canary...........................................................................................................303
Groups..........................................................................................................................364
Troubleshooting a failed canary.......................................................................................365
Sample code for canary scripts.........................................................................................368
Canaries and X-Ray tracing..............................................................................................372
Running a canary on a VPC.............................................................................................373
Encrypting canary artifacts..............................................................................................374
Viewing canary statistics and details.................................................................................375
CloudWatch metrics published by canaries.........................................................................377
Edit or delete a canary....................................................................................................378
Start, stop, delete, or update runtime for multiple canaries..................................................380
Monitoring canary events with Amazon EventBridge...........................................................380
Perform launches and A/B experiments with CloudWatch Evidently..............................................383
IAM policies to use Evidently ...........................................................................................384
Create projects, features, launches, and experiments...........................................................385
Manage features, launches, and experiments......................................................................399
Adding code to your application.......................................................................................403
Project data storage.......................................................................................................405
How Evidently calculates results.......................................................................................407
viAmazon CloudWatch User Guide
View launch results in the dashboard................................................................................409
View experiment results in the dashboard.........................................................................409
How CloudWatch Evidently collects and stores data............................................................410
Using service-linked roles................................................................................................411
CloudWatch Evidently quotas...........................................................................................412
Tutorial: A/B testing with the Evidently sample application..................................................413
Use CloudWatch RUM.............................................................................................................420
IAM policies to use CloudWatch RUM................................................................................421
Set up an application to use CloudWatch RUM...................................................................422
Conﬁguring the CloudWatch RUM web client.....................................................................428
Regionalization...............................................................................................................429
Use page groups............................................................................................................430
Specify custom metadata................................................................................................430
Send custom events........................................................................................................434
Viewing the CloudWatch RUM dashboard..........................................................................436
CloudWatch metrics that you can collect with CloudWatch RUM...........................................438
Data protection and data privacy with CloudWatch RUM.....................................................444
Information collected by the CloudWatch RUM web client...................................................445
Manage your applications that use CloudWatch RUM..........................................................461
CloudWatch RUM quotas.................................................................................................462
Troubleshooting.............................................................................................................463
Insights and operational visibility.....................................................................................................464
Using Container Insights ..........................................................................................................464
Supported platforms.......................................................................................................465
CloudWatch agent container image..................................................................................465
Supported Regions.........................................................................................................465
Setting up Container Insights...........................................................................................466
Viewing Container Insights metrics ...................................................................................503
Metrics collected by Container Insights..............................................................................506
Performance log reference...............................................................................................520
Container Insights Prometheus metrics monitoring.............................................................541
Integration with Application Insights .................................................................................620
See Amazon ECS lifecycle events within Container Insights..................................................620
Troubleshooting Container Insights...................................................................................621
Building your own CloudWatch agent Docker image............................................................623
Deploying other CloudWatch agent features in your containers............................................624
Using Lambda Insights ............................................................................................................624
Getting started with Lambda Insights...............................................................................624
Viewing your Lambda Insights metrics..............................................................................650
Integration with Application Insights .................................................................................651
Metrics collected by Lambda Insights................................................................................651
Troubleshooting and known issues...................................................................................653
Example telemetry event.................................................................................................654
Using Contributor Insights to analyze high-cardinality data..........................................................655
Create a Contributor Insights rule.....................................................................................656
Contributor Insights rule syntax .......................................................................................659
Example rules ................................................................................................................662
Viewing Contributor Insights reports.................................................................................665
Graphing metrics generated by rules.................................................................................666
Using Contributor Insights built-in rules............................................................................668
Detect common application problems with CloudWatch Application Insights..................................668
What is Amazon CloudWatch Application Insights?.............................................................669
How Application Insights works........................................................................................675
Get started....................................................................................................................683
Work with component conﬁgurations................................................................................702
Use CloudFormation templates........................................................................................748
Tutorial: Set up monitoring for SAP HANA.........................................................................757
viiAmazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP NetWeaver..................................................................766
View and troubleshoot Application Insights.......................................................................779
Supported logs and metrics.............................................................................................781
CloudWatch cross-account observability............................................................................................846
Link monitoring accounts with source accounts..........................................................................848
Necessary permissions.....................................................................................................849
Setup overview..............................................................................................................851
Step 1: Set up a monitoring account.................................................................................851
Step 2: (Optional) Download an AWS CloudFormation template or URL.................................852
Step 3: Link the source accounts......................................................................................853
Manage monitoring accounts and source accounts......................................................................854
Link more source accounts to an existing monitoring account...............................................854
Remove the link between a monitoring account and source account......................................855
View information about a monitoring account....................................................................856
Collect metrics and logs with the CloudWatch agent...........................................................................857
Installing the CloudWatch agent...............................................................................................859
Installing the CloudWatch agent using the command line....................................................859
Install the CloudWatch agent using Systems Manager.........................................................874
Installing the CloudWatch agent on new instances using AWS CloudFormation.......................886
Verifying the signature of the CloudWatch agent package...................................................891
Create the CloudWatch agent conﬁguration ﬁle.........................................................................897
Create the CloudWatch agent conﬁguration ﬁle with the wizard...........................................898
Manually create or edit the CloudWatch agent conﬁguration ﬁle..........................................903
Metrics collected by the CloudWatch agent................................................................................958
Metrics collected by the CloudWatch agent on Windows Server instances...............................958
Metrics collected by the CloudWatch agent on Linux and macOS instances.............................958
Memory metric deﬁnitions...............................................................................................968
Use the AWS OpenTelemetry Collector with the CloudWatch agent...............................................970
Generating OpenTelemetry traces.....................................................................................970
Common scenarios with the CloudWatch agent..........................................................................971
Running the CloudWatch agent as a diﬀerent user..............................................................971
Adding custom dimensions to metrics collected by the CloudWatch agent..............................972
Multiple CloudWatch agent conﬁguration ﬁles...................................................................973
Aggregating or rolling up metrics collected by the CloudWatch agent....................................974
Collecting high-resolution metrics with the CloudWatch agent.............................................975
Sending metrics and logs to a diﬀerent account.................................................................976
Timestamp diﬀerences between the uniﬁed CloudWatch agent and the earlier CloudWatch 
Logs agent ....................................................................................................................977
Troubleshooting the CloudWatch agent.....................................................................................978
CloudWatch agent command line parameters....................................................................978
Installing the CloudWatch agent using Run Command fails..................................................978
The CloudWatch agent won't start....................................................................................979
Verify that the CloudWatch agent is running......................................................................979
The CloudWatch agent won't start, and the error mentions an Amazon EC2 Region.................980
The CloudWatch agent won't start on Windows Server........................................................980
Unable to ﬁnd credentials on Windows Server...................................................................980
Where are the metrics?...................................................................................................981
The CloudWatch agent takes a long time to run in a container or logs a hop limit error.............981
I updated my agent conﬁguration but don’t see the new metrics or logs in the CloudWatch 
console..........................................................................................................................981
CloudWatch agent ﬁles and locations................................................................................981
Finding information about CloudWatch agent versions........................................................983
Logs generated by the CloudWatch agent.........................................................................983
Stopping and restarting the CloudWatch agent..................................................................984
Embedding metrics within logs ........................................................................................................985
Publishing logs with the embedded metric format ......................................................................985
Using the client libraries ..................................................................................................986
viiiAmazon CloudWatch User Guide
Speciﬁcation: Embedded metric format .............................................................................986
Using the PutLogEvents API to send manually-created embedded metric format logs..............992
Using the CloudWatch agent to send embedded metric format logs......................................993
Using the embedded metric format with AWS Distro for OpenTelemetry................................998
Viewing your metrics and logs in the console.............................................................................998
Setting alarms on metrics created with the embedded metric format............................................999
Services that publish CloudWatch metrics........................................................................................1001
AWS usage metrics.......................................................................................................................1010
Visualizing your service quotas and setting alarms....................................................................1010
AWS API usage metrics..........................................................................................................1011
CloudWatch usage metrics.....................................................................................................1017
CloudWatch tutorials.....................................................................................................................1018
Scenario: Monitor estimated charges.......................................................................................1018
Step 1: Enable billing alerts...........................................................................................1018
Step 2: Create a billing alarm.........................................................................................1019
Step 3: Check the alarm status .......................................................................................1020
Step 4: Edit a billing alarm............................................................................................1020
Step 5: Delete a billing alarm .........................................................................................1021
Scenario: Publish metrics.......................................................................................................1021
Step 1: Deﬁne the data conﬁguration..............................................................................1021
Step 2: Add metrics to CloudWatch.................................................................................1022
Step 3: Get statistics from CloudWatch............................................................................1022
Step 4: View graphs with the console..............................................................................1023
Working with AWS SDKs................................................................................................................1024
Code examples .............................................................................................................................1025
Actions................................................................................................................................1028
Create a dashboard.......................................................................................................1029
Create a metric alarm...................................................................................................1032
Create an anomaly detector...........................................................................................1039
Delete alarms ...............................................................................................................1041
Delete an anomaly detector...........................................................................................1046
Delete dashboards........................................................................................................1048
Describe alarm history...................................................................................................1049
Describe alarms ............................................................................................................1052
Describe alarms for a metric ..........................................................................................1054
Describe anomaly detectors...........................................................................................1059
Disable alarm actions....................................................................................................1061
Enable alarm actions.....................................................................................................1066
Get a metric data image ................................................................................................1071
Get dashboard details...................................................................................................1074
Get metric data ............................................................................................................1075
Get metric statistics ......................................................................................................1078
List dashboards............................................................................................................1082
List metrics ..................................................................................................................1083
Put a set of data into a metric .......................................................................................1089
Put data into a metric ...................................................................................................1091
Scenarios.............................................................................................................................1097
Get started with alarms.................................................................................................1097
Get started with metrics, dashboards, and alarms.............................................................1099
Manage metrics and alarms ...........................................................................................1146
Security.......................................................................................................................................1152
Data protection....................................................................................................................1152
Encryption in transit.....................................................................................................1153
Identity and access management............................................................................................1153
Audience......................................................................................................................1154
Authenticating with identities .........................................................................................1154
Managing access using policies.......................................................................................1156
ixAmazon CloudWatch User Guide
How Amazon CloudWatch works with IAM.......................................................................1158
Identity-based policy examples.......................................................................................1162
Troubleshooting............................................................................................................1165
CloudWatch dashboard permissions update.....................................................................1167
AWS managed (predeﬁned) policies for CloudWatch..........................................................1167
Customer managed policy examples...............................................................................1183
Policy updates..............................................................................................................1184
Using condition keys to limit access to CloudWatch namespaces.........................................1190
Using condition keys to limit Contributor Insights users' access to log groups........................1191
Using condition keys to limit alarm actions......................................................................1192
Using service-linked roles..............................................................................................1192
Using a service-linked role for CloudWatch RUM...............................................................1197
Using service-linked roles for Application Insights.............................................................1201
AWS managed policies for Application Insights.................................................................1209
Amazon CloudWatch permissions reference......................................................................1216
Compliance validation...........................................................................................................1224
Resilience.............................................................................................................................1225
Infrastructure security...........................................................................................................1225
Network isolation.........................................................................................................1225
AWS Security Hub.................................................................................................................1226
Interface VPC endpoints........................................................................................................1226
CloudWatch.................................................................................................................1226
CloudWatch Synthetics..................................................................................................1228
Security considerations for Synthetics canaries.........................................................................1229
Use secure connections.................................................................................................1229
Canary naming considerations........................................................................................1229
Secrets and sensitive information in canary code..............................................................1230
Permissions considerations.............................................................................................1230
Stack traces and exception messages..............................................................................1230
Scope your IAM roles narrowly.......................................................................................1230
Sensitive data redaction................................................................................................1231
Logging API calls with AWS CloudTrail............................................................................................1232
CloudWatch information in CloudTrail.....................................................................................1232
Example: CloudWatch log ﬁle entries..............................................................................1233
CloudWatch Internet Monitor in CloudTrail..............................................................................1235
Example: CloudWatch Internet Monitor log ﬁle entries......................................................1235
CloudWatch Synthetics information in CloudTrail......................................................................1236
Example: CloudWatch Synthetics log ﬁle entries...............................................................1237
Tagging your CloudWatch resources................................................................................................1240
Supported resources in CloudWatch........................................................................................1240
Managing tags ......................................................................................................................1240
Tag naming and usage conventions........................................................................................1241
Grafana integration .......................................................................................................................1242
Cross-account cross-Region CloudWatch console...............................................................................1243
Enabling cross-account cross-Region functionality.....................................................................1243
(Optional) Integrate with AWS Organizations...........................................................................1246
Troubleshooting....................................................................................................................1246
Disabling and cleaning up after using cross-account..................................................................1247
Service quotas..............................................................................................................................1248
Document history.........................................................................................................................1252
xAmazon CloudWatch User Guide
Accessing CloudWatch
What is Amazon CloudWatch?
Amazon CloudWatch monitors your Amazon Web Services (AWS) resources and the applications you run 
on AWS in real time. You can use CloudWatch to collect and track metrics, which are variables you can 
measure for your resources and applications.
The CloudWatch home page automatically displays metrics about every AWS service you use. You can 
additionally create custom dashboards to display metrics about your custom applications, and display 
custom collections of metrics that you choose.
You can create alarms that watch metrics and send notiﬁcations or automatically make changes to the 
resources you are monitoring when a threshold is breached. For example, you can monitor the CPU usage 
and disk reads and writes of your Amazon EC2 instances and then use that data to determine whether 
you should launch additional instances to handle increased load. You can also use this data to stop 
under-used instances to save money.
With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and 
operational health.
Accessing CloudWatch
You can access CloudWatch using any of the following methods:
•Amazon CloudWatch console – https://console.aws.amazon.com/cloudwatch/
•AWS CLI – For more information, see Getting Set Up with the AWS Command Line Interface in the AWS 
Command Line Interface User Guide.
•CloudWatch API – For more information, see the Amazon CloudWatch API Reference.
•AWS SDKs – For more information, see Tools for Amazon Web Services.
Related AWS services
The following services are used along with Amazon CloudWatch:
•Amazon Simple Notiﬁcation Service (Amazon SNS) coordinates and manages the delivery or sending 
of messages to subscribing endpoints or clients. You use Amazon SNS with CloudWatch to send 
messages when an alarm threshold has been reached. For more information, see Setting up Amazon 
SNS notiﬁcations  (p. 187).
•Amazon EC2 Auto Scaling enables you to automatically launch or terminate Amazon EC2 instances 
based on user-deﬁned policies, health status checks, and schedules. You can use a CloudWatch alarm 
with Amazon EC2 Auto Scaling to scale your EC2 instances based on demand. For more information, 
see Dynamic Scaling  in the Amazon EC2 Auto Scaling User Guide.
•AWS CloudTrail enables you to monitor the calls made to the Amazon CloudWatch API for your 
account, including calls made by the AWS Management Console, AWS CLI, and other services. When 
CloudTrail logging is turned on, CloudWatch writes log ﬁles to the Amazon S3 bucket that you 
speciﬁed when you conﬁgured CloudTrail. For more information, see Logging Amazon CloudWatch API 
calls with AWS CloudTrail (p. 1232 ).
•AWS Identity and Access Management (IAM) is a web service that helps you securely control access 
to AWS resources for your users. Use IAM to control who can use your AWS resources (authentication) 
and what resources they can use in which ways (authorization). For more information, see Identity and 
access management for Amazon CloudWatch (p. 1153 ).
1Amazon CloudWatch User Guide
How CloudWatch works
How Amazon CloudWatch works
Amazon CloudWatch is basically a metrics repository. An AWS service—such as Amazon EC2—puts 
metrics into the repository, and you retrieve statistics based on those metrics. If you put your own 
custom metrics into the repository, you can retrieve statistics on these metrics as well.
You can use metrics to calculate statistics and then present the data graphically in the CloudWatch 
console. For more information about the other AWS resources that generate and send metrics to 
CloudWatch, see AWS services that publish CloudWatch metrics (p. 1001 ).
You can conﬁgure alarm actions to stop, start, or terminate an Amazon EC2 instance when certain 
criteria are met. In addition, you can create alarms that initiate Amazon EC2 Auto Scaling and Amazon 
Simple Notiﬁcation Service (Amazon SNS) actions on your behalf. For more information about creating 
CloudWatch alarms, see Alarms  (p. 8).
AWS Cloud computing resources are housed in highly available data center facilities. To provide 
additional scalability and reliability, each data center facility is located in a speciﬁc geographical area, 
known as a Region. Each Region is designed to be completely isolated from the other Regions, to achieve 
the greatest possible failure isolation and stability. Metrics are stored separately in Regions, but you 
can use CloudWatch cross-Region functionality to aggregate statistics from diﬀerent Regions. For more 
information, see Cross-account cross-Region CloudWatch console (p. 1243 ) and Regions and Endpoints
in the Amazon Web Services General Reference.
Amazon CloudWatch concepts
The following terminology and concepts are central to your understanding and use of Amazon 
CloudWatch:
•Namespaces (p. 3)
2Amazon CloudWatch User Guide
Namespaces
•Metrics  (p. 3)
•Dimensions  (p. 4)
•Resolution (p. 5)
•Statistics  (p. 6)
•Percentiles (p. 7)
•Alarms  (p. 8)
For information about the service quotas for CloudWatch metrics, alarms, API requests, and alarm email 
notiﬁcations, see CloudWatch service quotas.
Namespaces
A namespace  is a container for CloudWatch metrics. Metrics in diﬀerent namespaces are isolated from 
each other, so that metrics from diﬀerent applications are not mistakenly aggregated into the same 
statistics.
There is no default namespace. You must specify a namespace for each data point you publish to 
CloudWatch. You can specify a namespace name when you create a metric. These names must contain 
valid ASCII characters, and be 255 or fewer characters. Possible characters are: alphanumeric characters 
(0-9A-Za-z), period (.), hyphen (-), underscore (_), forward slash (/), hash (#), and colon (:). A namespace 
must contain at least one non-whitespace character.
The AWS namespaces typically use the following naming convention: AWS/service. For example, 
Amazon EC2 uses the AWS/EC2 namespace. For the list of AWS namespaces, see AWS services that 
publish CloudWatch metrics (p. 1001 ).
Metrics
Metrics  are the fundamental concept in CloudWatch. A metric represents a time-ordered set of data 
points that are published to CloudWatch. Think of a metric as a variable to monitor, and the data 
points as representing the values of that variable over time. For example, the CPU usage of a particular 
EC2 instance is one metric provided by Amazon EC2. The data points themselves can come from any 
application or business activity from which you collect data.
By default, many AWS services provide metrics at no charge for resources (such as Amazon EC2 instances, 
Amazon EBS volumes, and Amazon RDS DB instances). For a charge, you can also enable detailed 
monitoring for some resources, such as your Amazon EC2 instances, or publish your own application 
metrics. For custom metrics, you can add the data points in any order, and at any rate you choose. You 
can retrieve statistics about those data points as an ordered set of time-series data.
Metrics exist only in the Region in which they are created. Metrics cannot be deleted, but they 
automatically expire after 15 months if no new data is published to them. Data points older than 15 
months expire on a rolling basis; as new data points come in, data older than 15 months is dropped.
Metrics are uniquely deﬁned by a name, a namespace, and zero or more dimensions. Each data point in a 
metric has a time stamp, and (optionally) a unit of measure. You can retrieve statistics from CloudWatch 
for any metric.
For more information, see View available metrics (p. 117) and Publish custom metrics  (p. 176).
Time stamps
Each metric data point must be associated with a time stamp. The time stamp can be up to two weeks in 
the past and up to two hours into the future. If you do not provide a time stamp, CloudWatch creates a 
time stamp for you based on the time the data point was received.
3Amazon CloudWatch User Guide
Dimensions
Time stamps are dateTime  objects, with the complete date plus hours, minutes, and seconds (for 
example, 2016-10-31T23:59:59Z). For more information, see dateTime . Although it is not required, 
we recommend that you use Coordinated Universal Time (UTC). When you retrieve statistics from 
CloudWatch, all times are in UTC.
CloudWatch alarms check metrics based on the current time in UTC. Custom metrics sent to CloudWatch 
with time stamps other than the current UTC time can cause alarms to display the Insuﬃcient Data  state 
or result in delayed alarms.
Metrics retention
CloudWatch retains metric data as follows:
•Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-
resolution custom metrics.
•Data points with a period of 60 seconds (1 minute) are available for 15 days
•Data points with a period of 300 seconds (5 minute) are available for 63 days
•Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months)
Data points that are initially published with a shorter period are aggregated together for long-term 
storage. For example, if you collect data using a period of 1 minute, the data remains available for 
15 days with 1-minute resolution. After 15 days this data is still available, but is aggregated and is 
retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is 
available with a resolution of 1 hour.
Note
Metrics that have not had any new data points in the past two weeks do not appear in the 
console. They also do not appear when you type their metric name or dimension names in the 
search box in the All metrics  tab in the console, and they are not returned in the results of a
list-metrics command. The best way to retrieve these metrics is with the get-metric-data or get-
metric-statistics  commands in the AWS CLI.
Dimensions
A dimension  is a name/value pair that is part of the identity of a metric. You can assign up to 30 
dimensions to a metric.
Every metric has speciﬁc characteristics that describe it, and you can think of dimensions as categories 
for those characteristics. Dimensions help you design a structure for your statistics plan. Because 
dimensions are part of the unique identiﬁer for a metric, whenever you add a unique name/value pair to 
one of your metrics, you are creating a new variation of that metric.
AWS services that send data to CloudWatch attach dimensions to each metric. You can use dimensions to 
ﬁlter the results that CloudWatch returns. For example, you can get statistics for a speciﬁc EC2 instance 
by specifying the InstanceId  dimension when you search for metrics.
For metrics produced by certain AWS services, such as Amazon EC2, CloudWatch can aggregate data 
across dimensions. For example, if you search for metrics in the AWS/EC2 namespace but do not specify 
any dimensions, CloudWatch aggregates all data for the speciﬁed metric to create the statistic that you 
requested. CloudWatch does not aggregate across dimensions for your custom metrics.
Dimension combinations
CloudWatch treats each unique combination of dimensions as a separate metric, even if the metrics 
have the same metric name. You can only retrieve statistics using combinations of dimensions that you 
4Amazon CloudWatch User Guide
Resolution
speciﬁcally published. When you retrieve statistics, specify the same values for the namespace, metric 
name, and dimension parameters that were used when the metrics were created. You can also specify 
the start and end times for CloudWatch to use for aggregation.
For example, suppose that you publish four distinct metrics named ServerStats in the DataCenterMetric 
namespace with the following properties:
Dimensions: Server=Prod, Domain=Frankfurt, Unit: Count, Timestamp: 2016-10-31T12:30:00Z, 
 Value: 105
Dimensions: Server=Beta, Domain=Frankfurt, Unit: Count, Timestamp: 2016-10-31T12:31:00Z, 
 Value: 115
Dimensions: Server=Prod, Domain=Rio,       Unit: Count, Timestamp: 2016-10-31T12:32:00Z, 
 Value: 95
Dimensions: Server=Beta, Domain=Rio,       Unit: Count, Timestamp: 2016-10-31T12:33:00Z, 
 Value: 97
If you publish only those four metrics, you can retrieve statistics for these combinations of dimensions:
•Server=Prod,Domain=Frankfurt
•Server=Prod,Domain=Rio
•Server=Beta,Domain=Frankfurt
•Server=Beta,Domain=Rio
You can't retrieve statistics for the following dimensions or if you specify no dimensions. (The exception 
is by using the metric math SEARCH function, which can retrieve statistics for multiple metrics. For more 
information, see Use search expressions in graphs (p. 157).)
•Server=Prod
•Server=Beta
•Domain=Frankfurt
•Domain=Rio
Resolution
Each metric is one of the following:
•Standard resolution, with data having a one-minute granularity
•High resolution, with data at a granularity of one second
Metrics produced by AWS services are standard resolution by default. When you publish a custom metric, 
you can deﬁne it as either standard resolution or high resolution. When you publish a high-resolution 
metric, CloudWatch stores it with a resolution of 1 second, and you can read and retrieve it with a period 
of 1 second, 5 seconds, 10 seconds, 30 seconds, or any multiple of 60 seconds.
High-resolution metrics can give you more immediate insight into your application's sub-minute activity. 
Keep in mind that every PutMetricData  call for a custom metric is charged, so calling PutMetricData
more often on a high-resolution metric can lead to higher charges. For more information about 
CloudWatch pricing, see Amazon CloudWatch Pricing.
If you set an alarm on a high-resolution metric, you can specify a high-resolution alarm with a period of 
10 seconds or 30 seconds, or you can set a regular alarm with a period of any multiple of 60 seconds. 
There is a higher charge for high-resolution alarms with a period of 10 or 30 seconds.
5Amazon CloudWatch User Guide
Statistics
Statistics
Statistics  are metric data aggregations over speciﬁed periods of time. CloudWatch provides statistics 
based on the metric data points provided by your custom data or provided by other AWS services to 
CloudWatch. Aggregations are made using the namespace, metric name, dimensions, and the data point 
unit of measure, within the time period you specify.
For detailed deﬁnitions of the statistics supported by CloudWatch, see CloudWatch statistics 
deﬁnitions  (p. 166).
Units
Each statistic has a unit of measure. Example units include Bytes , Seconds , Count , and Percent. For 
the complete list of the units that CloudWatch supports, see the MetricDatum  data type in the Amazon 
CloudWatch API Reference.
You can specify a unit when you create a custom metric. If you do not specify a unit, CloudWatch uses
None as the unit. Units help provide conceptual meaning to your data. Though CloudWatch attaches no 
signiﬁcance to a unit internally, other applications can derive semantic information based on the unit.
Metric data points that specify a unit of measure are aggregated separately. When you get statistics 
without specifying a unit, CloudWatch aggregates all data points of the same unit together. If you have 
two otherwise identical metrics with diﬀerent units, two separate data streams are returned, one for 
each unit.
Periods
A period  is the length of time associated with a speciﬁc Amazon CloudWatch statistic. Each statistic 
represents an aggregation of the metrics data collected for a speciﬁed period of time. Periods are 
deﬁned in numbers of seconds, and valid values for period are 1, 5, 10, 30, or any multiple of 60. For 
example, to specify a period of six minutes, use 360 as the period value. You can adjust how the data is 
aggregated by varying the length of the period. A period can be as short as one second or as long as one 
day (86,400 seconds). The default value is 60 seconds.
Only custom metrics that you deﬁne with a storage resolution of 1 second support sub-minute periods. 
Even though the option to set a period below 60 is always available in the console, you should select 
a period that aligns to how the metric is stored. For more information about metrics that support sub-
minute periods, see High-resolution metrics (p. 176).
When you retrieve statistics, you can specify a period, start time, and end time. These parameters 
determine the overall length of time associated with the statistics. The default values for the start time 
and end time get you the last hour's worth of statistics. The values that you specify for the start time and 
end time determine how many periods CloudWatch returns. For example, retrieving statistics using the 
default values for the period, start time, and end time returns an aggregated set of statistics for each 
minute of the previous hour. If you prefer statistics aggregated in ten-minute blocks, specify a period of 
600. For statistics aggregated over the entire hour, specify a period of 3600.
When statistics are aggregated over a period of time, they are stamped with the time corresponding 
to the beginning of the period. For example, data aggregated from 7:00pm to 8:00pm is stamped as 
7:00pm. Additionally, data aggregated between 7:00pm and 8:00pm begins to be visible at 7:00pm, then 
the values of that aggregated data may change as CloudWatch collects more samples during the period.
Periods are also important for CloudWatch alarms. When you create an alarm to monitor a speciﬁc 
metric, you are asking CloudWatch to compare that metric to the threshold value that you speciﬁed. 
You have extensive control over how CloudWatch makes that comparison. Not only can you specify 
the period over which the comparison is made, but you can also specify how many evaluation periods 
6Amazon CloudWatch User Guide
Aggregation
are used to arrive at a conclusion. For example, if you specify three evaluation periods, CloudWatch 
compares a window of three data points. CloudWatch only notiﬁes you if the oldest data point is 
breaching and the others are breaching or missing.
Aggregation
Amazon CloudWatch aggregates statistics according to the period length that you specify when 
retrieving statistics. You can publish as many data points as you want with the same or similar time 
stamps. CloudWatch aggregates them according to the speciﬁed period length. CloudWatch does not 
automatically aggregate data across Regions, but you can use metric math to aggregate metrics from 
diﬀerent Regions.
You can publish data points for a metric that share not only the same time stamp, but also the same 
namespace and dimensions. CloudWatch returns aggregated statistics for those data points. You can also 
publish multiple data points for the same or diﬀerent metrics, with any time stamp.
For large datasets, you can insert a pre-aggregated dataset called a statistic set . With statistic sets, you 
give CloudWatch the Min, Max, Sum, and SampleCount for a number of data points. This is commonly 
used when you need to collect data many times in a minute. For example, suppose you have a metric 
for the request latency of a webpage. It doesn't make sense to publish data with every webpage hit. We 
suggest that you collect the latency of all hits to that webpage, aggregate them once a minute, and send 
that statistic set to CloudWatch.
Amazon CloudWatch doesn't diﬀerentiate the source of a metric. If you publish a metric with the same 
namespace and dimensions from diﬀerent sources, CloudWatch treats this as a single metric. This can 
be useful for service metrics in a distributed, scaled system. For example, all the hosts in a web server 
application could publish identical metrics representing the latency of requests they are processing. 
CloudWatch treats these as a single metric, allowing you to get the statistics for minimum, maximum, 
average, and sum of all requests across your application.
Percentiles
A percentile  indicates the relative standing of a value in a dataset. For example, the 95th percentile 
means that 95 percent of the data is lower than this value and 5 percent of the data is higher than this 
value. Percentiles help you get a better understanding of the distribution of your metric data.
Percentiles are often used to isolate anomalies. In a normal distribution, 95 percent of the data is 
within two standard deviations from the mean and 99.7 percent of the data is within three standard 
deviations from the mean. Any data that falls outside three standard deviations is often considered 
to be an anomaly because it diﬀers so greatly from the average value. For example, suppose that you 
are monitoring the CPU utilization of your EC2 instances to ensure that your customers have a good 
experience. If you monitor the average, this can hide anomalies. If you monitor the maximum, a single 
anomaly can skew the results. Using percentiles, you can monitor the 95th percentile of CPU utilization 
to check for instances with an unusually heavy load.
Some CloudWatch metrics support percentiles as a statistic. For these metrics, you can monitor your 
system and applications using percentiles as you would when using the other CloudWatch statistics 
(Average, Minimum, Maximum, and Sum). For example, when you create an alarm, you can use 
percentiles as the statistical function. You can specify the percentile with up to ten decimal places (for 
example, p95.0123456789).
Percentile statistics are available for custom metrics as long as you publish the raw, unsummarized data 
points for your custom metric. Percentile statistics are not available for metrics when any of the metric 
values are negative numbers.
CloudWatch needs raw data points to calculate percentiles. If you publish data using a statistic set 
instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:
7Amazon CloudWatch User Guide
Alarms
•The SampleCount value of the statistic set is 1 and Min, Max, and Sum are all equal.
•The Min and Max are equal, and Sum is equal to Min multiplied by SampleCount.
The following AWS services include metrics that support percentile statistics.
•API Gateway
•Application Load Balancer
•Amazon EC2
•Elastic Load Balancing
•Kinesis
•Amazon RDS
CloudWatch also supports trimmed mean and other performance statistics, which can have a similar use 
as percentiles. For more information, see CloudWatch statistics deﬁnitions (p. 166).
Alarms
You can use an alarm  to automatically initiate actions on your behalf. An alarm watches a single metric 
over a speciﬁed time period, and performs one or more speciﬁed actions, based on the value of the 
metric relative to a threshold over time. The action is a notiﬁcation sent to an Amazon SNS topic or an 
Auto Scaling policy. You can also add alarms to dashboards.
Alarms invoke actions for sustained state changes only. CloudWatch alarms do not invoke actions simply 
because they are in a particular state. The state must have changed and been maintained for a speciﬁed 
number of periods.
When creating an alarm, select an alarm monitoring period that is greater than or equal to the metric's 
resolution. For example, basic monitoring for Amazon EC2 provides metrics for your instances every 5 
minutes. When setting an alarm on a basic monitoring metric, select a period of at least 300 seconds (5 
minutes). Detailed monitoring for Amazon EC2 provides metrics for your instances with a resolution of 1 
minute. When setting an alarm on a detailed monitoring metric, select a period of at least 60 seconds (1 
minute).
If you set an alarm on a high-resolution metric, you can specify a high-resolution alarm with a period of 
10 seconds or 30 seconds, or you can set a regular alarm with a period of any multiple of 60 seconds. 
There is a higher charge for high-resolution alarms. For more information about high-resolution metrics, 
see Publish custom metrics  (p. 176).
For more information, see  Using Amazon CloudWatch alarms (p. 180) and Create an alarm from a 
metric on a graph  (p. 132).
Billing and costs
For complete information about CloudWatch pricing, see Amazon CloudWatch Pricing.
For information that can help you analyze your bill and possibly optimize and reduce costs, see
CloudWatch billing and cost (p. 18).
Amazon CloudWatch resources
The following related resources can help you as you work with this service.
8Amazon CloudWatch User Guide
Resources
Resource Description
Amazon CloudWatch FAQsThe FAQ covers the top questions developers have asked 
about this product.
AWS Developer CenterA central starting point to ﬁnd documentation, code 
examples, release notes, and other information to help you 
build innovative applications with AWS.
AWS Management ConsoleThe console allows you to perform most of the functions 
of Amazon CloudWatch and various other AWS oﬀerings 
without programming.
Amazon CloudWatch Discussion ForumsCommunity-based forum for developers to discuss technical 
questions related to Amazon CloudWatch.
AWS Support The hub for creating and managing your AWS Support 
cases. Also includes links to other helpful resources, such 
as forums, technical FAQs, service health status, and AWS 
Trusted Advisor.
Amazon CloudWatch product 
informationThe primary webpage for information about Amazon 
CloudWatch.
Contact Us A central contact point for inquiries concerning AWS billing, 
account, events, abuse, etc.
9Amazon CloudWatch User Guide
Sign up for an AWS account
Getting set up
To use Amazon CloudWatch you need an AWS account. Your AWS account allows you to use services (for 
example, Amazon EC2) to generate metrics that you can view in the CloudWatch console, a point-and-
click web-based interface. In addition, you can install and conﬁgure the AWS command line interface 
(CLI).
Sign up for an AWS account
If you do not have an AWS account, complete the following steps to create one.
To sign up for an AWS account
1. Open https://portal.aws.amazon.com/billing/signup.
2. Follow the online instructions.
Part of the sign-up procedure involves receiving a phone call and entering a veriﬁcation code on the 
phone keypad.
When you sign up for an AWS account, an AWS account root user is created. The root user has access 
to all AWS services and resources in the account. As a security best practice, assign administrative 
access to an administrative user, and use only the root user to perform tasks that require root user 
access.
AWS sends you a conﬁrmation email after the sign-up process is complete. At any time, you can view 
your current account activity and manage your account by going to https://aws.amazon.com/ and 
choosing My Account.
Create an administrative user
After you sign up for an AWS account, create an administrative user so that you don't use the root user 
for everyday tasks.
Secure your AWS account root user
1. Sign in to the AWS Management Console as the account owner by choosing Root user and entering 
your AWS account email address. On the next page, enter your password.
For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User Guide.
2. Turn on multi-factor authentication (MFA) for your root user.
For instructions, see Enable a virtual MFA device for your AWS account root user (console) in the IAM 
User Guide .
Create an administrative user
• For your daily administrative tasks, grant administrative access to an administrative user in AWS IAM 
Identity Center (successor to AWS Single Sign-On).
10Amazon CloudWatch User Guide
Sign in to the Amazon CloudWatch console
For instructions, see Getting started in the AWS IAM Identity Center (successor to AWS Single Sign-On) 
User Guide .
Sign in as the administrative user
• To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email 
address when you created the IAM Identity Center user.
For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in the
AWS Sign-In User Guide.
Sign in to the Amazon CloudWatch console
To sign in to the Amazon CloudWatch console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. If necessary, use the navigation bar to change the Region to the Region where you have your AWS 
resources.
3. Even if this is the ﬁrst time you are using the CloudWatch console, Your Metrics could already report 
metrics, because you have used an AWS product that automatically pushes metrics to Amazon 
CloudWatch for free. Other services require that you enable metrics.
If you do not have any alarms, the Your Alarms section will have a Create Alarm  button.
Set up the AWS CLI
You can use the AWS CLI or the Amazon CloudWatch CLI to perform CloudWatch commands. Note that 
the AWS CLI replaces the CloudWatch CLI; we include new CloudWatch features only in the AWS CLI.
For information about how to install and conﬁgure the AWS CLI, see Getting Set Up with the AWS 
Command Line Interface in the AWS Command Line Interface User Guide.
For information about how to install and conﬁgure the Amazon CloudWatch CLI, see Set Up the 
Command Line Interface in the Amazon CloudWatch CLI Reference.
11Amazon CloudWatch User Guide
Getting started with Amazon 
CloudWatch
Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
The CloudWatch overview home page appears.
12Amazon CloudWatch User Guide
13Amazon CloudWatch User Guide
See key metrics from all AWS services
The overview displays the following items, refreshed automatically.
•The upper left shows a list of AWS services you use in your account, along with the state of alarms in 
those services. The upper right shows two or four alarms in your account, depending on how many 
AWS services you use. The alarms shown are those in the ALARM state or those that most recently 
changed state.
These upper areas enable you to assess the health of your AWS services, by seeing the alarm states 
in every service and the alarms that most recently changed state. This helps you monitor and quickly 
diagnose issues.
•Below these areas is the default dashboard , if one exists. The default dashboard is a custom dashboard 
that you have created and named CloudWatch-Default. This is a convenient way for you to add 
metrics about your own custom services or applications to the overview page, or to bring forward 
additional key metrics from AWS services that you most want to monitor.
•If you use six or more AWS services, below the default dashboard is a link to the automatic cross-
service dashboard. The cross-service dashboard automatically displays key metrics from every 
AWS service you use, without requiring you to choose what metrics to monitor or create custom 
dashboards. You can also use it to drill down to any AWS service and see even more key metrics for 
that service.
If you use fewer than six AWS services, the cross-service dashboard is shown automatically on this 
page.
From this overview, you can focus your view to a speciﬁc resource group or a speciﬁc AWS service. This 
enables you to narrow your view to a subset of resources in which you are interested. Using resource 
groups enables you to use tags to organize projects, focus on a subset of your architecture, or just 
distinguish between your production and development environments. For more information, see What Is 
AWS Resource Groups?.
Topics
•See key metrics from all AWS services (p. 14)
•Focus on metrics and alarms in a single AWS service (p. 16)
•Focus on metrics and alarms in a resource group (p. 17)
See key metrics from all AWS services
You can switch to the Cross-service dashboard screen and interact with dashboards for all of the AWS 
services that you're using. The CloudWatch Console displays your dashboards in alphabetical order and 
shows one or two key metrics on each dashboard.
Note
If you're using ﬁve or more AWS services, the CloudWatch Console won't display the Cross-
service dashboard on the Overview screen.
To open the Cross-service dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
You're directed to the Overview screen.
2. From the Overview screen, select the dropdown that reads Overview, and then choose Cross service 
dashboard .
You're directed to the Cross service dashboard screen.
14Amazon CloudWatch User Guide
Remove a service from appearing 
in the cross-service dashboard
3. (Optional) If you're using the original interface, scroll to the section Cross-service dashboard, and 
then choose View Cross-service dashboard.
You're directed to the Cross-service dashboard screen.
4. You can focus on a particular service in two ways:
a. To see more key metrics for a service, choose its name from the list at the top of the screen, 
where Cross service dashboard is currently shown. Or, you can choose View Service dashboard
next to the service name.
An automatic dashboard for that service is displayed, showing more metrics for that service. 
Additionally, for some services, the bottom of the service dashboard displays resources related 
to that service. You can choose one of those resources to that service console and focus further 
on that resource.
b. To see all the alarms related to a service, choose the button on the right of the screen next to 
that service name. The text on this button indicates how many alarms you have created in this 
service, and whether any are in the ALARM state.
When the alarms are displayed, multiple alarms that have similar settings (such as dimensions, 
threshold, or period) may be shown in a single graph.
You can then view details about an alarm and see the alarm history. To do so, hover on the 
alarm graph, and choose the actions icon, View in alarms .
The alarms view appears in a new browser tab, displaying a list of your alarms, along with 
details about the chosen alarm. To see the history for this alarm, choose the History tab.
5. You can focus on resources in a particular resource group. To do so, choose the resource group from 
the list at the top of the page where All resources is displayed.
For more information, see Focus on metrics and alarms in a resource group (p. 17).
6. To change the time range shown in all graphs and alarms currently displayed, select the range you 
want next to Time range  at the top of the screen. Choose custom  to select from more time range 
options than those displayed by default.
7. Alarms are always refreshed once a minute. To refresh the view, choose the refresh icon (two curved 
arrows) at the top right of the screen. To change the automatic refresh rate for items on the screen 
other than alarms, choose the down arrow next to the refresh icon and choose the refresh rate you 
want. You can also choose to turn oﬀ automatic refresh.
Remove a service from appearing in the cross-service 
dashboard
You can prevent a service's metrics from appearing in the cross-service dashboard. This helps you focus 
your cross-service dashboard on the services you most want to monitor.
If you remove a service from the cross-service dashboard, the alarms for that service still appear in the 
views of your alarms.
To remove a service's metrics from the cross-service dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
The home page appears.
2. At the top of the page, under Overview, choose the service you want to remove.
The view changes to show metrics from only that service.
15Amazon CloudWatch User Guide
Focus on a single service
3. Choose Actions, then clear the check box next to Show on cross service dashboard.
Focus on metrics and alarms in a single AWS 
service
On the CloudWatch home page, you can focus the view to a single AWS service. You can drill down 
further by focusing on both a single AWS service and a resource group at the same time. The following 
procedure shows only how to focus on an AWS service.
To focus on a single service
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
The home page appears.
2. Choose the service name from the list at the top of the screen, where Overview is currently shown.
The view changes to display graphs of key metrics from the selected service.
3. To switch to viewing the alarms for this service, choose  Alarms dashboard  at the top of the screen 
where Service dashboard is currently displayed.
4. When viewing metrics, you can focus on a particular metric in several ways:
a. To see more details about the metrics in any graph, hover on the graph, and choose the actions 
icon, View in metrics .
The graph appears in a new tab, with the relevant metrics listed below the graph. You can 
customize your view of this graph, changing the metrics and resources shown, the statistic, the 
period, and other factors to get a better understanding of the current situation.
b. You can view log events from the time range shown in the graph. This may help you discover 
events that happened in your infrastructure that are causing an unexpected change in your 
metrics.
To see the log events, hover on the graph, and choose the actions icon, View in logs.
The CloudWatch Logs view appears in a new tab, displaying a list of your log groups. To see the 
log events in one of these log groups that occurred during the time range shown in the original 
graph, choose that log group.
5. When viewing alarms, you can focus on a particular alarm in several ways:
• To see more details about an alarm, hover on the alarm, and choose the actions icon, View in 
alarms .
The alarms view appears in a new tab, displaying a list of your alarms, along with details about 
the chosen alarm. To see the history for this alarm, choose the History tab.
6. Alarms are always refreshed one time per minute. To refresh the view, choose the refresh icon (two 
curved arrows) at the top right of the screen. To change the automatic refresh rate for items on the 
screen other than alarms, choose the down arrow next to the refresh icon and choose a refresh rate. 
You can also choose to turn oﬀ automatic refresh.
7. To change the time range shown in all graphs and alarms currently displayed, next to Time range
at the top of the screen, choose the range. To select from more time range options than those 
displayed by default, choose custom .
8. To return to the cross-service dashboard, choose Overview in the list at the top of the screen that 
currently shows the service you are focusing on.
16Amazon CloudWatch User Guide
Focus on a resource group
Alternatively, from any view, you can choose CloudWatch at the top of the screen to clear all ﬁlters 
and return to the overview page.
Focus on metrics and alarms in a resource group
You can focus your view to display metrics and alarms from a single resource group. Using resource 
groups enables you to use tags to organize projects, focus on a subset of your architecture, or distinguish 
between your production and development environments. They also enable you to focus on each of 
these resource groups on the CloudWatch overview. For more information, see What Is AWS Resource 
Groups?.
When you focus on a resource group, the display changes to show only the services where you have 
tagged resources as part of this resource group. The recent alarms area shows only the alarms that 
are associated with resources that are part of the resource group. Additionally, if you have created a 
dashboard with the name CloudWatch-Default-ResourceGroupName, it is displayed in the Default 
dashboard  area.
You can drill down further by focusing on both a single AWS service and a resource group at the same 
time. The following procedure shows just how to focus on a resource group.
To focus on a single resource group
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. At the top of the page, where All resources is displayed, choose a resource group.
3. To see more metrics related to this resource group, near the bottom of the screen, choose View 
cross service dashboard.
The cross-service dashboard appears, showing only the services related to this resource group. For 
each service, one or two key metrics are displayed.
4. To change the time range shown in all graphs and alarms currently displayed, for Time range  at the 
top of the screen, select a range. To select from more time range options than those displayed by 
default, choose custom .
5. Alarms are always refreshed one time per minute. To refresh the view, choose the refresh icon (two 
curved arrows) at the top right of the screen. To change the automatic refresh rate for items on the 
screen other than alarms, choose the down arrow next to the refresh icon and choose a refresh rate. 
You can also choose to turn oﬀ automatic refresh.
6. To return to showing information about all the resources in your account, near the top of the screen 
where the name of the resource group is currently displayed, choose All resources.
17Amazon CloudWatch User Guide
Analyze CloudWatch cost and 
usage data with Cost Explorer 
CloudWatch billing and cost
This section describes how Amazon CloudWatch features generate costs. It also provides methods that 
can help you analyze, optimize, and reduce CloudWatch costs. Throughout this section, we sometimes 
refer to pricing when describing CloudWatch features. For information about pricing, see Amazon 
CloudWatch pricing.
Topics
•Analyze CloudWatch cost and usage data with Cost Explorer  (p. 18)
•Analyze CloudWatch cost and usage data with AWS Cost and Usage Reports and Athena (p. 21)
•Best practices for optimizing and reducing costs (p. 23)
Analyze CloudWatch cost and usage data with Cost 
Explorer
With AWS Cost Explorer, you can visualize and analyze cost and usage data for AWS services over time, 
including CloudWatch. For more information, see Getting started with AWS Cost Explorer.
The following procedure describes how to use Cost Explorer to visualize and analyze CloudWatch cost 
and usage data.
To visualize and analyze CloudWatch cost and usage 
data
1. Sign in to the Cost Explorer console at https://console.aws.amazon.com/cost-management/home#/ 
custom .
2. Under FILTERS, for Service, select CloudWatch.
3. For Group by, choose Usage Type. You can also group your results by other categories, such as the 
following:
•API Operation  – See which API operations generated the most costs.
•Region  – See which Regions generated the most costs.
The following image shows an example of the costs that CloudWatch features generated over six 
months.
18Amazon CloudWatch User Guide
To visualize and analyze CloudWatch cost and usage data 
To see which CloudWatch features generated the most costs, look at the values for UsageType . For 
example, EU-CW:GMD-Metrics  represents the costs that CloudWatch bulk API requests generated.
Note
The strings for UsageType  match speciﬁc features and Regions. For example, the ﬁrst part of
EU-CW:GMD-Metrics  (EU) matches the Europe (Ireland) Region, and the second part of EU-
CW:GMD-Metrics  (GMD-Metrics ) matches CloudWatch bulk API requests.
The entire string for UsageType  can be formatted as follows: <Region>-CW:<Feature>  or
<Region>-<Feature> .
To enhance readability, the strings for UsageType  in the tables throughout this document have 
been shortened to their string suﬃxes. For example, EU-CW:GMD-Metrics  is shortened to
GMD-Metrics .
The following table includes the names of each CloudWatch feature, lists the names of each subfeature, 
and lists the strings for UsageType .
CloudWatch feature CloudWatch subfeature UsageType
CloudWatch metrics Custom metrics MetricMonitorUsage
19Amazon CloudWatch User Guide
To visualize and analyze CloudWatch cost and usage data 
CloudWatch featureCloudWatch subfeature UsageType
  Detailed monitoring MetricMonitorUsage
  Embedded metrics MetricMonitorUsage
CloudWatch API requests API requests Requests
  Bulk (Get) GMD-Metrics
  Contributor Insights GIRR-Metrics
  Bitmap image snapshot GMWI-Metrics
CloudWatch metric streams Metric streams MetricStreamUsage
CloudWatch dashboards Dashboard with 50 or fewer 
metricsDashboardsUsageHour-
Basic
  Dashboard with more than 50 
metricsDashboardsUsageHour
CloudWatch alarms Standard (metric alarm) AlarmMonitorUsage
  High resolution (metric alarm) HighResAlarmMonitorUsage
  Metrics Insights query alarmMetricInsightAlarmUsage
  Composite (aggregated alarm) CompositeAlarmMonitorUsage
CloudWatch custom logs Collect (ingest) DataProcessing-Bytes
  Store (archive) TimedStorage-ByteHrs
  Analyze (query) DataScanned-Bytes
CloudWatch vended logsDelivery (Amazon CloudWatch 
Logs)VendedLog-Bytes
  Delivery (Amazon Simple Storage 
Service)S3-Egress-ComprBytes
S3-Egress-Bytes
  Delivery (Amazon Kinesis Data 
Firehose)FH-Egress-Bytes
Contributor Insights CloudWatch Logs (Rules) ContributorInsightRules
  CloudWatch Logs (Events) ContributorInsightEvents
  Amazon DynamoDB (Rules) ContributorRulesManaged
  DynamoDB Events) ContributorEventsManaged
Canaries (Synthetics) Run Canary-runs
Evidently Events Evidently-event
  Analysis Units Evidently-eau
RUM Events RUM-event
20Amazon CloudWatch User Guide
Analyze CloudWatch cost and usage data with 
AWS Cost and Usage Reports and Athena
Analyze CloudWatch cost and usage data with 
AWS Cost and Usage Reports and Athena
Another way to analyze CloudWatch cost and usage data is by using AWS Cost and Usage Reports with 
Amazon Athena. AWS Cost and Usage Reports contain a comprehensive set of cost and usage data. You 
can create reports that track your costs and usage, and you can publish these reports to an S3 bucket of 
your choice. You also can download and delete your reports from your S3 bucket. For more information, 
see What are AWS Cost and Usage Reports? in the AWS Cost and Usage Reports User Guide.
Note
There is no charge for using AWS Cost and Usage Reports. You only pay for storage when you 
publish your reports to Amazon Simple Storage Service (Amazon S3). For more information, see
Quotas and restrictions in the AWS Cost and Usage Reports User Guide.
Athena is a query service that you can use with AWS Cost and Usage Reports to analyze cost and usage 
data. You can query your reports in your S3 bucket without needing to download them ﬁrst. For more 
information, see What is Amazon Athena? in the Amazon Athena User Guide. For more information, see
What is Amazon Athena? in the Amazon Athena User Guide. For information about pricing, see Amazon 
Athena pricing .
The following procedure describes the process for enabling AWS Cost and Usage Reports and integrating 
the service with Athena. The procedure contains two example queries that you can use to analyze 
CloudWatch cost and usage data.
Note
You can use any of the example queries in this document. All of the example queries in this 
document correspond to a database named costandusagereport, and show results for the 
month of April and the year 2022. You can change this information. However, before you run 
a query, make sure that the name of your database matches the name of the database in the 
query.
To analyze cost and usage data with AWS Cost and 
Usage Reports and Athena
1. Enable AWS Cost and Usage Reports. For more information, see Creating cost and usage reports in 
the AWS Cost and Usage Reports User Guide.
Tip
When you create your reports, make sure to select Include resource IDs. Otherwise, your 
reports won't include the column line_item_resource_id . This line helps you further 
identify costs when analyzing cost and usage data.
2. Integrate AWS Cost and Usage Reports with Athena. For more information, see Setting up Athena 
using AWS CloudFormation templates in the AWS Cost and Usage Reports User Guide.
3. Query your cost and usage reports.
Example: Athena query
You can use the following query to show which CloudWatch features generated the most costs for a 
given month.
SELECT
CASE
-- Metrics
WHEN line_item_usage_type LIKE '%%MetricMonitorUsage%%' THEN 'Metrics (Custom, Detailed 
 monitoring management portal EMF)'
21Amazon CloudWatch User Guide
To analyze cost and usage data with 
AWS Cost and Usage Reports and Athena
WHEN line_item_usage_type LIKE '%%Requests%%' THEN 'Metrics (API Requests)'
WHEN line_item_usage_type LIKE '%%GMD-Metrics%%' THEN 'Metrics (Bulk API Requests)'
WHEN line_item_usage_type LIKE '%%MetricStreamUsage%%' THEN 'Metric Streams'
-- Dashboard
WHEN line_item_usage_type LIKE '%%DashboardsUsageHour%%' THEN 'Dashboards'
-- Alarms
WHEN line_item_usage_type LIKE '%%AlarmMonitorUsage%%' THEN 'Alarms (Standard)'
WHEN line_item_usage_type LIKE '%%HighResAlarmMonitorUsage%%' THEN 'Alarms (High 
 Resolution)'
WHEN line_item_usage_type LIKE '%%MetricInsightAlarmUsage%%' THEN 'Alarms (Metrics 
 Insights)'
WHEN line_item_usage_type LIKE '%%CompositeAlarmMonitorUsage%%' THEN 'Alarms (Composite)'
-- Logs
WHEN line_item_usage_type LIKE '%%DataProcessing-Bytes%%' THEN 'Logs (Collect - Data 
 Ingestion)'
WHEN line_item_usage_type LIKE '%%TimedStorage-ByteHrs%%' THEN 'Logs (Storage - Archival)'
WHEN line_item_usage_type LIKE '%%DataScanned-Bytes%%' THEN 'Logs (Analyze - Logs Insights 
 queries)'
-- Vended Logs
WHEN line_item_usage_type LIKE '%%VendedLog-Bytes%%' THEN 'Vended Logs (Delivered to CW)'
WHEN line_item_usage_type LIKE '%%FH-Egress-Bytes%%' THEN 'Vended Logs (Delivered to 
 Kinesis FH)'
WHEN (line_item_usage_type LIKE '%%S3-Egress-Bytes%%') OR (line_item_usage_type LIKE '%%S3-
Egress-
ComprBytes%%') THEN 'Vended Logs (Delivered to S3)'
-- Other
WHEN line_item_usage_type LIKE '%%Canary-runs%%' THEN 'Synthetics'
WHEN line_item_usage_type LIKE '%%Evidently%%' THEN 'Evidently'  
WHEN line_item_usage_type LIKE '%%RUM-event%%' THEN 'RUM'
ELSE 'Others'
END AS UsageType,
-- REGEXP_EXTRACT(line_item_resource_id,'^(?:.+?:){5}(.+)$',1) as ResourceID,
-- SUM(CAST(line_item_usage_amount AS double)) AS UsageQuantity,
SUM(CAST(line_item_unblended_cost AS decimal(16,8))) AS TotalSpend
FROM
costandusagereport  
WHERE
product_product_name = 'AmazonCloudWatch'
AND year='2022'  
AND month='4'  
AND line_item_line_item_type NOT IN ('Tax','Credit','Refund','EdpDiscount','Fee','RIFee')
-- AND line_item_usage_account_id = '123456789012' – If you want to filter on a specific 
 account, you can
remove this comment at the beginning of the line and specify an AWS account.
GROUP BY
1
ORDER BY
TotalSpend DESC,
UsageType;
Example: Athena query
You can use the following query to show the results for UsageType  and Operation . This shows you 
how CloudWatch features generated costs. The results also show the values for UsageQuantity  and
TotalSpend , so that you can see your total usage costs.
Tip
For more information about UsageType , add the following line to this query:
line_item_line_item_description
This line creates a column called Description .
SELECT
bill_payer_account_id as Payer,
line_item_usage_account_id as LinkedAccount,
22Amazon CloudWatch User Guide
Best practices for optimizing and reducing costs
line_item_usage_type AS UsageType,
line_item_operation AS Operation,
line_item_resource_id AS ResourceID,
SUM(CAST(line_item_usage_amount AS double)) AS UsageQuantity,
SUM(CAST(line_item_unblended_cost AS decimal(16,8))) AS TotalSpend
FROM
costandusagereport  
WHERE
product_product_name = 'AmazonCloudWatch'
AND year='2022'  
AND month='4'  
AND line_item_line_item_type NOT IN ('Tax','Credit','Refund','EdpDiscount','Fee','RIFee')
GROUP BY
bill_payer_account_id,
line_item_usage_account_id,
line_item_usage_type,
line_item_resource_id,
line_item_operation
Best practices for optimizing and reducing costs
CloudWatch metrics
Many AWS services, such as Amazon Elastic Compute Cloud (Amazon EC2) , Amazon S3, and Amazon 
Kinesis Data Firehose, automatically send metrics to CloudWatch at no charge. However, metrics that are 
grouped in the following categories can incur additional costs:
•Custom metrics, detailed monitoring, and embedded metrics
•API requests
•Metric streams
For more information, see Using Amazon CloudWatch metrics.
Custom metrics, detailed monitoring, and embedded metrics
Custom metrics
You can create custom metrics to organize data points in any order and at any rate.
All custom metrics are prorated by the hour. They're metered only when they're sent to CloudWatch. For 
information about how metrics are priced, see Amazon CloudWatch Pricing.
The following table lists the names of relevant subfeatures for CloudWatch metrics. The table includes 
the strings for UsageType  and Operation , which can help you analyze and identify metric-related 
costs.
Note
To get more details about the metrics that are listed in the following table while you're querying 
cost and usage data with Athena, match the strings for Operation  with the results that are 
shown for line_item_operation .
CloudWatch subfeatureUsageType Operation Purpose
Custom metrics MetricMonitorUsage MetricStorage Custom metrics
23Amazon CloudWatch User Guide
CloudWatch metrics
CloudWatch subfeatureUsageType Operation Purpose
Detailed monitoring MetricMonitorUsage MetricStorage:AWS/
{Service}Detailed monitoring
Embedded metrics MetricMonitorUsage MetricStorage:AWS/
Logs-EMFLogs embedded metrics
Log ﬁlters MetricMonitorUsage MetricStorage:AWS/
CloudWatchLogsLog group metric ﬁlters
Detailed monitoring
CloudWatch has two types of monitoring:
•Basic monitoring
Basic monitoring is free and automatically enabled for all AWS services that support the feature.
•Detailed monitoring
Detailed monitoring incurs costs and adds diﬀerent enhancements depending on the AWS service. 
For each AWS service that supports detailed monitoring, you can choose whether to enable it for that 
service. For more information, see Basic and detailed monitoring .
Note
Other AWS services support detailed monitoring and might refer to this feature using a diﬀerent 
name. For example, detailed monitoring for Amazon S3 is referred to as request metrics .
Similar to custom metrics, detailed monitoring is prorated by the hour and metered only when data 
is sent to CloudWatch. Detailed monitoring generates costs by the number of metrics that are sent to 
CloudWatch. To reduce costs, only enable detailed monitoring when necessary. For information about 
how detailed monitoring is priced, see Amazon CloudWatch Pricing.
Example: Athena query
You can use the following query to show which EC2 instances have detailed monitoring enabled.
SELECT
bill_payer_account_id as Payer,
line_item_usage_account_id as LinkedAccount,
line_item_usage_type AS UsageType,
line_item_operation AS Operation,
line_item_resource_id AS ResourceID,
SUM(CAST(line_item_usage_amount AS double)) AS UsageQuantity,
SUM(CAST(line_item_unblended_cost AS decimal(16,8))) AS TotalSpend
FROM
costandusagereport  
WHERE
product_product_name = 'AmazonCloudWatch'
AND year='2022'  
AND month='4'  
AND line_item_operation='MetricStorage:AWS/EC2'
AND line_item_line_item_type NOT IN ('Tax','Credit','Refund','EdpDiscount','Fee','RIFee')
GROUP BY
bill_payer_account_id,
line_item_usage_account_id,
line_item_usage_type,
line_item_resource_id,
line_item_operation,
24Amazon CloudWatch User Guide
CloudWatch metrics
line_item_line_item_description
ORDER BY line_item_operation
Embedded metrics
With the CloudWatch embedded metric format, you can ingest application data as log data, so that 
you can generate actionable metrics. For more information, see Ingesting high-cardinality logs and 
generating metrics with the CloudWatch embedded metric format.
Embedded metrics generate costs by the number of logs ingested, number of logs archived, and number 
of custom metrics generated.
The following table lists the names of relevant subfeatures for the CloudWatch embedded metric 
format. The table includes the strings for UsageType  and Operation , which can help you analyze and 
identify costs.
CloudWatch subfeatureUsageType Operation Purpose
Custom metrics MetricMonitorUsage MetricStorage:AWS/
Logs-EMFLogs embedded metrics
Logs ingestion DataProcessing-
BytesPutLogEvents Uploads a batch of log 
events to the speciﬁed 
log group or log stream
Logs archival TimedStorage-
ByteHrsHourlyStorageMetering Stores logs per hour 
and logs per byte in 
CloudWatch Logs
To analyze costs, use AWS Cost and Usage Reports with Athena so that you can identify which metrics 
are generating costs and determine how the costs are generated.
To make the most of costs generated by the CloudWatch embedded metric format, avoid creating 
metrics based on high-cardinality dimensions. This way, CloudWatch doesn't create a custom metric for 
each unique dimension combination. For more information, see Dimensions .
If you're using CloudWatch Container Insights to leverage the embedded metric format, you can use 
AWS Distro for Open Telemetry as an alternative to make the most of metric-related costs. With 
Container Insights, you can collect, aggregate, and summarize metrics and logs from your containerized 
applications and microservices. When you enable Container Insights, the CloudWatch agent sends your 
logs to CloudWatch, so it can use the logs to generate embedded metrics. However, the CloudWatch 
agent only sends a ﬁxed number of metrics to CloudWatch, and you're charged for all available metrics, 
including any that you're not using. With AWS Distro for Open Telemetry, you can conﬁgure and 
customize which metrics and dimensions are sent to CloudWatch. This helps you reduce the volume of 
data and cost that Container Insights generates. For more information, see the following resources:
•Using Container Insights
•AWS Distro for Open Telemetry
API requests
CloudWatch has the following types of API requests:
•API requests
•Bulk (Get)
25Amazon CloudWatch User Guide
CloudWatch metrics
•Contributor Insights
•Bitmap image snapshot
API requests generate costs by the request type and number of metrics requested.
The following table lists the types of API requests and includes the strings for UsageType  and
Operation , which can help you analyze and identify API-related costs.
API request type UsageType Operation Purpose
API requests Requests GetMetricStatistics Retrieves statistics for 
the speciﬁed metrics
  Requests ListMetrics Lists the speciﬁed 
metrics
  Requests PutMetricData Publishes metric data 
points to CloudWatch
  Requests GetDashboard Displays details for the 
speciﬁed dashboards
  Requests ListDashboards Lists the dashboards in 
your account
  Requests PutDashboard Creates or updates a 
dashboard
  Requests DeleteDashboards Deletes all speciﬁed 
dashboards
Bulk (Get) GMD-Metrics GetMetricData Retrieves CloudWatch 
metric values
Contributor Insights GIRR-Metrics GetInsightRuleReport Returns time-series 
data that's collected by 
a Contributor Insights 
rule
Bitmap image snapshot GMWI-Metrics GetMetricWidgetImage Retrieves a snapshot 
of one or more 
CloudWatch metrics as 
a bitmap image
To analyze costs, use Cost Explorer, and group your results by API Operation .
Costs for API requests vary, and you incur costs when you exceed the number of API calls provided to you 
under the AWS Free Tier limit.
Note
GetMetricData  and GetMetricWidgetImage  aren't included under the AWS Free Tier limit. 
For more information, see Using the AWS Free Tier in the AWS Billing User Guide.
The API requests that typically drive cost are Put and Get requests.
PutMetricData
PutMetricData  generates costs every time that it's called and can incur signiﬁcant costs depending on 
the use case. For more information, see PutMetricData  in the Amazon CloudWatch API Reference.
26Amazon CloudWatch User Guide
CloudWatch metrics
To make the most of costs that are generated by PutMetricData , batch more data into your API calls. 
Depending on your use case, consider using CloudWatch Logs or the CloudWatch embedded metric 
format to inject metric data. For more information, see the following resources:
•What is Amazon CloudWatch Logs? in the Amazon CloudWatch Logs User Guide
•Ingesting high-cardinality logs and generating metrics with CloudWatch embedded metric format
•Lowering costs and focusing on our customers with Amazon CloudWatch embedded custom metrics
GetMetricData
GetMetricData  can also generate signiﬁcant costs. Common use cases that drive cost involve third-
party monitoring tools that pull data to generate insights. For more information, see GetMetricData  in 
the Amazon CloudWatch API Reference.
To reduce costs generated by GetMetricData , consider only pulling data that's monitored and used, or 
consider pulling data less often. Depending on your use case, you might consider using metric streams 
instead of GetMetricData , so that you can push data in near real time to third parties at a lower cost. 
For more information, see the following resources:
•Using metric streams
•CloudWatch Metric Streams - Send AWS Metrics to Partners and to Your Apps in Real Time
GetMetricStatistics
Depending on your use case, you might consider using GetMetricStatistics  instead of
GetMetricData . With GetMetricData , you can retrieve data quickly and at scale. However,
GetMetricStatistics  is included under the AWS Free Tier limit for up to one million API requests, 
which can help you reduce costs if you don't need to retrieve as many metrics and data points per call. 
For more information, see the following resources:
•GetMetricStatistics  in the Amazon CloudWatch API Reference
•Should I use GetMetricData or GetMetricStatistics?
Note
External callers make API calls. Currently, the only way to identify these callers is by opening a 
technical support request to the CloudWatch team and asking for information about them. For 
information about creating a technical support request, see How do I get technical support from 
AWS?.
CloudWatch metric streams
With CloudWatch metric streams, you can send metrics continuously to AWS destinations and third-party 
service provider destinations.
Metric streams generate costs by the number of metric updates. Metric updates always include values for 
the following statistics:
•Minimum
•Maximum
•Sample Count
•Sum
For more information, see Statistics that can be streamed.
27Amazon CloudWatch User Guide
CloudWatch alarms
To analyze costs that are generated by CloudWatch metric streams, use AWS Cost and Usage Reports 
with Athena. This way, you can identify which metric streams are generating costs and determine how 
the costs are generated.
Example: Athena query
You can use the following query to track which metric streams generate costs by Amazon Resource Name 
(ARN).
SELECT
SPLIT_PART(line_item_resource_id,'/',2) AS "Stream Name",
line_item_resource_id as ARN,
SUM(CAST(line_item_unblended_cost AS decimal(16,2))) AS TotalSpend
FROM
costandusagereport  
WHERE
product_product_name = 'AmazonCloudWatch'
AND year='2022'  
AND month='4'  
AND line_item_line_item_type NOT IN ('Tax','Credit','Refund','EdpDiscount','Fee','RIFee')
-- AND line_item_usage_account_id = '123456789012' – If you want to filter on a specific 
 account, you can
remove this comment at the beginning of the line and specify an AWS account.
AND line_item_usage_type LIKE '%%MetricStreamUsage%%'
GROUP BY line_item_resource_id
ORDER BY TotalSpend DESC
To reduce costs generated by CloudWatch metric streams, stream only the metrics that bring your 
business value. You also can stop or pause any metric stream that you're not using.
CloudWatch alarms
With CloudWatch alarms, you can create alarms based on a single metric, alarms based on a Metrics 
Insights query, and composite alarms which watch other alarms.
Note
Costs for metric and composite alarms are prorated by the hour. You incur costs for your alarms 
only while your alarms exist.
Metric alarms
Metric alarms have the following resolution settings:
•Standard  (evaluated every 60 seconds)
•High resolution  (evaluated every 10 seconds)
When you create a metric alarm, your costs are based on your alarm’s resolution setting and the number 
of metrics that your alarm references. For example, a metric alarm that references one metric incurs one 
alarm-metric cost per hour. For more information, see Using Amazon CloudWatch alarms.
If you create a metric alarm that contains a metric math expression, which references multiple metrics, 
you incur a cost for each alarm-metric that’s referenced in the metric math expression. For information 
about how to create a metric alarm that contains a metric math expression, see Creating a CloudWatch 
alarm based on a metric math expression.
If you create an anomaly detection alarm, where your alarm analyzes past metric data to create a model 
of expected values, you incur a cost for each alarm-metric that's referenced in your alarm plus two 
additional metrics, one for the upper and lower band metrics that the anomaly detection model creates. 
For information about how to create an anomaly detection alarm, see Creating a CloudWatch alarm 
based on anomaly detection.
28Amazon CloudWatch User Guide
CloudWatch alarms
Metrics Insights query alarms
Metric Insights query alarms are a speciﬁc type of metric alarm, only available with standard resolution 
(evaluated every 60 seconds).
When you create a Metric Insights query alarm, your costs are based on the number of metrics analyzed 
by the query that your alarm references. For example, a Metric Insights query alarm that references a 
query whose ﬁlter matches ten metrics incurs ten metrics analyzed cost per hour. For more information, 
see the pricing example on Amazon CloudWatch Pricing.
If you create an alarm that contains both a Metrics Insights query and a metric math expression, it 
is reported as a Metrics Insights query alarm. If your alarm contains a metric math expression which 
references other metrics in addition to the metrics analyzed by the Metrics Insights query, you incur an 
additional cost for each alarm-metric that’s referenced in the metric math expression. For information 
about how to create a metric alarm that contains a metric math expression, see Creating a CloudWatch 
alarm based on a metric math expression.
Composite alarms
Composite alarms contain rule expressions that specify how they should evaluate the states of other 
alarms to determine their own states. Composite alarms incur a standard cost per hour, regardless of 
how many other alarms they evaluate. Alarms that composite alarms reference in rule expressions incur 
separate costs. For more information, see Creating a composite alarm.
Alarm usage types
The following table lists the names of relevant subfeatures for CloudWatch alarms. The table includes 
the strings for UsageType , which can help you analyze and identify alarm-related costs.
CloudWatch subfeature UsageType
Standard metric alarm AlarmMonitorUsage
High-resolution metric alarm HighResAlarmMonitorUsage
Metrics Insights query alarm MetricInsightAlarmUsage
Composite alarm CompositeAlarmMonitorUsage
Reducing alarm costs
To optimize costs generated by metric math alarms that aggregate four or more metrics, you can 
aggregate data before the data is sent to CloudWatch. This way, you can create an alarm for a single 
metric instead of an alarm that aggregates data for multiple metrics. For more information, see
Publishing custom metrics .
To optimize costs generated by Metrics Insights query alarms, you can ensure that the ﬁlter used for the 
query matches only the metrics that you want to monitor.
The best way to reduce costs is to remove all unnecessary or unused alarms. For example, you can delete 
alarms that evaluate metrics emitted by AWS resources that no longer exist.
Example: Check for alarms in INSUFFICIENT_DATA  state with DescribeAlarms
If you delete a resource, but not the metric alarms that the resource emits, the alarms still exist 
and typically will go into the INSUFFICIENT_DATA  state. To check for alarms that are in the
INSUFFICIENT_DATA  state, use the following AWS Command Line Interface (AWS CLI) command.
29Amazon CloudWatch User Guide
CloudWatch Logs
$ aws cloudwatch describe-alarms –state-value INSUFFICIENT_DATA
Other ways to reduce costs include the following:
•Make sure to create alarms for the correct metrics.
•Make sure that you don't have any alarms enabled in Regions where you're not working.
•Remember that, although composite alarms reduce noise, they also generate additional costs.
•When deciding whether to create a standard alarm or high-resolution alarm, consider your use case 
and the value that each type of alarm brings.
CloudWatch Logs
Amazon CloudWatch Logs has the following log types:
•Custom logs  (logs that you create for your applications)
•Vended logs (logs that other AWS services, such as Amazon Virtual Private Cloud (Amazon VPC) and 
Amazon Route 53, create on your behalf)
For more information about vended logs, see Enabling logging from certain AWS services in the Amazon 
CloudWatch Logs User Guide.
Custom and vended logs generate costs based on the number of logs that are collected , stored , and
analyzed. Separately, vended logs generate costs for delivery to Amazon S3 and Kinesis Data Firehose.
The following table lists the names of the CloudWatch Logs features and names of relevant subfeatures. 
The table includes the strings for UsageType  and Operation , which can help you analyze and identify 
log-related costs.
CloudWatch Logs 
featureCloudWatch Logs 
subfeatureUsageType Operation Purpose
Custom logs Collect (ingest) DataProcessing-
BytesPutLogEvents Uploads a batch of 
logs to a speciﬁc 
log stream
  Store (archive )TimedStorage-
ByteHrsHourlyStorageMetering Stores logs 
per hour and 
logs per byte in 
CloudWatch Logs
  Analyze (Logs 
Insights queries)DataScanned-
BytesStartQuery Logs data scanned 
by CloudWatch 
Logs Insights 
queries
Vended logs Delivery 
(CloudWatch Logs)VendedLog-
BytesPutLogEvents Uploads a batch of 
logs to a speciﬁc 
log stream
  Delivery (Amazon 
S3)S3-Egress-
ComprBytes
S3-Egress-
BytesLogDelivery Sends vended 
logs (CloudWatch, 
Amazon S3, or 
Kinesis Data 
Firehose)
30Amazon CloudWatch User Guide
CloudWatch Logs
CloudWatch Logs 
featureCloudWatch Logs 
subfeatureUsageType Operation Purpose
 Delivery (Kinesis 
Data Firehose)FH-Egress-
BytesLogDeliverySends vended 
logs (CloudWatch, 
Amazon S3, or 
Kinesis Data 
Firehose)
To analyze costs, use AWS Cost and Usage Reports with Athena, so that you can identify which logs are 
generating costs and determine how the costs are generated.
Example: Athena query
You can use the following query to track which logs generate costs by resource ID.
SELECT
bill_payer_account_id as Payer,
line_item_usage_account_id as LinkedAccount,
line_item_resource_id AS ResourceID,
line_item_usage_type AS UsageType,
SUM(CAST(line_item_unblended_cost AS decimal(16,8))) AS TotalSpend,
SUM(CAST(line_item_usage_amount AS double)) AS UsageQuantity
FROM
costandusagereport  
WHERE
product_product_name = 'AmazonCloudWatch'
AND year='2022'
AND month='4'
AND line_item_operation IN 
 ('PutLogEvents','HourlyStorageMetering','StartQuery','LogDelivery')
AND line_item_line_item_type NOT IN ('Tax','Credit','Refund','EdpDiscount','Fee','RIFee')
GROUP BY
bill_payer_account_id,
line_item_usage_account_id,
line_item_usage_type,
line_item_resource_id,
line_item_operation
ORDER BY
TotalSpend DESC
To make the most of costs that are generated by CloudWatch Logs, consider the following:
•Log only the events that bring your business value. This helps you generate fewer costs for ingestion.
•Change your log retention settings, so that you generate fewer costs for storage. For more 
information, see Change log data retention in CloudWatch Logs in the Amazon CloudWatch Logs User 
Guide .
•Run queries that CloudWatch Logs Insights automatically saves in your history. This way, you generate 
fewer costs for analysis. For more information, see View running queries or query history in the
Amazon CloudWatch Logs User Guide.
•Use the CloudWatch agent to collect system and application logs and send them to CloudWatch. This 
way, you can collect only the log events that meet your criteria. For more information, see Amazon 
CloudWatch Agent adds Support for Log Filter Expressions.
To reduce costs for vended logs, consider your use case, and then determine whether your logs should 
be sent to CloudWatch or Amazon S3. For more information, see Logs sent to Amazon S3 in the Amazon 
CloudWatch Logs User Guide.
31Amazon CloudWatch User Guide
CloudWatch Logs
Tip
If you want to use metric ﬁlters, subscription ﬁlters, CloudWatch Logs Insights, and Contributor 
Insights, send vended logs to CloudWatch.
Alternatively, if you're working with VPC Flow Logs and using them for auditing and compliance 
purposes, send vended logs to Amazon S3.
For information about how to track charges that are generated by publishing VPC Flow Logs to 
S3 buckets, see Using AWS Cost and Usage Reports and cost allocation tags to understand VPC 
FLow Logs data ingestion in Amazon S3.
For additional information about how to make the most of costs that are generated by CloudWatch Logs, 
see Which log group is causing a sudden increase in my CloudWatch Logs bill?.
32Amazon CloudWatch User Guide
Using Amazon CloudWatch 
dashboards
Amazon CloudWatch dashboards are customizable home pages in the CloudWatch console that you 
can use to monitor your resources in a single view, even those resources that are spread across diﬀerent 
Regions. You can use CloudWatch dashboards to create customized views of the metrics and alarms for 
your AWS resources.
With dashboards, you can create the following:
•A single view for selected metrics and alarms to help you assess the health of your resources and 
applications across one or more Regions. You can select the color used for each metric on each graph, 
so that you can easily track the same metric across multiple graphs.
•An operational playbook that provides guidance for team members during operational events about 
how to respond to speciﬁc incidents.
•A common view of critical resource and application measurements that can be shared by team 
members for faster communication ﬂow during operational events.
If you have multiple AWS accounts, you can set up CloudWatch cross-account observability and then 
create rich cross-account dashboards in your monitoring accounts. These dashboards can include graphs 
of metrics from source accounts and CloudWatch Logs Insights widgets with queries of log groups from 
source accounts. Additionally, alarms that you create in the monitoring account can watch metrics in 
source accounts. For more information, see CloudWatch cross-account observability (p. 846).
You can create dashboards from the console or using the AWS CLI or PutDashboard  API operation. You 
can add dashboards to a favorites list, where you can access not only your favorited dashboards, but also 
your recently visited dashboards. For more information, see Add a dashboard to your favorites list.
To access CloudWatch dashboards, you need one of the following:
•The AdministratorAccess  policy
•The CloudWatchFullAccess  policy
•A custom policy that includes one or more of these speciﬁc permissions:
•cloudwatch:GetDashboard  and cloudwatch:ListDashboards  to be able to view dashboards
•cloudwatch:PutDashboard  to be able to create or modify dashboards
•cloudwatch:DeleteDashboards  to be able to delete dashboards
Contents
•Creating a CloudWatch dashboard (p. 34)
•CloudWatch cross-account observability dashboard (p. 34)
•Cross-account cross-Region dashboards (p. 35)
•Create ﬂexible dashboards with dashboard variables (p. 38)
•Create and work with widgets on CloudWatch dashboards (p. 42)
•Sharing CloudWatch dashboards (p. 63)
•Use live data (p. 73)
•Viewing an animated dashboard (p. 73)
•Add a CloudWatch dashboard to your favorites list  (p. 74)
33Amazon CloudWatch User Guide
Create a dashboard
•Change the period override setting or refresh interval for the CloudWatch dashboard (p. 74)
•Change the time range or time zone format of a CloudWatch dashboard (p. 75)
Creating a CloudWatch dashboard
To get started, create a CloudWatch dashboard. You can create multiple dashboards, and you can add 
dashboards to a favorites list. You aren't limited to the number of dashboards that you can have in your 
AWS account. All dashboards are global. They are not Region-speciﬁc.
The following procedure shows you how to create a dashboard from the CloudWatch console. You 
can use the PutDashboard  API operation to create a dashboard from the command line interface. 
The API operation contains a JSON string that deﬁnes your dashboard content. For more information 
about creating a dashboard with the PutDashboard  API operation, see PutDashboard in the Amazon 
CloudWatch API Reference.
Tip
If you're creating a new dashboard with the PutDashboard  API operation, you can use the 
JSON string from a dashboard that already exists.
To create a dashboard from the console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose Create dashboard .
3. In the Create new dashboard  dialog box, enter a name for the dashboard, and then choose Create 
dashboard .
If you use the name CloudWatch-Default or CloudWatch-Default-ResourceGroupName , the 
dashboard appears in the overview of the CloudWatch home page under Default Dashboard . For 
more information, see Getting started with Amazon CloudWatch (p. 12).
4. In the Add to this dashboard  dialog box, do one of the following:
• To add a graph to the dashboard, choose Line  or Stacked area, and then choose Conﬁgure . 
In the Add metric graph  dialog box, select the metric(s) to graph, and then choose Create 
widget . If a metric doesn't appear in the dialog box because it hasn't published data in more 
than 14 days, you can add it manually. For more information, see Graph metrics manually on a 
CloudWatch dashboard (p. 44).
• To add a number displaying a metric to the dashboard, choose Number , and then choose
Conﬁgure . In the Add metric graph  dialog box, select the metric(s) to graph, and then choose
Create widget .
• To add a text block to the dashboard, choose Text, and then choose Conﬁgure . In the New text 
widget  dialog box, for Markdown, format your text using Markdown, and then choose Create 
widget .
5. (Optional) Choose Add widget , and then repeat step 4 to add another widget to the dashboard. You 
can repeat this step multiple times.
6. Choose Save dashboard.
CloudWatch cross-account observability 
dashboard
If you have multiple AWS accounts, you can set up CloudWatch cross-account observability and then 
create rich cross-account dashboards in your monitoring accounts. You can seamlessly search, visualize, 
and analyze your metrics, logs, and traces without account boundaries.
34Amazon CloudWatch User Guide
Cross-account cross-Region dashboards
For more information about setting up CloudWatch cross-account observability, see CloudWatch cross-
account observability (p. 846).
With CloudWatch cross-account observability, you can do the following in a dashboard in a monitoring 
account:
•Search, view, and create graphs of metrics that reside in source accounts. A single graph can include 
metrics from multiple accounts.
•Create alarms in the monitoring account that watch metrics in source accounts.
•View the log events from log groups located in source accounts, and run CloudWatch Logs Insights 
queries of log groups in source accounts. A single CloudWatch Logs Insights query in a monitoring 
account can query multiple log groups in multiple source accounts at once.
•View nodes from source accounts in service maps in both X-Ray and CloudWatch ServiceLens. You can 
then ﬁlter the map to speciﬁc source accounts.
When you are signed in to a monitoring account, a blue Monitoring account badge appears at the top 
right of every page that supports CloudWatch cross-account observability functionality.
Cross-account cross-Region dashboards
You can create cross-account cross-Region dashboards, which summarize your CloudWatch data from 
multiple AWS accounts and multiple Regions into one dashboard. From this high-level dashboard you 
can get a view of your entire application, and also drill down into more speciﬁc dashboards without 
having to sign in and out of accounts or switch Regions.
You can create cross-account cross-Region dashboards in the AWS Management Console and 
programmatically.
Prerequisite
Before you can create a cross-account cross-Region dashboard, you must enable at least one sharing 
account and at least one monitoring account. Additionally, to be able to use the CloudWatch console to 
create a cross-account dashboard, you must enable the console for cross-account functionality. For more 
information, see Cross-account cross-Region CloudWatch console (p. 1243 ).
Creating and using a cross-account cross-Region 
dashboard with the AWS Management Console
You can use the AWS Management Console to create a cross-account cross-Region dashboard.
To create a cross-account cross-Region dashboard
1. Sign in to the monitoring account.
2. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
3. In the navigation pane, choose Dashboards .
4. Choose a dashboard, or create a new one.
5. At the top of the screen, you can switch between accounts and Regions. As you create your 
dashboard, you can include widgets from multiple accounts and Regions. Widgets include graphs, 
alarms, and CloudWatch Logs Insights widgets.
Creating a graph with metrics from diﬀerent accounts and Regions
1. Sign in to the monitoring account.
35Amazon CloudWatch User Guide
Create a cross-account cross-
Region dashboard programmatically
2. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
3. In the navigation pane, choose Metrics , and then choose All metrics .
4. Select the account and Region that you want to add metrics from. You can select your account and 
Region from the account and Region dropdown menus near the top-right of the screen.
5. Add the metrics you want to the graph. For more information, see Graphing metrics  (p. 121).
6. Repeat steps 4-5 to add metrics from other accounts and Regions.
7. (Optional) Choose the Graphed metrics  tab and add a metric math function that uses the metrics 
that you have chosen. For more information, see Use metric math  (p. 136).
You can also set up a single graph to include multiple SEARCH functions. Each search can refer to a 
diﬀerent account or Region.
8. When you are ﬁnished with the graph, choose Actions, Add to dashboard .
Select your cross-account dashboard, and choose Add to dashboard .
Adding an alarm from a diﬀerent account to your cross-account dashboard
1. Sign in to the monitoring account.
2. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
3. At the top of the page, choose the account where the alarm is located.
4. In the navigation pane, choose Alarms .
5. Select the check box next to the alarm that you want to add, and choose Add to dashboard .
6. Select the cross-account dashboard that you want to add it to, and choose Add to dashboard .
Create a cross-account cross-Region dashboard 
programmatically
You can use the AWS APIs and SDKs to create dashboards programmatically. For more information, see 
PutDashboard.
To enable cross-account cross-Region dashboards, we have added new parameters to the dashboard 
body structure, as shown in the following table and examples. For more information about overall 
dashboard body structure, see  Dashboard Body Structure and Syntax.
Parameter Use Scope Default
accountId Speciﬁes the ID of the account where 
the widget or the metric is located.Widget or metric Account that is 
currently logged in
region Speciﬁes the Region of the metric. Widget or metric Current Region 
selected in the 
console
The following examples illustrate the JSON source for widgets in a cross-account cross-Region 
dashboard.
This example sets the accountId  ﬁeld to the ID of the sharing account at the widget level. This speciﬁes 
that all metrics in this widget will come from that sharing account and Region.
{ 
36Amazon CloudWatch User Guide
Create a cross-account cross-
Region dashboard programmatically
    "widgets": [ 
        { 
            ... 
            "properties": { 
              "metrics": [ 
                     ….. 
                     ],   
                    "accountId": "111122223333", 
                    "region": "us-east-1" 
           } 
       } 
  ]
}
This example sets the accountId  ﬁeld diﬀerently at the level of each metric. In this example, the 
diﬀerent metrics in this metric math expression come from diﬀerent sharing accounts and diﬀerent 
Regions.
{ 
    "widgets": [ 
        { 
            ... 
            "properties": { 
                "metrics": [ 
                    [ { "expression": "SUM(METRICS())", "label": "[avg: ${AVG}] 
 Expression1", "id": "e1", "stat": "Sum" } ], 
                    [ "AWS/EC2", "CPUUtilization", { "id": "m2", "accountId": 
 "5555666677778888", "region": "us-east-1", "label": "[avg: ${AVG}] ApplicationALabel 
 " } ], 
                    [ ".", ".", { "id": "m1", "accountId": "9999000011112222", "region": 
 "eu-west-1", "label": "[avg: ${AVG}] ApplicationBLabel" } ] 
                ], 
                "view": "timeSeries", 
                "stacked": false, 
                "stat": "Sum", 
                "period": 300, 
                "title": "Cross account example" 
            } 
        } 
    ]
}
This example shows an alarm widget.
{ 
    "type": "metric", 
    "x": 6, 
    "y": 0, 
    "width": 6, 
    "height": 6, 
    "properties": { 
        "accountID": "111122223333", 
        "title": "over50", 
        "annotations": { 
            "alarms": [ 
                "arn:aws:cloudwatch:us-east-1:379642911888:alarm:over50" 
            ] 
        }, 
        "view": "timeSeries", 
        "stacked": false 
    }
}
37Amazon CloudWatch User Guide
Create ﬂexible dashboards with dashboard variables
This example is for a CloudWatch Logs Insights widget.
{ 
    "type": "log", 
    "x": 0, 
    "y": 6, 
    "width": 24, 
    "height": 6, 
    "properties": { 
        "query": "SOURCE 'route53test' | fields @timestamp, @message\n| sort @timestamp 
 desc\n| limit 20", 
        "accountId": "111122223333", 
        "region": "us-east-1", 
        "stacked": false, 
        "view": "table" 
    }
}
Another way to create dashboards programmatically is to ﬁrst create one in the AWS Management 
Console, and then copy the JSON source of this dashboard. To do so, load the dashboard and choose
Actions, View/edit source. You can then copy this dashboard JSON to use as a template to create similar 
dashboards.
Create ﬂexible dashboards with dashboard 
variables
Use dashboard variables  to create ﬂexible dashboards that can quickly display diﬀerent content in 
multiple widgets, depending on the value of an input ﬁeld within the dashboard. For example, you can 
create a dashboard that can quickly switch between diﬀerent Lambda functions or Amazon EC2 instance 
IDs, or one that can switch to diﬀerent AWS Regions.
After you create a dashboard that uses a variable, you can copy the same variable pattern to other 
existing dashboards.
Using dashboard variables improves the operational workﬂow for people who use your dashboards. It 
can also reduce your costs because you're using dashboard variables in one dashboard instead of creating 
multiple similar dashboards.
Note
If you share a dashboard that contains dashboard variables, the people that you share it with 
won't be able to change between the variable values.
Types of dashboard variables
The dashboard variable can be a property variable or a pattern variable .
•Property variables change all instances of a property in all widgets in the dashboard. This property can 
be any JSON property in the JSON source of a dashboard, such as region . Or it can be a dimension 
name for a metric, such as InstanceID  or FunctionName .
For a tutorial that uses a property variable, see Tutorial: Create a Lambda dashboard with function 
name as the variable  (p. 39).
For more information about the JSON source of dashboards, see Dashboard Body Structure and 
Syntax. In the CloudWatch console, you can see the JSON source for any custom dashboard by 
choosing Actions, View/edit source.
38Amazon CloudWatch User Guide
Tutorial: Create a Lambda dashboard 
with function name as the variable
•Pattern variables use a regular expression pattern to change all of a JSON property or only a certain 
part of it.
For a tutorial that uses a pattern variable, see Tutorial: Create a dashboard that uses a regular 
expression pattern to switch between Regions (p. 40).
Property variables apply to most use cases and are less complex to set up.
Topics
•Tutorial: Create a Lambda dashboard with function name as the variable (p. 39)
•Tutorial: Create a dashboard that uses a regular expression pattern to switch between 
Regions (p. 40)
•Copy a variable to another dashboard (p. 41)
Tutorial: Create a Lambda dashboard with function 
name as the variable
The steps in this procedure illustrate how to create a ﬂexible dashboard that shows a variety of metric 
graphs, using a property variable. This includes a dropdown selection box on the dashboard that you can 
use to switch the metrics in all the graphs between diﬀerent Lambda functions.
Other use case examples for this type of dashboard include using InstanceId  as the variable to create 
a dashboard of metrics with a dropdown for instance IDs. Alternatively, you could create a dashboard 
that uses region as the variable to display the same set of metrics from diﬀerent Regions.
To use a dashboard property variable to create a ﬂexible Lambda dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , Create dashboard .
3. Enter a name for the dashboard, and choose Create dashboard .
4. Add widgets to the dashboard that display metrics for a Lambda function. When you create these 
widgets, specify Lambda , By Function Name for the widget metrics. For the function, specify one of 
the Lambda functions that you want to include in this dashboard.
For more information about adding widgets to a dashboard, see Create and work with widgets on 
CloudWatch dashboards (p. 42).
5. After you add the widgets, as you are viewing the dashboard, choose Actions, Variables, Create a 
variable.
6. Choose Property variable.
7. For Property that the variable changes, choose FunctionName.
8. For Input type, for this use case, we recommend choosing Select menu (dropdown). This creates 
a dropdown menu in the dashboard where you can select the Lambda function name to display 
metrics for.
If this was for a dashboard that toggled between only two or three diﬀerent values for a variable, 
then Radio button would be a good choice.
If you prefer to enter or paste in values for the variable, you would choose Text input. This option 
doesn't include a dropdown list or radio buttons.
9. When you choose Select menu (dropdown), you must then choose whether to populate the menu 
by entering values, or using a metric search. For this use case, let's assume that you have a large 
39Amazon CloudWatch User Guide
Tutorial: Create a dashboard that uses a regular 
expression pattern to switch between Regions
number of Lambda functions and you don't want to enter all of them manually. Choose Use the 
results of a metric search  and then do the following:
a. Choose Pre-built queries , Lambda , Errors .
(Choosing Errors  does not add the Errors  metric to the dashboard. However, it quickly 
populates the FunctionName variable selection box.)
b. Choose By Function Name and then choose Search .
Under the Search  button, you will then see FunctionName selected. You also see a message 
about how many FunctionName dimension values were found to populate the input box.
10. (Optional) For more settings, choose Secondary settings and do one or more of the following:
•To customize the name of your variable, enter the name in Custom variable name.
•To customize the label for the variable input ﬁeld, enter the label in Input label .
•To set the default value for this variable when the dashboard is ﬁrst opened, enter the default in
Default value .
11. Choose Add variable.
A FunctionName dropdown selection box appears near the top of the dashboard. You can select a 
Lambda function in this box and all the widgets that use the variable will display information about 
the selected function.
Later, if you add more widgets to the dashboard that watch Lambda metrics with the FunctionName
dimension, they will automatically use the variable.
Tutorial: Create a dashboard that uses a regular 
expression pattern to switch between Regions
The steps in this procedure illustrate how to create a ﬂexible dashboard that can switch between 
Regions. This tutorial uses a regular expression pattern variable  instead of a property variable. For a 
tutorial that uses a property variable, see Tutorial: Create a Lambda dashboard with function name as 
the variable  (p. 39).
For many use cases, you can create a dashboard that switches between Regions by using a property 
variable. But if the widgets rely on Amazon Resource Names (ARNs) that include Region names, you must 
use a pattern variable to change the Region names within the ARNs.
To use a dashboard pattern variable to create a ﬂexible multi-Region dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , Create dashboard .
3. Enter a name for the dashboard, and choose Create dashboard .
4. Add widgets to the dashboard. When you add the widgets that you want to display Region-speciﬁc 
data, avoid specifying any dimensions with values that appear in only one Region. For example, for 
Amazon EC2 metrics, specify metrics that are aggregated instead of metrics that use InstanceID as a 
dimension.
For more information about adding widgets to a dashboard, see Create and work with widgets on 
CloudWatch dashboards (p. 42).
5. After you add the widgets, as you are viewing the dashboard, choose Actions, Variables, Create a 
variable.
6. Choose Pattern variable.
40Amazon CloudWatch User Guide
Copy a variable to another dashboard
7. For Property that the variable changes, enter the name of the current dashboard Region, such as
us-east-2 .
You have the correct Region entered if the label below that box displays the widgets that will be 
impacted by the variable.
8. For Input type, for this use case, select Radio button.
9. For Deﬁne how inputs are populated, choose Create a list of custom values .
10. For Create your custom values, enter the Regions that you want to switch between, with one Region 
on each line. After each Region, enter a comma and then the label to display for that radio button. 
For example:
us-east-1, N. Virginia
us-east-2, Ohio
eu-west-3, Paris
As you ﬁll in the custom values, the Preview  pane updates to display what the radio buttons will 
look like.
11. (Optional) For more settings, choose Secondary settings and do one or more of the following:
•To customize the name of your variable, enter the name in Custom variable name.
•To customize the label for the variable input ﬁeld, enter the label in Input label . For this tutorial, 
enter Region: .
If you enter a value here, the Preview  pane updates to display what the radio buttons will look 
like.
•To set the default value for this variable when the dashboard is ﬁrst opened, enter the default in
Default value .
12. Choose Add variable.
The dashboard appears, with a Region: label next to the radio buttons for the Regions near the top. 
When you switch between Regions, all the widgets that use the variable will display information 
about the selected Region.
Copy a variable to another dashboard
After you create a dashboard with useful variables, you can copy these variables to other existing 
dashboards. For more information about dashboard variables, see Create ﬂexible dashboards with 
dashboard variables (p. 38).
To copy a dashboard variable to another dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose the name of the dashboard that 
has the variable that you want to copy. Enter a string to ﬁnd dashboards with matching names, if 
needed.
3. Choose Actions, Variables, Manage variables.
4. Choose the radio button next to the variable that you want to copy, and choose Copy to another 
dashboard .
5. Choose the selection box and start typing the dashboard name that you want to copy the variable 
to.
6. Select the dashboard name and choose Copy variable.
41Amazon CloudWatch User Guide
Create and work with widgets on CloudWatch dashboards
Create and work with widgets on CloudWatch 
dashboards
Use the topics in this section to create and work with graphs, alarms, and text widgets in your 
dashboards.
Contents
•Add or remove a graph from a CloudWatch dashboard  (p. 42)
•Graph metrics manually on a CloudWatch dashboard (p. 44)
•Working with existing graphs (p. 45)
•Add a metrics explorer widget to a CloudWatch dashboard  (p. 49)
•Add or remove a line widget on a CloudWatch dashboard  (p. 51)
•Add or remove a number widget from a CloudWatch dashboard  (p. 52)
•Add or remove a gauge widget from a CloudWatch dashboard  (p. 53)
•Add a custom widget to a CloudWatch dashboard (p. 54)
•Add or remove a text widget from a CloudWatch dashboard  (p. 61)
•Add or remove an alarm widget from a CloudWatch dashboard  (p. 62)
•Link and unlink graphs on a CloudWatch dashboard (p. 63)
Add or remove a graph from a CloudWatch 
dashboard
You can add graphs that contain one or more metrics to your CloudWatch dashboard. The types of 
graphs that you can add to your dashboard include Line, Stacked area , Number , Gauge , Bar, and Pie. 
You can remove graphs from your dashboard when you don't need them anymore. The procedures in this 
section describe how to add and remove graphs from your dashboard. For information about how to edit 
a graph on your dashboard, see  Edit a graph on a CloudWatch dashboard.
To add a graph to a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Choose the + symbol, and then choose the type of graph that you want to add to your dashboard, 
then choose Next.
• If you select Line, Stacked area , Bar, or Pie, choose Metrics .
4. In the Browse tab, search or browse for the metrics to graph, and select the ones that you want.
5. (Optional) To change your graph's time range, select one of the predeﬁned time ranges in the upper 
part of the screen. The time ranges span from 1 hour to 1 week (1h, 3h, 12h, 1d, 3d, or 1w).
To set your own time range, choose Custom .
• (Optional) To have this widget keep using this time range that you select, even if the time range 
for the rest of the dashboard is later changed, choose Persist time range.
6. (Optional) To change your graph's widget type, use the dropdown that's next to the predeﬁned time 
ranges.
7. (Optional) In Graphed metrics , you can add a dynamic label to your metric and change your metric's 
label, label color, statistic, and period. You also can determine the position of labels on the Y-axis 
from left to right.
42Amazon CloudWatch User Guide
Add or remove a graph 
a. To add a dynamic label, choose Graphed metrics , and then choose Add dynamic labels . 
Dynamic labels display a statistic about your metric in the graph legend. Dynamic labels update 
automatically when your dashboard or graph refreshes. By default, the dynamic values that you 
add to labels appear at the beginning of your labels. For more information, see Use dynamic 
labels  (p. 126).
b. To change the color of a metric, choose the color square that's next to the metric.
c. To change the statistic, select the dropdown under Statistic , and then choose a new value. For 
more information, see Statistics .
d. To change the period, select the dropdown under the Period column, and then choose a new 
value.
8. If you are creating a gauge widget, you must choose the Options  tab and specify the Min and Max
values to use for the two ends of the gauge.
9. (Optional) To customize the Y-axis, choose Options . You can add a custom label under Left Y-axis in 
the label ﬁeld. If your graph displays values on the right side of the Y-axis, you can customize that 
label, too. You also can set minimum and maximum limits on your Y-axis values, so that your graph 
only displays the value ranges that you specify.
10. (Optional) To add or edit horizontal annotations to line or stacked area graphs, or to add thresholds 
to gauge widgets, choose Options :
a. To add a horizontal annotation or threshold, choose Add horizontal annotation or Add 
threshold.
b. For Label , enter a label for the annotation then choose the check mark icon.
c. For Value, choose the pen and paper icon that's next to the current value, and enter your new 
value. After you enter your value, choose the check mark icon.
d. For Fill, select the dropdown and specify how your annotation will use shading. You can choose
None , Above , Between , or Below . To change the ﬁll color, choose the color square that's next to 
the annotation.
e. For Axis, specify whether your annotation appears on the left or right side of the Y-axis.
f.To hide an annotation, clear the check box that's next to the annotation you want to hide.
g. To delete an annotation, choose X under Actions .
Note
You can repeat these steps to add multiple horizontal annotations or thresholds to the 
same graph or gauge.
11. (Optional) To add or edit vertical annotations, choose Options :
a. To add a vertical annotation, choose Add vertical annotation.
b. For Label , choose the pen and paper icon that's next to the current annotation, and enter your 
new annotation. If you want to show only the date and time, leave the label ﬁeld blank.
c. For Date , choose the current date and time, and enter the new date and time.
d. For Fill, select the dropdown, and specify how your annotation will use shading. You can choose
None , Above , Between , or Below . To change the ﬁll color, select the color square that's next to 
the annotation.
e. To hide an annotation, clear the check box next to the annotation that you want to hide.
f.To delete an annotation, choose X under Actions .
Note
You can repeat these steps to add multiple vertical annotations to the same graph.
12. Choose Create widget .
13. Choose Save dashboard.
43Amazon CloudWatch User Guide
Graph metrics manually on a CloudWatch dashboard
To remove a graph from a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. In the upper-right corner of the graph that you want to remove, choose Widget actions, and then 
choose Delete.
4. Choose Save dashboard.
Graph metrics manually on a CloudWatch dashboard
If a metric hasn't published data in the past 14 days, you can't ﬁnd it when searching for metrics to 
add to a graph on a CloudWatch dashboard. Use the following steps to add any metric manually to an 
existing graph.
To add a metric that you can't ﬁnd in search to a graph
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. The dashboard must already contain a graph where you want to add the metric. If it doesn't, create 
the graph and add any metric to it. For more information, see  Add or remove a graph from a 
CloudWatch dashboard  (p. 42).
4. Choose Actions, View/edit source.
A JSON block appears. The block speciﬁes the widgets on the dashboard and their contents. The 
following is an example of one part of this block, which deﬁnes one graph.
{ 
            "type": "metric", 
            "x": 0, 
            "y": 0, 
            "width": 6, 
            "height": 3, 
            "properties": { 
                "view": "singleValue", 
                "metrics": [ 
                    [ "AWS/EBS", "VolumeReadOps", "VolumeId", "vol-1234567890abcdef0" ] 
                ], 
                "region": "us-west-1" 
            } 
        },
In this example, the following section deﬁnes the metric shown on this graph.
[ "AWS/EBS", "VolumeReadOps", "VolumeId", "vol-1234567890abcdef0" ]
5. Add a comma after the end bracket if there isn't already one and then add a similar bracketed 
section after the comma. In this new section, specify the namespace, metric name, and any 
necessary dimensions of the metric that you're adding to the graph. The following is an example.
[ "AWS/EBS", "VolumeReadOps", "VolumeId", "vol-1234567890abcdef0" ],
[ "MyNamespace ", "MyMetricName ", "DimensionName ", "DimensionValue " ]
For more information about the formatting of metrics in JSON, see  Properties of a Metric Widget 
Object.
44Amazon CloudWatch User Guide
Edit a graph
6. Choose Update .
Working with existing graphs
Follow the procedures in these sections to edit and modify your existing dashboard graph widgets.
Topics
•Edit a graph on a CloudWatch dashboard  (p. 45)
•Move or resize a graph on a CloudWatch dashboard (p. 49)
•Rename a graph on a CloudWatch dashboard (p. 49)
Edit a graph on a CloudWatch dashboard
You can edit the graphs that you add to your CloudWatch dashboard. You can change a graph's title, 
statistic, or period. You can add, update, and remove metrics from your graphs. If your graph contains 
more than one metric, you can reduce clutter by hiding metrics that you aren't using. The procedures in 
this section describe how to edit a graph on your dashboard. For information about creating a graph, see
Add or remove a graph from a CloudWatch dashboard.
New interface
To edit a graph on a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. In the upper-right corner of the graph that you want to edit, choose Widget actions, and then 
choose Edit.
4. To change the graph's title, choose the pen and paper icon that's next to the current title. Enter 
the new title, and then choose Apply .
5. (Optional) To change your graph's time range, select one of the predeﬁned time ranges in the 
upper are of the graph. The time ranges span from 1 hour to 1 week (1h, 3h, 12h, 1d, 3d, or 1w).
To set your own time range, choose Custom .
• (Optional) To have this widget keep using this time range that you select, even if the time 
range for the rest of the dashboard is later changed, choose Persist time range.
6. To change your graph's widget type, use dropdown that's next to the predeﬁned time ranges.
7. In Graphed metrics , you can add a dynamic label to your metric and change your metric's label, 
label color, statistic, and period. You also can determine the position of labels on the Y-axis from 
left to right.
a. To add a dynamic label for a metric, choose Dynamic labels . Dynamic labels display 
a statistic about the metric in the graph legend. Dynamic labels update automatically 
when your dashboard or graph refreshes. By default, the dynamic values that you add 
to labels appear at the beginning of the labels. For more information, see Use dynamic 
labels  (p. 126).
b. To change the color of a metric, choose the color square that's next to the metric.
c. To change the statistic, choose the statistic value under the Statistic  column, and then 
choose a new value. For more information, see Statistics  (p. 6).
d. To change the period, choose the period value under the Period column, and then choose a 
new value.
45Amazon CloudWatch User Guide
Edit a graph
8. To add or edit horizontal annotations, choose Options :
a. To add a horizontal annotation, choose Add horizontal annotation.
b. For Label , choose the pen and paper icon next to the current annotation. Then enter your 
new annotation. After you enter your annotation, choose the check mark icon.
c. For Value, choose the pen and paper icon next to the current metric value. Then enter your 
new metric value. After you enter your value, select the check mark icon.
d. For Fill, choose the dropdown under the column, and then specify how your annotation 
will use shading. You can choose None , Above, Between, or Below. If you choose Between, 
another new label and value ﬁeld appears.
Tip
You can change the ﬁll color by choosing the colored square next to the 
annotation.
e. For Axis, specify whether your annotation appears on the left or right side of the Y-axis.
f.To hide an annotation, deselect the check box next to the annotation that you want to hide 
on the graph.
g. To delete an annotation, choose X under the Actions column.
Note
You can repeat these steps to add multiple horizontal annotations to the same 
graph.
9. To add or edit vertical annotations, choose Options :
a. To add a vertical annotation, choose Add vertical annotation.
b. For Label , choose the pen and paper icon next to the current annotation. Then enter your 
new annotation. After you enter your annotation, choose the check mark icon.
Tip
To show only the date and time, leave the label ﬁeld blank.
c. For Date , choose the current date and time. Then enter the new date and time.
d. For Fill, choose the dropdown under the column, and then specify how your annotation will 
use shading. You can choose None , Above, Between, or Below. If you choose Between, a 
new label and value ﬁeld appears.
Tip
You can change the ﬁll color by choosing the color square next to the annotation.
Note
You can repeat these steps to add multiple vertical annotations to the same graph.
e. To hide an annotation, deselect the check box next to the annotation that you want to hide 
on the graph.
f.To delete an annotation, choose X under the Actions column.
10. To customize the Y-axis, choose Options . Under Left Y-axis, you can enter a custom label for
Label . If the graph displays values on the right Y-axis, you can customize that label, too. You 
also can set minimums and maximums on the Y-axis values, so that the graph displays only the 
value range that you specify.
11. When you ﬁnish making changes, choose Update widget .
To hide or change the position of a graph legend
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. In the upper-right corner of the graph that you want to edit, choose Widget actions. Choose
Legend  and select Hidden , Bottom, or Right .
46Amazon CloudWatch User Guide
Edit a graph
To temporarily hide metrics for a graph on a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Select the color square for the metric that you want to hide in the graph's footer. An X appears 
in the color square when you hover over it, and the square turns gray when you choose it.
4. To restore the hidden metric, clear the X in the gray square.
Original interface
To edit a graph on a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Hover over the upper-right corner of the graph that you want to edit. Choose Widget actions, 
and then choose Edit.
4. To change the graph's title, choose the pencil icon that's next to the current title, and then enter 
the new title.
5. To change the graph's time range, choose one of the predeﬁned time ranges in the upper area 
of the graph. These span from 1 hour to 1 week (1h, 3h, 12h, 1d, 3d, or 1w).
• To set your own time range, choose custom .
6. To change your graph's widget type, select the Graph options  tab. You can choose Line, Stacked 
area , Number , Bar, or Pie.
Tip
You can change your graph's widget type by choosing the dropdown that's next to the 
predeﬁned time ranges.
7. In Graphed metrics , you can add a dynamic label to your metric and change your metric's label, 
label color, statistic, and period. You also can determine the position of labels on the Y-axis from 
left to right.
a. To add a dynamic label for a metric, choose Dynamic labels . Dynamic labels display 
a statistic about the metric in the graph legend. Dynamic labels update automatically 
when your dashboard or graph refreshes. By default, the dynamic values that you add 
to labels appear at the beginning of the labels. For more information, see Use dynamic 
labels  (p. 126).
b. To change the color of a metric, choose the color square that's next to the metric.
c. To change the statistic, choose the statistic value under the Statistic  column, and then 
choose a new value. For more information, see Statistics  (p. 6).
d. To change the period, choose the period value under the Period column, and then choose a 
new value.
8. To add or edit horizontal annotations, choose Graph options :
a. To add a horizontal annotation, choose Add horizontal annotation.
b. For Label , choose the pencil icon next to the current annotation. Then enter your new 
annotation. After you enter your annotation, choose the check mark icon.
c. For Value, choose the pencil icon next to the current metric value. Then enter your new 
metric value. After you enter your value, select the check mark icon.
d. For Fill, choose the dropdown under the column, and then specify how your annotation will 
use shading. You can choose None , Above, Between, or Below. If you choose Between, a 
new label and value ﬁeld appears.
47Amazon CloudWatch User Guide
Edit a graph
Tip
You can change the ﬁll color by choosing the color square next to the annotation.
e. For Axis, specify whether your annotation appears on the left or right side of the Y-axis.
f.To hide an annotation, deselect the check box next to the annotation that you want to hide 
on the graph.
g. To delete an annotation, choose X under the Actions column.
Note
You can repeat these steps to add multiple horizontal annotations to the same 
graph.
9. To add or edit vertical annotations, choose Graph options :
a. To add a vertical annotation, choose Add vertical annotation.
b. For Label , choose the pencil icon next to the current annotation. Then enter your new 
annotation. After you enter your annotation, choose the check mark icon.
Tip
To show only the date and time, leave the label ﬁeld blank.
c. For Date , choose the pencil icon next to the current date and time. Then enter the new date 
and time.
d. For Fill, choose the dropdown under the column, and then specify how your annotation will 
use shading. You can choose None , Above, Between, or Below. If you choose Between, a 
new label and value ﬁeld appears.
Tip
You can change the ﬁll color by choosing the color square next to the annotation.
Note
You can repeat these steps to add multiple vertical annotations to the same graph.
e. To hide an annotation, deselect the check box next to the annotation that you want to hide 
on the graph.
f.To delete an annotation, choose X under the Actions column.
10. To customize the Y-axis, choose Graph options . Under Left Y-axis, you can enter a custom label 
for Label . If the graph displays values on the right Y-axis, you can customize that label, too. You 
also can set minimums and maximums on the Y-axis values, so that the graph displays only the 
value range that you specify.
11. When you ﬁnish making changes, choose Update widget .
To hide or change the position of a graph legend
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Hover over the upper-right corner of the graph that you want to edit, and choose Widget 
actions. Choose Legend , and select Hidden , Bottom, or Right .
To temporarily hide metrics for a graph on a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Select the color square for the metric that you want to hide in the graph's footer. An X appears 
in the color square when you hover over it, and the square turns gray when you choose it.
4. To restore the hidden metric, clear the X in the gray square.
48Amazon CloudWatch User Guide
Add an explorer widget to a CloudWatch dashboard 
Move or resize a graph on a CloudWatch dashboard
You can arrange and resize graphs on your CloudWatch dashboard.
To move a graph on a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Do one of the following:
•Hover over the title of the graph until the selection icon appears. Select and drag the graph to a 
new location on the dashboard.
•To move the widget to either the top left or bottom left of the dashboard, choose the vertical 
ellipsis at the upper right of the widget to open the Widget actions menu. Then choose Move, and 
choose where to move tbe widget to.
4. Choose Save dashboard.
To resize a graph
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. To increase or decrease the size, hover over the graph and drag the lower right corner of the graph. 
Stop dragging the corner when you have the size that you want.
4. Choose Save dashboard.
To enlarge a graph temporarily
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Select the graph. Alternatively, hover over the title of the graph and choose Widget actions,
Enlarge .
Rename a graph on a CloudWatch dashboard
You can change the default name that CloudWatch assigns to a graph on your dashboard.
To rename a graph on a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Hover over the title of the graph and choose Widget actions and Edit.
4. On the Edit graph screen, near the top, choose the title of the graph.
5. For Title, enter a new name and choose Ok (check mark). In the lower-right corner of the Edit graph
screen, choose Update widget .
Add a metrics explorer widget to a CloudWatch 
dashboard
Metrics explorer widgets include graphs of multiple resources that have the same tag, or share the same 
resource property such as an instance type. These widgets stay up to date, as resources that match are 
49Amazon CloudWatch User Guide
Add an explorer widget to a CloudWatch dashboard 
created or deleted. Adding metrics explorer widgets to your dashboard helps you to troubleshoot your 
environment more eﬃciently.
For example, you can monitor your ﬂeet of EC2 instances by assigning tags that represent their 
environments, such as production or test. You can then use these tags to ﬁlter and aggregate the 
operational metrics, such as CPUUtilization , to understand the health and performance of the EC2 
instances that are associated with each tag.
The following steps explain how to add a metrics explorer widget to a dashboard using the console. You 
can also add it programmatically or by using AWS CloudFormation. For more information, see  Metrics 
Explorer Widget Object Deﬁnition and  AWS::CloudWatch::Dashboard.
To add a metrics explorer widget to a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards .
3. Choose the name of the dashboard where you want to add the metrics explorer widget.
4. Choose the + symbol.
5. Choose Explorer and then choose Next.
Note
You must be opted in to the new dashboard view to be able to add a Metrics Explorer 
widget. To opt in, choose Dashboards  in the navigation pane, then choose try out the new 
interface in the banner at the top of the page.
6. Do one of the following:
• To use a template, choose Pre-ﬁlled Explorer widget and then select a template to use.
• To create a custom visualization, choose Empty Explorer widget.
7. Choose Create .
If you used a template, the widget appears on your dashboard with the selected metrics. If you're 
satisﬁed with the explorer widget and the dashboard, choose Save dashboard.
If you did not use a template, continue to the following steps.
8. In the new widget under Explorer, in the Metrics  box, choose a single metric or all the available 
metrics from a service.
After you choose a metric, you can optionally repeat this step to add more metrics.
9. For each metric selected, CloudWatch displays the statistic that it will use immediately after the 
metric name. To change this, choose the statistic name and then choose the statistic that you want.
10. Under From, choose a tag or a resource property to ﬁlter your results.
After you do this, you can optionally repeat this step to choose more tags or resource properties.
If you choose multiple values of the same property, such as two EC2 instance types, the explorer 
displays all the resources that match either chosen property. It's treated as an OR operation.
If you choose diﬀerent properties or tags, such as the Production  tag and the M5 instance type, 
only the resources that match all of these selections are displayed. This is treated as an AND 
operation.
11. (Optional) For Aggregate by, choose a statistic to use to aggregate the metrics. Then, next to for, 
choose how to aggregate the metric from the list. You can aggregate together all the resources that 
are currently displayed, or aggregate by a single tag or resource property.
Depending on how you choose to aggregate, the result may be a single time series or multiple time 
series.
50Amazon CloudWatch User Guide
Add or remove a line widget 
12. Under Split by, you can choose to split a single graph with multiple time series into multiple graphs. 
The split can be made by a variety of criteria, which you choose under Split by.
13. Under Graph options , you can reﬁne the graph by changing the period, the type of graph, the 
legend placement, and the layout.
14. If you're satisﬁed with the explorer widget and the dashboard, choose Save dashboard.
Add or remove a line widget on a CloudWatch 
dashboard
With the line widget, you can compare metrics over periods of time. You also can use the widget's mini-
map zoom feature to inspect sections of line graphs without changing between zoomed-in and zoomed-
out views. The procedures in this section describe how to add and remove a line widget on a CloudWatch 
dashboard. For information about using the widget's mini-map zoom feature with line graphs, see
Zooming in on a line or stacked area graph.
To add a line widget to a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Choose the + symbol, and select Line .
4. Choose Metrics .
5. Choose Browse, and select the metric that you want to graph.
6. Choose Create widget , and then choose Save dashboard.
To remove a line widget from a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. In the upper-right corner of the line widget that you want to remove, choose Widget actions, and 
then choose Delete.
4. Choose Save dashboard.
51Amazon CloudWatch User Guide
Add or remove a number widget 
Add or remove a number widget from a CloudWatch 
dashboard
With the number widget, you can look at the latest metric values and trends as soon as they appear. 
Because the number widget includes the sparkline feature, you can visualize the top and bottom halves 
of metric trends in a single graph. The procedures in this section describe how to add and remove a 
number widget from a CloudWatch dashboard.
Note
Only the new interface supports the sparkline feature. When you create a number widget, the 
sparkline feature is automatically included.
To add a number widget to a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Choose the + symbol, and select Number .
4. In the Browse tab, search or browse for the metric that you want to display.
5. (Optional) To change the color of the sparkline feature, choose Graphed metrics , and select the 
color box next to the metric label. A menu appears where you can choose a diﬀerent color or enter a 
six-digit hex color code to specify a color.
6. (Optional) To turn oﬀ the sparkline feature, choose Options . Under Sparkline , the check box.
7. (Optional) To change your number widget's time range, select one of the predeﬁned time ranges in 
the upper area of the widget. The time ranges span from 1 hour to 1 week (1h, 3h, 12h, 1d, 3d, or
1w).
To set your own time range, choose Custom .
• (Optional) To have this widget keep using this time range that you select, even if the time range 
for the rest of the dashboard is later changed, choose Persist time range.
8. Choose Create widget , and choose Save dashboard.
52Amazon CloudWatch User Guide
Add or remove a gauge widget 
Tip
You can turn oﬀ the sparkline feature from the number widget on the dashboard screen. In 
the upper-right corner of the number widget that you want to modify, choose Widget actions. 
Select Sparkline , and then choose Hide sparkline .
To remove a number widget from a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose the dashboard that contains the 
number widget that you want to delete.
3. In the upper-right corner of the number widget that you want to remove, choose Widget actions, 
and then choose Delete.
4. Choose Save dashboard.
Add or remove a gauge widget from a CloudWatch 
dashboard
With the gauge widget, you can visualize metric values that go between ranges. For example, you can 
use the gauge widget to graph percentages and CPU utilization, so that you can observe and diagnose 
any performance issues that occur. The procedures in this section describe how to add and remove a 
gauge widget from a CloudWatch dashboard.
Note
Only the new interface in the CloudWatch console supports creation of the gauge widget. You 
must set a gauge range when you create this widget.
To add a gauge widget to a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. From the dashboard screen, choose the + symbol, and then select Gauge .
53Amazon CloudWatch User Guide
Add a custom widget to a CloudWatch dashboard
4. Choose Browse, and then select the metric that you want to graph.
5. Choose Options . Under Gauge range , set values for Min and Max. For percentages, such as CPU 
utilization, we recommend that you set the values for Min to 0 and Max to 100.
6. (Optional) To change the color of the gauge widget, choose Graphed metrics  and select the color 
box next to the metric label. A menu appears where you can choose a diﬀerent color or enter a six-
digit hex color code to specify a color.
7. Choose Create widget , and choose Save dashboard.
To remove a gauge widget from a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose the dashboard that contains the gauge 
widget you want to delete.
3. In the upper-right corner of the gauge widget that you want to delete, choose Widget actions, and 
choose Delete.
4. Choose Save dashboard.
Add a custom widget to a CloudWatch dashboard
A custom widget  is a CloudWatch dashboard widget that can call any AWS Lambda function with custom 
parameters. It then displays the returned HTML or JSON. Custom widgets are a simple way to build a 
custom data view on a dashboard. If you can write Lambda code and create HTML, you can create a 
useful custom widget. Additionally, Amazon provides several prebuilt custom widgets that you can create 
without any code.
When you create a Lambda function to use as a custom widget, we strongly recommend that you include 
the preﬁx customWidget  in the function name. This helps you know which of your Lambda functions are 
safe to use when you add custom widgets to your dashboard.
Custom widgets behave like other widgets on your dashboard. They can be refreshed and auto-
refreshed, resized, and moved around. They react to the time range of the dashboard.
If you have set up CloudWatch console cross-account functionality, you can add a custom widget created 
in one account to dashboards in other accounts. For more information, see Cross-account cross-Region 
CloudWatch console (p. 1243 ).
You can also use custom widgets on your own website by using the CloudWatch dashboard sharing 
feature. For more information, see Sharing CloudWatch dashboards (p. 63).
Topics
•Details about custom widgets  (p. 54)
•Security and JavaScript (p. 56)
•Interactivity in the custom widget (p. 56)
•Create a custom widget (p. 58)
•Sample custom widgets  (p. 58)
Details about custom widgets
Custom widgets work as follows:
1.The CloudWatch dashboard calls the Lambda function containing the widget code. It passes in any 
custom parameters that are deﬁned in the widget.
54Amazon CloudWatch User Guide
Add a custom widget to a CloudWatch dashboard
2.The Lambda function returns a string of HTML, JSON, or Markdown. Markdown is returned as JSON in 
the following format:
{"markdown":" markdown content "}
3.The dashboard displays the returned HTML or JSON.
If the function returns HTML, most HTML tags are supported. You can use Cascading Style Sheets (CSS) 
styles and Scalable Vector Graphics (SVG) to build sophisticated views.
The default style of HTML elements such as links and tables follow the styling of CloudWatch 
dashboards. You can customize this style by using inline styles, using the <style> tag. You can also 
deactivate the default styles by including a single HTML element with the class of cwdb-no-default-
styles. The following example deactivates default styles: <div class="cwdb-no-default-
styles"></div> .
Every call by a custom widget to Lambda includes a widgetContext  element with the following 
contents, to provide the Lambda function developer with useful context information.
{ 
    "widgetContext": { 
        "dashboardName": "Name-of-current-dashboard", 
        "widgetId": "widget-16", 
        "accountId": "012345678901", 
        "locale": "en", 
        "timezone": { 
            "label": "UTC", 
            "offsetISO": "+00:00", 
            "offsetInMinutes": 0 
        }, 
        "period": 300, 
        "isAutoPeriod": true, 
        "timeRange": { 
            "mode": "relative", 
            "start": 1627236199729, 
            "end": 1627322599729, 
            "relativeStart": 86400012, 
            "zoom": { 
                "start": 1627276030434, 
                "end": 1627282956521 
             } 
        }, 
        "theme": "light", 
        "linkCharts": true, 
        "title": "Tweets for Amazon website problem", 
        "forms": { 
            "all": {} 
        }, 
        "params": { 
            "original": "param-to-widget" 
        }, 
        "width": 588, 
        "height": 369 
    }
}
Default CSS styling
Custom widgets provide the following default CSS styling elements:
55Amazon CloudWatch User Guide
Add a custom widget to a CloudWatch dashboard
•You can use the CSS class btn to add a button. It turns an anchor (<a>) into a button as in the 
following example:
<a class="btn" href=https://amazon.com”>Open Amazon</a>
•You can use the CSS class btn btn-primary to add a primary button.
•The following elements are styled by default: table, select, headers (h1, h2, and h3) , preformatted 
text (pre), input , and text area.
Using the describe parameter
We strongly recommend that you support the describe  parameter in your functions, even if it just 
returns an empty string. If you don't support it, and it is called in the custom widget, it displays widget 
content as if it was documentation.
If you include the describe  parameter, the Lambda function returns the documentation in Markdown 
format and does nothing else.
When you create a custom widget in the console, after you select the Lambda function a Get 
documentation  button appears. If you choose this button, the function is invoked with the describe
parameter and the function's documentation is returned. If the documentation is well-formatted 
in markdown, CloudWatch parses the ﬁrst entry in the documentation that is surrounded by three 
single backtick characters (```) in YAML. Then, it automatically populates the documentation in the 
parameters. The following is an example of such well-formatted documentation.
``` yaml
echo: <h1>Hello world</h1>
```
Security and JavaScript
For security reasons, JavaScript is not allowed in the returned HTML. Removing the JavaScript prevents 
permission escalation issues, where the writer of the Lambda function injects code that could run with 
higher permissions than the user viewing the widget on the dashboard.
If the returned HTML contains any JavaScript code or other known security vulnerabilities, it is cleaned 
from the HTML before it is rendered on the dashboard. For example, the <iframe>  and <use>  tags are 
not allowed and are removed.
Custom Widgets won't run by default in a dashboard. Instead, you must explicitly allow a custom widget 
to run if you trust the Lambda function that it invokes. You can choose to allow it once or allow always, 
for both individual widgets and entire dashboard. You can also deny permission for individual widgets 
and the entire dashboard.
Interactivity in the custom widget
Even though JavaScript is not allowed, there are other ways to allow interactivity with the returned 
HTML.
•Any element in the returned HTML can be tagged with special conﬁguration in a <cwdb-action>
tag, which can display information in pop-ups, ask for conﬁrmation on clicks, and call any Lambda 
function when that element is chosen. For example, you can deﬁne buttons that call any AWS API 
using a Lambda function. The returned HTML can be set to either replace the existing Lambda widget's 
content, or display inside a modal.
•The returned HTML can include links that open new consoles, open other customer pages, or load 
other dashboards.
56Amazon CloudWatch User Guide
Add a custom widget to a CloudWatch dashboard
•The HTML can include the title attribute for an element, which gives additional information if the 
user hovers over that element.
•The element can include CSS selectors, such as :hover, which can invoke animations or other CSS 
eﬀects. You can also show or hide elements in the page.
<cwdb-action> deﬁnition and usage
The <cwdb-action>  element deﬁnes a behavior on the immediately previous element. The content 
of the <cwdb-action>  is either HTML to display or a JSON block of parameters to pass to a Lambda 
function.
The following is an example of a <cwdb-action>  element.
<cwdb-action  
     action=" call|html"  
     confirmation=" message"  
     display=" popup|widget"  
     endpoint="<lambda ARN>"  
     event=" click|dblclick |mouseenter ">   
  
     html | params in JSON
</cwdb-action>
•action— Valid values are call, which calls a Lambda function, and html, which displays any HTML 
contained within <cwdb-action> . The default is html .
•conﬁrmation— Displays a conﬁrmation message that must be acknowledged before the action is 
taken, allowing the customer to cancel.
•display— Valid values are popup  and widget, which replaces the content of the widget itself. The 
default is widget .
•endpoint — The Amazon Resource Name (ARN) of the Lambda function to call. This is required if
action  is call .
•event— Deﬁnes the event on the previous element that invokes the action. Valid values are click ,
dblclick , and mouseenter . The mouseenter  event can be used only in combination with the html
action. The default is click .
Examples
The following is an example of how to use the <cwdb-action>  tag to create a button that reboots an 
Amazon EC2 instance using a Lambda function call. It displays the success or failure of the call in a pop-
up.
<a class="btn">Reboot Instance</a>
<cwdb-action action="call" endpoint="arn:aws:lambda:us-
east-1:123456:function:rebootInstance" display="popup">   
       { "instanceId": "i-342389adbfef" }
</cwdb-action> 
The next example displays more information in a pop-up.
<a>Click me for more info in popup</a>
<cwdb-action display="popup">  
   <h1>Big title</h1> 
   More info about <b>something important</b>.
</cwdb-action> 
This example is a Next button that replaces the content of a widget with a call to a Lambda function.
57Amazon CloudWatch User Guide
Add a custom widget to a CloudWatch dashboard
<a class="btn btn-primary">Next</a>
<cwdb-action action="call" endpoint="arn:aws:lambda:us-east-1:123456:function:nextPage">  
   { "pageNum": 2 }
</cwdb-action> 
Create a custom widget
To create a custom widget, you can use one of the samples provided by AWS, or you can create your 
own. The AWS samples include samples in both JavaScript and Python, and are created by a AWS 
CloudFormation stack. For a list of samples, see Sample custom widgets  (p. 58).
To create a custom widget in a CloudWatch dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Choose the + symbol.
4. Choose Custom widget .
5. Use one of the following methods:
• To use a sample custom widget provided by AWS, do the following:
a. Select the sample in the dropdown box.
The AWS CloudFormation console launches in a new browser. In the AWS CloudFormation 
console, do the following:
b. (Optional) Customize the AWS CloudFormation stack name.
c. Make selections for any parameters used by the sample.
d. Select I acknowledge that AWS CloudFormation might create IAM resources, and choose
Create stack .
• To create your own custom widget provided by AWS, do the following:
a. Choose Next.
b. Choose to either select your Lambda function from a list, or enter its Amazon Resource 
Name (ARN). If you select it from a list, also specify the Region where the function is and 
the version to use.
c. For Parameters, make selections for any parameters used by the function.
d. Enter a title for the widget.
e. For Update on , conﬁgure when the widget should be updated (when the Lambda function 
should be called again). This can be one or more of the following: Refresh to update it 
when the dashboard auto-refreshes, Resize to update it whenever the widget is resized, or
Time Range  to update it whenever the dashboard's time range is adjusted, including when 
graphs are zoomed into.
f.If you are satisﬁed with the preview, choose Create widget .
Sample custom widgets
AWS provides sample custom widgets in both JavaScript and Python. You can create these sample 
widgets by using the link for each widget in this list. Alternatively, you can create and customize a widget 
by using the CloudWatch console. The links in this list open an AWS CloudFormation console and use an 
AWS CloudFormation quick-create link to create the custom widget.
You can also access the custom widget samples on GitHub .
Following this list, complete examples of the Echo widget are shown for each language.
58Amazon CloudWatch User Guide
Add a custom widget to a CloudWatch dashboard
JavaScript
Sample custom widgets in JavaScript
•Echo – A basic echoer that you can use to test how HTML appears in a custom widget, without 
having to write a new widget.
•Hello world – A very basic starter widget.
•Custom widget debugger  – A debugger widget that displays useful information about the Lambda 
runtime environment.
•Query CloudWatch Logs Insights – Run and edit CloudWatch Logs Insights queries.
•Run Amazon Athena queries – Run and edit Athena queries.
•Call AWS API – Call any read-only AWS API and display the results in JSON format.
•Fast CloudWatch bitmap graph – Render CloudWatch graphs using on the server side, for fast 
display.
•Text widget from CloudWatch dashboard – Displays the ﬁrst text widget from the speciﬁed 
CloudWatch dashboard.
•CloudWatch metric data as a table – Displays raw CloudWatch metric data in a table.
•Amazon EC2 table – Displays the top EC2 instances by CPU utilization. This widget also includes a 
Reboot button, which is disabled by default.
•AWS CodeDeploy deployments – Displays CodeDeploy deployments.
•AWS Cost Explorer report – Displays a report on the cost of each AWS service for a selected time 
range.
•Display content of external URL – Displays the content of an externally accessible URL.
•Display an Amazon S3 object – Displays an object in an Amazon S3 bucket in your account.
•Simple SVG pie chart – Example of a graphical SVG-based widget.
Python
Sample custom widgets in Python
•Echo – A basic echoer which you can use to test how HTML appears in a custom widget, without 
having to write a new widget.
•Hello world – A very basic starter widget.
•Custom widget debugger  – A debugger widget that displays useful information about the Lambda 
runtime environment.
•Call AWS API – Call any read-only AWS API and display the results in JSON format.
•Fast CloudWatch bitmap graph – Render CloudWatch graphs using on the server side, for fast 
display.
•Send dashboard snapshot by email – Take a snapshot of the current dashboard and send it to 
email recipients.
•Send dashboard snapshot to Amazon S3 – Take a snapshot of the current dashboard and store it 
in Amazon S3.
•Text widget from CloudWatch dashboard – Displays the ﬁrst text widget from the speciﬁed 
CloudWatch dashboard.
•Display content of external URL – Displays the content of an externally accessible URL.
•RSS reader – Displays RSS feeds.
•Display an Amazon S3 object – Displays an object in an Amazon S3 bucket in your account.
•Simple SVG pie chart – Example of a graphical SVG-based widget.
Echo widget in JavaScript
59Amazon CloudWatch User Guide
Add a custom widget to a CloudWatch dashboard
The following is the Echo sample widget in JavaScript.
const DOCS = `
## Echo
A basic echo script. Anything passed in the \`\`\`echo\`\`\` parameter is returned as the 
 content of the custom widget.
### Widget parameters
Param | Description
---|---
**echo** | The content to echo back 
  
### Example parameters
\`\`\` yaml
echo: <h1>Hello world</h1>
\`\`\`
`; 
  
exports.handler = async (event) => { 
    if (event.describe) { 
        return DOCS;    
    } 
     
    let widgetContext = JSON.stringify(event.widgetContext, null, 4); 
    widgetContext = widgetContext.replace(/</g, '&lt;'); 
    widgetContext = widgetContext.replace(/>/g, '&gt;'); 
     
    return `${event.echo || ''}<pre>${widgetContext}</pre>`;
};
Echo widget in Python
The following is the Echo sample widget in Python.
import json 
      
DOCS = """
## Echo
A basic echo script. Anything passed in the ```echo``` parameter is returned as the content 
 of the custom widget.
### Widget parameters
Param | Description
---|---
**echo** | The content to echo back 
      
### Example parameters
``` yaml
echo: <h1>Hello world</h1>
```""" 
  
def lambda_handler(event, context): 
    if 'describe' in event: 
        return DOCS 
         
    echo = event.get('echo', '') 
    widgetContext = event.get('widgetContext') 
    widgetContext = json.dumps(widgetContext, indent=4) 
    widgetContext = widgetContext.replace('<', '&lt;') 
    widgetContext = widgetContext.replace('>', '&gt;') 
         
    return f'{echo}<pre>{widgetContext}</pre>'
Echo widget in Java
The following is the Echo sample widget in Java.
60Amazon CloudWatch User Guide
Add or remove a text widget 
package example; 
  
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler; 
  
import com.google.gson.Gson;
import com.google.gson.GsonBuilder; 
  
public class Handler implements RequestHandler<Event, String>{ 
  
  static String DOCS = "" 
    + "## Echo\n" 
    + "A basic echo script. Anything passed in the ```echo``` parameter is returned as the 
 content of the custom widget.\n" 
    + "### Widget parameters\n" 
    + "Param | Description\n" 
    + "---|---\n" 
    + "**echo** | The content to echo back\n\n" 
    + "### Example parameters\n" 
    + "```yaml\n" 
    + "echo: <h1>Hello world</h1>\n" 
    + "```\n"; 
  
  Gson gson = new GsonBuilder().setPrettyPrinting().create(); 
  
  @Override 
  public String handleRequest(Event event, Context context) { 
  
    if (event.describe) { 
      return DOCS; 
    } 
      
    return (event.echo != null ? event.echo : "") + "<pre>" + 
 gson.toJson(event.widgetContext) + "</pre>"; 
  }
} 
      
class Event { 
  
    public boolean describe; 
    public String echo; 
    public Object widgetContext; 
  
    public Event() {} 
  
    public Event(String echo, boolean describe, Object widgetContext) { 
        this.describe = describe; 
        this.echo = echo; 
        this.widgetContext = widgetContext; 
    }
}
Add or remove a text widget from a CloudWatch 
dashboard
A text widget contains a block of text in Markdown format. You can add, edit, or remove text widgets 
from your CloudWatch dashboard.
To add a text widget to a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
61Amazon CloudWatch User Guide
Add or remove an alarm widget 
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Choose the + symbol.
4. Choose Text.
5. For Markdown, add and format your text using Markdown and choose Create widget .
6. To make the text widget transparent, choose Transparent background.
7. Choose Save dashboard.
To edit a text widget on a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Hover over the upper-right corner of the text block and choose Widget actions. Then, choose Edit.
4. Update the text as needed and choose Update widget .
5. Choose Save dashboard.
To remove a text widget from a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Hover over the upper-right corner of the text block and choose Widget actions. Then, choose
Delete.
4. Choose Save dashboard.
Add or remove an alarm widget from a CloudWatch 
dashboard
To add an alarm widget to a dashboard, choose one of the following options:
•Add a single alarm in a widget, which displays the graph of the alarm's metric and also displays the 
alarm status.
•Add an alarm status widget , which displays the status of multiple alarms in a grid. Only the alarm 
names and current status are displayed, Graphs are not displayed. You can include up to 100 alarms in 
one alarm status widget.
To add a single alarm, including its graph, to a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , select the alarm to add, and then choose Add to Dashboard .
3. Select a dashboard, choose a widget type (Line , Stacked area, or Number ), and then choose Add to 
dashboard .
4. To see your alarm on the dashboard, choose Dashboards  in the navigation pane and select the 
dashboard.
5. (Optional) To temporarily make an alarm graph larger, select the graph.
6. (Optional) To change the widget type, hover over the title of the graph, choose Widget actions, and 
then choose Widget type.
62Amazon CloudWatch User Guide
Link and unlink graphs
To add an alarm status widget to a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Choose the + symbol.
4. Choose Alarm status .
5. Select the check boxes next to the alarms that you want to add to the widget, and then choose
Create widget .
6. Choose Add to dashboard .
To remove an alarm widget from a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Hover over the widget, choose Widget actions, and then choose Delete.
4. Choose Save dashboard. If you attempt to navigate away from the dashboard before you save your 
changes, you're prompted to either save or discard your changes.
Link and unlink graphs on a CloudWatch dashboard
You can link the graphs on your dashboard together, so that when you zoom in or zoom out on one 
graph, the other graphs zoom in or zoom out at the same time. You can unlink graphs to limit zoom to 
one graph.
To link the graphs on a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Choose Actions and then Link graphs .
To unlink the graphs on a dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Clear Actions and then Link graphs .
Sharing CloudWatch dashboards
You can share your CloudWatch dashboards with people who do not have direct access to your AWS 
account. This enables you to share dashboards across teams, with stakeholders, and with people external 
to your organization. You can even display dashboards on big screens in team areas, or embed them in 
Wikis and other webpages.
Warning
All people who you share the dashboard with are granted the permissions listed in Permissions 
that are granted to people who you share the dashboard with (p. 65) for the account. If 
you share the dashboard publicly, then everyone who has the link to the dashboard has these 
permissions.
The cloudwatch:GetMetricData  and ec2:DescribeTags  permissions cannot be scoped 
down to speciﬁc metrics or EC2 instances, so the people with access to the dashboard can query 
all CloudWatch metrics and the names and tags of all EC2 instances in the account.
63Amazon CloudWatch User Guide
Permissions required to share a dashboard
When you share dashboards, you can designate who can view the dashboard in three ways:
•Share a single dashboard and designate speciﬁc email addresses of the people who can view 
the dashboard. Each of these users creates their own password that they must enter to view the 
dashboard.
•Share a single dashboard publicly, so that anyone who has the link can view the dashboard.
•Share all the CloudWatch dashboards in your account and specify a third-party single sign-on (SSO) 
provider for dashboard access. All users who are members of this SSO provider's list can access all the 
dashboards in the account. To enable this, you integrate the SSO provider with Amazon Cognito. The 
SSO provider must support Security Assertion Markup Language (SAML). For more information about 
Amazon Cognito, see  What is Amazon Cognito?
Important
Do not modify resource names and identiﬁers that are created by the dashboard sharing 
process. This includes Amazon Cognito and IAM resources. Modifying these resources can cause 
unexpected and incorrect functionality of shared dashboards.
Note
If you share a dashboard that has metric widgets with alarm annotations, the people that 
you share the dashboard with will not see those widgets. They will instead see a blank widget 
with text saying that the widget is not available. You will still see metric widgets with alarm 
annotations when you view the dashboard yourself.
Permissions required to share a dashboard
To be able to share dashboards using any of the following methods and to see which dashboards have 
already been shared, you must be signed on as a user or with an IAM role that has certain permissions.
To be able to share dashboards, your user or IAM role must include the permissions included in the 
following policy statement:
{ 
    "Effect": "Allow", 
    "Action": [ 
        "iam:CreateRole", 
        "iam:CreatePolicy", 
        "iam:AttachRolePolicy", 
        "iam:PassRole" 
    ], 
    "Resource": [ 
        "arn:aws:iam::*:role/service-role/CWDBSharing*", 
        "arn:aws:iam::*:policy/*" 
    ]
},
{ 
    "Effect": "Allow", 
    "Action": [ 
        "cognito-idp:*", 
        "cognito-identity:*", 
    ], 
    "Resource": [ 
        "*" 
    ]
},
{ 
    "Effect": "Allow", 
    "Action": [ 
        "cloudwatch:GetDashboard", 
    ], 
    "Resource": [ 
64Amazon CloudWatch User Guide
Permissions that are granted to people 
who you share the dashboard with
        "*" 
        // or the ARNs of dashboards that you want to share 
    ]
}
To be able to see which dashboards are shared, but not be able to share dashboards, a user or an IAM 
role can include a policy statement similar to the following:
{ 
    "Effect": "Allow", 
    "Action": [ 
        "cognito-idp:*", 
        "cognito-identity:*" 
    ], 
    "Resource": [ 
        "*" 
    ]
},
{ 
    "Effect": "Allow", 
    "Action": [ 
        "cloudwatch:ListDashboards", 
    ], 
    "Resource": [ 
        "*"  
    ]
}
Permissions that are granted to people who you 
share the dashboard with
When you share a dashboard, CloudWatch creates an IAM role in the account which gives the following 
permissions to the people who you share the dashboard with:
•cloudwatch:GetInsightRuleReport
•cloudwatch:GetMetricData
•cloudwatch:DescribeAlarms
•ec2:DescribeTags
Warning
All people who you share the dashboard with are granted these permissions for the account. If 
you share the dashboard publicly, then everyone who has the link to the dashboard has these 
permissions.
The cloudwatch:GetMetricData  and ec2:DescribeTags  permissions cannot be scoped 
down to speciﬁc metrics or EC2 instances, so the people with access to the dashboard can query 
all CloudWatch metrics and the names and tags of all EC2 instances in the account.
When you share a dashboard, by default the permissions that CloudWatch creates restrict access to only 
the alarms and Contributor Insights rules that are on the dashboard when it is shared. If you add new 
alarms or Contributor Insights rules to the dashboard and want them to also be seen by the people who 
you shared the dashboard with, you must update the policy to allow these resources.
Share a single dashboard with speciﬁc users
Use the steps in this section to share a dashboard with speciﬁc email addresses that you choose.
65Amazon CloudWatch User Guide
Share a single dashboard publicly
Note
By default, any CloudWatch Logs widgets on the dashboard are not visible to people who you 
share the dashboard with. For more information, see Allowing people that you share with to see 
logs table widgets  (p. 71).
By default, any composite alarm widgets on the dashboard are not visible to people who you 
share the dashboard with. For more information, see Allowing people that you share with to see 
composite alarms (p. 70).
To share a dashboard with speciﬁc users
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards .
3. Choose the name of your dashboard.
4. Choose Actions, Share dashboard .
5. Next to Share your dashboard and require a username and password, choose Start sharing.
6. Under Add email addresses , enter the email addresses that you want to share the dashboard with.
7. When you have all the email addresses entered, read the agreement and select the conﬁrmation box. 
Then choose Preview policy.
8. Conﬁrm that the resources that will be shared are what you want, and choose Conﬁrm and generate 
shareable link.
9. On the next page, choose Copy link to clipboard. You can then paste this link into email and send 
it to the invited users. They automatically receive a separate email with their user name and a 
temporary password to use to connect to the dashboard.
Share a single dashboard publicly
Follow the steps in this section to share a dashboard publicly. This can be useful to display the dashboard 
on a big screen in a team room, or embed it in a Wiki page.
Important
Sharing a dashboard publicly makes it accessible to anyone who has the link, with no 
authentication. Do this only for dashboards that do not contain sensitive information.
Note
By default, any CloudWatch Logs widgets on the dashboard are not visible to people who you 
share the dashboard with. For more information, see Allowing people that you share with to see 
logs table widgets  (p. 71).
By default, any composite alarm widgets on the dashboard are not visible to people who you 
share the dashboard with. For more information, see Allowing people that you share with to see 
composite alarms (p. 70).
To share a dashboard publicly
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards .
3. Choose the name of your dashboard.
4. Choose Actions, Share dashboard .
5. Next to Share your dashboard publicly, choose Start sharing.
6. Enter Confirm in the text box.
7. Read the agreement and select the conﬁrmation box. Then choose Preview policy.
8. Conﬁrm that the resources that will be shared are what you want, and choose Conﬁrm and generate 
shareable link.
66Amazon CloudWatch User Guide
Share all CloudWatch dashboards 
in the account by using SSO
9. On the next page, choose Copy link to clipboard. You can then share this link. Anyone you share the 
link with can access the dashboard, without providing credentials.
Share all CloudWatch dashboards in the account by 
using SSO
Use the steps in this section to share all the dashboards in your account with users by using single sign-
on (SSO).
Note
By default, any CloudWatch Logs widgets on the dashboard are not visible to people who you 
share the dashboard with. For more information, see Allowing people that you share with to see 
logs table widgets  (p. 71).
By default, any composite alarm widgets on the dashboard are not visible to people who you 
share the dashboard with. For more information, see Allowing people that you share with to see 
composite alarms (p. 70).
To share your CloudWatch dashboards with users who are in an SSO provider's list
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards .
3. Choose the name of your dashboard.
4. Choose Actions, Share dashboard .
5. Choose Go to CloudWatch Settings.
6. If the SSO provider that you want isn't listed in Available SSO providers, choose Manage SSO 
providers and follow the instructions in Set up SSO for CloudWatch dashboard sharing (p. 67).
Then return to the CloudWatch console and refresh the browser. The SSO provider that you enabled 
should now appear in the list.
7. Choose the SSO provider that you want in the Available SSO providers list.
8. Choose Save changes.
Set up SSO for CloudWatch dashboard sharing
To set up dashboard sharing through a third-party single sign-on provider that supports SAML, follow 
these steps.
Important
We strongly recommend that you do not share dashboards using a non-SAML SSO provider. 
Doing so causes a risk of inadvertently allowing third parties to access your account's 
dashboards.
To set up an SSO provider to enable dashboard sharing
1. Integrate the SSO provider with Amazon Cognito. For more information, see  Integrating Third-Party 
SAML Identity Providers with Amazon Cognito User Pools.
2. Download the metadata XML ﬁle from your SSO provider.
3. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
4. In the navigation pane, choose Settings.
5. In the Dashboard sharing  section, choose Conﬁgure .
6. Choose Manage SSO providers.
67Amazon CloudWatch User Guide
See how many of your dashboards are shared
This opens the Amazon Cognito console in the US East (N. Virginia) Region (us-east-1). If you don't 
see any User Pools, the Amazon Cognito console might have opened in a diﬀerent Region. If so, 
change the Region to US East (N. Virginia) us-east-1 and proceed with the next steps.
7. Choose the CloudWatchDashboardSharing pool.
8. In the navigation pane, choose Identity providers.
9. Choose SAML .
10. Enter a name for your SSO provider in Provider name.
11. Choose Select ﬁle, and select the metadata XML ﬁle that you downloaded in step 1.
12. Choose Create provider.
See how many of your dashboards are shared
You can use the CloudWatch console to see how many of your CloudWatch dashboards are currently 
being shared with others.
To see how many of your dashboards are being shared
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Settings.
3. The Dashboard sharing  section displays how many dashboards are shared.
4. To see which dashboards are shared, choose number  dashboards shared  under Username and 
password and under Public dashboards.
See which of your dashboards are shared
You can use the CloudWatch console to see which of your dashboards are currently being shared with 
others.
To see which of your dashboards are being shared
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards .
3. In the list of dashboards, see the Share  column. Dashboards that have the icon in this column ﬁlled 
in are currently being shared.
4. To see which users a dashboard is being shared with, choose the dashboard name, and then choose
Actions, Share dashboard .
The Share dashboard dashboard name  page displays how the dashboard is being shared. If you 
want, you can stop sharing the dashboard by choosing Stop sharing .
Stop sharing one or more dashboards
You can stop sharing a single shared dashboard, or stop sharing all shared dashboards at once.
To stop sharing a single dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards .
68Amazon CloudWatch User Guide
Review shared dashboard permissions 
and change permission scope
3. Choose the name of the shared dashboard.
4. Choose Actions, Share dashboard .
5. Choose Stop sharing .
6. In the conﬁrmation box, choose Stop sharing .
To stop sharing all shared dashboards
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Settings.
3. In the Dashboard sharing  section, choose Stop sharing all dashboards .
4. In the conﬁrmation box, choose Stop sharing all dashboards .
Review shared dashboard permissions and change 
permission scope
Use the steps in this section if you want to review the permissions of the users of your shared 
dashboards, or change the scope of shared dashboard permissions.
To review shared dashboard permissions
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards .
3. Choose the name of the shared dashboard.
4. Choose Actions, Share dashboard .
5. Under Resources, choose IAM Role.
6. In the IAM console, choose the displayed policy.
7. (Optional) To limit which alarms that shared dashboard users can see, choose Edit policy and move 
the cloudwatch:DescribeAlarms  permission from its current position to a new Allow  statement 
that lists the ARNs of only the alarms that you want to be seen by shared dashboard users. See the 
following example.
{ 
   "Effect": "Allow", 
    "Action": "cloudwatch:DescribeAlarms", 
    "Resource": [ 
        "AlarmARN1", 
        "AlarmARN2" 
    ]
}
If you do this, be sure to remove the cloudwatch:DescribeAlarms  permission from a section of 
the current policy that looks like this:
{  
   "Effect": "Allow", 
    "Action": [ 
        "cloudwatch:GetInsightRuleReport", 
        "cloudwatch:GetMetricData", 
        "cloudwatch:DescribeAlarms", 
        "ec2:DescribeTags" 
    ], 
69Amazon CloudWatch User Guide
Allowing people that you share 
with to see composite alarms
    "Resource": "*"
}
8. (Optional) To limit the scope of what Contributor Insights rules that shared dashboard users can see, 
choose Edit policy and move the cloudwatch:GetInsightRuleReport  from its current position 
to a new Allow statement that lists the ARNs of only the Contributor Insights rules that you want to 
be seen by shared dashboard users. See the following example.
{ 
   "Effect": "Allow", 
    "Action": "cloudwatch:GetInsightRuleReport", 
    "Resource": [ 
        "PublicContributorInsightsRuleARN1", 
        "PublicContributorInsightsRuleARN2" 
    ]
}
If you do this, be sure to remove cloudwatch:GetInsightRuleReport  from a section of the 
current policy that looks like this:
{ 
            "Effect": "Allow", 
            "Action": [ 
                "cloudwatch:GetInsightRuleReport", 
                "cloudwatch:GetMetricData", 
                "cloudwatch:DescribeAlarms", 
                "ec2:DescribeTags" 
            ], 
            "Resource": "*" 
        }
Allowing people that you share with to see composite 
alarms
When you share a dashboard, by default the composite alarm widgets on the dashboard are not visible 
to the people who you share the dashboard with. For composite alarm widgets to be visible, you need to 
add a DescribeAlarms: *  permission to the dashboard sharing policy. That permission would look like 
this:
{ 
    "Effect": "Allow", 
    "Action": "cloudwatch:DescribeAlarms", 
    "Resource": "*"
}
Warning
The preceding policy statement give access to all alarms in the account. To reduce the scope 
of cloudwatch:DescribeAlarms , you must use a Deny statement. You can add a Deny
statement to the policy and specify the ARNs of the alarms that you want to lock down. That 
deny statement should look similar to the following:
{ 
    "Effect": "Allow", 
    "Action": "cloudwatch:DescribeAlarms", 
    "Resource": "*"
},
70Amazon CloudWatch User Guide
Allowing people that you share 
with to see logs table widgets
{    
    "Effect": "Deny", 
    "Action": "cloudwatch:DescribeAlarms", 
    "Resource": [ 
        "SensitiveAlarm1ARN", 
        "SensitiveAlarm1ARN" 
    ]
}
Allowing people that you share with to see logs table 
widgets
When you share a dashboard, by default the CloudWatch Logs Insights widgets that are on the 
dashboard are not visible to the people who you share the dashboard with. This aﬀects both CloudWatch 
Logs Insights widgets that exist now and any that are added to the dashboard after you share it.
If you want these people to be able to see CloudWatch Logs widgets, you must add permissions to the 
IAM role for dashboard sharing.
To allow the people that you share a dashboard with to see the CloudWatch Logs widgets
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards .
3. Choose the name of the shared dashboard.
4. Choose Actions, Share dashboard .
5. Under Resources, choose IAM Role.
6. In the IAM console, choose the displayed policy.
7. Choose Edit policy and add the following statement. In the new statement, we recommend that you 
specify the ARNs of only the log groups that you want shared. See the following example.
{ 
            "Effect": "Allow", 
            "Action": [ 
                "logs:FilterLogEvents", 
                "logs:StartQuery", 
                "logs:StopQuery", 
                "logs:GetLogRecord" 
            ], 
            "Resource": [ 
                " SharedLogGroup1ARN ", 
                " SharedLogGroup2ARN " 
           ] 
        },
8. Choose Save Changes.
If your IAM policy for dashboard sharing already includes those four permissions with * as the resource, 
we strongly recommend that you change the policy and specify only the ARNs of the log groups that you 
want shared. For example, if your Resource  section for these permissions was the following:
"Resource": "*"
Change the policy to specify only the ARNs of the log groups that you want shared, as in the following 
example:
71Amazon CloudWatch User Guide
Allowing people that you share with to see custom widgets
"Resource": [ 
  "SharedLogGroup1ARN ", 
  "SharedLogGroup2ARN "
]
Allowing people that you share with to see custom 
widgets
When you share a dashboard, by default the custom widgets that are on the dashboard are not visible to 
the people who you share the dashboard with. This aﬀects both custom widgets that exist now and any 
that are added to the dashboard after you share it.
If you want these people to be able to see custom widgets, you must add permissions to the IAM role for 
dashboard sharing.
To allow the people that you share a dashboard with to see the custom widgets
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards .
3. Choose the name of the shared dashboard.
4. Choose Actions, Share dashboard .
5. Under Resources, choose IAM Role.
6. In the IAM console, choose the displayed policy.
7. Choose Edit policy and add the following statement. In the new statement, we recommend that you 
specify the ARNs of only the Lambda functions that you want shared. See the following example.
{ 
  "Sid": "Invoke", 
  "Effect": "Allow", 
  "Action": [ 
      "lambda:InvokeFunction" 
  ], 
  "Resource": [ 
    "LambdaFunction1ARN", 
    "LambdaFunction2ARN" 
  ] 
 }
8. Choose Save Changes.
If your IAM policy for dashboard sharing already includes that permission with * as the resource, we 
strongly recommend that you change the policy and specify only the ARNs of the Lambda functions that 
you want shared. For example, if your Resource  section for these permissions was the following:
"Resource": "*"
Change the policy to specify only the ARNs of the custom widgets that you want shared, as in the 
following example:
"Resource": [ 
  "LambdaFunction1ARN ", 
  "LambdaFunction2ARN "
]
72Amazon CloudWatch User Guide
Use live data
Use live data
You can choose whether your metric widgets display live data . Live data is data published within the last 
minute that has not been fully aggregated.
•If live data is turned oﬀ, only data points with an aggregation period of at least one minute in the past 
are shown. For example, when using 5-minute periods, the data point for 12:35 would be aggregated 
from 12:35 to 12:40, and displayed at 12:41.
•If live data is turned on, the most recent data point is shown as soon as any data is published in the 
corresponding aggregation interval. Each time you refresh the display, the most recent data point may 
change as new data within that aggregation period is published. If you use a cumulative statistic such 
as Sum  or Sample Count, using live data may result in a dip at the end of your graph.
You can choose to enable live data for a whole dashboard, or for individual widgets on the dashboard.
To choose whether to use live data on your entire dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. To permanently turn live data on or oﬀ for all widgets on the dashboard, do the following:
a. Choose Actions, Settings, Bulk update live data.
b. Choose Live Data on or Live Data oﬀ, and choose Set.
4. To temporarily override the live data settings of each widget, choose Actions. Then, under
Overrides, next to Live data, do one of the following:
•Choose On to temporarily turn on live data for all widgets.
•Choose Oﬀ to temporarily turn oﬀ live data for all widgets.
•Choose Do not override to preserve each widget's live data setting.
To choose whether to use live data on a single widget
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Select a widget, and choose Actions, Edit.
4. Choose the Graph options  tab.
5. Select or clear the check box under Live Data.
Viewing an animated dashboard
You can view an animated dashboard that replays CloudWatch metric data that was captured over time. 
This can help you see trends, make presentations, or analyze issues after they occur.
Animated widgets in the dashboard include line widgets, stacked area widgets, number widgets, and 
metrics explorer widgets. Pie graphs, bar charts, text widgets, and logs widgets are displayed in the 
dashboard but are not animated.
To view an animated dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards .
73Amazon CloudWatch User Guide
Add a dashboard to your favorites list 
3. Choose the name of the dashboard.
4. Choose Actions, Replay dashboard.
5. (Optional) By default, when you start the animation, it appears as a sliding window. If you want the 
animation to appear as a point-by-point animation instead, choose the magnifying glass icon while 
the animation is paused and reset the zoom.
6. To start the animation, choose the Play button. You can also choose the back and forward buttons 
to move to other points in time.
7. (Optional) To change the time window for the animation, choose the calendar and select the time 
period.
8. To change the speed of the animation, choose Auto speed  and select the new speed.
9. When you are ﬁnished, choose Exit animate .
Add a CloudWatch dashboard to your favorites list
In the CloudWatch console, you can add dashboards, alarms, and log groups to a favorites list. You 
can access the favorites list from the navigation pane. The following procedure describes how to add a 
dashboard to the favorites list.
To add a dashboard to the favorites list
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards .
3. From the list of dashboards, select the star symbol next to the name of the dashboard that you want 
to favorite.
• (Optional) You also can favorite a dashboard by selecting a dashboard from the list and 
choosing the star symbol next to the dashboard name.
4. To access the favorites list, choose Favorites and recents in the navigation pane. The menu contains 
two columns. One contains your favorite dashboards, alarms, and log groups, and the other column 
contains the dashboards, alarms, and log groups that you recently visited.
Tip
You can favorite dashboards, as well as alarms and log groups, from the Favorites and recents
menu in the CloudWatch console navigation pane. Under the Recently visited column, hover 
over the dashboard that you want to favorite, and choose the star symbol next to it.
Change the period override setting or refresh 
interval for the CloudWatch dashboard
You can specify how the period setting of graphs added to this dashboard are retained or modiﬁed.
To change the period override options
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. Choose Actions.
3. Under Period override, choose one of the following:
•Choose Auto  to have the period of the metrics on each graph automatically adapt to the 
dashboard's time range.
74Amazon CloudWatch User Guide
Change the time range or time zone format
•Choose Do not override to ensure that the period setting of each graph is always obeyed.
•Choose one of the other options to cause graphs added to the dashboard to always adapt that 
chosen time as their period setting.
The Period override always reverts to Auto  when the dashboard is closed or the browser is 
refreshed. Diﬀerent settings for Period override can't be saved.
You can change how often the data on your CloudWatch dashboard is refreshed or set it to automatically 
refresh.
To change the dashboard refresh interval
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. On the Refresh options menu (upper-right corner), choose 10 Seconds, 1 Minute , 2 Minutes , 5 
Minutes , or 15 Minutes .
To automatically refresh the dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. Choose Refresh options and then Auto refresh .
Change the time range or time zone format of a 
CloudWatch dashboard
You can change the time range to display dashboard data over minutes, hours, days, or weeks. You also 
can change the time zone format to display dashboard data in UTC or local time. Local time is the time 
zone that's speciﬁed in your computer's operating system.
Note
If you create a dashboard with graphs that contain 100 or more high-resolution metrics, we 
recommend that you don't set the time range to longer than 1 hour. For more information, see
High-resolution metrics (p. 176).
New console
To change the dashboard time range
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. From the dashboard screen, do one of the following:
• In the upper area of the dashboard, select one of the predeﬁned time ranges. These span 
from 1 hour to 1 week (1h, 3h, 12h, 1d, or 1w).
• Alternatively, you can choose one of the following custom time range options:
•Choose Custom , and then choose the Relative tab. Choose a time range from 1 minute to 
15 months.
•Choose Custom , and then choose the Absolute  tab. Use the calendar or text ﬁelds to 
specify your time range.
75Amazon CloudWatch User Guide
Change the time range or time zone format
Tip
If the aggregation period is set to Auto  when you change the time range of a graph, 
CloudWatch might change the period. To set the period manually, choose the Actions
dropdown, and then choose Period override.
To change the dashboard time zone format
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. In the upper area of the dashboard, choose Custom .
4. In the upper-right corner of the box that appears, select UTC or Local time  from the dropdown.
5. Choose Apply .
Old console
To change the dashboard time range
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. From the dashboard screen, do one of the following:
• In the upper area of the dashboard, select one of the predeﬁned time ranges. These span 
from 1 hour to 1 week (1h, 3h, 12h, 1d, 3d, or 1w).
• Alternatively, you can choose one of the following custom time range options:
•Choose the custom  dropdown, and then choose the Relative tab. Select one of the 
predeﬁned ranges, which span from 1 minute to 15 months.
•Choose the custom  dropdown, and then choose the Absolute  tab. Use the calendar or 
text ﬁelds to specify your time range.
Tip
If the aggregation period is set to Auto  when you change the time range of a graph, 
CloudWatch might change the period. To set the period manually, choose the Actions
dropdown, and then choose Period override.
To change the dashboard time zone format
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards , and then choose a dashboard.
3. In the upper-right corner of the dashboard screen, choose the Custom  dropdown.
4. In the upper-right corner of the box that appears, select UTC or Local timezone from the 
dropdown.
76Amazon CloudWatch User Guide
Basic monitoring and detailed monitoring
Use Amazon CloudWatch metrics
Metrics are data about the performance of your systems. By default, many services provide free metrics 
for resources (such as Amazon EC2 instances, Amazon EBS volumes, and Amazon RDS DB instances). You 
can also enable detailed monitoring for some resources, such as your Amazon EC2 instances, or publish 
your own application metrics. Amazon CloudWatch can load all the metrics in your account (both AWS 
resource metrics and application metrics that you provide) for search, graphing, and alarms.
Metric data is kept for 15 months, enabling you to view both up-to-the-minute data and historical data.
To graph metrics in the console, you can use CloudWatch Metrics Insights, a high-performance SQL query 
engine that you can use to identify trends and patterns within all your metrics in real time.
Contents
•Basic monitoring and detailed monitoring  (p. 77)
•Query your metrics with CloudWatch Metrics Insights (p. 78)
•Use metrics explorer to monitor resources by their tags and properties (p. 97)
•Use metric streams (p. 99)
•View available metrics (p. 117)
•Graphing metrics  (p. 121)
•Using CloudWatch anomaly detection (p. 133)
•Use metric math  (p. 136)
•Use search expressions in graphs (p. 157)
•Get statistics for a metric  (p. 166)
•Publish custom metrics  (p. 176)
Basic monitoring and detailed monitoring
CloudWatch provides two categories of monitoring: basic monitoring  and detailed monitoring .
Many AWS services oﬀer basic monitoring by publishing a default set of metrics to CloudWatch with no 
charge to customers. By default, when you start using one of these AWS services, basic monitoring is 
automatically enabled. For a list of services that oﬀer basic monitoring, see AWS services that publish 
CloudWatch metrics (p. 1001 ).
Detailed monitoring is oﬀered by only some services. It also incurs charges. To use it for an AWS service, 
you must choose to activate it. For more information about pricing, see Amazon CloudWatch pricing.
Detailed monitoring options diﬀer based on the services that oﬀer it. For example, Amazon EC2 detailed 
monitoring provides more frequent metrics, published at one-minute intervals, instead of the ﬁve-
minute intervals used in Amazon EC2 basic monitoring. Detailed monitoring for Amazon S3 and Amazon 
Managed Streaming for Apache Kafka means more ﬁne-grained metrics.
In diﬀerent AWS services, detailed monitoring also has diﬀerent names. For example, in Amazon EC2 it is 
called detailed monitoring, in AWS Elastic Beanstalk it is called enhanced monitoring, and in Amazon S3 
it is called request metrics.
Using detailed monitoring for Amazon EC2 helps you better manage your Amazon EC2 resources, so that 
you can ﬁnd trends and take action faster. For Amazon S3 request metrics are available at one-minute 
intervals to help you quickly identify and act on operational issues. On Amazon MSK, when you enable 
the PER_BROKER , PER_TOPIC_PER_BROKER , or PER_TOPIC_PER_PARTITION  level monitoring, you get 
additional metrics that provide more visibility.
77Amazon CloudWatch User Guide
Query your metrics with CloudWatch Metrics Insights
The following table lists the services that oﬀer detailed monitoring. It also includes links to the 
documentation for those services that explain more about the detailed monitoring and provide 
instructions for how to activate it.
Service Documentation
Amazon API 
GatewayDimensions for 
API Gateway 
metrics
Amazon 
CloudFrontViewing additional 
CloudFront 
distribution 
metrics
Amazon EC2 Enable or turn 
oﬀ detailed 
monitoring for 
your instances
Elastic Beanstalk Enhanced health 
reporting and 
monitoring
Amazon Kinesis 
Data StreamsEnhanced Shard-
level Metrics
Amazon MSK Amazon MSK 
Metrics for 
Monitoring with 
CloudWatch
Amazon S3 Amazon S3 
request metrics in 
CloudWatch
Query your metrics with CloudWatch Metrics 
Insights
CloudWatch Metrics Insights is a powerful high-performance SQL query engine that you can use to query 
your metrics at scale. You can identify trends and patterns within all of your CloudWatch metrics in real 
time.
You can also set alarms on any Metrics Insights queries that return a single time series. This can be 
especially useful to create alarms that watch aggregated metrics across a ﬂeet of your infrastructure or 
applications. Create the alarm once, and it dynamically adjusts as resources are added to or removed 
from the ﬂeet.
You can perform a Metrics Insights query using the CloudWatch console, or by using GetMetricData  or
PutDashboard  using the AWS CLI or the AWS SDKs. Queries run in the console are free of charge. For 
more information about CloudWatch pricing, see Amazon CloudWatch Pricing.
When you use the CloudWatch console, you can choose from a wide variety of pre-built sample queries 
and also create your own queries. When you create a query, you can use both a builder view that 
interactively prompts you and lets you browse through your existing metrics and dimensions to easily 
78Amazon CloudWatch User Guide
Build your queries
build a query, and an editor view to write queries from scratch, edit the queries you build in the builder 
view, and edit sample queries to customize them.
With Metrics Insights you can run queries at scale. By using the GROUP BY clause, you can ﬂexibly group 
your metrics in real time into separate time series per speciﬁc dimension value, based on your use cases. 
Because Metrics Insights queries include an ORDER BY ability, you can use Metrics Insights to make 
"Top N" type queries that can scan millions of metrics in your account, and return the top 10 most CPU 
consuming instances, for example, to help you pinpoint and remedy latency issues in your applications.
Topics
•Build your queries (p. 79)
•Metrics Insights query components and syntax (p. 80)
•Create alarms on Metrics Insights queries (p. 85)
•Use Metrics Insights queries with metric math  (p. 88)
•SQL inference (p. 88)
•Metrics Insights sample queries  (p. 89)
•Metrics Insights limits  (p. 95)
•Metrics Insights glossary (p. 96)
•Troubleshooting Metrics Insights (p. 96)
Build your queries
You can run a CloudWatch Metrics Insights query using the CloudWatch console, the AWS CLI, or the 
AWS SDKs. Queries run in the console are free of charge. For more information about CloudWatch 
pricing, see Amazon CloudWatch Pricing.
For more information about using the AWS SDKs to perform a Metrics Insights query, see GetMetricData .
To run a query using the CloudWatch console, follow these steps:
To query your metrics using Metrics Insights
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , All metrics .
3. Choose the Query tab.
4. (Optional) To run a pre-built sample query, choose Add query and select the query to run. If you are 
satisﬁed with this query, you can skip the rest of this procedure. Or, you can choose Editor to edit 
the sample query and then choose Run to run the modiﬁed query.
5. To create your own query, you can use the Builder view, the Editor view, and also use a combination 
of both. You can switch between the two views anytime and see your work in progress in both views.
In the Builder view, you can browse and select the metric namespace, metric name, ﬁlter, group, and 
order options. For each of these options, the query builder oﬀers you a list of possible selections 
from your environment to choose from.
In the Editor view, you can start writing your query. As you type, the editor oﬀers suggestions based 
on the characters that you have typed so far.
6. When you are satisﬁed with your query, choose Run.
7. (Optional) Another way to edit a query that you have graphed is to choose the Graphed metrics  tab 
and choose the edit icon next to the query formula in the Details  column.
8. (Optional) To remove a query from the graph, choose Graphed metrics  and choose the X icon at the 
right side of the row that displays your query.
79Amazon CloudWatch User Guide
Query components and syntax
Metrics Insights query components and syntax
CloudWatch Metrics Insights syntax is as follows.
SELECT FUNCTION (metricName )
FROM namespace  | SCHEMA(...)
[ WHERE labelKey  OPERATOR labelValue  [AND ... ] ]
[ GROUP BY labelKey  [ , ... ] ]
[ ORDER BY FUNCTION () [ DESC | ASC ] ]
[ LIMIT number ]
The possible clauses in a Metrics Insights query are as follows. None of the keywords are case sensitive, 
but the identiﬁers such as the names of metrics, namespaces, and dimensions are case sensitive.
SELECT
Required. Speciﬁes the function to use to aggregate observations in each time bucket (detemined by 
the provided period). Also speciﬁes the name of the metric to query.
The valid values for FUNCTION  are AVG, COUNT , MAX, MIN, and SUM.
•AVG calculates the average of the observations matched by the query.
•COUNT returns the count of the observations matched by the query.
•MAX returns the maximum value of the observations matched by the query.
•MIN returns the minimum value of the observations matched by the query.
•SUM calculates the sum of the observations matched by the query.
FROM
Required. Speciﬁes the source of the metric. You can specify either the metric namespace that 
contains the metric that is to be queried, or a SCHEMA table function. Examples of metric 
namespaces include "AWS/EC2" , "AWS/Lambda" , and metric namespaces that you have created for 
your custom metrics.
Metric namespaces that include / or any other character that is not a letter, number, or underscore 
must be surrounded by double quotation marks. For more information, see What needs quotation 
marks or escape characters? (p. 82).
SCHEMA
An optional table function that can be used within a FROM clause. Use SCHEMA to scope down the 
query results to only the metrics that exactly match a list of dimensions, or to metrics that have no 
dimensions.
If you use a SCHEMA clause, it must contain at least one argument, and this ﬁrst argument must be 
the metric namespace being queried. If you specify SCHEMA with only this namespace argument, 
the results are scoped down to only metrics that do not have any dimensions.
If you specify SCHEMA with additional arguments, the additional arguments after the namespace 
argument must be label  keys. Label keys must be dimension names. If you specify one or more 
of these label keys, the results are scoped down to only those metrics that have that exact set of 
dimensions. The order of these label keys does not matter.
For example:
•SELECT AVG(CPUUtilization) FROM "AWS/EC2" matches all CPUUtilization  metrics in the
AWS/EC2 namespace, no matter their dimensions, and returns a single aggregated time series.
•SELECT AVG(CPUUtilization) FROM SCHEMA("AWS/EC2") matches only the CPUUtilization
metrics in the AWS/EC2 namespace that do not have any dimensions deﬁned.
80Amazon CloudWatch User Guide
Query components and syntax
•SELECT AVG(CPUUtilization) FROM SCHEMA("AWS/EC2", InstanceId) matches only the
CPUUtilization  metrics that were reported to CloudWatch with exactly one dimension,
InstanceId .
•SELECT SUM(RequestCount) FROM SCHEMA("AWS/ApplicationELB", LoadBalancer, 
AvailabilityZone) matches only the RequestCount  metrics that were reported to 
CloudWatch from AWS/ApplicationELB  with exactly two dimensions, LoadBalancer  and
AvailabilityZone .
WHERE
Optional. Filters the results to only those metrics that match your speciﬁed expression using speciﬁc 
label values for one or more label keys. For example, WHERE InstanceType = 'c3.4xlarge' ﬁlters 
the results to only c3.4xlarge  instance types, and WHERE InstanceType != 'c3.4xlarge' ﬁlters the 
results to all instance types except c3.4xlarge .
Label values must always be enclosed with single quotation marks.
Supported operators
The WHERE  clause supports the following operators:
•= Label value must match the speciﬁed string.
•!= Label value must not match the speciﬁed string.
•AND  Both conditions that are speciﬁed must be true to match. You can use multiple AND
keywords to specify two or more conditions.
GROUP BY
Optional. Groups the query results into multiple time series, each one corresponding to a diﬀerent 
value for the speciﬁed label key or keys. For example, using GROUP BY InstanceId  returns a 
diﬀerent time series for each value of InstanceId . Using GROUP BY ServiceName, Operation
creates a diﬀerent time series for each possible combination of the values of ServiceName  and
Operation .
With a GROUP BY clause, by default the results are ordered in alphabetical ascending order, using 
the sequence of labels speciﬁed in the GROUP BY clause. To change the order of the results, add an
ORDER BY clause to your query.
Note
If some of the matching metrics don't include a speciﬁc label key speciﬁed in the GROUP 
BY clause, a null group named Other is returned. For example, if you specify GROUP BY 
ServiceName, Operation  and some of the returned metrics don't include ServiceName
as a dimension, then those metrics are displayed as having Other  as the value for
ServiceName .
ORDER BY
Optional. Speciﬁes the order to use for the returned time series, if the query returns more than one 
time series. The order is based on the values found by the FUNCTION  that you specify in the ORDER 
BY clause. The FUNCTION  is used to calculate a single scalar value from each returned time series, 
and that value is used to determine the order.
You also specify whether to use ascending ASC or descending DESC order. If you omit this, the 
default is ascending ASC.
For example, adding an ORDER BY MAX() DESC  clause orders the results by the maximum data 
point observed within the time range, in descending order: meaning that the time series that has the 
highest maximum data point is returned ﬁrst.
The valid functions to use within an ORDER BY clause are AVG() , COUNT() , MAX() , MIN() , and
SUM() .
81Amazon CloudWatch User Guide
Query components and syntax
If you use an ORDER BY clause with a LIMIT  clause, the resulting query is a "Top N" query. ORDER 
BY is also useful for queries that might return a large number of metrics, because each query can 
return no more than 500 time series. If a query matches more than 500 time series, and you use an
ORDER BY clause, the time series are sorted and then the 500 time series that come ﬁrst in the sort 
order are the ones that are returned.
LIMIT
Optional. Limits the number of time series returned by the query to the value that you specify. The 
maximum value that you can specify is 500, and a query that does not specify a LIMIT  can also 
return no more than 500 time series.
Using a LIMIT  clause with an ORDER BY clause gives you a "Top N" query.
What needs quotation marks or escape characters?
In a query, label values must always be surrounded with single quotation marks. For example, SELECT 
MAX(CPUUtilization) FROM "AWS/EC2" WHERE AutoScalingGroupName = 'my-production-ﬂeet'.
Metric namespaces, metric names, and label keys that contain characters other than letters, numbers, 
and underscore (_) must be surrounded by double quote marks. For example, SELECT MAX("My.Metric").
If one of these contains a double quotation mark or single quotation mark itself (such as
Bytes"Input" ), you must escape each quotation mark with a backslash, as in SELECT AVG("Bytes
\"Input\"") .
If a metric namespace, metric name, or label key, contains a word that is a reserved keyword in Metrics 
Insights, these must also be enclosed in double quotation marks. For example, if you have a metric 
named LIMIT, you would use SELECT AVG("LIMIT") . It is also valid to enclose any namespace, metric 
name, or label in double quotation marks even if it does not include a reserved keyword.
For a complete list of reserved keywords, see Reserved keywords (p. 83).
Build a rich query step by step
This section illustrates building a full example that uses all possible clauses, step by step.
We start with the following query, which aggregates all of the Application Load Balancer RequestCount
metrics that are collected with both the dimensions LoadBalancer  and AvailabilityZone .
SELECT SUM(RequestCount)  
FROM SCHEMA("AWS/ApplicationELB", LoadBalancer, AvailabilityZone)
Now, if we want to see metrics only from a speciﬁc load balancer, we can add a WHERE  clause to limit 
the metrics returned to only those metrics where the value of the LoadBalancer  dimension is app/
load-balancer-1 .
SELECT SUM(RequestCount)  
FROM SCHEMA("AWS/ApplicationELB", LoadBalancer, AvailabilityZone)
WHERE LoadBalancer = 'app/load-balancer-1'
The preceding query aggregates the RequestCount  metrics from all Availability Zones for this load 
balancer into one time series. If we want to see diﬀerent time series for each Availability Zone, we can 
add a GROUP BY clause.
SELECT SUM(RequestCount)  
82Amazon CloudWatch User Guide
Query components and syntax
FROM SCHEMA("AWS/ApplicationELB", LoadBalancer, AvailabilityZone)
WHERE LoadBalancer = 'app/load-balancer-1'
GROUP BY AvailabilityZone
Next, we might want to order these results to see the highest values ﬁrst. The following ORDER BY
clause orders the time series in descending order, by the maximum value reported by each time series 
during the query time range:
SELECT SUM(RequestCount)  
FROM SCHEMA("AWS/ApplicationELB", LoadBalancer, AvailabilityZone)
WHERE LoadBalancer = 'app/load-balancer-1'
GROUP BY AvailabilityZone
ORDER BY MAX() DESC
Finally, if we are primarily interested in a "Top N" type of query, we can use a LIMIT  clause. This ﬁnal 
example limits the results to only the time series with the ﬁve highest MAX values.
SELECT SUM(RequestCount)  
FROM SCHEMA("AWS/ApplicationELB", LoadBalancer, AvailabilityZone)
WHERE LoadBalancer = 'app/load-balancer-1'
GROUP BY AvailabilityZone
ORDER BY MAX() DESC
LIMIT 5
Reserved keywords
The following are reserved keywords in CloudWatch Metrics Insights. If any of these words are in 
a namespace, metric name, or label key in a query, you must enclose them in double quote marks. 
Reserved keywords are not case sensitive.
"ABORT" "ABORTSESSION" "ABS" "ABSOLUTE" "ACCESS" "ACCESSIBLE" "ACCESS_LOCK" "ACCOUNT" 
 "ACOS" "ACOSH" "ACTION" "ADD" "ADD_MONTHS"
"ADMIN" "AFTER" "AGGREGATE" "ALIAS" "ALL" "ALLOCATE" "ALLOW" "ALTER" "ALTERAND" "AMP" 
 "ANALYSE" "ANALYZE" "AND" "ANSIDATE" "ANY" "ARE" "ARRAY",
"ARRAY_AGG" "ARRAY_EXISTS" "ARRAY_MAX_CARDINALITY" "AS" "ASC" "ASENSITIVE" "ASIN" "ASINH" 
 "ASSERTION" "ASSOCIATE" "ASUTIME" "ASYMMETRIC" "AT",
"ATAN" "ATAN2" "ATANH" "ATOMIC" "AUDIT" "AUTHORIZATION" "AUX" "AUXILIARY" "AVE" "AVERAGE" 
 "AVG" "BACKUP" "BEFORE" "BEGIN" "BEGIN_FRAME" "BEGIN_PARTITION",
"BETWEEN" "BIGINT" "BINARY" "BIT" "BLOB" "BOOLEAN" "BOTH" "BREADTH" "BREAK" "BROWSE" "BT" 
 "BUFFERPOOL" "BULK" "BUT" "BY" "BYTE" "BYTEINT" "BYTES" "CALL",
"CALLED" "CAPTURE" "CARDINALITY" "CASCADE" "CASCADED" "CASE" "CASESPECIFIC" "CASE_N" "CAST" 
 "CATALOG" "CCSID" "CD" "CEIL" "CEILING" "CHANGE" "CHAR",
"CHAR2HEXINT" "CHARACTER" "CHARACTERS" "CHARACTER_LENGTH" "CHARS" "CHAR_LENGTH" "CHECK" 
 "CHECKPOINT" "CLASS" "CLASSIFIER" "CLOB" "CLONE" "CLOSE" "CLUSTER",
"CLUSTERED" "CM" "COALESCE" "COLLATE" "COLLATION" "COLLECT" "COLLECTION" "COLLID" "COLUMN" 
 "COLUMN_VALUE" "COMMENT" "COMMIT" "COMPLETION" "COMPRESS" "COMPUTE",
"CONCAT" "CONCURRENTLY" "CONDITION" "CONNECT" "CONNECTION" "CONSTRAINT" "CONSTRAINTS" 
 "CONSTRUCTOR" "CONTAINS" "CONTAINSTABLE" "CONTENT" "CONTINUE" "CONVERT",
"CONVERT_TABLE_HEADER" "COPY" "CORR" "CORRESPONDING" "COS" "COSH" "COUNT" "COVAR_POP" 
 "COVAR_SAMP" "CREATE" "CROSS" "CS" "CSUM" "CT" "CUBE" "CUME_DIST",
"CURRENT" "CURRENT_CATALOG" "CURRENT_DATE" "CURRENT_DEFAULT_TRANSFORM_GROUP" 
 "CURRENT_LC_CTYPE" "CURRENT_PATH" "CURRENT_ROLE" "CURRENT_ROW" "CURRENT_SCHEMA",
"CURRENT_SERVER" "CURRENT_TIME" "CURRENT_TIMESTAMP" "CURRENT_TIMEZONE" 
 "CURRENT_TRANSFORM_GROUP_FOR_TYPE" "CURRENT_USER" "CURRVAL" "CURSOR" "CV" "CYCLE" "DATA",
"DATABASE" "DATABASES" "DATABLOCKSIZE" "DATE" "DATEFORM" "DAY" "DAYS" "DAY_HOUR" 
 "DAY_MICROSECOND" "DAY_MINUTE" "DAY_SECOND" "DBCC" "DBINFO" "DEALLOCATE" "DEC",
"DECFLOAT" "DECIMAL" "DECLARE" "DEFAULT" "DEFERRABLE" "DEFERRED" "DEFINE" "DEGREES" "DEL" 
 "DELAYED" "DELETE" "DENSE_RANK" "DENY" "DEPTH" "DEREF" "DESC" "DESCRIBE",
"DESCRIPTOR" "DESTROY" "DESTRUCTOR" "DETERMINISTIC" "DIAGNOSTIC" "DIAGNOSTICS" "DICTIONARY" 
 "DISABLE" "DISABLED" "DISALLOW" "DISCONNECT" "DISK" "DISTINCT",
83Amazon CloudWatch User Guide
Query components and syntax
"DISTINCTROW" "DISTRIBUTED" "DIV" "DO" "DOCUMENT" "DOMAIN" "DOUBLE" "DROP" "DSSIZE" "DUAL" 
 "DUMP" "DYNAMIC" "EACH" "ECHO" "EDITPROC" "ELEMENT" "ELSE" "ELSEIF",
"EMPTY" "ENABLED" "ENCLOSED" "ENCODING" "ENCRYPTION" "END" "END-EXEC" "ENDING" "END_FRAME" 
 "END_PARTITION" "EQ" "EQUALS" "ERASE" "ERRLVL" "ERROR" "ERRORFILES",
"ERRORTABLES" "ESCAPE" "ESCAPED" "ET" "EVERY" "EXCEPT" "EXCEPTION" "EXCLUSIVE" "EXEC" 
 "EXECUTE" "EXISTS" "EXIT" "EXP" "EXPLAIN" "EXTERNAL" "EXTRACT" "FALLBACK
"FALSE" "FASTEXPORT" "FENCED" "FETCH" "FIELDPROC" "FILE" "FILLFACTOR" "FILTER" "FINAL" 
 "FIRST" "FIRST_VALUE" "FLOAT" "FLOAT4" "FLOAT8" "FLOOR"  
"FOR" "FORCE" "FOREIGN" "FORMAT" "FOUND" "FRAME_ROW" "FREE" "FREESPACE" "FREETEXT" 
 "FREETEXTTABLE" "FREEZE" "FROM" "FULL" "FULLTEXT" "FUNCTION"  
"FUSION" "GE" "GENERAL" "GENERATED" "GET" "GIVE" "GLOBAL" "GO" "GOTO" "GRANT" "GRAPHIC" 
 "GROUP" "GROUPING" "GROUPS" "GT" "HANDLER" "HASH"  
"HASHAMP" "HASHBAKAMP" "HASHBUCKET" "HASHROW" "HAVING" "HELP" "HIGH_PRIORITY" "HOLD" 
 "HOLDLOCK" "HOUR" "HOURS" "HOUR_MICROSECOND" "HOUR_MINUTE"  
"HOUR_SECOND" "IDENTIFIED" "IDENTITY" "IDENTITYCOL" "IDENTITY_INSERT" "IF" "IGNORE" "ILIKE" 
 "IMMEDIATE" "IN" "INCLUSIVE" "INCONSISTENT" "INCREMENT"  
"INDEX" "INDICATOR" "INFILE" "INHERIT" "INITIAL" "INITIALIZE" "INITIALLY" "INITIATE" 
 "INNER" "INOUT" "INPUT" "INS" "INSENSITIVE" "INSERT" "INSTEAD"  
"INT" "INT1" "INT2" "INT3" "INT4" "INT8" "INTEGER" "INTEGERDATE" "INTERSECT" "INTERSECTION" 
 "INTERVAL" "INTO" "IO_AFTER_GTIDS" "IO_BEFORE_GTIDS"  
"IS" "ISNULL" "ISOBID" "ISOLATION" "ITERATE" "JAR" "JOIN" "JOURNAL" "JSON_ARRAY" 
 "JSON_ARRAYAGG" "JSON_EXISTS" "JSON_OBJECT" "JSON_OBJECTAGG"  
"JSON_QUERY" "JSON_TABLE" "JSON_TABLE_PRIMITIVE" "JSON_VALUE" "KEEP" "KEY" "KEYS" "KILL" 
 "KURTOSIS" "LABEL" "LAG" "LANGUAGE" "LARGE" "LAST"  
"LAST_VALUE" "LATERAL" "LC_CTYPE" "LE" "LEAD" "LEADING" "LEAVE" "LEFT" "LESS" "LEVEL" 
 "LIKE" "LIKE_REGEX" "LIMIT" "LINEAR" "LINENO" "LINES"  
"LISTAGG" "LN" "LOAD" "LOADING" "LOCAL" "LOCALE" "LOCALTIME" "LOCALTIMESTAMP" "LOCATOR" 
 "LOCATORS" "LOCK" "LOCKING" "LOCKMAX" "LOCKSIZE" "LOG"  
"LOG10" "LOGGING" "LOGON" "LONG" "LONGBLOB" "LONGTEXT" "LOOP" "LOWER" "LOW_PRIORITY" "LT" 
 "MACRO" "MAINTAINED" "MAP" "MASTER_BIND"  
"MASTER_SSL_VERIFY_SERVER_CERT" "MATCH" "MATCHES" "MATCH_NUMBER" "MATCH_RECOGNIZE" 
 "MATERIALIZED" "MAVG" "MAX" "MAXEXTENTS" "MAXIMUM" "MAXVALUE"  
"MCHARACTERS" "MDIFF" "MEDIUMBLOB" "MEDIUMINT" "MEDIUMTEXT" "MEMBER" "MERGE" "METHOD" 
 "MICROSECOND" "MICROSECONDS" "MIDDLEINT" "MIN" "MINDEX"  
"MINIMUM" "MINUS" "MINUTE" "MINUTES" "MINUTE_MICROSECOND" "MINUTE_SECOND" "MLINREG" "MLOAD" 
 "MLSLABEL" "MOD" "MODE" "MODIFIES" "MODIFY"  
"MODULE" "MONITOR" "MONRESOURCE" "MONSESSION" "MONTH" "MONTHS" "MSUBSTR" "MSUM" "MULTISET" 
 "NAMED" "NAMES" "NATIONAL" "NATURAL" "NCHAR" "NCLOB"  
"NE" "NESTED_TABLE_ID" "NEW" "NEW_TABLE" "NEXT" "NEXTVAL" "NO" "NOAUDIT" "NOCHECK" 
 "NOCOMPRESS" "NONCLUSTERED" "NONE" "NORMALIZE" "NOT" "NOTNULL"  
"NOWAIT" "NO_WRITE_TO_BINLOG" "NTH_VALUE" "NTILE" "NULL" "NULLIF" "NULLIFZERO" "NULLS" 
 "NUMBER" "NUMERIC" "NUMPARTS" "OBID" "OBJECT" "OBJECTS"  
"OCCURRENCES_REGEX" "OCTET_LENGTH" "OF" "OFF" "OFFLINE" "OFFSET" "OFFSETS" "OLD" 
 "OLD_TABLE" "OMIT" "ON" "ONE" "ONLINE" "ONLY" "OPEN" "OPENDATASOURCE"  
"OPENQUERY" "OPENROWSET" "OPENXML" "OPERATION" "OPTIMIZATION" "OPTIMIZE" "OPTIMIZER_COSTS" 
 "OPTION" "OPTIONALLY" "OR" "ORDER" "ORDINALITY" "ORGANIZATION"  
"OUT" "OUTER" "OUTFILE" "OUTPUT" "OVER" "OVERLAPS" "OVERLAY" "OVERRIDE" "PACKAGE" "PAD" 
 "PADDED" "PARAMETER" "PARAMETERS" "PART" "PARTIAL" "PARTITION"  
"PARTITIONED" "PARTITIONING" "PASSWORD" "PATH" "PATTERN" "PCTFREE" "PER" "PERCENT" 
 "PERCENTILE" "PERCENTILE_CONT" "PERCENTILE_DISC" "PERCENT_RANK" "PERIOD" "PERM"  
"PERMANENT" "PIECESIZE" "PIVOT" "PLACING" "PLAN" "PORTION" "POSITION" "POSITION_REGEX" 
 "POSTFIX" "POWER" "PRECEDES" "PRECISION" "PREFIX" "PREORDER"  
"PREPARE" "PRESERVE" "PREVVAL" "PRIMARY" "PRINT" "PRIOR" "PRIQTY" "PRIVATE" "PRIVILEGES" 
 "PROC" "PROCEDURE" "PROFILE" "PROGRAM" "PROPORTIONAL"  
"PROTECTION" "PSID" "PTF" "PUBLIC" "PURGE" "QUALIFIED" "QUALIFY" "QUANTILE" "QUERY" 
 "QUERYNO" "RADIANS" "RAISERROR" "RANDOM" "RANGE" "RANGE_N" "RANK"  
"RAW" "READ" "READS" "READTEXT" "READ_WRITE" "REAL" "RECONFIGURE" "RECURSIVE" "REF" 
 "REFERENCES" "REFERENCING" "REFRESH" "REGEXP" "REGR_AVGX" "REGR_AVGY"  
"REGR_COUNT" "REGR_INTERCEPT" "REGR_R2" "REGR_SLOPE" "REGR_SXX" "REGR_SXY" "REGR_SYY" 
 "RELATIVE" "RELEASE" "RENAME" "REPEAT" "REPLACE" "REPLICATION"  
"REPOVERRIDE" "REQUEST" "REQUIRE" "RESIGNAL" "RESOURCE" "RESTART" "RESTORE" "RESTRICT" 
 "RESULT" "RESULT_SET_LOCATOR" "RESUME" "RET" "RETRIEVE" "RETURN"  
"RETURNING" "RETURNS" "REVALIDATE" "REVERT" "REVOKE" "RIGHT" "RIGHTS" "RLIKE" "ROLE" 
 "ROLLBACK" "ROLLFORWARD" "ROLLUP" "ROUND_CEILING" "ROUND_DOWN"  
"ROUND_FLOOR" "ROUND_HALF_DOWN" "ROUND_HALF_EVEN" "ROUND_HALF_UP" "ROUND_UP" "ROUTINE" 
 "ROW" "ROWCOUNT" "ROWGUIDCOL" "ROWID" "ROWNUM" "ROWS" "ROWSET"  
84Amazon CloudWatch User Guide
Create alarms on Metrics Insights queries
"ROW_NUMBER" "RULE" "RUN" "RUNNING" "SAMPLE" "SAMPLEID" "SAVE" "SAVEPOINT" "SCHEMA" 
 "SCHEMAS" "SCOPE" "SCRATCHPAD" "SCROLL" "SEARCH" "SECOND" "SECONDS"  
"SECOND_MICROSECOND" "SECQTY" "SECTION" "SECURITY" "SECURITYAUDIT" "SEEK" "SEL" "SELECT" 
 "SEMANTICKEYPHRASETABLE" "SEMANTICSIMILARITYDETAILSTABLE"  
"SEMANTICSIMILARITYTABLE" "SENSITIVE" "SEPARATOR" "SEQUENCE" "SESSION" "SESSION_USER" "SET" 
 "SETRESRATE" "SETS" "SETSESSRATE" "SETUSER" "SHARE" "SHOW"  
"SHUTDOWN" "SIGNAL" "SIMILAR" "SIMPLE" "SIN" "SINH" "SIZE" "SKEW" "SKIP" "SMALLINT" "SOME" 
 "SOUNDEX" "SOURCE" "SPACE" "SPATIAL" "SPECIFIC" "SPECIFICTYPE"  
"SPOOL" "SQL" "SQLEXCEPTION" "SQLSTATE" "SQLTEXT" "SQLWARNING" "SQL_BIG_RESULT" 
 "SQL_CALC_FOUND_ROWS" "SQL_SMALL_RESULT" "SQRT" "SS" "SSL" "STANDARD"  
"START" "STARTING" "STARTUP" "STAT" "STATE" "STATEMENT" "STATIC" "STATISTICS" "STAY" 
 "STDDEV_POP" "STDDEV_SAMP" "STEPINFO" "STOGROUP" "STORED" "STORES"  
"STRAIGHT_JOIN" "STRING_CS" "STRUCTURE" "STYLE" "SUBMULTISET" "SUBSCRIBER" "SUBSET" 
 "SUBSTR" "SUBSTRING" "SUBSTRING_REGEX" "SUCCEEDS" "SUCCESSFUL"  
"SUM" "SUMMARY" "SUSPEND" "SYMMETRIC" "SYNONYM" "SYSDATE" "SYSTEM" "SYSTEM_TIME" 
 "SYSTEM_USER" "SYSTIMESTAMP" "TABLE" "TABLESAMPLE" "TABLESPACE" "TAN"  
"TANH" "TBL_CS" "TEMPORARY" "TERMINATE" "TERMINATED" "TEXTSIZE" "THAN" "THEN" "THRESHOLD" 
 "TIME" "TIMESTAMP" "TIMEZONE_HOUR" "TIMEZONE_MINUTE" "TINYBLOB"  
"TINYINT" "TINYTEXT" "TITLE" "TO" "TOP" "TRACE" "TRAILING" "TRAN" "TRANSACTION" "TRANSLATE" 
 "TRANSLATE_CHK" "TRANSLATE_REGEX" "TRANSLATION" "TREAT"  
"TRIGGER" "TRIM" "TRIM_ARRAY" "TRUE" "TRUNCATE" "TRY_CONVERT" "TSEQUAL" "TYPE" "UC" 
 "UESCAPE" "UID" "UNDEFINED" "UNDER" "UNDO" "UNION" "UNIQUE"  
"UNKNOWN" "UNLOCK" "UNNEST" "UNPIVOT" "UNSIGNED" "UNTIL" "UPD" "UPDATE" "UPDATETEXT" 
 "UPPER" "UPPERCASE" "USAGE" "USE" "USER" "USING" "UTC_DATE"  
"UTC_TIME" "UTC_TIMESTAMP" "VALIDATE" "VALIDPROC" "VALUE" "VALUES" "VALUE_OF" "VARBINARY" 
 "VARBYTE" "VARCHAR" "VARCHAR2" "VARCHARACTER" "VARGRAPHIC"  
"VARIABLE" "VARIADIC" "VARIANT" "VARYING" "VAR_POP" "VAR_SAMP" "VCAT" "VERBOSE" 
 "VERSIONING" "VIEW" "VIRTUAL" "VOLATILE" "VOLUMES" "WAIT" "WAITFOR"  
"WHEN" "WHENEVER" "WHERE" "WHILE" "WIDTH_BUCKET" "WINDOW" "WITH" "WITHIN" "WITHIN_GROUP" 
 "WITHOUT" "WLM" "WORK" "WRITE" "WRITETEXT" "XMLCAST" "XMLEXISTS"  
"XMLNAMESPACES" "XOR" "YEAR" "YEARS" "YEAR_MONTH" "ZEROFILL" "ZEROIFNULL" "ZONE"
Create alarms on Metrics Insights queries
You can create alarms on Metrics Insights queries. This helps you have alarms that track multiple 
resources without needing to be updated later. The query catches new resources and resources that 
change. For example, you can create an alarm that watches the CPU utilization of your ﬂeet, and the 
alarm automatically evaluates new instances that you launch after creating the alarm.
Contents
•Create a Metrics Insights alarm (p. 85)
•Partial data cases (p. 87)
Create a Metrics Insights alarm
To create an alarm on a Metrics Insights query using the console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , All metrics .
3. Choose the Query tab.
4. (Optional) To run a pre-built sample query, choose Add query and select the query to run. Or, you 
can choose Editor to edit the sample query and then choose Run to run the modiﬁed query.
5. To create your own query, you can use the Builder view, the Editor view, or a combination of both. 
You can switch between the two views anytime and see your work in progress in both views.
In the Builder view, you can browse and select the metric namespace, metric name, ﬁlter, group, and 
order options. For each of these options, the query builder oﬀers you a list of possible selections 
from your environment to choose from.
85Amazon CloudWatch User Guide
Create alarms on Metrics Insights queries
In the Editor view, you can start writing your query. As you type, the editor oﬀers suggestions based 
on the characters that you have typed so far.
Important
To set an alarm on a Metrics Insights query, the query must return a single time series. If it 
contains a GROUP BY statement, the GROUP BY statement must be wrapped inside a metric 
math expression that returns only one time series as the ﬁnal result of the expression.
6. When you are satisﬁed with your query, choose Run.
7. Choose Create alarm .
8. Under Conditions , specify the following:
a. For Whenever metric  is, specify whether the metric must be greater than, less than, or equal 
to the threshold. Under than... , specify the threshold value.
b. Choose Additional conﬁguration. For Datapoints to alarm , specify how many evaluation 
periods (data points) must be in the ALARM state to trigger the alarm. If the two values here 
match, you create an alarm that goes to ALARM state if that many consecutive periods are 
breaching.
To create an M out of N alarm, specify a lower number for the ﬁrst value than you specify for 
the second value. For more information, see Evaluating an alarm  (p. 181).
c. For Missing data treatment , choose how to have the alarm behave when some data points 
are missing. For more information, see Conﬁguring how CloudWatch alarms treat missing 
data  (p. 182).
9. Choose Next.
10. Under Notiﬁcation , select an SNS topic to notify when the alarm is in ALARM  state, OK state, or
INSUFFICIENT_DATA  state.
To have the alarm send multiple notiﬁcations for the same alarm state or for diﬀerent alarm states, 
choose Add notiﬁcation .
To have the alarm not send notiﬁcations, choose Remove.
11. To have the alarm perform Auto Scaling, EC2, or Systems Manager actions, choose the appropriate 
button and choose the alarm state and action to perform. Alarms can perform Systems Manager 
actions only when they go into ALARM state. For more information about Systems Manager actions, 
see  Conﬁguring CloudWatch to create OpsItems from alarms and  Incident creation.
Note
To create an alarm that performs an SSM Incident Manager action, you must have certain 
permissions. For more information, see  Identity-based policy examples for AWS Systems 
Manager Incident Manager .
12. When ﬁnished, choose Next.
13. Enter a name and description for the alarm. The name must contain only ASCII characters. Then 
choose Next.
14. Under Preview and create , conﬁrm that the information and conditions are what you want, then 
choose Create alarm .
To create an alarm on a Metrics Insights query using the AWS CLI
• Use the put-metric-alarm  command and specify a Metrics Insights query in the metrics
parameter. For example, the following command sets an alarm that goes into ALARM state if any of 
your instances go above 50% in CPU utilization.
aws cloudwatch put-metric-alarm --alarm-name Metrics-Insights-alarm --
evaluation-periods 1 --comparison-operator GreaterThanThreshold --metrics 
86Amazon CloudWatch User Guide
Create alarms on Metrics Insights queries
 '[{"Id":"m1","Expression":"SELECT AVG(CPUUtilization) FROM SCHEMA(\"AWS/EC2\", 
 InstanceId)", "Period":60}]' --threshold 50
Partial data cases
If the Metrics Insights query used for the alarm matches more than 10,000 metrics, the alarm is 
evaluated based on the ﬁrst 10,000 metrics that the query ﬁnds. This means that the alarm is being 
evaluated on partial data.
You can use the following methods to ﬁnd whether a Metrics Insights alarm is currently evaluating its 
alarm state based on partial data:
•In the console, if you choose an alarm to see the Details  page, the message Evaluation warning: Not 
evaluating all data  appears on that page.
•You see the value PARTIAL_DATA  in the EvaluationState  ﬁeld when you use the  describe-alarms
AWS CLI command or the  DescribeAlarms  API.
Alarms also publish events to Amazon EventBridge when it goes into the partial data state, so you can 
create an EventBridge rule to watch for these events. In these events, the evaluationState  ﬁeld has 
the value PARTIAL_DATA . The following is an example.
{ 
    "version": "0", 
    "id": "12345678-3bf9-6a09-dc46-12345EXAMPLE", 
    "detail-type": "CloudWatch Alarm State Change", 
    "source": "aws.cloudwatch", 
    "account": "123456789012", 
    "time": "2022-11-08T11:26:05Z", 
    "region": "us-east-1", 
    "resources": [ 
        "arn:aws:cloudwatch:us-east-1: 123456789012 :alarm:my-alarm-name " 
    ], 
    "detail": { 
        "alarmName": " my-alarm-name ", 
        "state": { 
            "value": "ALARM", 
            "reason": "Threshold Crossed: 3 out of the last 3 datapoints [20000.0 (08/11/22 
 11:25:00), 20000.0 (08/11/22 11:24:00), 20000.0 (08/11/22 11:23:00)] were greater than the 
 threshold (0.0) (minimum 1 datapoint for OK -> ALARM transition).", 
            "reasonData": "{\"version\":\"1.0\",\"queryDate\":
\"2022-11-08T11:26:05.399+0000\",\"startDate\":\"2022-11-08T11:23:00.000+0000\",
\"period\":60,\"recentDatapoints\":[20000.0,20000.0,20000.0],\"threshold\":0.0,
\"evaluatedDatapoints\":[{\"timestamp\":\"2022-11-08T11:25:00.000+0000\",\"value
\":20000.0}]}", 
            "timestamp": "2022-11-08T11:26:05.401+0000", 
            "evaluationState": "PARTIAL_DATA" 
        }, 
        "previousState": { 
            "value": "INSUFFICIENT_DATA", 
            "reason": "Unchecked: Initial alarm creation", 
            "timestamp": "2022-11-08T11:25:51.227+0000" 
        }, 
        "configuration": { 
            "metrics": [ 
                { 
                    "id": "m2", 
                    "expression": "SELECT SUM(PartialDataTestMetric) FROM 
 partial_data_test", 
                    "returnData": true, 
                    "period": 60 
87Amazon CloudWatch User Guide
Use Metrics Insights queries with metric math
                } 
            ] 
        } 
    }
}
If the query for the alarm includes a GROUP BY statement that initially returns more than 500 time 
series, the alarm is evaluated based on the ﬁrst 500 time series that the query ﬁnds. However, if you use 
an ORDER BY clause, then all the time series that the query ﬁnds are sorted, and the 500 that have the 
highest or lowest values according to your ORDER BY clause are used to evaluate the alarm.
Use Metrics Insights queries with metric math
You can use a Metrics Insights query as an input to a metric math function. For more information about 
metric math, see Use metric math  (p. 136).
A Metrics Insights query that does not include a GROUP BY clause returns a single time series. Therefore, 
its returned results can be used with any metric math function that takes a single time series as input.
A Metrics Insights query that includes a GROUP BY clause returns multiple time series. Therefore, its 
returned results can be used with any metric math function that takes an array of time series as input.
For example, the following query returns the total number of bytes downloaded for each bucket in the 
Region, as an array of time series:
SELECT SUM(BytesDownloaded)  
FROM SCHEMA("AWS/S3", BucketName, FilterId)  
WHERE FilterId = 'EntireBucket'
GROUP BY BucketName
On a graph in the console or in a GetMetricData  operation, the results of this query are q1. This query 
returns the result in bytes, so if you want to see the result as MB instead, you can use the following math 
function:
q1/1024/1024
SQL inference
CloudWatch Metrics Insights uses several mechanisms to infer the intention of a given SQL query.
Topics
•Time bucketing (p. 88)
•Fields projection (p. 89)
•ORDER BY global aggregation (p. 89)
Time bucketing
Time series data points resulting from a query are rolled up into time buckets based on the requested 
period. To aggregate values in standard SQL, an explicit GROUP BY clause must be deﬁned to collect all 
the observations of a given period together. Because this is the standard way to query time series data, 
CloudWatch Metrics Insights infers time bucketing without the need to express an explicit GROUP BY
clause.
For example, when a query is performed with a period of one minute, all the observations belonging 
to that minute until the next (excluded) are rolled up to the start time of the time bucket. This makes 
Metrics Insights SQL statements more concise and less verbose.
88Amazon CloudWatch User Guide
Sample queries
SELECT AVG(CPUUtilization)
FROM SCHEMA("AWS/EC2", InstanceId)
The previous query returns a single time series (timestamp-value pairs), representing the average CPU 
utilization of all Amazon EC2 instances. Assuming the requested period is one minute, each data point 
returned represents the average of all observations measured within a speciﬁc one-minute interval (start 
time inclusive, end time exclusive). The timestamp related to the speciﬁc data point is the start time of 
the bucket
Fields projection
Metrics Insights queries always return the timestamp projection. You don’t need to specify a timestamp 
column in the SELECT clause to get the timestamp of each corresponding data point value. For details 
about how timestamp is calculated, see Time bucketing (p. 88).
When using GROUP BY, each group name is also inferred and projected in the result, so that you can 
group the returned time series.
SELECT AVG(CPUUtilization)
FROM SCHEMA("AWS/EC2", InstanceId)
GROUP BY InstanceId
The previous query returns a time series for each Amazon EC2 instance. Each time series is labelled after 
the value of the instance ID.
ORDER BY global aggregation
When using ORDER BY, FUNCTION()  infers which aggregate function that you want to order by (the data 
point values of the queried metrics). The aggregate operation is performed across all the matched data 
points of each individual time series across the queried time window.
SELECT AVG(CPUUtilization)
FROM SCHEMA("AWS/EC2", InstanceId)
GROUP BY InstanceId
ORDER BY MAX()
LIMIT 10
The previous query returns the CPU utilization for each Amazon EC2 instance, limiting the result set to 
10 entries. The results are ordered based on the maximum value of the individual time series within the 
requested time window. The ORDER BY clause is applied before LIMIT , so that the ordering is calculated 
against more than 10 time series.
Metrics Insights sample queries
This section contains examples of useful CloudWatch Metrics Insights queries that you can copy and use 
directly or copy and modify in query editor. Some of these examples are already available in the console, 
and you can access them by choosing Add query in the Metrics  view.
Application Load Balancer examples
Total requests across all load balancers
SELECT SUM(RequestCount)  
FROM SCHEMA("AWS/ApplicationELB", LoadBalancer)
89Amazon CloudWatch User Guide
Sample queries
Top 10 most active load balancers
SELECT MAX(ActiveConnectionCount)  
FROM SCHEMA("AWS/ApplicationELB", LoadBalancer)  
GROUP BY LoadBalancer  
ORDER BY SUM() DESC  
LIMIT 10
AWS API usage examples
Top 20 AWS APIs by the number of calls in your account
SELECT COUNT(CallCount)  
FROM SCHEMA("AWS/Usage", Class, Resource, Service, Type)  
WHERE Type = 'API'  
GROUP BY Service, Resource  
ORDER BY COUNT() DESC  
LIMIT 20
CloudWatch APIs sorted by calls
SELECT COUNT(CallCount)  
FROM SCHEMA("AWS/Usage", Class, Resource, Service, Type)  
WHERE Type = 'API' AND Service = 'CloudWatch'  
GROUP BY Resource  
ORDER BY COUNT() DESC
DynamoDB examples
Top 10 tables by consumed reads
SELECT SUM(ProvisionedWriteCapacityUnits)
FROM SCHEMA("AWS/DynamoDB", TableName)  
GROUP BY TableName
ORDER BY MAX() DESC LIMIT 10
Top 10 tables by returned bytes
SELECT SUM(ReturnedBytes)
FROM SCHEMA("AWS/DynamoDB", TableName)  
GROUP BY TableName
ORDER BY MAX() DESC LIMIT 10
Top 10 tables by user errors
SELECT SUM(UserErrors)
FROM SCHEMA("AWS/DynamoDB", TableName)  
GROUP BY TableName
ORDER BY MAX() DESC LIMIT 10
Amazon Elastic Block Store examples
Top 10 Amazon EBS volumes by bytes written
SELECT SUM(VolumeWriteBytes)  
90Amazon CloudWatch User Guide
Sample queries
FROM SCHEMA("AWS/EBS", VolumeId)  
GROUP BY VolumeId  
ORDER BY SUM() DESC  
LIMIT 10
Average Amazon EBS volume write time
SELECT AVG(VolumeTotalWriteTime)  
FROM SCHEMA("AWS/EBS", VolumeId)
Amazon EC2 examples
CPU utilization of EC2 instances sorted by highest
SELECT AVG(CPUUtilization)  
  FROM SCHEMA("AWS/EC2", InstanceId)  
  GROUP BY InstanceId  
  ORDER BY AVG() DESC
Average CPU utilization across the entire ﬂeet
SELECT AVG(CPUUtilization)  
FROM SCHEMA("AWS/EC2", InstanceId)
Top 10 instances by highest CPU utilization
SELECT MAX(CPUUtilization)  
FROM SCHEMA("AWS/EC2", InstanceId)  
GROUP BY InstanceId  
ORDER BY MAX() DESC  
LIMIT 10
In this case, the CloudWatch agent is collecting a CPUUtilization  metric per application. This 
query ﬁlters the average of this metric for a speciﬁc application name.
SELECT AVG(CPUUtilization)
FROM "AWS/CWAgent"
WHERE ApplicationName = 'eCommerce'
Amazon Elastic Container Service examples
Average CPU utilization across all ECS clusters
SELECT AVG(CPUUtilization)  
FROM SCHEMA("AWS/ECS", ClusterName)
Top 10 clusters by memory utilization
SELECT AVG(MemoryUtilization)  
FROM SCHEMA("AWS/ECS", ClusterName)  
GROUP BY ClusterName  
ORDER BY AVG() DESC
LIMIT 10
Top 10 services by CPU utilization
91Amazon CloudWatch User Guide
Sample queries
SELECT AVG(CPUUtilization)  
FROM SCHEMA("AWS/ECS", ClusterName, ServiceName)  
GROUP BY ClusterName, ServiceName  
ORDER BY AVG() DESC  
LIMIT 10
Top 10 services by running tasks (Container Insights)
SELECT AVG(RunningTaskCount)  
FROM SCHEMA("ECS/ContainerInsights", ClusterName, ServiceName)  
GROUP BY ClusterName, ServiceName  
ORDER BY AVG() DESC  
LIMIT 10
Amazon Elastic Kubernetes Service Container Insights examples
Average CPU utilization across all EKS clusters
SELECT AVG(pod_cpu_utilization)  
FROM SCHEMA("ContainerInsights", ClusterName) 
Top 10 clusters by node CPU utilization
SELECT AVG(node_cpu_utilization)  
FROM SCHEMA("ContainerInsights", ClusterName)  
GROUP BY ClusterName
ORDER BY AVG() DESC LIMIT 10
Top 10 clusters by pod memory utilization
SELECT AVG(pop_memory_utilization)  
FROM SCHEMA("ContainerInsights", ClusterName)  
GROUP BY ClusterName
ORDER BY AVG() DESC LIMIT 10
Top 10 nodes by CPU utilization
SELECT AVG(node_cpu_utilization)  
FROM SCHEMA("ContainerInsights", ClusterName, NodeName)  
GROUP BY ClusterName, NodeName  
ORDER BY AVG() DESC LIMIT 10
Top 10 pods by memory utilization
SELECT AVG(pod_memory_utilization)  
FROM SCHEMA("ContainerInsights", ClusterName, PodName)  
GROUP BY ClusterName, PodName  
ORDER BY AVG() DESC LIMIT 10
EventBridge examples
Top 10 rules by invocations
SELECT SUM(Invocations)
92Amazon CloudWatch User Guide
Sample queries
FROM SCHEMA("AWS/Events", RuleName)  
GROUP BY RuleName
ORDER BY MAX() DESC LIMIT 10
Top 10 rules by failed invocations
SELECT SUM(FailedInvocations)
FROM SCHEMA("AWS/Events", RuleName)  
GROUP BY RuleName
ORDER BY MAX() DESC LIMIT 10
Top 10 rules by matched rules
SELECT SUM(MatchedEvents)
FROM SCHEMA("AWS/Events", RuleName)  
GROUP BY RuleName
ORDER BY MAX() DESC LIMIT 10
Kinesis examples
Top 10 streams by bytes written
SELECT SUM("PutRecords.Bytes")  
FROM SCHEMA("AWS/Kinesis", StreamName)  
GROUP BY StreamName
ORDER BY SUM() DESC LIMIT 10
Top 10 streams by earliest items in the stream
SELECT MAX("GetRecords.IteratorAgeMilliseconds")  
FROM SCHEMA("AWS/Kinesis", StreamName)  
GROUP BY StreamName
ORDER BY MAX() DESC LIMIT 10
Lambda examples
Lambda functions ordered by number of invocations
SELECT SUM(Invocations)  
FROM SCHEMA("AWS/Lambda", FunctionName)  
GROUP BY FunctionName  
ORDER BY SUM() DESC
Top 10 Lambda functions by longest runtime
SELECT AVG(Duration)  
FROM SCHEMA("AWS/Lambda", FunctionName)  
GROUP BY FunctionName  
ORDER BY MAX() DESC  
LIMIT 10
Top 10 Lambda functions by error count
SELECT SUM(Errors)  
FROM SCHEMA("AWS/Lambda", FunctionName)  
93Amazon CloudWatch User Guide
Sample queries
GROUP BY FunctionName  
ORDER BY SUM() DESC  
LIMIT 10
CloudWatch Logs examples
Top 10 log groups by incoming events
SELECT SUM(IncomingLogEvents)
FROM SCHEMA("AWS/Logs", LogGroupName)  
GROUP BY LogGroupName
ORDER BY SUM() DESC LIMIT 10
Top 10 log groups by written bytes
SELECT SUM(IncomingBytes)
FROM SCHEMA("AWS/Logs", LogGroupName)  
GROUP BY LogGroupName
ORDER BY SUM() DESC LIMIT 10
Amazon RDS examples
Top 10 Amazon RDS instances by highest CPU utilization
SELECT MAX(CPUUtilization)
FROM SCHEMA("AWS/RDS", DBInstanceIdentifier)  
GROUP BY DBInstanceIdentifier
ORDER BY MAX() DESC  
LIMIT 10
Top 10 Amazon RDS clusters by writes
SELECT SUM(WriteIOPS)
FROM SCHEMA("AWS/RDS", DBClusterIdentifier)  
GROUP BY DBClusterIdentifier
ORDER BY MAX() DESC  
LIMIT 10
Amazon Simple Storage Service examples
Average latency by bucket
SELECT AVG(TotalRequestLatency)  
FROM SCHEMA("AWS/S3", BucketName, FilterId)  
WHERE FilterId = 'EntireBucket'  
GROUP BY BucketName  
ORDER BY AVG() DESC
Top 10 buckets by bytes downloaded
SELECT SUM(BytesDownloaded)  
FROM SCHEMA("AWS/S3", BucketName, FilterId)  
WHERE FilterId = 'EntireBucket'
GROUP BY BucketName  
ORDER BY SUM() DESC  
94Amazon CloudWatch User Guide
Metrics Insights limits
LIMIT 10
Amazon Simple Notiﬁcation Service examples
Total messages published by SNS topics
SELECT SUM(NumberOfMessagesPublished)  
FROM SCHEMA("AWS/SNS", TopicName)
Top 10 topics by messages published
SELECT SUM(NumberOfMessagesPublished)  
FROM SCHEMA("AWS/SNS", TopicName)  
GROUP BY TopicName  
ORDER BY SUM() DESC  
LIMIT 10
Top 10 topics by message delivery failures
SELECT SUM(NumberOfNotificationsFailed)  
FROM SCHEMA("AWS/SNS", TopicName)
GROUP BY TopicName  
ORDER BY SUM() DESC  
LIMIT 10
Amazon SQS examples
Top 10 queues by age of number of visible messages
SELECT AVG(ApproximateNumberOfMessagesVisible)
FROM SCHEMA("AWS/SQS", QueueName)  
GROUP BY QueueName
ORDER BY AVG() DESC  
LIMIT 10
Top 10 most active queues
SELECT SUM(NumberOfMessagesSent)
FROM SCHEMA("AWS/SQS", QueueName)  
GROUP BY QueueName
ORDER BY SUM() DESC  
LIMIT 10
Top 10 queues by age of earliest message
SELECT AVG(ApproximateAgeOfOldestMessage)
FROM SCHEMA("AWS/SQS", QueueName)  
GROUP BY QueueName
ORDER BY AVG() DESC  
LIMIT 10
Metrics Insights limits
CloudWatch Metrics Insights currently has the following limits:
95Amazon CloudWatch User Guide
Metrics Insights glossary
•Currently, you can query only the most recent three hours of data.
•A single query can process no more than 10,000 metrics. This means that if the SELECT, FROM, and
WHERE  clauses match more than 10,000 metrics, the query only processes the ﬁrst 10,000 of these 
metrics that it ﬁnds.
•A single query can return no more than 500 time series. This means that if the query would return 
more than 500 metrics, not all metrics will be returned in the query results. If you use an ORDER BY
clause, then all the metrics being processed are sorted, and the 500 that have the highest or lowest 
values according to your ORDER BY clause are returned.
If you do not include an ORDER BY clause, you can't control which 500 matching metrics are returned.
•You can have as many as 75 Metrics Insights alarms per Region.
•Metrics Insights does not support high-resolution data, which is metric data reported with a 
granularity of less than one minute. If you request high-resolution data, the request does not fail, but 
the output is aggregated at one-minute granularity.
•Each GetMetricData  operation can have only one query, but you can have multiple widgets in a 
dashboard that each include a query.
Metrics Insights glossary
label
In Metrics Insights, a label is a key-value pair that is used to scope a query to return a particular 
set of data, or to deﬁne criteria by which query results are to be separated into separate time 
series. A label key is similar to a column name in SQL. Currently, labels must be CloudWatch metric 
dimensions.
observation
An observation is a value recorded for a given metric at a given time.
Troubleshooting Metrics Insights
The results include "Other," but I don't have this as a dimension
This means that the query includes a GROUP BY clause that speciﬁes a label key that is not used in some 
of the metrics that are returned by the query. In this case, a null group named Other is returned. The 
metrics that do not include that label key are probably aggregated metrics that return values aggregated 
across all values of that label key.
For example, suppose we have the following query:
SELECT AVG(Faults)  
FROM MyCustomNamespace  
GROUP BY Operation, ServiceName
If some of the returned metrics don't include ServiceName  as a dimension, then those metrics are 
displayed as having Other  as the value for ServiceName .
To prevent seeing "Other" in your results, use SCHEMA in your FROM clause, as in the following example:
SELECT AVG(Faults)  
FROM SCHEMA(MyCustomNamespace, Operation)
96Amazon CloudWatch User Guide
Use metrics explorer to monitor 
resources by their tags and properties
GROUP BY Operation, ServiceName
This limits the returned results to only the metrics that have both the Operation  and ServiceName
dimensions.
The oldest timestamp in my graph has a lower metric value than 
the others
CloudWatch Metrics Insights currently supports the latest three hours of data only. When you graph with 
a period larger than one minute, for example ﬁve minutes or one hour, there could be cases where the 
oldest data point diﬀers from the expected value. This is because the Metrics Insights queries return only 
the most recent 3 hours of data, so the oldest datapoint, being older than 3 hours, accounts only for 
observations that have been measured within the last three hours boundary.
Use metrics explorer to monitor resources by their 
tags and properties
Metrics explorer is a tag-based tool that enables you to ﬁlter, aggregate, and visualize your metrics by 
tags and resource properties, to enhance observability for your services. This gives you a ﬂexible and 
dynamic troubleshooting experience, so that you to create multiple graphs at a time and use these 
graphs to build your application health dashboards.
Metrics explorer visualizations are dynamic, so if a matching resource is created after you create a metrics 
explorer widget and add it to a CloudWatch dashboard, the new resource automatically appears in the 
explorer widget.
For example, if all of your EC2 production instances have the production  tag, you can use metrics 
explorer to ﬁlter and aggregate metrics from all of these instances to understand their health and 
performance. If a new instance with a matching tag is later created, it's automatically added to the 
metrics explorer widget.
Note
Metrics explorer provides a point-in-time experience. Resources that have been terminated, or 
no longer exist with the property or tag that you speciﬁed are not displayed in the visualisation. 
However, you can still ﬁnd the metrics for these resources in CloudWatch metrics views.
With metrics explorer, you can choose how to aggregate metrics from the resources that match the 
criteria, and whether to show them all in a single graph or on diﬀerent graphs within one metrics 
explorer widget.
Metrics explorer includes templates that you can use to see useful visualization graphs with one click, 
and you can also extend these templates to create completely customized metrics explorer widgets.
Metrics explorer supports metrics emitted by AWS and EC2 metrics that are published by the CloudWatch 
agent, including memory, disk, and CPU metrics. To use metrics explorer to see the metrics that are 
published by the CloudWatch agent, you might have to update your CloudWatch agent conﬁguration ﬁle. 
For more information, see CloudWatch agent conﬁguration for metrics explorer (p. 98)
To create a visualization with metrics explorer and optionally add it to a dashboard, follow these steps.
To create a visualization with metrics explorer
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
97Amazon CloudWatch User Guide
CloudWatch agent conﬁguration for metrics explorer
2. In the navigation pane, choose Explorer.
3. Do one of the following:
• To use a template, select it in the box that currently shows Empty Explorer.
Depending on the template, the explorer might immediately display graphs of metrics. If it 
doesn't, choose one or more tags or properties in the From box and then data should appear. If 
it doesn't, use the options at the top of the page to display a longer time range in the graphs.
• To create a custom visualization, under Metrics , choose a single metric or all the available 
metrics from a service.
After you choose a metric, you can optionally repeat this step to add more metrics.
4. For each metric selected, CloudWatch displays the statistic that it will use immediately after the 
metric name. To change this, choose the statistic name, and then choose the statistic that you want.
5. Under From, choose a tag or a resource property to ﬁlter your results.
After you do this, you can optionally repeat this step to choose more tags or resource properties.
If you choose multiple values of the same property, such as two EC2 instance types, the explorer 
displays all the resources that match either chosen property. It's treated as an OR operation.
If you choose diﬀerent properties or tags, such as the Production  tag and the M5 instance type, 
only the resources that match all of these selections are displayed. It's treated as an AND operation.
6. (Optional) For Aggregate by, choose a statistic to use to aggregate the metrics. Then, next to for, 
choose how to aggregate the metric from the list. You can aggregate together all the resources that 
are currently displayed, or aggregate by a single tag or resource property.
Depending on how you choose to aggregate, the result may be a single time series or multiple time 
series.
7. Under Split by, you can choose to split a single graph with multiple time series into multiple graphs. 
The split can be made by a variety of criteria, which you choose under Split by.
8. Under Graph options , you can reﬁne the graph by changing the period, the type of graph, the 
legend placement, and the layout.
9. To add this visualization as a widget to a CloudWatch dashboard, choose Add to dashboard .
CloudWatch agent conﬁguration for metrics explorer
To enable metrics explorer to discover EC2 metrics published by the CloudWatch agent, make sure that 
the CloudWatch agent conﬁguration ﬁle contains the following values:
•In the metrics section, make sure that the aggregation_dimensions  parameter includes
["InstanceId"] . It can also contain other dimensions.
•In the metrics section, make sure that the append_dimensions  parameter includes a
{"InstanceId":"${aws:InstanceId}"}  line. It can also contain other lines.
•In the metrics section, inside the metrics_collected  section, check the sections for each resource 
type that you want metrics explorer to discover, such as the cpu, disk , and memory sections. Make 
sure that each of these sections has a "resources": [ "*"] line. .
•In the cpu section of the metrics_collected  section, make sure there is a "totalcpu": true
line.
•You must use the default CWAgent namespace for the metrics collected by the CloudWatch agent, 
instead of a custom namespace.
The settings in the previous list cause the CloudWatch agent to publish aggregate metrics for disks, 
CPUs, and other resources that can be plotted in metrics explorer for all the instances that use it.
98Amazon CloudWatch User Guide
Use metric streams
These settings will republish the metrics that you had previously set up to be published with multiple 
dimensions, adding to your metric costs.
For more information about editing the CloudWatch agent conﬁguration ﬁle, see  Manually create or edit 
the CloudWatch agent conﬁguration ﬁle (p. 903).
Use metric streams
You can use metric streams  to continually stream CloudWatch metrics to a destination of your choice, 
with near-real-time delivery and low latency. Supported destinations include AWS destinations such as 
Amazon Simple Storage Service and several third-party service provider destinations.
There are two main usage scenarios for CloudWatch metric streams:
•Data lake— Create a metric stream and direct it to an Amazon Kinesis Data Firehose delivery 
stream that delivers your CloudWatch metrics to a data lake such as Amazon S3. This enables you 
to continually update monitoring data, or to combine this CloudWatch metric data with billing and 
performance data to create rich datasets. You can then use tools such as Amazon Athena to get insight 
into cost optimization, resource performance, and resource utilization.
•Third-party providers— Use third-party service providers to monitor, troubleshoot, and analyze your 
applications using the streamed CloudWatch data.
You can stream all of your CloudWatch metrics, or use ﬁlters to stream only speciﬁed metrics. Each 
metric stream can include up to 1000 ﬁlters that either include or exclude metric namespaces or speciﬁc 
metrics. A single metric stream can have only include or exclude ﬁlters, but not both.
After a metric stream is created, if new metrics are created that match the ﬁlters in place, the new 
metrics are automatically included in the stream.
There is no limit on the number of metric streams per account or per Region, and no limit on the number 
of metric updates being streamed.
Each stream can use either JSON format or OpenTelemetry 0.7.0 format.
For metric streams in monitoring accounts, you can choose whether to include metrics from the source 
accounts linked to that monitoring account. For more information, see CloudWatch cross-account 
observability (p. 846).
Metric streams always include the Minimum , Maximum , Sample count , and Sum statistics. You can also 
choose to include additional statistics at an additional charge. For more information, see Statistics that 
can be streamed (p. 103).
Metric streams pricing is based on the number of metric updates. You also incur charges from Kinesis 
Data Firehose for the delivery stream used for the metric stream. For more information, see Amazon 
CloudWatch Pricing.
Topics
•Set up a metric stream (p. 100)
•Statistics that can be streamed (p. 103)
•Metric stream operation and maintenance (p. 104)
•Monitor your metric streams with CloudWatch metrics (p. 105)
•Trust between CloudWatch and Kinesis Data Firehose (p. 105)
•Metric streams output formats (p. 106)
99Amazon CloudWatch User Guide
Set up a metric stream
•Troubleshooting (p. 117)
Set up a metric stream
Use the steps in the following sections to set up a CloudWatch metric stream.
After a metric stream is created, the time it takes for metric data to appear at the destination depends 
on the conﬁgured buﬀering settings on the Kinesis Data Firehose delivery stream. The buﬀering is 
expressed in maximum payload size or maximum wait time, whichever is reached ﬁrst. If these are 
set to the minimum values (60 seconds, 1MB) the expected latency is within 3 minutes if the selected 
CloudWatch namespaces have active metric updates.
In a CloudWatch metric stream, data is sent every minute. Data might arrive at the ﬁnal destination out 
of order. All speciﬁed metrics in the speciﬁed namespaces are sent in the metric stream, except metrics 
with a timestamp that is more than two hours old.
For each combination of metric name and namespace that you stream, all dimension combinations of 
that metric name and namespace are streamed.
For metric streams in monitoring accounts, you can choose whether to include metrics from the source 
accounts linked to that monitoring account. For more information, see CloudWatch cross-account 
observability (p. 846).
To create and manage metric streams, you must be logged on to an account that has the
CloudWatchFullAccess policy and the iam:PassRole  permission, or an account that has the following 
list of permissions:
•iam:PassRole
•cloudwatch:PutMetricStream
•cloudwatch:DeleteMetricStream
•cloudwatch:GetMetricStream
•cloudwatch:ListMetricStreams
•cloudwatch:StartMetricStreams
•cloudwatch:StopMetricStreams
If you're going to have CloudWatch set up the IAM role needed for metric streams, you must also have 
the iam:CreateRole  and iam:PutRolePolicy  permissions.
Important
A user with the cloudwatch:PutMetricStream  has access the CloudWatch metric data that is 
being streamed, even if they don't have the cloudwatch:GetMetricData  permission.
Topics
•Set up a metric stream to an AWS service (data lake scenario) (p. 100)
•Set up a metric stream to a third-party solution (p. 103)
Set up a metric stream to an AWS service (data lake scenario)
You can use the CloudWatch console, the AWS CLI, AWS CloudFormation, or the AWS Cloud 
Development Kit (AWS CDK) to set up a metric stream.
The Kinesis Data Firehose delivery stream that you use for your metric stream must be in the same 
account and the same Region where you set up the metric stream. To achieve cross-Region functionality, 
100Amazon CloudWatch User Guide
Set up a metric stream
you can conﬁgure the Kinesis Data Firehose delivery stream to stream to a ﬁnal destination that is in a 
diﬀerent account or a diﬀerent Region.
CloudWatch console
This section describes how to use the CloudWatch console to set up a metric stream to another AWS 
service.
When you use the console to set up a metric stream, you have the option of choosing the Quick S3 
Setup . This method works well if want the ﬁnal output as JSON or to be queried by Amazon Athena. If 
you want the ﬁnal format to be Parquet format or Optimized Row Columnar (ORC), you should create 
your own Kinesis Data Firehose delivery stream and choose Select an existing Firehose owned by your 
account instead of choosing Quick S3 Setup .
To set up a metric stream to an AWS service
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , Streams . Then choose Create metric stream .
3. (Optional) If you are signed in to an account that is set up as a monitoring account in CloudWatch 
cross-account observability, you can choose whether to include metrics from linked source accounts 
in this metric stream. To include metrics from source accounts, choose Include source account 
metrics .
4. Choose the CloudWatch metric namespaces to include in the metric stream.
• To include all or most of your metric namespaces in the metric stream, choose All namespaces.
Then, if you want to exclude some metric namespaces from the stream, choose Exclude metric 
namespaces and select the namespaces to exclude. If you specify a namespace in Exclude 
metric namespaces, all metrics in that namespace are excluded from the stream.
• To include only a few metric namespaces in the metric stream, choose Selected namespaces
and then select the namespaces to include.
Note
Consider carefully whether to stream all metrics, because the more metrics that you stream 
the higher your metric stream charges will be.
5. (Optional) Use the Select metrics for the metric stream option to create additional ﬁlters for 
speciﬁc metrics.
• If you chose to stream All namespaces, you can use this section to exclude speciﬁc metrics from 
the stream while still including other metrics from that same namespace in the stream. To do 
so, do the following:
a. Choose Exclude metrics by metric name
b. Specify each metric to exclude by selecting its namespace and then its metric name.
After you select one metric, you can repeat this step to exclude another metric from the 
same namespace or a diﬀerent one.
• If you chose to stream Selected namespaces, you can use this section to include only a subset 
of metrics from those namespace in the metric stream. To do so, do the following:
a. Choose Include metrics by metric name
b. Specify each metric to include by selecting its namespace and then its metric name.
After you select one metric, you can repeat this step to include another metric from the 
same namespace or a diﬀerent one.
If you don't select any metrics from one of your included namespaces, then all metric from 
that namespace are included in the metric stream.
101Amazon CloudWatch User Guide
Set up a metric stream
6. Choose one of the following:
• For a quick setup, choose Quick S3 setup . CloudWatch will create all necessary resources 
including the Kinesis Data Firehose delivery stream and the necessary IAM roles. The default 
format for this option is JSON, but you can change the format later in this procedure.
• To use a Kinesis Data Firehose delivery stream that already exists, choose Select an existing 
Firehose owned by your account. The Kinesis Data Firehose delivery stream must be in the 
same account. The default format for this option is OpenTelemetry, but you can change the 
format later in this procedure.
Then select the Kinesis Data Firehose delivery stream to use under Select your Kinesis Data 
Firehose delivery stream.
7. (Optional) If you're using Quick S3 Setup , you can choose Select existing resources to use an 
existing S3 bucket or existing IAM roles instead of having CloudWatch create new ones for you.
8. (Optional) If you're using Select an existing Firehose owned by your account, you can choose
Select existing service role to use an existing IAM role instead of having CloudWatch create a new 
one for you.
9. (Optional) To change the output format from the default format for your scenario, choose Change 
output format . The supported formats are JSON and OpenTelemetry 0.7.0.
10. (Optional) To stream additional statistics for some of these metrics beyond Minimum, Maximum, 
Sample count, and Sum, choose Add additional statistics . Either choose Add recommended metrics
to add some commonly used statistics, or manually select the namespace and metric name to 
stream additional statistics for. Next, select the additional statistics to stream.
To then choose another group of metrics to stream a diﬀerent set of additional statistics for, choose
Add additional statistics . Each metric can include as many as 20 additional statistics, and as many 
as 100 metrics within a metric stream can include additional statistics.
Streaming additional statistics incurs more charges. For more information, see Statistics that can be 
streamed (p. 103).
For deﬁnitions of the additional statistics, see CloudWatch statistics deﬁnitions (p. 166).
11. (Optional) Customize the name of the new metric stream under Metric stream name .
12. Choose Create metric stream .
AWS CLI or AWS API
Use the following steps to create a CloudWatch metric stream to another AWS service.
To use the AWS CLI or AWS API to create a metric stream
1. If you're streaming to Amazon S3, ﬁrst create the bucket. For more information, see  Creating a 
bucket.
2. Create the Kinesis Data Firehose delivery stream. For more information, see  Creating an Amazon 
Kinesis Data Firehose Delivery Stream.
3. Create an IAM role that enables CloudWatch to write to the Kinesis Data Firehose delivery stream. 
For more information about the contents of this role, see Trust between CloudWatch and Kinesis 
Data Firehose (p. 105).
4. Use the aws cloudwatch put-metric-stream  CLI command or the PutMetricStream  API to 
create the CloudWatch metric stream.
AWS CloudFormation
You can use AWS CloudFormation to set up a metric stream. For more information, see 
AWS::CloudWatch::MetricStream.
102Amazon CloudWatch User Guide
Statistics that can be streamed
To use AWS CloudFormation to create a metric stream
1. If you're streaming to Amazon S3, ﬁrst create the bucket. For more information, see  Creating a 
bucket.
2. Create the Kinesis Data Firehose delivery stream. For more information, see  Creating an Amazon 
Kinesis Data Firehose Delivery Stream.
3. Create an IAM role that enables CloudWatch to write to the Kinesis Data Firehose delivery stream. 
For more information about the contents of this role, see Trust between CloudWatch and Kinesis 
Data Firehose (p. 105).
4. Create the stream in AWS CloudFormation. For more information, see 
AWS::CloudWatch::MetricStream.
AWS Cloud Development Kit (AWS CDK)
You can use AWS Cloud Development Kit (AWS CDK) to set up a metric stream.
To use the AWS CDK to create a metric stream
1. If you're streaming to Amazon S3, ﬁrst create the bucket. For more information, see  Creating a 
bucket.
2. Create the Kinesis Data Firehose delivery stream. For more information, see  Creating an Amazon 
Kinesis Data Firehose Delivery Stream.
3. Create an IAM role that enables CloudWatch to write to the Kinesis Data Firehose delivery stream. 
For more information about the contents of this role, see Trust between CloudWatch and Kinesis 
Data Firehose (p. 105).
4. Create the metric stream. The metric stream resource is available in AWS CDK as a Level 1 (L1) 
Construct named CfnMetricStream . For more information, see  Using L1 constructs.
Set up a metric stream to a third-party solution
To set up a CloudWatch metric stream to stream metrics to a third-party solution, follow the instructions 
provided by that third-party provider.
Statistics that can be streamed
Metric streams always include the following statistics: Minimum , Maximum , Sample count , and
Sum. You can also choose to include the following additional statistics in a metric stream. This choice 
is on a per-metric basis. For more information about these statistics, see CloudWatch statistics 
deﬁnitions  (p. 166).
•Percentile values such as p95 or p99 (For streams with either JSON or OpenTelemetry format)
•Trimmed mean (Only for streams with the JSON format)
•Winsorized mean (Only for streams with the JSON format)
•Trimmed count (Only for streams with the JSON format)
•Trimmed sum (Only for streams with the JSON format)
•Percentile rank (Only for streams with the JSON format)
•Interquartile mean (Only for streams with the JSON format)
Streaming additional statistics incurs additional charges. Streaming between one and ﬁve of these 
additional statistics for a particular metric is billed as an additional metric update. Thereafter, each 
additional set of up to ﬁve of these statistics is billed as another metric update.
103Amazon CloudWatch User Guide
Metric stream operation and maintenance
For example, suppose that for one metric you are streaming the following six additional statistics: p95, 
p99, p99.9, Trimmed mean, Winsorized mean, and Trimmed sum. Each update of this metric is billed as 
three metric updates: one for the metric update which includes the default statistics, one for the ﬁrst ﬁve 
additional statistics, and one for the sixth additional statistic. Adding up to four more additional statistics 
for a total of ten would not increase the billing, but an eleventh additional statistic would do so.
When you specify a metric name and namespace combination to stream additional statistics, all 
dimension combinations of that metric name and namespace are streamed with the additional statistics.
CloudWatch metric streams publishes a new metric, TotalMetricUpdate , which reﬂects the base 
number of metric updates plus extra metric updates incurred by streaming additional statistics. For more 
information, see Monitor your metric streams with CloudWatch metrics (p. 105).
For more information, see Amazon CloudWatch Pricing.
Note
Some metrics do not support percentiles. Percentile statistics for these metrics are excluded 
from the stream and do not incur metric stream charges. An example of these statistics that do 
not support percentiles are some metrics in the AWS/ECS namespace.
The additional statistics that you conﬁgure are streamed only if they match the ﬁlters for the stream. For 
example, if you create a stream that has only EC2 and RDS in the include ﬁlters, and then your statistics 
conﬁguration lists EC2 and Lambda, then the stream includes EC2 metrics with additional statistics, RDS
metrics with only the default statistics, and doesn't include Lambda  statistics at all.
Metric stream operation and maintenance
Metric streams are always in one of two states, Running  or Stopped .
•Running — The metric stream is running correctly. There might not be any metric data streamed to the 
destination because of the ﬁlters on the stream.
•Stopped — The metric stream has been explicitly stopped by someone, and not because of an error. It 
might be useful to stop your stream to temporarily pause the streaming of data without deleting the 
stream.
If you stop and restart a metric stream, the metric data that was published to CloudWatch while the 
metric stream was stopped is not backﬁlled to the metric stream.
If you change the output format of a metric stream, in certain cases you might see a small amount of 
metric data written to the destination in both the old format and the new format. To avoid this situation, 
you can create a new Kinesis Data Firehose delivery stream with the same conﬁguration as your current 
one, then change to the new Kinesis Data Firehose delivery stream and change the output format at 
the same time. This way, the Kinesis records with diﬀerent output format are stored on Amazon S3 
in separate objects. Later, you can direct the traﬃc back to the original Kinesis Data Firehose delivery 
stream and delete the second delivery stream.
To view, edit, stop, and start your metric streams
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , Streams .
The list of streams appears, and the Status  column displays whether each stream is running or 
stopped.
3. To stop or start a metric stream, select the stream and choose Stop  or Start.
4. To see the details about a metric stream, select the stream and choose View details .
5. To change the stream's output format, ﬁlters, destination Kinesis Data Firehose stream, or roles, 
choose Edit and make the changes that you want.
104Amazon CloudWatch User Guide
Monitor your metric streams with CloudWatch metrics
If you change the ﬁlters, there might be some gaps in the metric data during the transition.
Monitor your metric streams with CloudWatch 
metrics
Metric streams emit CloudWatch metrics about their health and operation in the AWS/CloudWatch/
MetricStreams  namespace. The following metrics are emitted. These metrics are emitted 
with a MetricStreamName  dimension and with no dimension. You can use the metrics with no 
dimensions to see aggregated metrics for all of your metric streams. You can use the metrics with the
MetricStreamName  dimension to see the metrics about only that metric stream.
For all of these metrics, values are emitted only for metric streams that are in the Running  state.
Metric Description
MetricUpdate The number of metric updates sent to the metric stream. If no metric 
updates are streamed during a time period, this metric is not emitted during 
that time period.
If you stop the metric stream, this metric stops being emitted until the 
metric stream is started again.
Valid Statistic: Sum
Units: None
TotalMetricUpdate This is calculated as MetricUpdate + a number based on additional 
statistics that are being streamed .
For each unique namespace and metric name combination, streaming 1-5 
additional statistics adds 1 to the TotalMetricUpdate , streaming 6-10 
additional statistics adds 2 to TotalMetricUpdate , and so on.
Valid Statistic: Sum
Units: None
PublishErrorRate The number of unrecoverable errors that occur when putting data into the 
Kinesis Data Firehose delivery stream. If no errors occur during a time period, 
this metric is not emitted during that time period.
If you stop the metric stream, this metric stops being emitted until the 
metric stream is started again.
Valid Statistic: Average  to see the rate of metric updates unable to be 
written. This value will be between 0.0 and 1.0.
Units: None
Trust between CloudWatch and Kinesis Data Firehose
The Kinesis Data Firehose delivery stream must trust CloudWatch through an IAM role that has 
write permissions to Kinesis Data Firehose. These permissions can be limited to the single Kinesis 
105Amazon CloudWatch User Guide
Metric streams output formats
Data Firehose delivery stream that the CloudWatch metric stream uses. The IAM role must trust the
streams.metrics.cloudwatch.amazonaws.com  service principal.
If you use the CloudWatch console to create a metric stream, you can have CloudWatch create the role 
with the correct permissions. If you use another method to create a metric stream, or you want to create 
the IAM role itself, it must contain the following permissions policy and trust policy.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Action": [ 
                "firehose:PutRecord", 
                "firehose:PutRecordBatch" 
            ], 
            "Effect": "Allow", 
            "Resource": "arn:aws:firehose: region:account-id:deliverystream/*" 
        } 
    ]
}
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Principal": { 
        "Service": "streams.metrics.cloudwatch.amazonaws.com" 
      }, 
      "Action": "sts:AssumeRole" 
    } 
  ]
}
Metric data is streamed by CloudWatch to the destination Kinesis Data Firehose delivery stream on 
behalf of the source that owns the metric stream resource.
Metric streams output formats
The data in a CloudWatch metric stream can be in the JSON format or the OpenTelemetry format. 
Currently, the version of OpenTelemetry format supported is 0.7.0.
Contents
•JSON format (p. 106)
•Which AWS Glue schema should I use for JSON output format? (p. 107)
•OpenTelemetry 0.7.0 format (p. 108)
•Translations with OpenTelemetry 0.7.0 format (p. 113)
•How to parse OpenTelemetry 0.7.0 messages (p. 114)
JSON format
In a CloudWatch metric stream that uses the JSON format, each Kinesis Data Firehose record contains 
multiple JSON objects separated by a newline character (\n). Each object includes a single data point of a 
single metric.
The JSON format that is used is fully compatible with AWS Glue and with Amazon Athena. If you have 
a Kinesis Data Firehose delivery stream and an AWS Glue table formatted correctly, the format can be 
106Amazon CloudWatch User Guide
Metric streams output formats
automatically transformed into Parquet format or Optimized Row Columnar (ORC) format before being 
stored in S3. For more information about transforming the format, see  Converting Your Input Record 
Format in Kinesis Data Firehose. For more information about the correct format for AWS Glue, see Which 
AWS Glue schema should I use for JSON output format? (p. 107).
In the JSON format, the valid values for unit are the same as for the value of unit  in the MetricDatum
API structure. For more information, see  MetricDatum . The value for the timestamp  ﬁeld is in epoch 
milliseconds, such as 1616004674229 .
The following is an example of the format. In this example, the JSON is formatted for easy reading, but 
in practice the whole format is on a single line.
{ 
    "metric_stream_name": "MyMetricStream", 
    "account_id": "1234567890", 
    "region": "us-east-1", 
    "namespace": "AWS/EC2", 
    "metric_name": "DiskWriteOps", 
    "dimensions": { 
        "InstanceId": "i-123456789012" 
    }, 
    "timestamp": 1611929698000, 
    "value": { 
        "count": 3.0, 
        "sum": 20.0, 
        "max": 18.0, 
        "min": 0.0, 
        "p99": 17.56, 
        "p99.9": 17.8764, 
        "TM(25%:75%)": 16.43 
    }, 
    "unit": "Seconds"
}
Which AWS Glue schema should I use for JSON output format?
The following is an example of a JSON representation of the StorageDescriptor  for an AWS 
Glue table, which would then be used by Kinesis Data Firehose. For more information about
StorageDescriptor , see  StorageDescriptor .
{ 
  "Columns": [ 
    { 
      "Name": "metric_stream_name", 
      "Type": "string" 
    }, 
    { 
      "Name": "account_id", 
      "Type": "string" 
    }, 
    { 
      "Name": "region", 
      "Type": "string" 
    }, 
    { 
      "Name": "namespace", 
      "Type": "string" 
    }, 
    { 
      "Name": "metric_name", 
      "Type": "string" 
    }, 
    { 
107Amazon CloudWatch User Guide
Metric streams output formats
      "Name": "timestamp", 
      "Type": "timestamp" 
    }, 
    { 
      "Name": "dimensions", 
      "Type": "map<string,string>" 
    }, 
    { 
      "Name": "value", 
      "Type": 
 "struct<min:double,max:double,count:double,sum:double,p99:double,p99.9:double>" 
    }, 
    { 
      "Name": "unit", 
      "Type": "string" 
    } 
  ], 
  "Location": "s3://my-s3-bucket/", 
  "InputFormat": "org.apache.hadoop.mapred.TextInputFormat", 
  "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat", 
  "SerdeInfo": { 
    "SerializationLibrary": "org.apache.hive.hcatalog.data.JsonSerDe" 
  }, 
  "Parameters": { 
    "classification": "json" 
  }
}
The preceding example is for data written on Amazon S3 in JSON format. Replace the values in the 
following ﬁelds with the indicated values to store the data in Parquet format or Optimized Row 
Columnar (ORC) format.
•Parquet:
•inputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
•outputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
•SerDeInfo.serializationLib: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
•parameters.classiﬁcation: parquet
•ORC:
•inputFormat: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
•outputFormat: org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat
•SerDeInfo.serializationLib: org.apache.hadoop.hive.ql.io.orc.OrcSerde
•parameters.classiﬁcation: orc
OpenTelemetry 0.7.0 format
OpenTelemetry is a collection of tools, APIs, and SDKs. You can use it to instrument, generate, collect, 
and export telemetry data (metrics, logs, and traces) for analysis. OpenTelemetry is part of the Cloud 
Native Computing Foundation. For more information, see OpenTelemetry.
For information about the full OpenTelemetry 0.7.0 speciﬁcation, see v0.7.0 release.
Note
While metric streams is in general availability, the OpenTelemetry format 0.7.0 is not yet 
generally available. Metric streams will continue to oﬀer OpenTelemetry format 0.7.0 even 
when the OpenTelemetry format version 1.0 becomes available.
A Kinesis record can contain one or more ExportMetricsServiceRequest  OpenTelemetry data 
structures. Each data structure starts with a header with an UnsignedVarInt32  indicating the record 
108Amazon CloudWatch User Guide
Metric streams output formats
length in bytes. Each ExportMetricsServiceRequest  may contain data from multiple metrics at 
once.
The following is a string representation of the message of the ExportMetricsServiceRequest
OpenTelemetry data structure. OpenTelemetry serializes the Google Protocol Buﬀers binary protocol, 
and this is not human-readable.
resource_metrics { 
  resource { 
    attributes { 
      key: "cloud.provider" 
      value { 
        string_value: "aws" 
      } 
    } 
    attributes { 
      key: "cloud.account.id" 
      value { 
        string_value: "2345678901" 
      } 
    } 
    attributes { 
      key: "cloud.region" 
      value { 
        string_value: "us-east-1" 
      } 
    } 
    attributes { 
      key: "aws.exporter.arn" 
      value { 
        string_value: "arn:aws:cloudwatch:us-east-1:123456789012:metric-stream/
MyMetricStream" 
      } 
    } 
  } 
  instrumentation_library_metrics { 
    metrics { 
      name: "amazonaws.com/AWS/DynamoDB/ConsumedReadCapacityUnits" 
      unit: "1" 
      double_summary { 
        data_points { 
          labels { 
            key: "Namespace" 
            value: "AWS/DynamoDB" 
          } 
          labels { 
            key: "MetricName" 
            value: "ConsumedReadCapacityUnits" 
          } 
          labels { 
            key: "TableName" 
            value: "MyTable" 
          } 
          start_time_unix_nano: 1604948400000000000 
          time_unix_nano: 1604948460000000000 
          count: 1 
          sum: 1.0 
          quantile_values { 
            quantile: 0.0 
            value: 1.0 
          } 
          quantile_values { 
            quantile: 0.95 
            value: 1.0 
          }           
109Amazon CloudWatch User Guide
Metric streams output formats
          quantile_values { 
            quantile: 0.99 
            value: 1.0 
          } 
          quantile_values { 
            quantile: 1.0 
            value: 1.0 
          } 
        } 
        data_points { 
          labels { 
            key: "Namespace" 
            value: "AWS/DynamoDB" 
          } 
          labels { 
            key: "MetricName" 
            value: "ConsumedReadCapacityUnits" 
          } 
          labels { 
            key: "TableName" 
            value: "MyTable" 
          } 
          start_time_unix_nano: 1604948460000000000 
          time_unix_nano: 1604948520000000000 
          count: 2 
          sum: 5.0 
          quantile_values { 
            quantile: 0.0 
            value: 2.0 
          } 
          quantile_values { 
            quantile: 1.0 
            value: 3.0 
          } 
        } 
      } 
    } 
  }
}
Top-level object to serialize OpenTelemetry metric data
ExportMetricsServiceRequest  is the top-level wrapper to serialize an OpenTelemetry exporter 
payload. It contains one or more ResourceMetrics .
message ExportMetricsServiceRequest { 
  // An array of ResourceMetrics. 
  // For data coming from a single resource this array will typically contain one 
  // element. Intermediary nodes (such as OpenTelemetry Collector) that receive 
  // data from multiple origins typically batch the data before forwarding further and 
  // in that case this array will contain multiple elements. 
  repeated opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
}
ResourceMetrics  is the top-level object to represent MetricData objects.
// A collection of InstrumentationLibraryMetrics from a Resource.
message ResourceMetrics { 
  // The resource for the metrics in this message. 
  // If this field is not set then no resource info is known. 
  opentelemetry.proto.resource.v1.Resource resource = 1; 
   
  // A list of metrics that originate from a resource. 
110Amazon CloudWatch User Guide
Metric streams output formats
  repeated InstrumentationLibraryMetrics instrumentation_library_metrics = 2;
}
The Resource object
A Resource  object is a value-pair object that contains some information about the resource that 
generated the metrics. For metrics created by AWS, the data structure contains the Amazon Resource 
Name (ARN) of the resource related to the metric, such as an EC2 instance or an S3 bucket.
The Resource  object contains an attribute called attributes , which store a list of key-value pairs.
•cloud.account.id  contains the account ID
•cloud.region  contains the Region
•aws.exporter.arn  contains the metric stream ARN
•cloud.provider  is always aws.
// Resource information.
message Resource { 
  // Set of labels that describe the resource. 
  repeated opentelemetry.proto.common.v1.KeyValue attributes = 1; 
   
  // dropped_attributes_count is the number of dropped attributes. If the value is 0, 
  // no attributes were dropped. 
  uint32 dropped_attributes_count = 2;
}
The InstrumentationLibraryMetrics object
The instrumentation_library ﬁeld will not be ﬁlled. We will ﬁll only the metrics ﬁeld that we are 
exporting.
// A collection of Metrics produced by an InstrumentationLibrary.
message InstrumentationLibraryMetrics { 
  // The instrumentation library information for the metrics in this message. 
  // If this field is not set then no library info is known. 
  opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1; 
  // A list of metrics that originate from an instrumentation library. 
  repeated Metric metrics = 2;
}
The Metric object
The metric object contains a DoubleSummary  data ﬁeld that contains a list of
DoubleSummaryDataPoint .
message Metric { 
  // name of the metric, including its DNS name prefix. It must be unique. 
  string name = 1; 
  // description of the metric, which can be used in documentation. 
  string description = 2; 
  // unit in which the metric value is reported. Follows the format 
  // described by http://unitsofmeasure.org/ucum.html. 
  string unit = 3; 
  oneof data { 
    IntGauge int_gauge = 4; 
111Amazon CloudWatch User Guide
Metric streams output formats
    DoubleGauge double_gauge = 5; 
    IntSum int_sum = 6; 
    DoubleSum double_sum = 7; 
    IntHistogram int_histogram = 8; 
    DoubleHistogram double_histogram = 9; 
    DoubleSummary double_summary = 11; 
  }
}
message DoubleSummary { 
  repeated DoubleSummaryDataPoint data_points = 1;
}
The MetricDescriptor object
The MetricDescriptor object contains metadata. For more information, see metrics.proto on GitHub.
For metric streams, the MetricDescriptor has the following contents:
•name  will be amazonaws.com/ metric_namespace /metric_name
•description  will be blank.
•unit will be ﬁlled by mapping the metric datum's unit to the case-sensitive variant of the Uniﬁed 
code for Units of Measure. For more information, see  Translations with OpenTelemetry 0.7.0 
format  (p. 113) and The Uniﬁed Code For Units of Measure.
•type  will be SUMMARY .
The DoubleSummaryDataPoint object
The DoubleSummaryDataPoint object contains the value of a single data point in a time series in a 
DoubleSummary metric.
// DoubleSummaryDataPoint is a single data point in a timeseries that describes the
// time-varying values of a Summary metric.
message DoubleSummaryDataPoint { 
  // The set of labels that uniquely identify this timeseries. 
  repeated opentelemetry.proto.common.v1.StringKeyValue labels = 1; 
  // start_time_unix_nano is the last time when the aggregation value was reset 
  // to "zero". For some metric types this is ignored, see data types for more 
  // details. 
  // 
  // The aggregation value is over the time interval (start_time_unix_nano, 
  // time_unix_nano]. 
  // 
  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 
  // 1970. 
  // 
  // Value of 0 indicates that the timestamp is unspecified. In that case the 
  // timestamp may be decided by the backend. 
  fixed64 start_time_unix_nano = 2; 
  // time_unix_nano is the moment when this aggregation value was reported. 
  // 
  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 
  // 1970. 
  fixed64 time_unix_nano = 3; 
  // count is the number of values in the population. Must be non-negative. 
  fixed64 count = 4; 
  // sum of the values in the population. If count is zero then this field 
112Amazon CloudWatch User Guide
Metric streams output formats
  // must be zero. 
  double sum = 5; 
  // Represents the value at a given quantile of a distribution. 
  // 
  // To record Min and Max values following conventions are used: 
  // - The 1.0 quantile is equivalent to the maximum value observed. 
  // - The 0.0 quantile is equivalent to the minimum value observed. 
  message ValueAtQuantile { 
    // The quantile of a distribution. Must be in the interval 
    // [0.0, 1.0]. 
    double quantile = 1; 
    // The value at the given quantile of a distribution. 
    double value = 2; 
  } 
  // (Optional) list of values at different quantiles of the distribution calculated 
  // from the current snapshot. The quantiles must be strictly increasing. 
  repeated ValueAtQuantile quantile_values = 6;
}
For more information, see  Translations with OpenTelemetry 0.7.0 format (p. 113).
Translations with OpenTelemetry 0.7.0 format
CloudWatch performs some transformations to put CloudWatch data into OpenTelemetry format.
Translating namespace, metric name, and dimensions
These attributes are key-value pairs encoded in the mapping.
•One pair contains the namespace of the metric
•One pair contains the name of the metric
•For each dimension, CloudWatch stores the following pair: metricDatum.Dimensions[i]. Name, 
metricDatum.Dimensions[i]. Value
Translating Average, Sum, SampleCount, Min and Max
The Summary datapoint enables CloudWatch to export all of these statistics using one datapoint.
•startTimeUnixNano  contains the CloudWatch startTime
•timeUnixNano  contains the CloudWatch endTime
•sum contains the Sum statistic.
•count contains the SampleCount statistic.
•quantile_values  contains two valueAtQuantile.value  objects:
•valueAtQuantile.quantile = 0.0  with valueAtQuantile.value = Min value
•valueAtQuantile.quantile = 0.99  with valueAtQuantile.value = p99 value
•valueAtQuantile.quantile = 0.999  with valueAtQuantile.value = p99.9 value
•valueAtQuantile.quantile = 1.0  with valueAtQuantile.value = Max value
Resources that consume the metric stream can calculate the Average statistic as Sum/SampleCount.
Translating units
CloudWatch units are mapped to the case-sensitive variant of the Uniﬁed code for Units of Measure, as 
shown in the following table. For more information, see The Uniﬁed Code For Units of Measure.
113Amazon CloudWatch User Guide
Metric streams output formats
CloudWatch OpenTelemetry
Second s
Second or Seconds s
Microsecond us
Milliseconds ms
Bytes By
Kilobytes kBy
Megabytes MBy
Gigabytes GBy
Terabytes TBy
Bits bit
Kilobits kbit
Megabits MBit
Gigabits GBit
Terabits Tbit
Percent %
Count {Count}
None 1
Units that are combined with a slash are mapped by applying the OpenTelemetry conversion of both the 
units. For example, Bytes/Second is mapped to By/s.
How to parse OpenTelemetry 0.7.0 messages
This section provides information to help you get started with parsing OpenTelemetry 0.7.0.
First, you should get language-speciﬁc bindings, which enable you to parse OpenTelemetry 0.7.0 
messages in your preferred language.
To get language-speciﬁc bindings
• The steps depend on your preferred language.
• To use Java, add the following Maven dependency to your Java project: OpenTelemetry Java >> 
0.14.1 .
• To use any other language, follow these steps:
a. Make sure that your language is supported by checking the list at Generating Your Classes.
b. Install the Protobuf compiler by following the steps at Download Protocol Buﬀers.
c. Download the OpenTelemetry 0.7.0 ProtoBuf deﬁnitions at v0.7.0 release.
d. Conﬁrm that you are in the root folder of the downloaded OpenTelemetry 0.7.0 ProtoBuf 
deﬁnitions. Then create a src folder and then run the command to generate language-
speciﬁc bindings. For more information, see Generating Your Classes.
114Amazon CloudWatch User Guide
Metric streams output formats
The following is an example for how to generate Javascript bindings.
protoc --proto_path=./ --js_out=import_style=commonjs,binary:src \
opentelemetry/proto/common/v1/common.proto \
opentelemetry/proto/resource/v1/resource.proto \
opentelemetry/proto/metrics/v1/metrics.proto \
opentelemetry/proto/collector/metrics/v1/metrics_service.proto
The following section includes examples of using the language-speciﬁc bindings that you can build using 
the previous instructions.
Java
package com.example;
import io.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
public class MyOpenTelemetryParser { 
    public List<ExportMetricsServiceRequest> parse(InputStream inputStream) throws 
 IOException { 
        List<ExportMetricsServiceRequest> result = new ArrayList<>(); 
        ExportMetricsServiceRequest request; 
        /* A Kinesis record can contain multiple `ExportMetricsServiceRequest` 
           records, each of them starting with a header with an 
           UnsignedVarInt32 indicating the record length in bytes: 
            ------ --------------------------- ------ ----------------------- 
           |UINT32|ExportMetricsServiceRequest|UINT32|ExportMetricsService... 
            ------ --------------------------- ------ ----------------------- 
         */ 
        while ((request = ExportMetricsServiceRequest.parseDelimitedFrom(inputStream)) != 
 null) { 
            // Do whatever we want with the parsed message 
            result.add(request); 
        } 
        return result; 
    }
}
Javascript
This example assumes that the root folder with the bindings generated is ./
The data argument of the function parseRecord  can be one of the following types:
•Uint8Array  this is optimal
•Buffer  optimal under node
•Array.number  8-bit integers
const pb = require('google-protobuf')
const pbMetrics = 
115Amazon CloudWatch User Guide
Metric streams output formats
    require('./opentelemetry/proto/collector/metrics/v1/metrics_service_pb')
function parseRecord(data) { 
    const result = [] 
    // Loop until we've read all the data from the buffer 
    while (data.length) { 
        /* A Kinesis record can contain multiple `ExportMetricsServiceRequest` 
           records, each of them starting with a header with an 
           UnsignedVarInt32 indicating the record length in bytes: 
            ------ --------------------------- ------ ----------------------- 
           |UINT32|ExportMetricsServiceRequest|UINT32|ExportMetricsService... 
            ------ --------------------------- ------ ----------------------- 
         */ 
        const reader = new pb.BinaryReader(data) 
        const messageLength = reader.decoder_.readUnsignedVarint32() 
        const messageFrom = reader.decoder_.cursor_ 
        const messageTo = messageFrom + messageLength 
        // Extract the current `ExportMetricsServiceRequest` message to parse 
        const message = data.subarray(messageFrom, messageTo) 
        // Parse the current message using the ProtoBuf library 
        const parsed = 
            pbMetrics.ExportMetricsServiceRequest.deserializeBinary(message) 
        // Do whatever we want with the parsed message 
        result.push(parsed.toObject()) 
        // Shrink the remaining buffer, removing the already parsed data 
        data = data.subarray(messageTo) 
    } 
    return result
}
Python
You must read the var-int delimiters yourself or use the internal methods _VarintBytes(size)  and
_DecodeVarint32(buffer, position) . These return the position in the buﬀer just after the size 
bytes. The read-side constructs a new buﬀer that is limited to reading only the bytes of the message.
size = my_metric.ByteSize()
f.write(_VarintBytes(size))
f.write(my_metric.SerializeToString())
msg_len, new_pos = _DecodeVarint32(buf, 0)
msg_buf = buf[new_pos:new_pos+msg_len]
request = metrics_service_pb.ExportMetricsServiceRequest()
request.ParseFromString(msg_buf)
Go
Use Buffer.DecodeMessage() .
C#
Use CodedInputStream . This class can read size-delimited messages.
C++
The functions described in google/protobuf/util/delimited_message_util.h  can read size-
delimited messages.
116Amazon CloudWatch User Guide
Troubleshooting
Other languages
For other languages, see Download Protocol Buﬀers.
When implementing the parser, consider that a Kinesis record can contain multiple
ExportMetricsServiceRequest  Protocol Buﬀers messages, each of them starting with a header with 
an UnsignedVarInt32  that indicates the record length in bytes.
Troubleshooting
If you're not seeing metric data at your ﬁnal destination, check the following:
•Check that the metric stream is in the running state. For steps on how to use the CloudWatch console 
to do this, see Metric stream operation and maintenance (p. 104).
•Metrics published more than two hours in the past are not streamed. To determine whether a 
particular metric will be streamed, graph the metric in the CloudWatch console and check how old the 
last visible datapoint is. If it is more than two hours in the past, then it won't be picked up by metric 
streams.
•Check the metrics emitted by the metric stream. In the CloudWatch console, under Metrics , look at 
the AWS/CloudWatch/MetricStreams  namespace for the MetricUpdate , TotalMetricUpdate, and
PublishErrorRate  metrics.
•If the PublishErrorRate  metric is high, conﬁrm that the destination that is used by the Kinesis Data 
Firehose delivery stream exists and that the IAM role speciﬁed in the metric stream's conﬁguration 
grants the CloudWatch  service principal permissions to write to it. For more information, see Trust 
between CloudWatch and Kinesis Data Firehose (p. 105).
•Check that the Kinesis Data Firehose delivery stream has permission to write to the ﬁnal destination.
•In the Kinesis Data Firehose console, view the Kinesis Data Firehose delivery stream that is used for the 
metric stream and check the Monitoring  tab to see whether the Kinesis Data Firehose delivery stream 
is receiving data.
•Conﬁrm that you have conﬁgured your Kinesis Data Firehose delivery stream with the correct details.
•Check any available logs or metrics for the ﬁnal destination that the Kinesis Data Firehose delivery 
stream writes to.
•To get more detailed information, enable CloudWatch Logs error logging on the Kinesis Data Firehose 
delivery stream. For more information, see  Monitoring Kinesis Data Firehose Using CloudWatch Logs.
View available metrics
Metrics are grouped ﬁrst by namespace, and then by the various dimension combinations within each 
namespace. For example, you can view all EC2 metrics, EC2 metrics grouped by instance, or EC2 metrics 
grouped by Auto Scaling group.
Only the AWS services that you're using send metrics to Amazon CloudWatch.
For a list of AWS services that send metrics to CloudWatch, see AWS services that publish CloudWatch 
metrics  (p. 1001 ). From this page, you can also see the metrics and dimensions that are published by 
each of those services.
Note
Metrics that have not had any new data points in the past two weeks do not appear in the 
console. They also do not appear when you type their metric name or dimension names in the 
search box in the All metrics  tab in the console, and they are not returned in the results of a
list-metrics command. The best way to retrieve these metrics is with the get-metric-data or get-
metric-statistics  commands in the AWS CLI.
If the old metric you want to view has a current metric with similar dimensions, you can view 
that current similar metric and then choose the Source tab, and change the metric name and 
117Amazon CloudWatch User Guide
View available metrics
dimension ﬁelds to the ones that you want, and also change the time range to a time when the 
metric was being reported.
The following steps help you browse through the metric namespaces to ﬁnd and view metrics. You 
can also search for metrics using targeted search terms. For more information, see Search for available 
metrics  (p. 120).
If you are browsing in an account set up as a monitoring account in CloudWatch cross-account 
observability, you can view metrics from the source accounts linked to this monitoring account. When 
metrics from source accounts are displayed, the ID or label of the account that they are from is also 
displayed. For more information, see CloudWatch cross-account observability (p. 846).
To view available metrics by namespace and dimension using the console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , and then choose All metrics .
3. Select a metric namespace (for example, EC2 or Lambda ).
4. Select a metric dimension (for example, Per-Instance Metrics or By Function Name).
5. The Browse tab displays all metrics for that dimension in the namespace.
118Amazon CloudWatch User Guide
View available metrics
If this is a monitoring account in CloudWatch cross-account observability, you also see the metrics 
from the source accounts linked to this monitoring account. The Account label and Account id
columns in the table display which account each metric is from.
You can do the following:
a. To sort the table, use the column heading.
b. To graph a metric, select the check box next to the metric. To select all metrics, select the check 
box in the heading row of the table.
c. To ﬁlter by account, choose the account label or account ID and then choose Add to search .
d. To ﬁlter by resource, choose the resource ID and then choose Add to search .
e. To ﬁlter by metric, choose the metric name and then choose Add to search .
6. (Optional) To add this graph to a CloudWatch dashboard, choose Actions, Add to dashboard .
To view available metrics by account namespace, dimension, or metric using the AWS CLI
Use the list-metrics command to list CloudWatch metrics. For a list of the namespaces, metrics, 
and dimensions for all services that publish metrics, see AWS services that publish CloudWatch 
metrics  (p. 1001 ).
The following example the AWS/EC2 namespace to view all the metrics for Amazon EC2.
aws cloudwatch list-metrics --namespace AWS/EC2
The following is example output.
{ 
  "Metrics" : [ 
    ... 
    { 
        "Namespace": "AWS/EC2", 
        "Dimensions": [ 
            { 
                "Name": "InstanceId", 
                "Value": "i-1234567890abcdef0" 
            } 
        ], 
        "MetricName": "NetworkOut" 
    }, 
    { 
        "Namespace": "AWS/EC2", 
        "Dimensions": [ 
            { 
                "Name": "InstanceId", 
                "Value": "i-1234567890abcdef0" 
            } 
        ], 
        "MetricName": "CPUUtilization" 
    }, 
    { 
        "Namespace": "AWS/EC2", 
        "Dimensions": [ 
            { 
                "Name": "InstanceId", 
                "Value": "i-1234567890abcdef0" 
            } 
        ], 
        "MetricName": "NetworkIn" 
    }, 
119Amazon CloudWatch User Guide
Search for available metrics
    ... 
  ]
}
To list all the available metrics for a speciﬁed resource
The following example speciﬁes the AWS/EC2 namespace and the InstanceId  dimension to view the 
results for the speciﬁed instance only.
aws cloudwatch list-metrics --namespace AWS/EC2 --dimensions 
 Name=InstanceId,Value= i-1234567890abcdef0
To list a metric for all resources
The following example speciﬁes the AWS/EC2 namespace and a metric name to view the results for the 
speciﬁed metric only.
aws cloudwatch list-metrics --namespace AWS/EC2 --metric-name CPUUtilization
To retrieve metrics from linked source accounts in CloudWatch cross-account observability
The following example is run in a monitoring account to retrieve metrics from both the monitoring 
account and all linked source accounts. If you do not add --include-linked-accounts , the 
command returns only the monitoring account’s metrics.
aws cloudwatch list-metrics --include-linked-accounts
To retrieve metrics from a source account in CloudWatch cross-account observability
The following example is run in a monitoring account to retrieve metrics from the source account with 
the ID 111122223333.
aws cloudwatch list-metrics --include-linked-accounts --owning-account "111122223333"
Search for available metrics
You can search within all of the metrics in your account using targeted search terms. Metrics are returned 
that have matching results within their namespace, metric name, or dimensions.
If this is a monitoring account in CloudWatch cross-account observability, you also search for metrics 
from the source accounts linked to this monitoring account.
Note
Metrics that have not had any new data points in the past two weeks do not appear in the 
console. They also do not appear when you type their metric name or dimension names in the 
search box in the All metrics  tab in the console, and they are not returned in the results of a
list-metrics command. The best way to retrieve these metrics is with the get-metric-data or get-
metric-statistics  commands in the AWS CLI.
To search for available metrics in CloudWatch
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. In the search ﬁeld on the All metrics  tab, enter a search term, such as a metric name, namespace, 
account ID, account label, dimension name or value, or resource name. This shows you all of the 
namespaces with metrics with this search term.
120Amazon CloudWatch User Guide
Graphing metrics
For example, if you search for volume, this shows the namespaces that contain metrics with this 
term in their name.
For more information on search, see Use search expressions in graphs (p. 157)
4. To graph all the search results, choose Graph search
or
Select a namespace to view the metrics from that namespace. You can then do the following:
a. To graph one or more metrics, select the check box next to each metric. To select all metrics, 
select the check box in the heading row of the table.
b. To reﬁne your search, hover over a metric name and choose Add to search  or Search for this 
only .
c. To view one of the resources on its console, choose the resource ID and then choose Jump to 
resource.
d. To view help for a metric, select the metric name and choose What is this? .
The selected metrics appear on the graph.
5. (Optional) Select one of the buttons in the search bar to edit that part of the search term.
Graphing metrics
Use the CloudWatch console to graph metric data generated by other AWS services. This makes it more 
eﬃcient to see the metric activity on your services. The following procedures describe how to graph 
metrics in CloudWatch.
Contents
•Graph a metric  (p. 122)
•Merge two graphs into one (p. 125)
•Use dynamic labels  (p. 126)
•Modify the time range or time zone format for a graph (p. 128)
121Amazon CloudWatch User Guide
Graph a metric
•Zoom in on a line graph or stacked area graph  (p. 129)
•Modify the y-axis for a graph (p. 131)
•Create an alarm from a metric on a graph (p. 132)
Graph a metric
You can select metrics and create graphs of the metric data using the CloudWatch console.
CloudWatch supports the following statistics on metrics: Average , Minimum , Maximum , Sum, and
SampleCount . For more information, see Statistics  (p. 6).
You can view your data at diﬀerent levels of detail. For example, you can choose a one-minute view, 
which can be useful when troubleshooting. Or, choose a less detailed, one-hour view. That can be useful 
when viewing a broader time range (for example, 3 days) so that you can see trends over time. For more 
information, see Periods (p. 6).
If you are using an account that is set up as a monitoring account in CloudWatch cross-account 
observability, you can graph metrics from the source accounts linked to this monitoring account. For 
more information, see CloudWatch cross-account observability (p. 846).
Creating a graph
To graph a metric
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , All metrics .
3. In the Browse tab, enter a search term in the search ﬁeld, such as a metric name, account ID, or 
resource name.
For example, if you search for the CPUUtilization  metric, you see the namespaces and 
dimensions with this metric.
4. Select one of the results for your search to view the metrics.
5. To graph one or more metrics, select the check box next to each metric. To select all metrics, select 
the check box in the heading row of the table.
6. (Optional) To change the type of graph, choose the Options  tab. You can then choose between a 
line graph, stacked area chart, number display, gauge, bar chart, or pie chart.
7. Choose the Graphed metrics  tab.
8. (Optional) To change the statistic used in the graph, choose the new statistic in the Statistic  column 
next to the metric name.
For more information about CloudWatch statistics, see CloudWatch statistics deﬁnitions (p. 166). 
For more information about the pxx percentile statistics, see Percentiles (p. 7).
9. (Optional) To add an anomaly detection band that shows expected values for the metric, choose the 
anomaly detection icon under Actions next to the metric.
122Amazon CloudWatch User Guide
Graph a metric
CloudWatch uses up to two weeks of the metric's recent historical data to calculate a model for 
expected values. It then displays this range of expected values as a band on the graph. CloudWatch 
adds a new row under the metric to display the anomaly detection band math expression, labeled
ANOMALY_DETECTION_BAND. If recent historical data exists, you immediately see a preview 
anomaly detection band, which is an approximation of the anomaly detection band generated by 
the model. It takes up to 15 minutes for the actual anomaly detection band to appear.
By default, CloudWatch creates the upper and lower bounds of the band of expected values with a 
default value of 2 for the band threshold. To change this number, change the value at the end of the 
formula under Details  for the band.
• (Optional) Choose Edit model to change how the anomaly detection model is calculated. You 
can exclude past and future time periods from being used in the training for calculating the 
model. It is critical to exclude unusual events system as system outage, deployments, and 
holidays from the training data. You can also specify the time zone to use for the model for 
daylight saving time changes.
For more information, see Using CloudWatch anomaly detection (p. 133).
To hide the model from the graph, remove the checkmark from the line with the 
ANOMALY_DETECTION_BAND  function or choose the X icon. To delete the model entirely, choose
Edit model, Delete model.
10. (Optional) As you choose metrics to graph, specify a dynamic label to appear on the graph legend 
for each metric. Dynamic labels display a statistic about the metric, and automatically update when 
123Amazon CloudWatch User Guide
Graph a metric
the dashboard or graph is refreshed. To add a dynamic label, choose Graphed metrics , Add dynamic 
label .
By default, the dynamic values that you add to the label appear at the beginning of the label. You 
can then choose the Label  value for the metric to edit the label. For more information, see Use 
dynamic labels  (p. 126).
11. To view more information about the metric being graphed, pause the mouse over the legend.
12. Horizontal annotations can help graph users more eﬃciently see when a metric has spiked to a 
certain level, or whether the metric is within a predeﬁned range. To add a horizontal annotation, 
choose the Options  tab and then Add horizontal annotation:
a. For Label , enter a label for the annotation.
b. For Value, enter the metric value where the horizontal annotation appears.
c. For Fill, specify whether to use ﬁll shading with this annotation. For example, choose Above
or Below for the corresponding area to be ﬁlled. If you specify Between , another Value  ﬁeld 
appears, and the area of the graph between the two values is ﬁlled.
d. For Axis, specify whether the numbers in Value refer to the metric associated with the left Y-
axis or the right Y-axis, if the graph includes multiple metrics.
You can change the ﬁll color of an annotation by choosing the color square in the left column of 
the annotation.
Repeat these steps to add multiple horizontal annotations to the same graph.
To hide an annotation, clear the check box in the left column for that annotation.
To delete an annotation, choose x in the Actions column.
13. To get a URL for your graph, choose Actions, Share . Copy the URL to save or share.
14. To add your graph to a dashboard, choose Actions, Add to dashboard .
Updating a graph
To update your graph
1. To change the name of the graph, choose the pencil icon.
2. To change the time range, select one of the predeﬁned values or choose custom . For more 
information, see Modify the time range or time zone format for a graph (p. 128).
3. To change the statistic, choose the Graphed metrics  tab. Choose the column heading or an 
individual value and then choose one of the statistics or predeﬁned percentiles, or specify a custom 
percentile (for example, p95.45 ).
4. To change the period, choose the Graphed metrics  tab. Choose the column heading or an individual 
value and then choose a diﬀerent value.
5. To add a horizontal annotation, choose Graph options  and then Add horizontal annotation:
a. For Label , enter a label for the annotation.
b. For Value, enter the metric value where the horizontal annotation appears.
c. For Fill, specify whether to use ﬁll shading with this annotation. For example, choose Above
or Below for the corresponding area to be ﬁlled. If you specify Between , another Value  ﬁeld 
appears, and the area of the graph between the two values is ﬁlled.
d. For Axis, specify whether the numbers in Value refer to the metric associated with the left y-
axis or the right y-axis, if the graph includes multiple metrics.
124Amazon CloudWatch User Guide
Merge two graphs into one
You can change the ﬁll color of an annotation by choosing the color square in the left column of 
the annotation.
Repeat these steps to add multiple horizontal annotations to the same graph.
To hide an annotation, clear the check box in the left column for that annotation.
To delete an annotation, choose x in the Actions column.
6. To change the refresh interval, choose Refresh options and then select Auto refresh  or choose 1 
Minute , 2 Minutes , 5 Minutes , or 15 Minutes .
Duplicating a metric
To duplicate a metric
1. Choose the Graphed metrics  tab.
2. For Actions, choose the Duplicate  icon.
3. Update the duplicate metric as needed.
Merge two graphs into one
You can merge two diﬀerent graphs into one, and then the resulting graph shows both metrics. This can 
be useful if you already have diﬀerent metrics displayed in diﬀerent graphs and want to combine them, 
or you want to easily create a single graph with metrics from diﬀerent Regions.
To merge a graph into another one, you use either the URL or JSON source of the graph that you want to 
merge in.
To merge two graphs into one
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. Open the graph that you want to merge into another graph. To do so, you can choose Metrics , All 
metrics , and then choose a metric to graph. Or you can open a dashboard and then open one of the 
graphs on the dashboard by selecting the graph and choosing Open in metrics  from the menu at 
the upper right of the graph.
3. After you have a graph open, do one of the following:.
• Copy the URL from the browser bar.
• Choose the Source tab and then choose Copy.
4. Open the graph that you want to merge the previous graph into.
5. When you have the second graph open in the Metrics  view, choose Actions, Merge graph .
6. Enter the URL or JSON that you previously copied, and choose Merge .
7. The merged graphs appear. The y-axis on the left is for the original graph, and the y-axis on the 
right is for the graph that you merged into it.
125Amazon CloudWatch User Guide
Use dynamic labels
Note
If the graph that you merged into uses the METRICS()  function, the metrics in the graph 
that was merged in are not included in the METRICS()  calculation in the merged graph.
8. To save the merged graph to a dashboard, choose Actions, Add to dashboard .
Use dynamic labels
You can use dynamic labels with your graphs. Dynamic labels add a dynamically updated value to the 
label for the selected metric. You can add a wide range of values to the labels, as shown in the following 
tables.
The dynamic value shown in the label is derived from the time range currently shown on the graph. The 
dynamic part of the label automatically updates when either the dashboard or the graph is refreshed.
If you use a dynamic label with a search expression, the dynamic label applies to every metric returned 
by the search.
You can use the CloudWatch console to add a dynamic value to a label, edit the label, change the 
position of the dynamic value within the label column, and make other customizations.
Dynamic labels
Within a dynamic label, you can use the following values relating to properties of the metric:
Dynamic label live value Description
${AVG} The average of the values in the time range currently shown in the 
graph.
${DATAPOINT_COUNT} The number of data points in the time range that is currently shown 
in the graph.
${FIRST} The oldest of the metric values in the time range that is currently 
shown in the graph.
${FIRST_LAST_RANGE} The diﬀerence between the metric values of the oldest and newest 
data points that are currently shown in the graph.
${FIRST_LAST_TIME_RANGE} The absolute time range between the oldest and newest data 
points that are currently shown in the graph.
${FIRST_TIME} The timestamp of the oldest data point in the time range that is 
currently shown in the graph.
${FIRST_TIME_RELATIVE} The absolute time diﬀerence between now and the timestamp of 
the oldest data point in the time range that is currently shown in 
the graph.
${LABEL} The representation of the default label for a metric.
${LAST} The most recent of the metric values in the time range that is 
currently shown in the graph.
${LAST_TIME} The timestamp of the newest data point in the time range that is 
currently shown in the graph.
126Amazon CloudWatch User Guide
Use dynamic labels
Dynamic label live value Description
${LAST_TIME_RELATIVE}The absolute time diﬀerence between now and the timestamp of 
the newest data point in the time range that is currently shown in 
the graph.
${MAX} The maximum of the values in the time range currently shown in 
the graph.
${MAX_TIME} The timestamp of the data point that has the highest metric value, 
of the data points that are currently shown in the graph.
${MAX_TIME_RELATIVE}The absolute time diﬀerence between now and the timestamp of 
the data point with the highest value, of those data points that are 
currently shown in the graph.
${MIN} The minimum of the values in the time range currently shown in 
the graph.
${MIN_MAX_RANGE}The diﬀerence in metric values between the data points with the 
highest and lowest metric values, of those data points that are 
currently shown in the graph.
${MIN_MAX_TIME_RANGE}The absolute time range between the data points with the highest 
and lowest metric values, of those data points that are currently 
shown in the graph.
${MIN_TIME} The timestamp of the data point that has the lowest metric value, 
of the data points that are currently shown in the graph.
${MIN_TIME_RELATIVE}The absolute time diﬀerence between now and the timestamp of 
the data point with the lowest value, of those data points that are 
currently shown in the graph.
${PROP('AccountId')}The AWS account ID of the metric.
${PROP('AccountLabel')}The label speciﬁed for the source account that owns this metric, in 
CloudWatch cross-account observabiility.
${PROP('Dim.dimension_name ')}The value of the speciﬁed dimension. Replace dimension_name
with the case-sensitive name of your dimension.
${PROP('MetricName')} The name of the metric.
${PROP('Namespace')}The namespace of the metric.
${PROP('Period')}The period of the metric, in seconds.
${PROP('Region')}The AWS Region where the metric is published.
${PROP('Stat')} The metric statistic that is being graphed.
${SUM} The sum of the values in the time range currently shown in the 
graph.
For example, suppose you have a search expression SEARCH(' {AWS/Lambda, FunctionName} 
Errors ', 'Sum') , which ﬁnds the Errors for each of your Lambda functions. If you set the label 
to be [max: ${MAX} Errors for Function Name ${LABEL}] , the label for each metric is [max:
number Errors for Function Name Name ].
127Amazon CloudWatch User Guide
Modify the time range or time zone format for a graph
You can add up to ﬁve dynamic values to a label. You can use the ${LABEL}  placeholder only once 
within each label.
Modify the time range or time zone format for a 
graph
This section describes how you can modify the date, time, and time zone format on a CloudWatch 
metrics graph. It also describes how you can zoom in on a graph to apply a speciﬁc time range. For 
information about creating a graph, see Graph a metric  (p. 122).
Set a relative time range
New interface
To specify a relative time range for a graph
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , and then choose All metrics . In the upper right corner 
of the screen, you can select one of the predeﬁned time ranges, which span from 1 hour to 1 
week (1h, 3h, 12h, 1d, 3d, or 1w). Alternatively, you can choose Custom  to set your own time 
range.
3. Choose Custom , and then select the Relative tab in the upper left corner of the box. You can 
specify a time range in Minutes , Hours , Days, Weeks, Months .
4. After you specify a time range, choose Apply .
Original interface
To specify a relative time range for a graph
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , and then choose All metrics . In the upper right corner 
of the screen, you can select one of the predeﬁned time ranges, which span from 1 hour to 1 
week (1h, 3h, 12h, 1d, 3d, or 1w). Alternatively, you can choose custom  to set your own time 
range.
3. Choose custom , and then choose Relative in the upper left corner of the box. You can specify a 
time range in Minutes , Hours , Days, Weeks, or Months .
Set an absolute time range
New interface
To specify an absolute time range for a graph
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , and then choose All metrics . In the upper right corner 
of the screen, you can select one of the predeﬁned time ranges, which span from 1 hour to 1 
week (1h, 3h, 12h, 1d, 3d, or 1w). Alternatively, you can choose Custom  to set your own time 
range.
3. Choose Custom , and then select the Absolute  tab in the upper left corner of the box. Use the 
calendar picker or text ﬁeld boxes to specify a time range.
4. After you specify a time range, choose Apply .
128Amazon CloudWatch User Guide
Zooming in on a graph 
Original interface
To specify an absolute time range for a graph
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , and then choose All metrics . In the upper right corner 
of the screen, you can select one of the predeﬁned time ranges, which span from 1 hour to 1 
week (1h, 3h, 12h, 1d, 3d, or 1w). Alternatively, you can choose custom  to set your own time 
range.
3. Choose custom , and then choose Absolute  in the upper left corner of the box. Use the calendar 
picker or text ﬁeld boxes to specify a time range.
4. After you specify a time range, choose Apply .
Set the time zone format
New interface
To specify the time zone for a graph
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , and then choose All metrics . In the upper right corner 
of the screen, you can select one of the predeﬁned time ranges, which span from 1 hour to 1 
week (1h, 3h, 12h, 1d, 3d, or 1w). Alternatively, you can choose Custom  to set your own time 
range.
3. Choose Custom , and then choose the dropdown in the upper right corner of the box. You can 
change the time zone to UTC or Local time zone.
4. After you make your changes, choose Apply .
Original interface
To specify the time zone for a graph
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , and then choose All metrics . In the upper right corner 
of the screen, you can select one of the predeﬁned time ranges, which span from 1 hour to 1 
week (1h, 3h, 12h, 1d, 3d, or 1w). Alternatively, you can choose custom  to set your own time 
range.
3. Choose custom , and then choose the dropdown in the upper right corner of the box. You can 
change the time zone to UTC or Local timezone.
Zoom in on a line graph or stacked area graph
In the CloudWatch console, you can use the mini-map zoom feature to focus on sections of line graphs 
and stacked area graphs without changing between zoomed-in and zoomed-out views. For example, you 
can use the mini-map zoom feature to focus on a peak in a line graph, so that you can compare the spike 
against other metrics in your dashboard from the same timeline. The procedures in this section describe 
how to use the zoom feature.
129Amazon CloudWatch User Guide
Zooming in on a graph 
In the preceding image, the zoom feature focuses on a spike in a line graph that's related to the input 
bytes processing rate while also showing other line graphs in the dashboard that focus on sections from 
the same timeline.
New interface
To zoom in on a graph
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , and then choose All metrics .
3. Choose Browse, and then select a metric or metrics to graph.
4. Choose Options , and select Line  under Widget type.
5. Choose and drag on the area of the graph that you want to focus on, and then release the drag.
6. To reset the zoom, choose the Reset zoom icon, which looks like a magnifying glass with a 
minus (-) symbol inside.
Original interface
To zoom in on a graph
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , and then choose All metrics . .
3. Choose All metrics , and then select a metric to graph.
130Amazon CloudWatch User Guide
Modify the y-axis for a graph
4. Choose Graph options . Under Widget type select Line .
5. Choose and drag on the area of the graph that you want to focus on, and then release the drag.
6. To reset the zoom, choose the Reset zoom icon, which looks like a magnifying glass with a 
minus (-) symbol inside.
Tip
If you already created a dashboard that contains a line graph or stacked area graph, you can go 
to the dashboard and begin using the zoom feature.
Modify the y-axis for a graph
You can set custom bounds for the y-axis on a graph to help you see the data better. For example, you 
can change the bounds on a CPUUtilization  graph to 100 percent so that it's easy to see whether the 
CPU is low (the plotted line is near the bottom of the graph) or high (the plotted line is near the top of 
the graph).
You can switch between two diﬀerent y-axes for your graph. This is useful if the graph contains metrics 
that have diﬀerent units or that diﬀer greatly in their range of values.
To modify the y-axis on a graph
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. Select a metric namespace (for example, EC2) and then a metric dimension (for example, Per-
Instance Metrics).
4. The All metrics  tab displays all metrics for that dimension in that namespace. To graph a metric, 
select the check box next to the metric.
5. On the Graph options  tab, specify the Min and Max values for Left Y Axis. The value of Min can't be 
greater than the value of Max.
6. To create a second y-axis, specify the Min and Max values for Right Y Axis.
7. To switch between the two y-axes, choose the Graphed metrics  tab. For Y Axis, choose Left Y Axis
or Right Y Axis.
131Amazon CloudWatch User Guide
Create an alarm from a metric on a graph
Create an alarm from a metric on a graph
You can graph a metric and then create an alarm from the metric on the graph, which has the beneﬁt of 
populating many of the alarm ﬁelds for you.
To create an alarm from a metric on a graph
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. Select a metric namespace (for example, EC2) and then a metric dimension (for example, Per-
Instance Metrics).
4. The All metrics  tab displays all metrics for that dimension in that namespace. To graph a metric, 
select the check box next to the metric.
5. To create an alarm for the metric, choose the Graphed metrics  tab. For Actions, choose the alarm 
icon.
6. Under Conditions , choose Static  or Anomaly detection to specify whether to use a static threshold 
or anomaly detection model for the alarm.
Depending on your choice, enter the rest of the data for the alarm conditions.
7. Choose Additional conﬁguration. For Datapoints to alarm , specify how many evaluation periods 
(data points) must be in the ALARM state to trigger the alarm. If the two values here match, you 
create an alarm that goes to ALARM state if that many consecutive periods are breaching.
To create an M out of N alarm, specify a lower number for the ﬁrst value than you specify for the 
second value. For more information, see Evaluating an alarm  (p. 181).
8. For Missing data treatment , choose how to have the alarm behave when some data points 
are missing. For more information, see Conﬁguring how CloudWatch alarms treat missing 
data  (p. 182).
9. Choose Next.
10. Under Notiﬁcation , select an SNS topic to notify when the alarm is in ALARM  state, OK state, or
INSUFFICIENT_DATA  state.
To have the alarm send multiple notiﬁcations for the same alarm state or for diﬀerent alarm states, 
choose Add notiﬁcation .
To have the alarm not send notiﬁcations, choose Remove.
11. To have the alarm perform Auto Scaling or EC2 actions, choose the appropriate button and choose 
the alarm state and action to perform.
12. When ﬁnished, choose Next.
13. Enter a name and description for the alarm. The name must contain only ASCII characters. Then 
choose Next.
14. Under Preview and create , conﬁrm that the information and conditions are what you want, then 
choose Create alarm .
132Amazon CloudWatch User Guide
Using anomaly detection
Using CloudWatch anomaly detection
When you enable anomaly detection for a metric, CloudWatch applies statistical and machine learning 
algorithms. These algorithms continuously analyze metrics of systems and applications, determine 
normal baselines, and surface anomalies with minimal user intervention.
The algorithms generate an anomaly detection model. The model generates a range of expected values 
that represent normal metric behavior.
You can use the model of expected values in two ways:
•Create anomaly detection alarms based on a metric's expected value. These types of alarms don't 
have a static threshold for determining alarm state. Instead, they compare the metric's value to the 
expected value based on the anomaly detection model.
You can choose whether the alarm is triggered when the metric value is above the band of expected 
values, below the band, or both.
For more information, see Create a CloudWatch alarm based on anomaly detection (p. 192).
•When viewing a graph of metric data, overlay the expected values onto the graph as a band. This 
makes it visually clear which values in the graph are out of the normal range. For more information, 
see Creating a graph (p. 122).
You can enable anomaly detection using the AWS Management Console, the AWS CLI, AWS 
CloudFormation, or the AWS SDK. You can enable anomaly detection on metrics vended by AWS and 
also on custom metrics.
You can also retrieve the upper and lower values of the model's band by using the GetMetricData
API request with the ANOMALY_DETECTION_BAND  metric math function. For more information, see
GetMetricData .
In a graph with anomaly detection, the expected range of values is shown as a gray band. If the metric's 
actual value goes beyond this band, it is shown as red during that time.
Anomaly detection algorithms account for the seasonality and trend changes of metrics. The seasonality 
changes could be hourly, daily, or weekly, as shown in the following examples.
133Amazon CloudWatch User Guide
Using anomaly detection
The longer-range trends could be downward or upward.
Anomaly detections also works well with metrics with ﬂat patterns.
134Amazon CloudWatch User Guide
How anomaly detection works
How CloudWatch anomaly detection works
When you enable anomaly detection for a metric, CloudWatch applies machine learning algorithms 
to the metric's past data to create a model of the metric's expected values. The model assesses both 
trends and hourly, daily, and weekly patterns of the metric. The algorithm trains on up to two weeks of 
metric data, but you can enable anomaly detection on a metric even if the metric does not have a full 
two weeks of data.
You specify a value for the anomaly detection threshold that CloudWatch uses along with the model 
to determine the "normal" range of values for the metric. A higher value for the anomaly detection 
threshold produces a thicker band of "normal" values.
The machine learning model is speciﬁc to a metric and a statistic. For example, if you enable anomaly 
detection for a metric using the AVG statistic, the model is speciﬁc to the AVG statistic.
When CloudWatch creates a model for many common metrics from AWS services, it ensures that the 
band doesn’t extend outside of logical values. For example, a band for a statistic that can’t be negative 
will never extend below zero, and a band for a percentage metric will stay between 0 and 100.
After you create a model, CloudWatch anomaly detection continually evaluates the model and makes 
adjustments to it to ensure that it is as accurate as possible. This includes re-training the model to adjust 
if the metric values evolve over time or have sudden changes, and also includes predictors to improve the 
models of metrics that are seasonal, spiky, or sparse.
After you enable anomaly detection on a metric, you can choose to exclude speciﬁed time periods of 
the metric from being used to train the model. This way, you can exclude deployments or other unusual 
events from being used for model training, ensuring the most accurate model is created.
Using anomaly detection models for alarms incurs charges on your AWS account. For more information, 
see Amazon CloudWatch Pricing.
Anomaly detection on metric math
Anomaly detection on metric math is a feature that you can use to create anomaly detection alarms 
on the output metric math expressions. You can use these expressions to create graphs that visualize 
anomaly detection bands. The feature supports basic arithmetic functions, comparison and logical 
operators, and most other functions. For information about functions that are not supported, see Using 
metric math  in the Amazon CloudWatch User Guide.
You can create anomaly detection models based on metric math expressions similar to how you already 
create anomaly detection models. From the CloudWatch console, you can apply anomaly detection to 
metric math expressions and select anomaly detection as a threshold type for these expressions.
Note
Anomaly detection on metric math only can be enabled and edited in the latest version of the 
metrics user interface. When you create anomaly detectors based on metric math expressions in 
the new version of the interface, you can view them in the old version, but not edit them.
For information about how to create alarms and models for anomaly detection and metric math, see the 
following sections:
•Creating a CloudWatch alarm based on anomaly detection
•Creating a CloudWatch alarm based on a metric math expression
You also can create, delete, and discover anomaly detection models based on metric math 
expressions using the CloudWatch API with PutAnomalyDetector , DeleteAnomalyDetector , and
DescribeAnomalyDetectors . For information about these API actions, see the following sections in 
the Amazon CloudWatch API Reference.
135Amazon CloudWatch User Guide
Use metric math
•PutAnomalyDetector
•DeleteAnomalyDetector
•DescribeAnomalyDetectors
For information about how anomaly detection alarms are priced, see Amazon CloudWatch pricing.
Use metric math
Metric math enables you to query multiple CloudWatch metrics and use math expressions to create new 
time series based on these metrics. You can visualize the resulting time series on the CloudWatch console 
and add them to dashboards. Using AWS Lambda metrics as an example, you could divide the Errors
metric by the Invocations  metric to get an error rate. Then add the resulting time series to a graph on 
your CloudWatch dashboard.
You can also perform metric math programmatically, using the GetMetricData  API operation. For more 
information, see GetMetricData .
Add a math expression to a CloudWatch graph
You can add a math expression to a graph on your CloudWatch dashboard. Each graph is limited to using 
a maximum of 500 metrics and expressions, so you can add a math expression only if the graph has 499 
or fewer metrics. This applies even if not all the metrics are displayed on the graph.
To add a math expression to a graph
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. Create or edit a graph. There needs to be at least one metric in the graph.
3. Choose Graphed metrics .
4. Choose Math expression , Start with empty expression. A new line appears for the expression.
5. In the new line, under the Details  column, enter the math expression. The tables in the Metric Math 
Syntax and Functions section list the functions that you can use in the expression.
To use a metric or the result of another expression as part of the formula for this expression, use the 
value shown in the Id column: for example, m1+m2  or e1-MIN(e1) .
You can change the value of Id. It can include numbers, letters, an underscore, and must start with a 
lowercase letter. Changing the value of Id to a more meaningful name can also make a graph easier 
to understand;for example, changing m1 and m2 to errors  and requests .
Tip
Choose the down arrow next to Math Expression  to see a list of supported functions, which 
you can use when creating your expression.
6. For the Label  column of the expression, enter a name that describes what the expression is 
calculating.
If the result of an expression is an array of time series, each of those time series is displayed on the 
graph with a separate line, with diﬀerent colors. Immediately under the graph is a legend for each 
line in the graph. For a single expression that produces multiple time series, the legend captions for 
those time series are in the format Expression-Label Metric-Label . For example, if the graph 
includes a metric with a label of Errors  and an expression FILL(METRICS(), 0)  that has a label of
Filled With 0:, one line in the legend would be Filled With 0: Errors. To have the legend show only 
the original metric labels, set Expression-Label  to be empty.
136Amazon CloudWatch User Guide
Metric math syntax and functions
When one expression produces an array of time series on the graph, you can't change the colors 
used for each of those time series.
7. After you have added the desired expressions, you can simplify the graph by hiding some of the 
original metrics. To hide a metric or expression, clear the check box to the left of the Id ﬁeld.
Metric math syntax and functions
The following sections explain the functions available for metric math. All functions must be written in 
uppercase letters (such as AVG), and the Id ﬁeld for all metrics and math expressions must start with a 
lowercase letter.
The ﬁnal result of any math expression must be a single time series or an array of time series. Some 
functions produce a scalar number. You can use these functions within a larger function that ultimately 
produces a time series. For example, taking the AVG of a single time series produces a scalar number, so 
it can't be the ﬁnal expression result. But you could use it in the function m1-AVG(m1) to display a time 
series of the diﬀerence between each individual data point and the average value in the time series.
Data type abbreviations
Some functions are valid for only certain types of data. The abbreviations in the following list are used in 
the tables of functions to represent the types of data supported for each function:
•S represents a scalar number, such as 2, -5, or 50.25
•TS is a time series (a series of values for a single CloudWatch metric over time): for example, the
CPUUtilization  metric for instance i-1234567890abcdef0  over the last 3 days
•TS[] is an array of time series, such as the time series for multiple metrics
The METRICS() function
The METRICS()  function returns all the metrics in the request. Math expressions aren't included.
You can use METRICS()  within a larger expression that produces a single time series or an array of time 
series. For example, the expression SUM(METRICS()) returns a time series (TS) that is the sum of the 
values of all the graphed metrics. METRICS()/100  returns an array of time series, each of which is a time 
series showing each data point of one of the metrics divided by 100.
You can use the METRICS()  function with a string to return only the graphed metrics that contain that 
string in their Id ﬁeld. For example, the expression SUM(METRICS("errors")) returns a time series that 
is the sum of the values of all the graphed metrics that have ‘errors’ in their Id ﬁeld. You can also use
SUM([METRICS(“4xx”), METRICS(“5xx”)]) to match multiple strings.
Basic arithmetic functions
The following table lists the basic arithmetic functions that are supported. Missing values in a time series 
are treated as 0. If the value of a data point causes a function to attempt to divide by zero, the data 
point is dropped.
Operation Arguments Examples
Arithmetic operators: + - * / ^ S, S
S, TSPERIOD(m1)/60
5 * m1
137Amazon CloudWatch User Guide
Metric math syntax and functions
Operation Arguments Examples
TS, TS
S, TS[]
TS, TS[]m1 - m2
SUM(100/[m1, m2])
AVG(METRICS())
METRICS()*100
Unary subtraction - S
TS
TS[]-5*m1
-m1
SUM(-[m1, m2])
Comparison and logical operators
You can use comparison and logical operators with either a pair of time series or a pair of single scalar 
values. When you use a comparison operator with a pair of time series, the operators return a time series 
where each data point is either 0 (false) or 1 (true). If you use a comparison operator on a pair of scalar 
values, a single scalar value is returned, either 0 or 1.
When comparison operators are used between two time series, and only one of the time series has a 
value for a particular time stamp, the function treats the missing value in the other time series as 0.
You can use logical operators in conjunction with comparison operators, to create more complex 
functions.
The following table lists the operators that are supported.
Type of operator Supported operators
Comparison operators ==
!=
<=
>=
<
>
Logical operators AND or &&
OR or ||
To see how these operators are used, suppose we have two time series: metric1  has values of [30, 20, 
0, 0]  and metric2  has values of [20, -, 20, -]  where - indicates that there is no value for that 
timestamp.
Expression Output
(metric1 < metric2) 0, 0, 1, 0
138Amazon CloudWatch User Guide
Metric math syntax and functions
Expression Output
(metric1 >= 30) 1, 0, 0, 0
(metric1 > 15 AND metric2 > 15) 1, 0, 0, 0
Functions supported for metric math
The following table describes the functions that you can use in math expressions. Enter all functions in 
uppercase letters.
The ﬁnal result of any math expression must be a single time series or an array of time series. Some 
functions in tables in the following sections produce a scalar number. You can use these functions within 
a larger function that ultimately produces a time series. For example, taking the AVG of a single time 
series produces a scalar number, so it can't be the ﬁnal expression result. But you could use it in the 
function m1-AVG(m1) to display a time series of the diﬀerence between each individual data point and 
the average value of that data point.
In the following table, every example in the Examples column is an expression that results in a single 
time series or an array of time series. These examples show how functions that return scalar numbers can 
be used as part of a valid expression that produces a single time series.
Function Arguments Return 
type*Description Examples Supported 
for 
cross-
account?
ABS TS
TS[]TS
TS[]Returns the absolute 
value of each data point.ABS(m1-m2)
MIN(ABS([m1, m2]))
ABS(METRICS())✓
ANOMALY_DETECTION_BAND TS
TS, STS[] Returns an anomaly 
detection band for the 
speciﬁed metric. The 
band consists of two time 
series, one representing 
the upper limit of the 
"normal" expected value 
of the metric, and the 
other representing the 
lower limit. The function 
can take two arguments. 
The ﬁrst is the ID of the 
metric to create the band 
for. The second argument 
is the number of standard 
deviations to use for the 
band. If you don't specify 
this argument, the default 
of 2 is used. For more 
information, see Using 
CloudWatch anomaly 
detection (p. 133).ANOMALY_DETECTION_BAND(m1)
ANOMALY_DETECTION_BAND(m1,4)
139Amazon CloudWatch User Guide
Metric math syntax and functions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
AVG TS
TS[]S
TSThe AVG of a single time 
series returns a scalar 
representing the average 
of all the data points in 
the metric. The AVG of 
an array of time series 
returns a single time 
series. Missing values are 
treated as 0.
Note
We recommend 
that you do not 
use this function 
in CloudWatch 
alarms if you 
want the function 
to return a scalar. 
For example,
AVG(m2) . 
Whenever an 
alarm evaluates 
whether to 
change state, 
CloudWatch 
attempts to 
retrieve a higher 
number of data 
points than the 
number speciﬁed 
as Evaluation 
Periods. This 
function acts 
diﬀerently when 
extra data is 
requested.
To use this 
function with 
alarms, especially 
alarms that have 
Auto Scaling 
actions, we 
recommend that 
you set the alarm 
to use M out of N 
datapoints, where 
M < N.SUM([m1,m2])/AVG(m2)
AVG(METRICS())✓
140Amazon CloudWatch User Guide
Metric math syntax and functions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
CEIL TS
TS[]TS
TS[]Returns the ceiling of each 
metric. The ceiling is the 
smallest integer greater 
than or equal to each 
value.CEIL(m1)
CEIL(METRICS())
SUM(CEIL(METRICS()))✓
DATAPOINT_COUNTTS
TS[]S
TSReturns a count of the 
data points that reported 
values. This is useful for 
calculating averages of 
sparse metrics.
Note
We recommend 
that you do not 
use this function 
in CloudWatch 
alarms. Whenever 
an alarm 
evaluates 
whether to 
change state, 
CloudWatch 
attempts to 
retrieve a higher 
number of data 
points than the 
number speciﬁed 
as Evaluation 
Periods. This 
function acts 
diﬀerently when 
extra data is 
requested.SUM(m1) / 
DATAPOINT_COUNT(m1)
DATAPOINT_COUNT(METRICS())✓
DIFF TS
TS[]TS
TS[]Returns the diﬀerence 
between each value in 
the time series and the 
preceding value from that 
time series.DIFF(m1) ✓
DIFF_TIME TS
TS[]TS
TS[]Returns the diﬀerence 
in seconds between the 
timestamp of each value 
in the time series and 
the timestamp of the 
preceding value from that 
time series.DIFF_TIME(METRICS()) ✓
141Amazon CloudWatch User Guide
Metric math syntax and functions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
FILL TS, [S | 
REPEAT 
| 
LINEAR]
TS[], 
[TS 
| S | 
REPEAT 
| 
LINEAR]TS
TS[]Fills the missing values of 
a time series. There are 
several options for the 
values to use as the ﬁller 
for missing values:
•You can specify a value 
to use as the ﬁller value.
•You can specify a metric 
to use as the ﬁller value.
•You can use the REPEAT
keyword to ﬁll missing 
values with the most 
recent actual value of 
the metric before the 
missing value.
•You can use the LINEAR
keyword to ﬁll the 
missing values with 
values that create a 
linear interpolation 
between the values at 
the beginning and the 
end of the gap.
Note
When you use 
this function in 
an alarm, you 
can encounter 
an issue if your 
metrics are being 
published with a 
slight delay, and 
the most recent 
minute never has 
data. In this case,
FILL replaces 
that missing data 
point with the 
requested value. 
That causes the 
latest data point 
for the metric 
to always be the 
FILL value, which 
can result in 
the alarm being 
stuck in either OK 
state or ALARM FILL(m1,10)
FILL(METRICS(), 0)
FILL(METRICS(), m1)
FILL(m1, MIN(m1))
FILL(m1, REPEAT)
FILL(METRICS(), LINEAR)✓
142Amazon CloudWatch User Guide
Metric math syntax and functions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
state. You can 
work around 
this by using 
a M out of N 
alarm. For more 
information, see
Evaluating an 
alarm  (p. 181).
FIRST
LASTTS[] TSReturns the ﬁrst or last 
time series from an array 
of time series. This is 
useful when used with 
the SORT function. 
It can also be used to 
get the high and low 
thresholds from the
ANOMALY_DETECTION_BAND
function.IF(FIRST(SORT(METRICS(), 
AVG, DESC))>100, 1, 0)
Looks at the top metric 
from an array, which is 
sorted by AVG. It then 
returns a 1 or 0 for each 
data point, depending on 
whether that data point 
value is more than 100.
LAST(ANOMALY_DETECTION_BAND(m1)) 
returns the upper 
bound of the anomaly 
prediction band.✓
FLOOR TS
TS[]TS
TS[]Returns the ﬂoor of each 
metric. The ﬂoor is the 
largest integer less than 
or equal to each value.FLOOR(m1)
FLOOR(METRICS())✓
IF IF
expressionTS Use IF along with a 
comparison operator 
to ﬁlter out data points 
from a time series, or 
create a mixed time-
series composed of 
multiple collated 
time series. For more 
information, see Using IF 
expressions (p. 154).For examples, see Using IF 
expressions (p. 154).✓
INSIGHT_RULE_METRICINSIGHT_RULE_METRIC(ruleName, 
metricName)TS Use
INSIGHT_RULE_METRIC
to extract statistics from 
a rule in Contributor 
Insights. For more 
information, see Graphing 
metrics generated by 
rules  (p. 666).
LOG TS
TS[]TS
TS[]The LOG of a time series 
returns the natural 
logarithm value of each 
value in the time series.LOG(METRICS()) ✓
143Amazon CloudWatch User Guide
Metric math syntax and functions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
LOG10 TS
TS[]TS
TS[]The LOG10 of a time 
series returns the base-10 
logarithm value of each 
value in the time series.LOG10(m1) ✓
MAX TS
TS[]S
TSThe MAX of a single 
time series returns a 
scalar representing the 
maximum value of all 
data points in the metric. 
The MAX value of an array 
of time series returns a 
single time series.
Note
We recommend 
that you do not 
use this function 
in CloudWatch 
alarms. Whenever 
an alarm 
evaluates 
whether to 
change state, 
CloudWatch 
attempts to 
retrieve a higher 
number of data 
points than the 
number speciﬁed 
as Evaluation 
Periods. This 
function acts 
diﬀerently when 
extra data is 
requested.MAX(m1)/m1
MAX(METRICS())✓
METRIC_COUNTTS[] SReturns the number of 
metrics in the time series 
array.m1/
METRIC_COUNT(METRICS())✓
144Amazon CloudWatch User Guide
Metric math syntax and functions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
METRICS null
stringTS[] The METRICS()  function 
returns all CloudWatch 
metrics in the request. 
Math expressions aren't 
included.
You can use METRICS()
within a larger expression 
that produces a single 
time series or an array of 
time series.
You can use the
METRICS()  function with 
a string to return only 
the graphed metrics 
that contain that string 
in their Id ﬁeld. For 
example, the expression
SUM(METRICS("errors"))
returns a time series that 
is the sum of the values 
of all the graphed metrics 
that have ‘errors’ in their
Id ﬁeld. You can also use
SUM([METRICS(“4xx”), 
METRICS(“5xx”)]) to 
match multiple strings.AVG(METRICS())
SUM(METRICS("errors"))✓
145Amazon CloudWatch User Guide
Metric math syntax and functions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
MIN TS
TS[]S
TSThe MIN of a single 
time series returns a 
scalar representing the 
minimum value of all data 
points in the metric. The
MIN of an array of time 
series returns a single 
time series.
Note
We recommend 
that you do not 
use this function 
in CloudWatch 
alarms. Whenever 
an alarm 
evaluates 
whether to 
change state, 
CloudWatch 
attempts to 
retrieve a higher 
number of data 
points than the 
number speciﬁed 
as Evaluation 
Periods. This 
function acts 
diﬀerently when 
extra data is 
requested.m1-MIN(m1)
MIN(METRICS())✓
146Amazon CloudWatch User Guide
Metric math syntax and functions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
MINUTE
HOUR
DAY
DATE
MONTH
YEAR
EPOCHTS TSThese functions take the 
period and range of the 
time series and return 
a new non-sparse time 
series where each value is 
based on its timestamp.
•MINUTE  returns a non-
sparse time series of 
integers between 0 
and 59 that represent 
the UTC minute of 
each timestamp in the 
original time series.
•HOUR  returns a non-
sparse time series of 
integers between 0 
and 23 that represent 
the UTC hour of each 
timestamp in the 
original time series.
•DAY returns a non-
sparse time series of 
integers between 1 and 
7 that represent the 
UTC day of the week of 
each timestamp in the 
original time series. 1 
represents Monday and 
7 represents Sunday.
•DATE returns a non-
sparse time series of 
integers between 1 and 
31 that represent the 
UTC day of the month 
of each timestamp in 
the original time series.
•MONTH  returns a non-
sparse time series of 
integers between 1 
and 12 that represent 
the UTC month of 
each timestamp in the 
original time series. 
1 represents January 
and 12 represents 
December.
•YEAR  returns a non-
sparse time series of 
integers that represent 
the UTC year of each MINUTE(m1)
IF(DAY(m1)<6,m1)
returns metrics only from 
weekdays, Monday to 
Friday.
IF(MONTH(m1) == 4,m1)
returns only metrics 
published in April.✓
147Amazon CloudWatch User Guide
Metric math syntax and functions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
timestamp in the 
original time series.
•EPOCH  returns a non-
sparse time series of 
integers that represent 
the UTC time in seconds 
since the Epoch of 
each timestamp in the 
original time series. 
The Epoch is January 1, 
1970.
PERIOD TS SReturns the period of 
the metric in seconds. 
Valid input is metrics, 
not the results of other 
expressions.m1/PERIOD(m1) ✓
RATE TS
TS[]TS
TS[]Returns the rate of 
change of the metric per 
second. This is calculated 
as the diﬀerence between 
the latest data point value 
and the previous data 
point value, divided by the 
time diﬀerence in seconds 
between the two values.RATE(m1)
RATE(METRICS())✓
148Amazon CloudWatch User Guide
Metric math syntax and functions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
REMOVE_EMPTYTS[] TS[]Removes any time series 
that have no data points 
from an array of time 
series. The result is an 
array of time series where 
each time series contains 
at least one data point.
Note
We recommend 
that you do not 
use this function 
in CloudWatch 
alarms. Whenever 
an alarm 
evaluates 
whether to 
change state, 
CloudWatch 
attempts to 
retrieve a higher 
number of data 
points than the 
number speciﬁed 
as Evaluation 
Periods. This 
function acts 
diﬀerently when 
extra data is 
requested.REMOVE_EMPTY(METRICS()) ✓
149Amazon CloudWatch User Guide
Metric math syntax and functions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
RUNNING_SUM TS
TS[]TS
TS[]Returns a time series with 
the running sum of the 
values in the original time 
series.
Note
We recommend 
that you do not 
use this function 
in CloudWatch 
alarms. Whenever 
an alarm 
evaluates 
whether to 
change state, 
CloudWatch 
attempts to 
retrieve a higher 
number of data 
points than the 
number speciﬁed 
as Evaluation 
Periods. This 
function acts 
diﬀerently when 
extra data is 
requested.RUNNING_SUM([m1,m2]) ✓
150Amazon CloudWatch User Guide
Metric math syntax and functions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
SEARCHSearch 
expressionOne or 
more 
TSReturns one or more 
time series that match a 
search criteria that you 
specify. The SEARCH
function enables you to 
add multiple related time 
series to a graph with one 
expression. The graph is 
dynamically updated to 
include new metrics that 
are added later and match 
the search criteria. For 
more information, see
Use search expressions in 
graphs  (p. 157).
You can't create an alarm 
based on a SEARCH
expression. This is because 
search expressions return 
multiple time series, and 
an alarm based on a math 
expression can watch only 
one time series.
If you are signed in to a 
monitoring account in 
CloudWatch cross-account 
observability, the SEARCH
function ﬁnds metrics in 
the source accounts and 
the monitoring accout.✓
SERVICE_QUOTATS that 
is a 
usage 
metricTSReturns the service quota 
for the given usage 
metric. You can use this 
to visualize how your 
current usage compares 
to the quota, and to 
set alarms that warn 
you when you approach 
the quota. For more 
information, see AWS 
usage metrics  (p. 1010 ).✓
151Amazon CloudWatch User Guide
Metric math syntax and functions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
SLICE(TS[], 
S, S) or 
(TS[], 
S)TS[]
TSRetrieves part of an array 
of time series. This is 
especially useful when 
combined with SORT. For 
example, you can exclude 
the top result from an 
array of time series.
You can use two scalar 
arguments to deﬁne the 
set of time series that 
you want returned. The 
two scalars deﬁne the 
start (inclusive) and end 
(exclusive) of the array to 
return. The array is zero-
indexed, so the ﬁrst time 
series in the array is time 
series 0. Alternatively, you 
can specify just one value, 
and CloudWatch returns 
all time series starting 
with that value.SLICE(SORT(METRICS(), 
SUM, DESC), 0, 10)
returns the 10 metrics 
from the array of metrics 
in the request that have 
the highest SUM value.
SLICE(SORT(METRICS(), 
AVG, ASC), 5) sorts the 
array of metrics by the 
AVG statistic, then returns 
all the time series except 
for the 5 with the lowest 
AVG.✓
SORT(TS[], 
FUNCTION, 
SORT_ORDER)
(TS[], 
FUNCTION, 
SORT_ORDER, 
S)TS[]Sorts an array of time 
series according to the 
function you specify. 
The function you use 
can be AVG, MIN, MAX, 
or SUM. The sort order 
can be either ASC for 
ascending (lowest values 
ﬁrst) or DESC to sort the 
higher values ﬁrst. You 
can optionally specify 
a number after the sort 
order which acts as a limit. 
For example, specifying a 
limit of 5 returns only the 
top 5 time series from the 
sort.
When this math function 
is displayed on a graph, 
the labels for each metric 
in the graph are also 
sorted and numbered.SORT(METRICS(), AVG, 
DESC, 10) calculates the 
average value of each 
time series, sorts the time 
series with the highest 
values at the beginning of 
the sort, and returns only 
the 10 time series with 
the highest averages.
SORT(METRICS(), MAX, 
ASC) sorts the array 
of metrics by the MAX 
statistic, then returns 
all of them in ascending 
order.✓
152Amazon CloudWatch User Guide
Metric math syntax and functions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
STDDEV TS
TS[]S
TSThe STDDEV  of a single 
time series returns a 
scalar representing the 
standard deviation of all 
data points in the metric. 
The STDDEV  of an array 
of time series returns a 
single time series.
Note
We recommend 
that you do not 
use this function 
in CloudWatch 
alarms. Whenever 
an alarm 
evaluates 
whether to 
change state, 
CloudWatch 
attempts to 
retrieve a higher 
number of data 
points than the 
number speciﬁed 
as Evaluation 
Periods. This 
function acts 
diﬀerently when 
extra data is 
requested.m1/STDDEV(m1)
STDDEV(METRICS())✓
153Amazon CloudWatch User Guide
Using IF expressions
Function ArgumentsReturn 
type*Description ExamplesSupported 
for 
cross-
account?
SUM TS
TS[]S
TSThe SUM of a single time 
series returns a scalar 
representing the sum 
of the values of all data 
points in the metric. The
SUM of an array of time 
series returns a single 
time series.
Note
We recommend 
that you do not 
use this function 
in CloudWatch 
alarms if you 
want the function 
to return a scalar. 
For example,
SUM(m1) . 
Whenever an 
alarm evaluates 
whether to 
change state, 
CloudWatch 
attempts to 
retrieve a higher 
number of data 
points than the 
number speciﬁed 
as Evaluation 
Periods. This 
function acts 
diﬀerently when 
extra data is 
requested.SUM(METRICS())/
SUM(m1)
SUM([m1,m2])
SUM(METRICS("errors"))/
SUM(METRICS("requests"))*100✓
TIME_SERIES S TSReturns a non-sparse time 
series where every value is 
set to a scalar argument.TIME_SERIES(MAX(m1))
TIME_SERIES(5*AVG(m1))
TIME_SERIES(10)✓
*Using a function that returns only a scalar number is not valid, as all ﬁnal results of expressions must be 
a single time series or an array of time series. Instead, use these functions as part of a larger expression 
that returns a time series.
Using IF expressions
Use IF along with a comparison operator to ﬁlter out data points from a time series, or create a mixed 
time-series composed of multiple collated time series.
IF uses the following arguments:
154Amazon CloudWatch User Guide
Using IF expressions
IF(condition, trueValue, falseValue )
The condition evaluates to FALSE if the value of the condition data point is 0, and to TRUE if the value 
of the condition is any other value, whether that value is positive or negative. If the condition is a time 
series, it is evaluated separately for every timestamp.
The following lists the valid syntaxes. For each of these syntaxes, the output is a single time series.
•IF(TS Comparison Operator  S, S | TS, S | TS )
•IF(TS, TS, TS)
•IF(TS, S, TS)
•IF(TS, TS, S)
•IF(TS, S, S)
•IF(S, TS, TS)
The following sections provide more details and examples for these syntaxes.
IF(TS Comparison Operator  S, scalar2 | metric2, scalar3 | metric3)
The corresponding output time series value:
•has the value of scalar2  or metric2 , if TS Comparison Operator  S is TRUE
•has the value of scalar3  or metric3 , if TS Comparison Operator  S is FALSE
•is an empty time series, if the corresponding data point of does not exist in metric3 , or if
scalar3 /metric3  is omitted from the expression
IF(metric1, metric2, metric3 )
For each data point of metric1 , the corresponding output time series value:
•has the value of metric2 , if the corresponding data point of metric1  is TRUE.
•has the value of metric3 , if the corresponding data point of metric1  is FALSE.
•has the value of 0, if the corresponding data point of metric1  is TRUE and the corresponding data 
point does not exist in metric2 .
•is dropped, if the corresponding data point of metric1  is FALSE and the corresponding data point does 
not exist in metric3  or if metric3  is omitted from the expression.
The following table shows an example for this syntax.
Metric or function Values
(metric1) [1, 1, 0, 0, -]
(metric2) [30, -, 0, 0, 30]
(metric3) [0, 0, 20, -, 20]
IF(metric1, metric2, metric3) [30, 0, 20, -, -]
IF(metric1, scalar2, metric3)
155Amazon CloudWatch User Guide
Using IF expressions
For each data point of metric1 , the corresponding output time series value:
•has the value of scalar2 , if the corresponding data point of metric1  is TRUE.
•has the value of metric3 , if the corresponding data point of metric1  is FALSE.
•is dropped, if the corresponding data point of metric1  is FALSE and the corresponding data point does 
not exist on metric3 , or if metric3  is omitted from the expression.
Metric or function Values
(metric1) [1, 1, 0, 0, -]
scalar2 5
(metric3) [0, 0, 20, -, 20]
IF(metric1, scalar2, metric3) [5, 5, 20, -, -]
IF(metric1, metric2, scalar3)
For each data point of metric1 , the corresponding output time series value:
•has the value of metric2 , if the corresponding data point of metric1  is TRUE.
•has the value of scalar3 , if the corresponding data point of metric1  is FALSE.
•has the value of 0, if the corresponding data point of metric1  is TRUE and the corresponding data 
point does not exist in metric2 .
•is dropped if the corresponding data point in metric1  does not exist.
Metric or function Values
(metric1) [1, 1, 0, 0, -]
(metric2) [30, -, 0, 0, 30]
scalar3 5
IF(metric1, metric2, scalar3) [30, 0, 5, 5, -]
IF(scalar1, metric2, metric3 )
The corresponding output time series value:
•has the value of metric2 , if scalar1  is TRUE.
•has the value of metric3 , if scalar1  is FALSE.
•is an empty time series, if metric3  is omitted from the expression.
Use case examples for IF expressions
The following examples illustrate the possible uses of the IF function.
•To display only the low values of a metric:
IF(metric1<400, metric1)
156Amazon CloudWatch User Guide
Anomaly detection on metric math
•To change each data point in a metric to one of two values, to show relative highs and lows of the 
original metric:
IF(metric1<400, 10, 2)
•To display a 1 for each timestamp where latency is over the threshold, and display a 0 for all other 
data points:
IF(latency>threshold, 1, 0)
Use metric math with the GetMetricData API operation
You can use GetMetricData  to perform calculations using math expressions, and also retrieve large 
batches of metric data in one API call. For more information, see GetMetricData .
Anomaly detection on metric math
Anomaly detection on metric math is a feature that you can use to create anomaly detection alarms 
on single metrics and the outputs of metric math expressions. You can use these expressions to create 
graphs that visualize anomaly detection bands. The feature supports basic arithmetic functions, 
comparison and logical operators, and most other functions.
Anomaly detection on metric math doesn't support the following functions:
•Expressions that contain more than one ANOMALY_DETECTION_BAND in the same line.
•Expressions that contain more than 10 metrics or math expressions.
•Expressions that contain the METRICS  expression.
•Expressions that contain the SEARCH function.
•Expressions that use metrics with diﬀerent periods.
•Metric math anonmaly detectors that use high-resolution metrics as input.
For more information about this feature, see Using CloudWatch anomaly detection in the Amazon 
CloudWatch User Guide.
Use search expressions in graphs
Search expressions are a type of math expression that you can add to CloudWatch graphs. Search 
expressions enable you to quickly add multiple related metrics to a graph. They also enable you to create 
dynamic graphs that automatically add appropriate metrics to their display, even if those metrics don't 
exist when you ﬁrst create the graph.
For example, you can create a search expression that displays the AWS/EC2 CPUUtilization  metric for 
all instances in the Region. If you later launch a new instance, the CPUUtilization  of the new instance 
is automatically added to the graph.
When you use a search expression in a graph, the search ﬁnds the search expression in metric names, 
namespaces, dimension names, and dimension values. You can use Boolean operators for more complex 
and powerful searches. A search expression can ﬁnd only metrics that have reported data within the past 
two weeks.
You can't create an alarm based on the SEARCH expression. This is because search expressions return 
multiple time series, and an alarm based on a math expression can watch only one time series.
157Amazon CloudWatch User Guide
Search expression syntax
If you are using a monitoring account in CloudWatch cross-account observability, your search expressions 
can ﬁnd metrics in the source accounts linked to that monitoring account.
Topics
•CloudWatch search expression syntax (p. 158)
•CloudWatch search expression examples (p. 162)
•Create a CloudWatch graph with a search expression (p. 164)
CloudWatch search expression syntax
A valid search expression has the following format.
SEARCH(' {Namespace, DimensionName1, DimensionName2, ...} SearchTerm', 'Statistic')
For example:
SEARCH('{AWS/EC2,InstanceId} MetricName="CPUUtilization"', 'Average')
•The ﬁrst part of the query after the word SEARCH, enclosed in curly braces, is the metric schema  to 
be searched. The metric schema contains a metric namespace and one or more dimension names. 
Including a metric schema in a search query is optional. If speciﬁed, the metric schema must contain a 
namespace and can optionally contain one or more dimension names that are valid in that namespace.
You don't need to use quote marks inside the metric schema unless a namespace or dimension name 
includes spaces or non-alphanumeric characters. In that case, you must enclose the name that contains 
those characters with double quotes.
•The SearchTerm  is also optional, but a valid search must contain either the metric schema, the
SearchTerm , or both. The SearchTerm  usually contains one or more account IDs, metric names or 
dimension values. The SearchTerm  can include multiple terms to search for, by both partial match 
and exact match. It can also contain Boolean operators.
Using an account ID in a SearchTerm  works only in accounts that are set up as monitoring accounts 
for CloudWatch cross-account observability. The syntax for an account ID in SearchTerm  is
:aws.AccountId = " 444455556666 ". You can also use 'LOCAL' to specify the monitoring account 
itself: :aws.AccountId = 'LOCAL'
For more information, see CloudWatch cross-account observability (p. 846).
The SearchTerm  can include one or more designators, such as MetricName=  as in this example, but 
using designators isn't required.
The metric schema and SearchTerm  must be enclosed together in a pair of single quote marks.
•The Statistic  is the name of any valid CloudWatch statistic. It must be enclosed by single quotes. 
For more information, see Statistics  (p. 6).
The preceding example searches the AWS/EC2 namespace for any metrics that have InstanceId  as 
a dimension name. It returns all CPUUtilization  metrics that it ﬁnds, with the graph showing the
Average  statistic.
A search expression can ﬁnd only metrics that have reported data within the past two weeks.
Search expression limits
The maximum search expression query size is 1024 characters. You can have as many as 100 search 
expressions on one graph. A graph can display as many as 500 time series.
158Amazon CloudWatch User Guide
Search expression syntax
CloudWatch search expressions: Tokenization
When you specify a SearchTerm , the search function searches for tokens , which are substrings that 
CloudWatch automatically generates from full metric names, dimension names, dimension values, and 
namespaces. CloudWatch generates tokens distinguished by the camel-case capitalization in the original 
string. Numeric characters also serve as the start of new tokens, and non-alphanumeric characters serve 
as delimiters, creating tokens before and after the non-alphanumeric characters.
A continuous string of the same type of token delimiter character results in one token.
All generated tokens are in lowercase. The following table shows some examples of tokens generated.
Original string Tokens generated
CustomCount1 customcount1 , custom , count , 1
SDBFailure sdbfailure , sdb, failure
Project2-trial333 project2trial333 , project , 2, trial , 333
CloudWatch search expressions: Partial matches
When you specify a SearchTerm , the search term is also tokenized. CloudWatch ﬁnds metrics based on 
partial matches, which are matches of a single token generated from the search term to a single token 
generated from a metric name, namespace, dimension name, or dimension value.
Partial match searches to match a single token are case insensitive. For example, using any of the 
following search terms can return the CustomCount1  metric:
•count
•Count
•COUNT
However, using couNT as a search term doesn't ﬁnd CustomCount1  because the capitalization in the 
search term couNT is tokenized into cou and NT.
Searches can also match composite tokens, which are multiple tokens that appear consecutively in the 
original name. To match a composite token, the search is case sensitive. For example, if the original term 
is CustomCount1 , searches for CustomCount  or Count1 are successful, but searches for customcount
or count1 aren't.
CloudWatch search expressions: Exact matches
You can deﬁne a search to ﬁnd only exact matches of your search term by using double quotes 
around the part of the search term that requires an exact match. These double-quotes are enclosed 
in the single-quotes used around the entire search term. For example, SEARCH(' {MyNamespace}, 
"CustomCount1" ', 'Maximum')  ﬁnds the exact string CustomCount1  if it exists as a metric name, 
dimension name, or dimension value in the namespace named MyNamespace . However, the searches
SEARCH(' {MyNamespace}, "customcount1" ', 'Maximum')  or SEARCH(' {MyNamespace}, 
"Custom" ', 'Maximum')  do not ﬁnd this string.
You can combine partial match terms and exact match terms in a single search expression. For example,
SEARCH(' {AWS/NetworkELB, LoadBalancer} "ConsumedLCUs" OR flow ', 'Maximum')
returns the Elastic Load Balancing metric named ConsumedLCUs  as well as all Elastic Load Balancing 
metrics or dimensions that contain the token flow .
159Amazon CloudWatch User Guide
Search expression syntax
Using exact match is also a good way to ﬁnd names with special characters, such as non-alphanumeric 
characters or spaces, as in the following example.
SEARCH(' {"My Namespace", "Dimension@Name"}, "Custom:Name[Special_Characters" ', 'Maximum')
CloudWatch search expressions: Excluding a metric schema
All examples shown so far include a metric schema, in curly braces. Searches that omit a metric schema 
are also valid.
For example, SEARCH(' "CPUUtilization" ', 'Average')  returns all metric names, dimension 
names, dimension values, and namespaces that are an exact match for the string CPUUtilization . 
In the AWS metric namespaces, this can include metrics from several services including Amazon EC2, 
Amazon ECS, SageMaker, and others.
To narrow this search to only one AWS service, the best practice is to specify the namespace and any 
necessary dimensions in the metric schema, as in the following example. Although this narrows the 
search to the AWS/EC2 namespace, it would still return results of other metrics if you have deﬁned
CPUUtilization  as a dimension value for those metrics.
SEARCH(' {AWS/EC2, InstanceType} "CPUUtilization" ', 'Average')
Alternatively you could add the namespace in the SearchTerm  as in the following example. But in this 
example, the search would match any AWS/EC2 string, even if it was a custom dimension name or value.
SEARCH(' "AWS/EC2" MetricName="CPUUtilization" ', 'Average')
CloudWatch search expressions: Specifying property names in 
the search
The following exact match search for "CustomCount1"  returns all metrics with exactly that name.
SEARCH(' "CustomCount1" ', 'Maximum')
But it also returns metrics with dimension names, dimension values, or namespaces of CustomCount1 . 
To structure your search further, you can specify the property name of the type of object that you want 
to ﬁnd in your searches. The following example searches all namespaces and returns metrics named
CustomCount1 .
SEARCH(' MetricName="CustomCount1" ', 'Maximum')
You can also use namespaces and dimension name/value pairs as property names, as in the following 
examples. The ﬁrst of these examples also illustrates that you can use property names with partial match 
searches as well.
SEARCH(' InstanceType=micro ', 'Average')
SEARCH(' InstanceType="t2.micro" Namespace="AWS/EC2" ', 'Average')
CloudWatch search expressions: Non-alphanumeric characters
Non-alphanumeric characters serve as delimiters, and mark where the names of metrics, dimensions, 
namespaces, and search terms are to be separated into tokens. When terms are tokenized, non-
160Amazon CloudWatch User Guide
Search expression syntax
alphanumeric characters are stripped out and don't appear in the tokens. For example, Network-
Errors_2  generates the tokens network , errors , and 2.
Your search term can include any non-alphanumeric characters. If these characters appear in your search 
term, they can specify composite tokens in a partial match. For example, all of the following searches 
would ﬁnd metrics named either Network-Errors-2  or NetworkErrors2 .
network/errors
network+errors
network-errors
Network_Errors
When you're doing an exact value search, any non-alphanumeric characters used in the exact search 
must be the correct characters that appear in the string being searched for. For example, if you want 
to ﬁnd Network-Errors-2 , searching for "Network-Errors-2"  is successful, but a search for
"Network_Errors_2"  isn't.
When you perform an exact match search, the following characters must be escaped with a backslash.
" \ ( )
For example, to ﬁnd the metric name Europe\France Traffic(Network)  by exact match, use the 
search term "Europe\\France Traffic\(Network\)"
CloudWatch search expressions: Boolean operators
Search supports the use of the Boolean operators AND, OR, and NOT within the SearchTerm . Boolean 
operators are enclosed in the single quote marks that you use to enclose the entire search term. Boolean 
operators are case sensitive, so and, or, and not aren't valid as Boolean operators.
You can use AND explicitly in your search, such as SEARCH('{AWS/EC2,InstanceId} network AND 
packets', 'Average') . Not using any Boolean operator between search terms implicitly searches 
them as if there were an AND operator, so SEARCH(' {AWS/EC2,InstanceId} network packets 
', 'Average')  yields the same search results.
Use NOT to exclude subsets of data from the results. For example, SEARCH(' {AWS/EC2,InstanceId} 
MetricName="CPUUtilization" NOT i-1234567890123456 ', 'Average')  returns the
CPUUtilization  for all your instances, except for the instance i-1234567890123456 . You can 
also use a NOT clause as the only search term. For example, SEARCH( 'NOT Namespace=AWS ', 
'Maximum')  yields all your custom metrics (metrics with namespaces that don't include AWS).
You can use multiple NOT phrases in a query. For example, SEARCH(' {AWS/EC2,InstanceId} 
MetricName="CPUUtilization" NOT "ProjectA" NOT "ProjectB" ', 'Average')  returns 
the CPUUtilization  of all instances in the Region, except for those with dimension values of
ProjectA  or ProjectB .
You can combine Boolean operators for more powerful and detailed searches, as in the following 
examples. Use parentheses to group the operators.
Both of the next two examples return all metric names containing ReadOps from both the EC2 and EBS 
namespaces.
SEARCH(' (EC2 OR EBS) AND MetricName=ReadOps ', 'Maximum')
SEARCH(' (EC2 OR EBS) MetricName=ReadOps ', 'Maximum')
161Amazon CloudWatch User Guide
Search expression examples
The following example narrows the previous search to only results that include ProjectA , which could 
be the value of a dimension.
SEARCH(' (EC2 OR EBS) AND ReadOps AND ProjectA ', 'Maximum')
The following example uses nested grouping. It returns Lambda metrics for Errors from all functions, 
and Invocations  of functions with names that include the strings ProjectA  or ProjectB .
SEARCH(' {AWS/Lambda,FunctionName} MetricName="Errors" OR (MetricName="Invocations" AND 
 (ProjectA OR ProjectB)) ', 'Average')
CloudWatch search expressions: Using math expressions
You can use a search expression within a math expressions in a graph.
For example, SUM(SEARCH(' {AWS/Lambda, FunctionName} MetricName="Errors" ', 
'Sum')) returns the sum of the Errors metric of all your Lambda functions.
Using separate lines for your search expression and math expression might yield more useful results. For 
example, suppose that you use the following two expressions in a graph. The ﬁrst line displays separate
Errors lines for each of your Lambda functions. The ID of this expression is e1. The second line adds 
another line showing the sum of the errors from all of the functions.
SEARCH(' {AWS/Lambda, FunctionName}, MetricName="Errors" ', 'Sum')
SUM(e1)
CloudWatch search expression examples
The following examples illustrate more search expression uses and syntax. Let's start with a search for
CPUUtilization  across all instances in the Region and then look at variations.
This example displays one line for each instance in the Region, showing the CPUUtilization  metric 
from the AWS/EC2 namespace.
SEARCH(' {AWS/EC2,InstanceId} MetricName="CPUUtilization" ', 'Average')
Changing InstanceId  to InstanceType  changes the graph to show one line for each instance type 
used in the Region. Data from all instances of each type is aggregated into one line for that instance 
type.
SEARCH(' {AWS/EC2,InstanceType} MetricName="CPUUtilization" ', 'Average')
The following example aggregates the CPUUtilization  by instance type and displays one line for each 
instance type that includes the string micro .
SEARCH('{AWS/EC2,InstanceType} InstanceType=micro MetricName="CPUUtilization" ', 'Average')
This example narrows the previous example, changing the InstanceType  to an exact search for 
t2.micro instances.
SEARCH('{AWS/EC2,InstanceType} InstanceType="t2.micro" MetricName="CPUUtilization" ', 
 'Average')
162Amazon CloudWatch User Guide
Search expression examples
The following search removes the {metric schema}  part of the query, so the CPUUtilization  metric 
from all namespaces appears in the graph. This can return quite a few results because the graph includes 
multiple lines for the CPUUtilization  metric from each AWS service, aggregated along diﬀerent 
dimensions.
SEARCH('MetricName="CPUUtilization" ', 'Average')
To narrow these results a bit, you can specify two speciﬁc metric namespaces.
SEARCH('MetricName="CPUUtilization" AND ("AWS/ECS" OR "AWS/ES") ', 'Average')
The preceding example is the only way to do a search of speciﬁc multiple namespaces with one search 
query, as you can specify only one metric schema in each query. However, to add more structure, you 
could use two queries in the graph, as in the following example. This example also adds more structure 
by specifying a dimension to use to aggregate the data for Amazon ECS.
SEARCH('{AWS/ECS ClusterName}, MetricName="CPUUtilization" ', 'Average')
SEARCH(' {AWS/EBS} MetricName="CPUUtilization" ', 'Average')
The following example returns the Elastic Load Balancing metric named ConsumedLCUs  as well as all 
Elastic Load Balancing metrics or dimensions that contain the token flow .
SEARCH('{AWS/NetworkELB, LoadBalancer} "ConsumedLCUs" OR flow ', 'Maximum')
The following example uses nested grouping. It returns Lambda metrics for Errors from all functions 
and Invocations  of functions with names that include the strings ProjectA  or ProjectB .
SEARCH('{AWS/Lambda,FunctionName} MetricName="Errors" OR (MetricName="Invocations" AND 
 (ProjectA OR ProjectB)) ', 'Average')
The following example displays all of your custom metrics, excluding metrics generated by AWS services.
SEARCH('NOT Namespace=AWS ', 'Average')
The following example displays metrics with metric names, namespaces, dimension names, and 
dimension values that contain the string Errors as part of their name.
SEARCH('Errors', 'Average')
The following example narrows that search to exact matches. For example, this search ﬁnds the metric 
name Errors  but not metrics named ConnectionErrors  or errors .
SEARCH(' "Errors" ', 'Average')
The following example shows how to specify names that contain spaces or special characters in the 
metric schema part of the search term.
SEARCH('{"Custom-Namespace", "Dimension Name With Spaces"}, ErrorCount ', 'Maximum')
CloudWatch cross-account observability search expression 
examples
CloudWatch cross-account observability examples
163Amazon CloudWatch User Guide
Creating a graph with a search expression
If you are signed in to an account that is set up as a monitoring account in CloudWatch cross-account 
observability, you can use the SEARCH function to return metrics from speciﬁed source accounts. For 
more information, see CloudWatch cross-account observability (p. 846).
The following example retrieves all Lambda metrics from the account with the account ID 
111122223333.
SEARCH(' AWS/Lambda :aws.AccountId = "111122223333" ', 'Average')
The following example retrieves all AWS/EC2 metrics from two accounts: 111122223333 and 
777788889999.
SEARCH(' AWS/EC2 :aws.AccountId = ("111122223333" OR "777788889999") ', 'Average')
The following example retrieves all AWS/EC2 metrics from the source account 111122223333 and from 
the monitoring account itself.
SEARCH(' AWS/EC2 :aws.AccountId = ("111122223333" OR 'LOCAL') ', 'Average')
The following example retrieves the SUM of the MetaDataToken  metric from the account
444455556666  with the InstanceId  dimension.
SEARCH('{AWS/EC2,InstanceId} :aws.AccountId=444455556666 MetricName=\"MetadataNoToken
\"','Sum')
Create a CloudWatch graph with a search expression
On the CloudWatch console, you can access search capability when you add a graph to a dashboard, or 
by using the Metrics  view.
You can't create an alarm based on a SEARCH expression. This is because search expressions return 
multiple time series, and an alarm based on a math expression can watch only one time series.
To add a graph with a search expression to an existing dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards  and select a dashboard.
3. Choose Add widget .
4. Choose either Line  or Stacked area and choose Conﬁgure .
5. On the Graphed metrics  tab, choose Add a math expression .
6. For Details , enter the search expression that you want. For example, SEARCH('{AWS/
EC2,InstanceId} MetricName="CPUUtilization"', 'Average')
7. (Optional) To add another search expression or math expression to the graph, choose Add a math 
expression
8. (Optional) After you add a search expression, you can specify a dynamic label to appear on the graph 
legend for each metric. Dynamic labels display a statistic about the metric and automatically update 
when the dashboard or graph is refreshed. To add a dynamic label, choose Graphed metrics  and 
then Dynamic labels .
By default, the dynamic values you add to the label appear at the beginning of the label. You can 
then click the Label  value for the metric to edit the label. For more information, see Use dynamic 
labels  (p. 126).
9. (Optional) To add a single metric to the graph, choose the All metrics  tab and drill down to the 
metric you want.
164Amazon CloudWatch User Guide
Creating a graph with a search expression
10. (Optional) To change the time range shown on the graph, choose either custom  at the top of the 
graph or one of the time periods to the left of custom .
11. (Optional) Horizontal annotations help dashboard users quickly see when a metric has spiked to a 
certain level or whether the metric is within a predeﬁned range. To add a horizontal annotation, 
choose Graph options  and then Add horizontal annotation:
a. For Label , enter a label for the annotation.
b. For Value, enter the metric value where the horizontal annotation appears.
c. For Fill, specify whether to use ﬁll shading with this annotation. For example, choose Above
or Below for the corresponding area to be ﬁlled. If you specify Between , another Value  ﬁeld 
appears, and the area of the graph between the two values is ﬁlled.
d. For Axis, specify whether the numbers in Value refer to the metric associated with the left y-
axis or the right y-axis if the graph includes multiple metrics.
You can change the ﬁll color of an annotation by choosing the color square in the left column of 
the annotation.
Repeat these steps to add multiple horizontal annotations to the same graph.
To hide an annotation, clear the check box in the left column for that annotation.
To delete an annotation, choose x in the Actions column.
12. (Optional) Vertical annotations help you mark milestones in a graph, such as operational events or 
the beginning and end of a deployment. To add a vertical annotation, choose Graph options  and 
then Add vertical annotation:
a. For Label , enter a label for the annotation. To show only the date and time on the annotation, 
keep the Label  ﬁeld blank.
b. For Date , specify the date and time where the vertical annotation appears.
c. For Fill, specify whether to use ﬁll shading before or after a vertical annotation or between two 
vertical annotations. For example, choose Before  or After for the corresponding area to be 
ﬁlled. If you specify Between , another Date ﬁeld appears, and the area of the graph between 
the two values is ﬁlled.
Repeat these steps to add multiple vertical annotations to the same graph.
To hide an annotation, clear the check box in the left column for that annotation.
To delete an annotation, choose x in the Actions column.
13. Choose Create widget .
14. Choose Save dashboard.
To use the Metrics view to graph searched metrics
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. In the search ﬁeld, enter the tokens to search for: for example, cpuutilization t2.small .
Results that match your search appear.
4. To graph all of the metrics that match your search, choose Graph search .
or
To reﬁne your search, choose one of the namespaces that appeared in your search results.
165Amazon CloudWatch User Guide
Get statistics for a metric
5. If you selected a namespace to narrow your results, you can do the following:
a. To graph one or more metrics, select the check box next to each metric. To select all metrics, 
select the check box in the heading row of the table.
b. To reﬁne your search, hover over a metric name and choose Add to search  or Search for this 
only .
c. To view help for a metric, select the metric name and choose What is this? .
The selected metrics appear on the graph.
6. (Optional) Select one of the buttons in the search bar to edit that part of the search term.
7. (Optional) To add the graph to a dashboard, choose Actions and then Add to dashboard .
Get statistics for a metric
CloudWatch statistics deﬁnitions
Statistics are metric data aggregations over speciﬁed periods of time. When you graph or retrieve the 
statistics for a metric, you specify the Period of time, such as ﬁve minutes, to use to calculate each 
statistical value. For example, if the Period is ﬁve minutes, the Sum  is the sum of all sample values 
collected during the ﬁve-minute period, while the Minimum  is the lowest value collected during the ﬁve-
minute period.
CloudWatch supports the following statistics for metrics.
•SampleCount is the number of data points during the period.
•Sum  is the sum of the values of the all data points collected during the period.
•Average is the value of Sum/SampleCount  during the speciﬁed period.
•Minimum  is the lowest value observed during the speciﬁed period.
•Maximum  is the highest value observed during the speciﬁed period.
•Percentile (p) indicates the relative standing of a value in a dataset. For example, p95 is the 95th 
percentile and means that 95 percent of the data within the period is lower than this value and 5 
percent of the data is higher than this value. Percentiles help you get a better understanding of the 
distribution of your metric data.
•Trimmed mean (TM) is the mean of all values that are between two speciﬁed boundaries. Values 
outside of the boundaries are ignored when the mean is calculated. You deﬁne the boundaries as one 
or two numbers between 0 and 100, up to 10 decimal places. The numbers can be absolute values or 
percentages. For example, tm90  calculates the average after removing the 10% of data points with 
the highest values. TM(2%:98%)  calculates the average after removing the 2% lowest data points and 
the 2% highest data points. TM(150:1000)  calculates the average after removing all data points that 
are lower than or equal to 150, or higher than 1000.
•Interquartile mean (IQM) is the trimmed mean of the interquartile range, or the middle 50% of 
values. It is equivalent to TM(25%:75%) .
•Winsorized mean (WM) is similar to trimmed mean. However, with winsorized mean, the values that 
are outside the boundary are not ignored, but instead are considered to be equal to the value at the 
edge of the appropriate boundary. After this normalization, the average is calculated. You deﬁne the 
boundaries as one or two numbers between 0 and 100, up to 10 decimal places. For example, wm98
calculates the average while treating the 2% of the highest values to be equal to the value at the 98th 
percentile. WM(10%:90%)  calculates the average while treating the highest 10% of data points to be 
the value of the 90% boundary, and treating the lowest 10% of data points to be the value of the 10% 
boundary.
166Amazon CloudWatch User Guide
CloudWatch statistics deﬁnitions
•Percentile rank (PR) is the percentage of values that meet a ﬁxed threshold. For example, PR(:300)
returns the percentage of data points that have a value of 300 or less. PR(100:2000)  returns the 
percentage of data points that have a value between 100 and 2000.
•Trimmed count (TC) is the number of data points in the chosen range for a trimmed mean statistic. 
For example, tc90  returns the number of data points not including any data points that fall in the 
highest 10% of the values. TC(0.005:0.030) returns the number of data points with values between 
0.005 (exclusive) and 0.030 (inclusive).
•Trimmed sum (TS) is the sum of the values of data points in a chosen range for a trimmed mean 
statistic. It is equivalent to (Trimmed Mean) * (Trimmed count). For example, ts90  returns the sum 
of the data points not including any data points that fall in the highest 10% of the values. TS(80%:)
returns the sum of the data point values, not including any data points with values in the lowest 80% 
of the range of values.
Note
For Trimmed Mean, Trimmed Count, Trimmed Sum, and Winsorized Mean, if you deﬁne two 
boundaries as ﬁxed values instead of percentages, the calculation includes values equal to the 
higher boundary, but does not include values equal to the lower boundary.
Syntax
For Trimmed Mean, Trimmed Count, Trimmed Sum, and Winsorized Mean, the following syntax rules 
apply:
•Using parentheses with one or two numbers with percent signs deﬁnes the boundaries to use as 
the values in the data set that fall in between the two percentiles that you specify. For example,
TM(10%:90%)  uses only the values between the 10th and 90th percentiles. TM(:95%)  uses the values 
from the lowest end of the data set up to the 95th percentile, ignoring the 5% of data points with the 
highest values.
•Using parenthesis with one or two numbers without percent signs deﬁnes the boundaries to use as the 
values in the data set that fall in between the explicit values that you specify. For example, TC(80:500)
uses only the values that are between 80 (exclusive) and 500 (inclusive). TC(:0.5) uses only the values 
that equal 0.5 or are lower.
•Using one number without parentheses calculates using percentages, ignoring data points that are 
higher than the speciﬁed percentile. For example, tm99  calculates the mean while ignoring the 1% of 
the data points with the highest value. It is the same as TM(:99%) .
•Trimmed mean, Trimmed Count, Trimmed Sum, and Winsorized Mean can all be abbreviated using 
uppercase letters when specifying a range, such as TM(5%:95%) , TM(100:200) , or TM(:95%) . They can 
only be abbreviated using lowercase letters when you specifying only one number, such as tm99 .
Statistics use cases
•Trimmed mean is most useful for metrics with a large sample size, such as webpage latency. 
For example, tm99  disregards extreme high outliers that could result from network problems or 
human errors, to give a more accurate number for the average latency of typical requests. Similarly,
TM(10%:)  disregards the lowest 10% of latency values, such as those resulting from cache hits. And
TM(10%:99%)  excludes both of these types of outliers. We recommend that you use trimmed mean 
for monitoring latency.
•It is a good idea to keep watch on trimmed count whenever you are using trimmed mean, to make sure 
that the number of values being used in your trimmed mean calculations are enough to be statistically 
signiﬁcant.
•Percentile rank enables you to put values into "bins" of ranges, and you can use this to manually create 
a histogram. To do this, break your values down into various bins, such as PR(:1) , PR(1:5) , PR(5:10) , 
and PR(10:) . Put each of these bins into a visualization as bar charts, and you have a histogram.
167Amazon CloudWatch User Guide
CloudWatch statistics deﬁnitions
Percentiles versus trimmed mean
A percentile such as p99 and a trimmed mean such as tm99  measure similar, but not identical values. 
Both p99 and tm99  ignore the 1% of the data points with the highest values, which are considered 
outliers. After that, p99 is the maximum value of the remaining 99%, while tm99  is the average  of the 
remaining 99%. If you are looking at the latency of web requests, p99 tells you the worst customer 
experience, ignoring outliers, while tm99  tells you the average customer experience, ignoring outliers.
Trimmed mean is a good latency statistic to watch if you are looking to optimize your customer 
experience.
Requirements to use percentiles, trimmed mean, and some 
other statistics
CloudWatch needs raw data points to calculate the following statistics:
•Percentiles
•Trimmed mean
•Interquartile mean
•Winsorized mean
•Trimmed sum
•Trimmed count
•Percentile rank
If you publish data for a custom statistics using a statistic set instead of raw data, you can retrieve these 
types of statistics for this data only if one of the following conditions is true:
•The SampleCount value of the statistic set is 1 and Min, Max, and Sum are all equal.
•The Min and Max are equal, and Sum is equal to Min multiplied by SampleCount.
The following AWS services include metrics that support these types of statistics.
•API Gateway
•Application Load Balancer
•Amazon EC2
•Elastic Load Balancing
•Kinesis
•Amazon RDS
Additionally, these type of statistics are not available for metrics when any of the metric values are 
negative numbers.
The following examples show you how to get statistics for the CloudWatch metrics for your resources, 
such as your EC2 instances.
Examples
•Get statistics for a speciﬁc resource (p. 169)
•Aggregate statistics across resources (p. 172)
•Aggregate statistics by Auto Scaling group (p. 173)
•Aggregate statistics by Amazon Machine Image (AMI) (p. 175)
168Amazon CloudWatch User Guide
Get statistics for a speciﬁc resource
Get statistics for a speciﬁc resource
The following example shows you how to determine the maximum CPU utilization of a speciﬁc EC2 
instance.
Requirements
•You must have the ID of the instance. You can get the instance ID using the Amazon EC2 console or the
describe-instances command.
•By default, basic monitoring is enabled, but you can enable detailed monitoring. For more information, 
see Enable or Disable Detailed Monitoring for Your Instances in the Amazon EC2 User Guide for Linux 
Instances .
To display the average CPU utilization for a speciﬁc instance using the console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. Select the EC2 metric namespace.
4. Select the Per-Instance Metrics dimension.
169Amazon CloudWatch User Guide
Get statistics for a speciﬁc resource
5. In the search ﬁeld, enter CPUUtilization  and press Enter. Select the row for the speciﬁc instance, 
which displays a graph for the CPUUtilization  metric for the instance. To change the name of 
the graph, choose the pencil icon. To change the time range, select one of the predeﬁned values or 
choose custom .
6. To change the statistic, choose the Graphed metrics  tab. Choose the column heading or an 
individual value and then choose one of the statistics or predeﬁned percentiles, or specify a custom 
percentile (for example, p99.999 ).
170Amazon CloudWatch User Guide
Get statistics for a speciﬁc resource
7. To change the period, choose the Graphed metrics  tab. Choose the column heading or an individual 
value, and then choose a diﬀerent value.
To get the CPU utilization per EC2 instance using the AWS CLI
Use the get-metric-statistics command as follows to get the CPUUtilization  metric for the speciﬁed 
instance.
aws cloudwatch get-metric-statistics --namespace AWS/EC2 --metric-name CPUUtilization \
--dimensions Name=InstanceId,Value= i-1234567890abcdef0  --statistics Maximum \
--start-time 2016-10-18T23:18:00  --end-time 2016-10-19T23:18:00  --period 360
The returned statistics are 6-minute values for the requested 24-hour time interval. Each value 
represents the maximum CPU utilization percentage for the speciﬁed instance for a particular 6-minute 
time period. The data points aren't returned in chronological order. The following shows the beginning 
of the example output (the full output includes data points for every 6 minutes of the 24-hour period).
{ 
    "Datapoints": [ 
        { 
            "Timestamp": "2016-10-19T00:18:00Z",  
            "Maximum": 0.33000000000000002,  
            "Unit": "Percent" 
        },  
        { 
            "Timestamp": "2016-10-19T03:18:00Z",  
            "Maximum": 99.670000000000002,  
            "Unit": "Percent" 
        },  
        { 
            "Timestamp": "2016-10-19T07:18:00Z",  
            "Maximum": 0.34000000000000002,  
            "Unit": "Percent" 
        },  
        ... 
    ],  
    "Label": "CPUUtilization"
171Amazon CloudWatch User Guide
Aggregate statistics across resources
}
Aggregate statistics across resources
You can aggregate the metrics for AWS resources across multiple resources. Metrics are completely 
separate between Regions, but you can use metric math to aggregate similar metrics across Regions. For 
more information, see Use metric math  (p. 136).
For example, you can aggregate statistics for your EC2 instances that have detailed monitoring enabled. 
Instances that use basic monitoring aren't included. Therefore, you must enable detailed monitoring 
(at an additional charge), which provides data in 1-minute periods. For more information, see Enable or 
Disable Detailed Monitoring for Your Instances in the Amazon EC2 User Guide for Linux Instances.
This example shows you how to get the average CPU usage for your EC2 instances. Because no 
dimension is speciﬁed, CloudWatch returns statistics for all dimensions in the AWS/EC2 namespace. To 
get statistics for other metrics, see AWS services that publish CloudWatch metrics (p. 1001 ).
Important
This technique for retrieving all dimensions across an AWS namespace doesn't work for custom 
namespaces that you publish to CloudWatch. With custom namespaces, you must specify the 
complete set of dimensions that are associated with any given data point to retrieve statistics 
that include the data point.
To display average CPU utilization for your EC2 instances
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. Choose the EC2 namespace and choose Across All Instances.
4. Select the row that contains CPUUtilization , which displays a graph for the metric for all your 
EC2 instances. To change the name of the graph, choose the pencil icon. To change the time range, 
select one of the predeﬁned values or choose custom .
5. To change the statistic, choose the Graphed metrics  tab. Choose the column heading or an 
individual value and then choose one of the statistics or predeﬁned percentiles, or specify a custom 
percentile (for example, p95.45 ).
172Amazon CloudWatch User Guide
Aggregate statistics by Auto Scaling group
6. To change the period, choose the Graphed metrics  tab. Choose the column heading or an individual 
value and then choose a diﬀerent value.
To get average CPU utilization across your EC2 instances using the AWS CLI
Use the get-metric-statistics command as follows:
aws cloudwatch get-metric-statistics --namespace AWS/EC2 --metric-name CPUUtilization --
statistics "Average" "SampleCount" \
--start-time 2016-10-11T23:18:00  --end-time 2016-10-12T23:18:00  --period 3600
The following is example output:
{ 
    "Datapoints": [ 
        { 
            "SampleCount": 238.0,  
            "Timestamp": "2016-10-12T07:18:00Z",  
            "Average": 0.038235294117647062,  
            "Unit": "Percent" 
        },  
        { 
            "SampleCount": 240.0,  
            "Timestamp": "2016-10-12T09:18:00Z",  
            "Average": 0.16670833333333332,  
            "Unit": "Percent" 
        },  
        { 
            "SampleCount": 238.0,  
            "Timestamp": "2016-10-11T23:18:00Z",  
            "Average": 0.041596638655462197,  
            "Unit": "Percent" 
        },  
        ... 
    ],  
    "Label": "CPUUtilization"
}
Aggregate statistics by Auto Scaling group
You can aggregate statistics for the EC2 instances in an Auto Scaling group. Metrics are completely 
separate between Regions, but you can use CloudWatch metric math to aggregate and transform metrics 
from multiple Regions. You can also use the cross-account dashboard to perform metric math on metrics 
from diﬀerent accounts.
This example shows you how to get the total bytes written to disk for one Auto Scaling group. The total 
is computed for 1-minute periods for a 24-hour interval across all EC2 instances in the speciﬁed Auto 
Scaling group.
To display DiskWriteBytes for the instances in an Auto Scaling group using the console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. Choose the EC2 namespace and then choose By Auto Scaling Group.
4. Select the row for the DiskWriteBytes metric and the speciﬁc Auto Scaling group, which displays a 
graph for the metric for the instances in the Auto Scaling group. To change the name of the graph, 
173Amazon CloudWatch User Guide
Aggregate statistics by Auto Scaling group
choose the pencil icon. To change the time range, select one of the predeﬁned values or choose
custom .
5. To change the statistic, choose the Graphed metrics  tab. Choose the column heading or an 
individual value and then choose one of the statistics or predeﬁned percentiles, or specify a custom 
percentile (for example, p95.45 ).
6. To change the period, choose the Graphed metrics  tab. Choose the column heading or an individual 
value and then choose a diﬀerent value.
To get DiskWriteBytes for the instances in an Auto Scaling group using the AWS CLI
Use the get-metric-statistics command as follows.
aws cloudwatch get-metric-statistics --namespace AWS/EC2 --metric-name DiskWriteBytes   
--dimensions Name=AutoScalingGroupName,Value= my-asg --statistics "Sum" "SampleCount" \
--start-time 2016-10-16T23:18:00  --end-time 2016-10-18T23:18:00  --period 360
The following is example output.
{ 
    "Datapoints": [ 
        { 
            "SampleCount": 18.0,  
            "Timestamp": "2016-10-19T21:36:00Z",  
            "Sum": 0.0,  
            "Unit": "Bytes" 
        },  
        { 
            "SampleCount": 5.0,  
            "Timestamp": "2016-10-19T21:42:00Z",  
            "Sum": 0.0,  
            "Unit": "Bytes" 
        } 
    ],  
    "Label": "DiskWriteBytes"
}
174Amazon CloudWatch User Guide
Aggregating statistics by AMI
Aggregate statistics by Amazon Machine Image (AMI)
You can aggregate statistics for the EC2 instances that have detailed monitoring enabled. Instances that 
use basic monitoring aren't included. For more information, see Enable or Disable Detailed Monitoring 
for Your Instances in the Amazon EC2 User Guide for Linux Instances.
This example shows you how to determine average CPU utilization for all instances that use the speciﬁed 
AMI. The average is over 60-second time intervals for a one-day period.
To display the average CPU utilization by AMI using the console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. Choose the EC2 namespace and then choose By Image (AMI) Id.
4. Select the row for the CPUUtilization  metric and the speciﬁc AMI, which displays a graph for the 
metric for the speciﬁed AMI. To change the name of the graph, choose the pencil icon. To change the 
time range, select one of the predeﬁned values or choose custom .
5. To change the statistic, choose the Graphed metrics  tab. Choose the column heading or an 
individual value and then choose one of the statistics or predeﬁned percentiles, or specify a custom 
percentile (for example, p95.45 ).
6. To change the period, choose the Graphed metrics  tab. Choose the column heading or an individual 
value and then choose a diﬀerent value.
To get the average CPU utilization by AMI using the AWS CLI
Use the get-metric-statistics command as follows.
aws cloudwatch get-metric-statistics --namespace AWS/EC2 --metric-name CPUUtilization \
--dimensions Name=ImageId,Value= ami-3c47a355  --statistics Average \
--start-time 2016-10-10T00:00:00  --end-time 2016-10-11T00:00:00  --period 3600
The operation returns statistics that are one-hour values for the one-day interval. Each value represents 
an average CPU utilization percentage for EC2 instances running the speciﬁed AMI. The following is 
example output.
{ 
175Amazon CloudWatch User Guide
Publish custom metrics
    "Datapoints": [ 
        { 
            "Timestamp": "2016-10-10T07:00:00Z",  
            "Average": 0.041000000000000009,  
            "Unit": "Percent" 
        },  
        { 
            "Timestamp": "2016-10-10T14:00:00Z",  
            "Average": 0.079579831932773085,  
            "Unit": "Percent" 
        },  
        { 
            "Timestamp": "2016-10-10T06:00:00Z",  
            "Average": 0.036000000000000011,  
            "Unit": "Percent" 
        },  
        ... 
    ],  
    "Label": "CPUUtilization"
}
Publish custom metrics
You can publish your own metrics to CloudWatch using the AWS CLI or an API. You can view statistical 
graphs of your published metrics with the AWS Management Console.
CloudWatch stores data about a metric as a series of data points. Each data point has an associated time 
stamp. You can even publish an aggregated set of data points called a statistic set .
Topics
•High-resolution metrics (p. 176)
•Use dimensions  (p. 177)
•Publish single data points  (p. 177)
•Publish statistic sets  (p. 178)
•Publish the value zero (p. 178)
•Stop publishing metrics  (p. 179)
High-resolution metrics
Each metric is one of the following:
•Standard resolution, with data having a one-minute granularity
•High resolution, with data at a granularity of one second
Metrics produced by AWS services are standard resolution by default. When you publish a custom metric, 
you can deﬁne it as either standard resolution or high resolution. When you publish a high-resolution 
metric, CloudWatch stores it with a resolution of 1 second, and you can read and retrieve it with a period 
of 1 second, 5 seconds, 10 seconds, 30 seconds, or any multiple of 60 seconds.
High-resolution metrics can give you more immediate insight into your application's sub-minute activity. 
Keep in mind that every PutMetricData  call for a custom metric is charged, so calling PutMetricData
more often on a high-resolution metric can lead to higher charges. For more information about 
CloudWatch pricing, see Amazon CloudWatch Pricing.
176Amazon CloudWatch User Guide
Use dimensions
If you set an alarm on a high-resolution metric, you can specify a high-resolution alarm with a period of 
10 seconds or 30 seconds, or you can set a regular alarm with a period of any multiple of 60 seconds. 
There is a higher charge for high-resolution alarms with a period of 10 or 30 seconds.
Use dimensions
In custom metrics, the --dimensions  parameter is common. A dimension further clariﬁes what the 
metric is and what data it stores. You can have up to 30 dimensions assigned to one metric, and each 
dimension is deﬁned by a name and value pair.
How you specify a dimension is diﬀerent when you use diﬀerent commands. With put-metric-data, you 
specify each dimension as MyName =MyValue , and with get-metric-statistics or put-metric-alarm you use 
the format Name=MyName , Value=MyValue. For example, the following command publishes a Buffers
metric with two dimensions named InstanceId  and InstanceType .
aws cloudwatch put-metric-data --metric-name Buffers --namespace MyNameSpace --unit Bytes 
 --value 231434333 --dimensions InstanceId=1-23456789,InstanceType=m1.small
This command retrieves statistics for that same metric. Separate the Name and Value parts of a single 
dimension with commas, but if you have multiple dimensions, use a space between one dimension and 
the next.
aws cloudwatch get-metric-statistics --metric-name Buffers --namespace MyNameSpace --
dimensions Name=InstanceId,Value=1-23456789 Name=InstanceType,Value=m1.small --start-time 
 2016-10-15T04:00:00Z --end-time 2016-10-19T07:00:00Z --statistics Average --period 60
If a single metric includes multiple dimensions, you must specify a value for every deﬁned dimension 
when you use get-metric-statistics. For example, the Amazon S3 metric BucketSizeBytes  includes 
the dimensions BucketName  and StorageType , so you must specify both dimensions with get-metric-
statistics .
aws cloudwatch get-metric-statistics --metric-name BucketSizeBytes --start-time 
 2017-01-23T14:23:00Z --end-time 2017-01-26T19:30:00Z --period 3600 --namespace 
 AWS/S3 --statistics Maximum --dimensions Name=BucketName,Value= MyBucketName
 Name=StorageType,Value=StandardStorage --output table
To see what dimensions are deﬁned for a metric, use the list-metrics command.
Publish single data points
To publish a single data point for a new or existing metric, use the put-metric-data command with one 
value and time stamp. For example, the following actions each publish one data point.
aws cloudwatch put-metric-data --metric-name PageViewCount  --namespace MyService  --value 2 
 --timestamp 2016-10-20T12:00:00.000Z
aws cloudwatch put-metric-data --metric-name PageViewCount  --namespace MyService  --value 4 
 --timestamp 2016-10-20T12:00:01.000Z
aws cloudwatch put-metric-data --metric-name PageViewCount  --namespace MyService  --value 5 
 --timestamp 2016-10-20T12:00:02.000Z
If you call this command with a new metric name, CloudWatch creates a metric for you. Otherwise, 
CloudWatch associates your data with the existing metric that you speciﬁed.
Note
When you create a metric, it can take up to 2 minutes before you can retrieve statistics for the 
new metric using the get-metric-statistics command. However, it can take up to 15 minutes 
before the new metric appears in the list of metrics retrieved using the list-metrics command.
177Amazon CloudWatch User Guide
Publish statistic sets
Although you can publish data points with time stamps as granular as one-thousandth of a second, 
CloudWatch aggregates the data to a minimum granularity of 1 second. CloudWatch records the average 
(sum of all items divided by number of items) of the values received for each period, as well as the 
number of samples, maximum value, and minimum value for the same time period. For example, the
PageViewCount  metric from the previous examples contains three data points with time stamps just 
seconds apart. If you have your period set to 1 minute, CloudWatch aggregates the three data points 
because they all have time stamps within a 1-minute period.
You can use the get-metric-statistics command to retrieve statistics based on the data points that you 
published.
aws cloudwatch get-metric-statistics --namespace MyService  --metric-name PageViewCount  \
--statistics "Sum" "Maximum" "Minimum" "Average" "SampleCount" \
--start-time 2016-10-20T12:00:00.000Z  --end-time 2016-10-20T12:05:00.000Z  --period 60
The following is example output.
{ 
    "Datapoints": [ 
        { 
            "SampleCount": 3.0,  
            "Timestamp": "2016-10-20T12:00:00Z",  
            "Average": 3.6666666666666665,  
            "Maximum": 5.0,  
            "Minimum": 2.0,  
            "Sum": 11.0,  
            "Unit": "None" 
        } 
    ],  
    "Label": "PageViewCount"
}
Publish statistic sets
You can aggregate your data before you publish to CloudWatch. When you have multiple data points 
per minute, aggregating data minimizes the number of calls to put-metric-data. For example, instead 
of calling put-metric-data multiple times for three data points that are within 3 seconds of each other, 
you can aggregate the data into a statistic set that you publish with one call, using the --statistic-
values parameter.
aws cloudwatch put-metric-data --metric-name PageViewCount --namespace MyService
 --statistic-values Sum=11,Minimum=2,Maximum=5,SampleCount=3 --
timestamp 2016-10-14T12:00:00.000Z
CloudWatch needs raw data points to calculate percentiles. If you publish data using a statistic set 
instead, you can't retrieve percentile statistics for this data unless one of the following conditions is true:
•The SampleCount  of the statistic set is 1
•The Minimum  and the Maximum of the statistic set are equal
Publish the value zero
When your data is more sporadic and you have periods that have no associated data, you can choose to 
publish the value zero (0) for that period or no value at all. If you use periodic calls to PutMetricData
to monitor the health of your application, you might want to publish zero instead of no value. For 
178Amazon CloudWatch User Guide
Stop publishing metrics
example, you can set a CloudWatch alarm to notify you if your application fails to publish metrics every 
ﬁve minutes. You want such an application to publish zeros for periods with no associated data.
You might also publish zeros if you want to track the total number of data points or if you want statistics 
such as minimum and average to include data points with the value 0.
Stop publishing metrics
To stop publishing custom metrics to CloudWatch, change your application's or service's code to stop 
using PutMetricData . CloudWatch doesn't pull metrics from applications, it only receives what is pushed 
to it, so to stop publishing your metrics you must stop them at the source.
179Amazon CloudWatch User Guide
Metric alarm states
Using Amazon CloudWatch alarms
You can create metric  and composite  alarms in Amazon CloudWatch.
•A metric alarm  watches a single CloudWatch metric or the result of a math expression based on 
CloudWatch metrics. The alarm performs one or more actions based on the value of the metric 
or expression relative to a threshold over a number of time periods. The action can be sending a 
notiﬁcation to an Amazon SNS topic, performing an Amazon EC2 action or an Amazon EC2 Auto 
Scaling action, or creating an OpsItem or incident in Systems Manager.
•A composite alarm  includes a rule expression that takes into account the alarm states of other alarms 
that you have created. The composite alarm goes into ALARM state only if all conditions of the rule are 
met. The alarms speciﬁed in a composite alarm's rule expression can include metric alarms and other 
composite alarms.
Using composite alarms can reduce alarm noise. You can create multiple metric alarms, and also create 
a composite alarm and set up alerts only for the composite alarm. For example, a composite might go 
into ALARM state only when all of the underlying metric alarms are in ALARM state.
Composite alarms can send Amazon SNS notiﬁcations when they change state, and can create Systems 
Manager OpsItems or incidents when they go into ALARM state, but can't perform EC2 actions or Auto 
Scaling actions.
Note
You can create as many alarms as you want in your AWS account.
You can add alarms to dashboards, so you can monitor and receive alerts about your AWS resources and 
applications across multiple regions. After you add an alarm to a dashboard, the alarm turns gray when 
it's in the INSUFFICIENT_DATA  state and red when it's in the ALARM state. The alarm is shown with no 
color when it's in the OK state.
You also can favorite recently visited alarms from the Favorites and recents option in the CloudWatch 
console navigation pane. The Favorites and recents option has columns for your favorited alarms and 
recently visited alarms.
An alarm invokes actions only when the alarm changes state. The exception is for alarms with Auto 
Scaling actions. For Auto Scaling actions, the alarm continues to invoke the action once per minute that 
the alarm remains in the new state.
An alarm can watch a metric in the same account. If you have enabled cross-account functionality 
in your CloudWatch console, you can also create alarms that watch metrics in other AWS accounts. 
Creating cross-account composite alarms is not supported. Creating cross-account alarms that use 
math expressions is supported, except that the ANOMALY_DETECTION_BAND , INSIGHT_RULE , and
SERVICE_QUOTA  functions are not supported for cross-account alarms.
Note
CloudWatch doesn't test or validate the actions that you specify, nor does it detect any Amazon 
EC2 Auto Scaling or Amazon SNS errors resulting from an attempt to invoke nonexistent 
actions. Make sure that your alarm actions exist.
Metric alarm states
A metric alarm has the following possible states:
•OK – The metric or expression is within the deﬁned threshold.
180Amazon CloudWatch User Guide
Evaluating an alarm
•ALARM – The metric or expression is outside of the deﬁned threshold.
•INSUFFICIENT_DATA  – The alarm has just started, the metric is not available, or not enough data is 
available for the metric to determine the alarm state.
Evaluating an alarm
When you create an alarm, you specify three settings to enable CloudWatch to evaluate when to change 
the alarm state:
•Period is the length of time to use to evaluate the metric or expression to create each individual data 
point for an alarm. It is expressed in seconds.
•Evaluation Periods is the number of the most recent periods, or data points, to evaluate when 
determining alarm state.
•Datapoints to Alarm  is the number of data points within the Evaluation Periods that must be 
breaching to cause the alarm to go to the ALARM state. The breaching data points don't have to be 
consecutive, but they must all be within the last number of data points equal to Evaluation Period.
For any period of one minute or longer, an alarm is evaluated every minute and the evaluation is based 
on the window of time deﬁned by the Period and Evaluation Periods. For example, if the Period is 5 
minutes (300 seconds) and Evaluation Periods is 1, then at the end of minute 5 the alarm evaluates 
based on data from minutes 1 to 5. Then at the end of minute 6, the alarm is evaluated based on the 
data from minutes 2 to 6.
If the alarm period is 10 seconds or 30 seconds, the alarm is evaluated every 10 seconds.
In the following ﬁgure, the alarm threshold for a metric alarm is set to three units. Both Evaluation 
Period and Datapoints to Alarm  are 3. That is, when all existing data points in the most recent three 
consecutive periods are above the threshold, the alarm goes to ALARM state. In the ﬁgure, this happens 
in the third through ﬁfth time periods. At period six, the value dips below the threshold, so one of the 
periods being evaluated is not breaching, and the alarm state changes back to OK. During the ninth time 
period, the threshold is breached again, but for only one period. Consequently, the alarm state remains
OK.
When you conﬁgure Evaluation Periods and Datapoints to Alarm  as diﬀerent values, you're setting an 
"M out of N" alarm. Datapoints to Alarm  is ("M") and Evaluation Periods is ("N"). The evaluation interval 
is the number of data points multiplied by the period. For example, if you conﬁgure 4 out of 5 data 
181Amazon CloudWatch User Guide
Alarm actions
points with a period of 1 minute, the evaluation interval is 5 minutes. If you conﬁgure 3 out of 3 data 
points with a period of 10 minutes, the evaluation interval is 30 minutes.
Note
If data points are missing soon after you create an alarm, and the metric was being reported to 
CloudWatch before you created the alarm, CloudWatch retrieves the most recent data points 
from before the alarm was created when evaluating the alarm.
Alarm actions
You can specify what actions an alarm takes when it changes state between the OK, ALARM, and 
INSUFFICIENT_DATA states. The most common type of alarm action is to notify one or more people by 
sending a message to an Amazon Simple Notiﬁcation Service topic. For more information about Amazon 
SNS, see  What is Amazon SNS?.
Actions can be set for the transition into each of the three states. Except for Auto Scaling actions, the 
actions happen only on state transitions, and are not performed again if the condition persists for hours 
or days. You can use the fact that multiple actions are allowed for an alarm to send an email when a 
threshold is breached, and then another when the breaching condition ends. This helps you verify that 
your scaling or recovery actions are triggered when expected and are working as desired.
Alarms based on EC2 metrics can also perform EC2 actions, such as stopping, terminating, rebooting, 
or recovering an EC2 instance. For more information, see Create alarms to stop, terminate, reboot, or 
recover an EC2 instance (p. 211).
Alarms can also perform actions to scale an Auto Scaling group. For more information, see  Step and 
simple scaling policies for Amazon EC2 Auto Scaling.
You can also conﬁgure alarms to create OpsItems in Systems Manager Ops Center or create incidents in 
AWS Systems Manager Incident Manager. These actions are performed only when the alarm goes into 
ALARM state. For more information, see  Conﬁguring CloudWatch to create OpsItems from alarms and 
Incident creation.
Conﬁguring how CloudWatch alarms treat missing 
data
Sometimes, not every expected data point for a metric gets reported to CloudWatch. For example, 
this can happen when a connection is lost, a server goes down, or when a metric reports data only 
intermittently by design.
CloudWatch enables you to specify how to treat missing data points when evaluating an alarm. This 
helps you to conﬁgure your alarm so that it goes to ALARM state only when appropriate for the type of 
data being monitored. You can avoid false positives when missing data doesn't indicate a problem.
Similar to how each alarm is always in one of three states, each speciﬁc data point reported to 
CloudWatch falls under one of three categories:
•Not breaching (within the threshold)
•Breaching (violating the threshold)
•Missing
For each alarm, you can specify CloudWatch to treat missing data points as any of the following:
•notBreaching  – Missing data points are treated as "good" and within the threshold
182Amazon CloudWatch User Guide
How alarm state is evaluated when data is missing
•breaching  – Missing data points are treated as "bad" and breaching the threshold
•ignore – The current alarm state is maintained
•missing – If all data points in the alarm evaluation range are missing, the alarm transitions to 
INSUFFICIENT_DATA.
The best choice depends on the type of metric. For a metric that continually reports data, such as
CPUUtilization  of an instance, you might want to treat missing data points as breaching , because 
they might indicate that something is wrong. But for a metric that generates data points only when an 
error occurs, such as ThrottledRequests  in Amazon DynamoDB, you would want to treat missing data 
as notBreaching . The default behavior is missing .
Choosing the best option for your alarm prevents unnecessary and misleading alarm condition changes, 
and also more accurately indicates the health of your system.
Important
Alarms that evaluate metrics in the AWS/DynamoDB  namespace always ignore missing data even 
if you choose a diﬀerent option for how the alarm should treat missing data. When an AWS/
DynamoDB  metric has missing data, alarms that evaluate that metric remain in their current 
state.
How alarm state is evaluated when data is missing
Whenever an alarm evaluates whether to change state, CloudWatch attempts to retrieve a higher 
number of data points than the number speciﬁed as Evaluation Periods. The exact number of data 
points it attempts to retrieve depends on the length of the alarm period and whether it is based on a 
metric with standard resolution or high resolution. The time frame of the data points that it attempts to 
retrieve is the evaluation range .
Once CloudWatch retrieves these data points, the following happens:
•If no data points in the evaluation range are missing, CloudWatch evaluates the alarm based on the 
most recent data points collected. The number of data points evaluated is equal to the Evaluation 
Periods for the alarm. The extra data points from farther back in the evaluation range are not needed 
and are ignored.
•If some data points in the evaluation range are missing, but the total number of existing data points 
that were successfully retrieved from the evaluation range is equal to or more than the alarm's
Evaluation Periods, CloudWatch evaluates the alarm state based on the most recent real data points 
that were successfully retrieved, including the necessary extra data points from farther back in the 
evaluation range. In this case, the value you set for how to treat missing data is not needed and is 
ignored.
•If some data points in the evaluation range are missing, and the number of actual data points that 
were retrieved is lower than the alarm's number of Evaluation Periods, CloudWatch ﬁlls in the missing 
data points with the result you speciﬁed for how to treat missing data, and then evaluates the alarm. 
However, all real data points in the evaluation range are included in the evaluation. CloudWatch uses 
missing data points only as few times as possible.
Note
A particular case of this behavior is that CloudWatch alarms might repeatedly re-evaluate 
the last set of data points for a period of time after the metric has stopped ﬂowing. This re-
evaluation might cause the alarm to change state and re-execute actions, if it had changed state 
immediately prior to the metric stream stopping. To mitigate this behavior, use shorter periods.
The following tables illustrate examples of the alarm evaluation behavior. In the ﬁrst table, Datapoints 
to Alarm  and Evaluation Periods are both 3. CloudWatch retrieves the 5 most recent data points when 
evaluating the alarm, in case some of the most recent 3 data points are missing. 5 is the evaluation range 
for the alarm.
183Amazon CloudWatch User Guide
How alarm state is evaluated when data is missing
Column 1 shows the 5 most recent data points, because the evaluation range is 5. These data points are 
shown with the most recent data point on the right. 0 is a non-breaching data point, X is a breaching 
data point, and - is a missing data point.
Column 2 shows how many of the 3 necessary data points are missing. Even though the most recent 5 
data points are evaluated, only 3 (the setting for Evaluation Periods) are necessary to evaluate the alarm 
state. The number of data points in Column 2 is the number of data points that must be "ﬁlled in", using 
the setting for how missing data is being treated.
In columns 3-6, the column headers are the possible values for how to treat missing data. The rows in 
these columns show the alarm state that is set for each of these possible ways to treat missing data.
Data points # of data 
points that 
must be ﬁlledMISSING IGNORE BREACHING NOT 
BREACHING
0 - X - X 0 OK OK OK OK
0 - - - - 2 OK OK OK OK
- - - - - 3 INSUFFICIENT_DATA Retain current 
stateALARM OK
0 X X - X 0 ALARM ALARM ALARM ALARM
- - X - - 2 ALARM Retain current 
stateALARM OK
In the second row of the preceding table, the alarm stays OK even if missing data is treated as breaching, 
because the one existing data point is not breaching, and this is evaluated along with two missing data 
points which are treated as breaching. The next time this alarm is evaluated, if the data is still missing it 
will go to ALARM, as that non-breaching data point will no longer be in the evaluation range.
The third row, where all ﬁve of the most recent data points are missing, illustrates how the various 
settings for how to treat missing data aﬀect the alarm state. If missing data points are considered 
breaching, the alarm goes into ALARM state, while if they are considered not breaching, then the alarm 
goes into OK state. If missing data points are ignored, the alarm retains the current state it had before 
the missing data points. And if missing data points are just considered as missing, then the alarm does 
not have enough recent real data to make an evaluation, and goes into INSUFFICIENT_DATA.
In the fourth row, the alarm goes to ALARM state in all cases because the three most recent data points 
are breaching, and the alarm's Evaluation Periods and Datapoints to Alarm  are both set to 3. In this 
case, the missing data point is ignored and the setting for how to evaluate missing data is not needed, 
because there are 3 real data points to evaluate.
Row 5 represents a special case of alarm evaluation called premature alarm state . For more information, 
see Avoiding premature transitions to alarm state (p. 185).
In the next table, the Period is again set to 5 minutes, and Datapoints to Alarm  is only 2 while
Evaluation Periods is 3. This is a 2 out of 3, M out of N alarm.
The evaluation range is 5. This is the maximum number of recent data points that are retrieved and can 
be used in case some data points are missing.
Data points # of missing 
data pointsMISSING IGNORE BREACHING NOT 
BREACHING
0 - X - X 0 ALARM ALARM ALARM ALARM
184Amazon CloudWatch User Guide
High-resolution alarms
Data points # of missing 
data pointsMISSING IGNOREBREACHINGNOT 
BREACHING
0 0 X 0 X 0 ALARM ALARM ALARM ALARM
0 - X - - 1 OK OK ALARM OK
- - - - 0 2 OK OK ALARM OK
- - - X - 2 ALARMRetain current 
stateALARM OK
In rows 1 and 2, the alarm always goes to ALARM state because 2 of the 3 most recent data points are 
breaching. In row 2, the two oldest data points in the evaluation range are not needed because none of 
the 3 most recent data points are missing, so these two older data points are ignored.
In rows 3 and 4, the alarm goes to ALARM state only if missing data is treated as breaching, in which 
case the two most recent missing data points are both treated as breaching. In row 4, these two missing 
data points that are treated as breaching provide the two necessary breaching data points to trigger the 
ALARM state.
Row 5 represents a special case of alarm evaluation called premature alarm state . For more information, 
see the following section.
Avoiding premature transitions to alarm state
CloudWatch alarm evaluation includes logic to try to avoid false alarms, where the alarm goes into 
ALARM state prematurely when data is intermittent. The example shown in row 5 in the tables in the 
previous section illustrate this logic. In those rows, and in the following examples, the Evaluation 
Periods is 3 and the evaluation range is 5 data points. Datapoints to Alarm  is 3, except for the M out of 
N example, where Datapoints to Alarm  is 2.
Suppose an alarm's most recent data is - - - - X , with four missing data points and then a breaching 
data point as the most recent data point. Because the next data point may be non-breaching, the alarm 
does not go immediately into ALARM state when the data is either - - - - X  or - - - X -  and
Datapoints to Alarm  is 3. This way, false positives are avoided when the next data point is non-breaching 
and causes the data to be - - - X O  or - - X - O .
However, if the last few data points are - - X - - , the alarm goes into ALARM state even if missing 
data points are treated as missing. This is because alarms are designed to always go into ALARM state 
when the oldest available breaching datapoint during the Evaluation Periods number of data points is at 
least as old as the value of Datapoints to Alarm , and all other more recent data points are breaching or 
missing. In this case, the alarm goes into ALARM state even if the total number of datapoints available is 
lower than M (Datapoints to Alarm ).
This alarm logic applies to M out of N alarms as well. If the oldest breaching data point during the 
evaluation range is at least as old as the value of Datapoints to Alarm , and all of the more recent 
data points are either breaching or missing, the alarm goes into ALARM state no matter the value of M 
(Datapoints to Alarm ).
High-resolution alarms
If you set an alarm on a high-resolution metric, you can specify a high-resolution alarm with a period of 
10 seconds or 30 seconds, or you can set a regular alarm with a period of any multiple of 60 seconds. 
There is a higher charge for high-resolution alarms. For more information about high-resolution metrics, 
see Publish custom metrics  (p. 176).
185Amazon CloudWatch User Guide
Alarms on math expressions
Alarms on math expressions
You can set an alarm on the result of a math expression that is based on one or more CloudWatch 
metrics. A math expression used for an alarm can include as many as 10 metrics. Each metric must be 
using the same period.
For an alarm based on a math expression, you can specify how you want CloudWatch to treat missing 
data points. In this case, the data point is considered missing if the math expression doesn't return a 
value for that data point.
Alarms based on math expressions can't perform Amazon EC2 actions.
For more information about metric math expressions and syntax, see Use metric math  (p. 136).
Percentile-based CloudWatch alarms and low data 
samples
When you set a percentile as the statistic for an alarm, you can specify what to do when there is not 
enough data for a good statistical assessment. You can choose to have the alarm evaluate the statistic 
anyway and possibly change the alarm state. Or, you can have the alarm ignore the metric while the 
sample size is low, and wait to evaluate it until there is enough data to be statistically signiﬁcant.
For percentiles between 0.5 (inclusive) and 1.00 (exclusive), this setting is used when there are fewer than 
10/(1-percentile) data points during the evaluation period. For example, this setting would be used if 
there were fewer than 1000 samples for an alarm on a p99 percentile. For percentiles between 0 and 0.5 
(exclusive), the setting is used when there are fewer than 10/percentile data points.
CloudWatch alarms and Amazon EventBridge
CloudWatch sends events to Amazon EventBridge whenever a CloudWatch alarm changes alarm state. 
You can use these alarm state change events to trigger an event target in EventBridge. For more 
information, see Alarm events and EventBridge (p. 219).
Common features of CloudWatch alarms
The following features apply to all CloudWatch alarms:
•There is no limit to the number of alarms that you can create. To create or update an alarm, you use 
the CloudWatch console, the PutMetricAlarm  API action, or the put-metric-alarm command in the AWS 
CLI.
•Alarm names must contain only UTF-8 characters, and can't contain ASCII control characters
•You can list any or all of the currently conﬁgured alarms, and list any alarms in a particular state by 
using the CloudWatch console, the DescribeAlarms  API action, or the describe-alarms  command in the 
AWS CLI.
•You can disable and enable alarms by using the DisableAlarmActions and EnableAlarmActions API 
actions, or the disable-alarm-actions and enable-alarm-actions commands in the AWS CLI.
•You can test an alarm by setting it to any state using the SetAlarmState  API action or the set-
alarm-state  command in the AWS CLI. This temporary state change lasts only until the next alarm 
comparison occurs.
186Amazon CloudWatch User Guide
Setting up an SNS topic
•You can create an alarm for a custom metric before you've created that custom metric. For the alarm 
to be valid, you must include all of the dimensions for the custom metric in addition to the metric 
namespace and metric name in the alarm deﬁnition. To do this, you can use the PutMetricAlarm  API 
action, or the put-metric-alarm command in the AWS CLI.
•You can view an alarm's history using the CloudWatch console, the DescribeAlarmHistory API action, 
or the describe-alarm-history command in the AWS CLI. CloudWatch preserves alarm history for two 
weeks. Each state transition is marked with a unique timestamp. In rare cases, your history might show 
more than one notiﬁcation for a state change. The timestamp enables you to conﬁrm unique state 
changes.
•You can favorite alarms from the Favorites and recents option in the CloudWatch console navigation 
pane by hovering over the alarm that you want to favorite and choosing the star symbol next to it.
•The number of evaluation periods for an alarm multiplied by the length of each evaluation period 
can't exceed one day.
Note
Some AWS resources don't send metric data to CloudWatch under certain conditions.
For example, Amazon EBS might not send metric data for an available volume that is not 
attached to an Amazon EC2 instance, because there is no metric activity to be monitored for 
that volume. If you have an alarm set for such a metric, you might notice its state change 
to INSUFFICIENT_DATA . This might indicate that your resource is inactive, and might not 
necessarily mean that there is a problem. You can specify how each alarm treats missing data. 
For more information, see Conﬁguring how CloudWatch alarms treat missing data (p. 182).
Setting up Amazon SNS notiﬁcations
Amazon CloudWatch uses Amazon SNS to send email. First, create and subscribe to an SNS topic. When 
you create a CloudWatch alarm, you can add this SNS topic to send an email notiﬁcation when the alarm 
changes state. For more information, see the Amazon Simple Notiﬁcation Service Getting Started Guide.
Alternatively, if you plan to create your CloudWatch alarm using the AWS Management Console, you can 
skip this procedure because you can create the topic when you create the alarm.
Note
When you create an Amazon SNS topic, you choose to make it a standard topic  or a FIFO topic. 
CloudWatch guarantees the publication of all alarm notiﬁcations to both types of topics. 
However, even if you use a FIFO topic, in rare cases CloudWatch sends the notiﬁcations to the 
topic out of order. If you use a FIFO topic, the alarm sets the message group ID of the alarm 
notiﬁcations to be a hash of the ARN of the alarm.
Preventing confused deputy issues
To prevent cross-service confused deputy security issues, we recommend that you use the
aws:SourceArn  and aws:SourceAccount  global condition keys in the Amazon SNS resource policy 
that grants permission to CloudWatch to access your Amazon SNS resources.
The following example resource policy uses the aws:SourceArn  condition key to narrow the
SNS:Publish  permission to be used only by CloudWatch alarms in the speciﬁed account.
{ 
    "Statement": [{ 
        "Effect": "Allow", 
        "Principal": { 
            "Service": "cloudwatch.amazonaws.com" 
        }, 
        "Action": "SNS:Publish", 
187Amazon CloudWatch User Guide
Setting up an Amazon SNS topic 
using the AWS Management Console
        "Resource": "arn:aws:sns:us-east-2:444455556666:MyTopic", 
        "Condition": { 
            "ArnLike": { 
                "aws:SourceArn": "arn:aws:cloudwatch:us-east-2:111122223333:alarm:*" 
            }, 
            "StringEquals": { 
                "aws:SourceAccount": "111122223333" 
            } 
        } 
    }]
}
If an alarm ARN includes any non-ASCII characters, use only the aws:SourceAccount  global condition 
key to limit the permissions.
Setting up an Amazon SNS topic using the AWS 
Management Console
First, create a topic, then subscribe to it. You can optionally publish a test message to the topic.
To create an SNS topic
1. Open the Amazon SNS console at https://console.aws.amazon.com/sns/v3/home.
2. On the Amazon SNS dashboard, under Common actions, choose Create Topic.
3. In the Create new topic  dialog box, for Topic name, enter a name for the topic (for example, my-
topic ).
4. Choose Create topic .
5. Copy the Topic ARN for the next task (for example, arn:aws:sns:us-east-1:111122223333:my-topic).
To subscribe to an SNS topic
1. Open the Amazon SNS console at https://console.aws.amazon.com/sns/v3/home.
2. In the navigation pane, choose Subscriptions , Create subscription .
3. In the Create subscription  dialog box, for Topic ARN, paste the topic ARN that you created in the 
previous task.
4. For Protocol, choose Email .
5. For Endpoint , enter an email address that you can use to receive the notiﬁcation, and then choose
Create subscription .
6. From your email application, open the message from AWS Notiﬁcations and conﬁrm your 
subscription.
Your web browser displays a conﬁrmation response from Amazon SNS.
To publish a test message to an SNS topic
1. Open the Amazon SNS console at https://console.aws.amazon.com/sns/v3/home.
2. In the navigation pane, choose Topics.
3. On the Topics page, select a topic and choose Publish to topic .
4. In the Publish a message  page, for Subject, enter a subject line for your message, and for Message , 
enter a brief message.
5. Choose Publish Message .
188Amazon CloudWatch User Guide
Setting up an SNS topic using the AWS CLI
6. Check your email to conﬁrm that you received the message.
Setting up an SNS topic using the AWS CLI
First, you create an SNS topic, and then you publish a message directly to the topic to test that you have 
properly conﬁgured it.
To set up an SNS topic
1. Create the topic using the create-topic command as follows.
aws sns create-topic --name my-topic
Amazon SNS returns a topic ARN with the following format:
{ 
    "TopicArn": "arn:aws:sns:us-east-1:111122223333:my-topic"
}
2. Subscribe your email address to the topic using the subscribe  command. If the subscription request 
succeeds, you receive a conﬁrmation email message.
aws sns subscribe --topic-arn arn:aws:sns: us-east-1 :111122223333 :my-topic  --protocol 
 email --notification-endpoint  my-email-address
Amazon SNS returns the following:
{ 
    "SubscriptionArn": "pending confirmation"
}
3. From your email application, open the message from AWS Notiﬁcations and conﬁrm your 
subscription.
Your web browser displays a conﬁrmation response from Amazon Simple Notiﬁcation Service.
4. Check the subscription using the list-subscriptions-by-topic command.
aws sns list-subscriptions-by-topic --topic-arn arn:aws:sns: us-east-1 :111122223333 :my-
topic
Amazon SNS returns the following:
{ 
  "Subscriptions": [ 
    { 
        "Owner": "111122223333", 
        "Endpoint": "me@mycompany.com", 
        "Protocol": "email", 
        "TopicArn": "arn:aws:sns:us-east-1:111122223333:my-topic", 
        "SubscriptionArn": "arn:aws:sns:us-east-1:111122223333:my-topic:64886986-
bf10-48fb-a2f1-dab033aa67a3" 
    } 
  ]
}
5. (Optional) Publish a test message to the topic using the publish  command.
189Amazon CloudWatch User Guide
Create an alarm based on a static threshold
aws sns publish --message "Verification" --topic arn:aws:sns: us-east-1 :111122223333 :my-
topic
Amazon SNS returns the following.
{ 
    "MessageId": "42f189a0-3094-5cf6-8fd7-c2dde61a4d7d"
}
6. Check your email to conﬁrm that you received the message.
Create a CloudWatch alarm based on a static 
threshold
You choose a CloudWatch metric for the alarm to watch, and the threshold for that metric. The alarm 
goes to ALARM state when the metric breaches the threshold for a speciﬁed number of evaluation 
periods.
If you are creating an alarm in an account set up as a monitoring account in CloudWatch cross-account 
observability, you can set up the alarm to watch a metric in a source account linked to this monitoring 
account. For more information, see CloudWatch cross-account observability (p. 846).
To create an alarm based on a single metric
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , All alarms .
3. Choose Create alarm .
4. Choose Select Metric.
5. Do one of the following:
• Choose the service namespace that contains the metric that you want. Continue choosing 
options as they appear to narrow the choices. When a list of metrics appears, select the check 
box next to the metric that you want.
• In the search box, enter the name of a metric, account ID, account label, dimension, or resource 
ID. Then, choose one of the results and continue until a list of metrics appears. Select the check 
box next to the metric that you want.
6. Choose the Graphed metrics  tab.
a. Under Statistic  , choose one of the statistics or predeﬁned percentiles, or specify a custom 
percentile (for example, p95.45 ).
b. Under Period, choose the evaluation period for the alarm. When evaluating the alarm, each 
period is aggregated into one data point.
You can also choose whether the y-axis legend appears on the left or right while you're creating 
the alarm. This preference is used only while you're creating the alarm.
c. Choose Select metric.
The Specify metric and conditions page appears, showing a graph and other information about 
the metric and statistic that you selected.
7. Under Conditions , specify the following:
a. For Whenever metric  is, specify whether the metric must be greater than, less than, or equal 
to the threshold. Under than... , specify the threshold value.
190Amazon CloudWatch User Guide
Create an alarm based on a Metrics Insights query
b. Choose Additional conﬁguration. For Datapoints to alarm , specify how many evaluation 
periods (data points) must be in the ALARM state to trigger the alarm. If the two values here 
match, you create an alarm that goes to ALARM state if that many consecutive periods are 
breaching.
To create an M out of N alarm, specify a lower number for the ﬁrst value than you specify for 
the second value. For more information, see Evaluating an alarm  (p. 181).
c. For Missing data treatment , choose how to have the alarm behave when some data points 
are missing. For more information, see Conﬁguring how CloudWatch alarms treat missing 
data  (p. 182).
d. If the alarm uses a percentile as the monitored statistic, a Percentiles with low samples box 
appears. Use it to choose whether to evaluate or ignore cases with low sample rates. If you 
choose ignore (maintain alarm state) , the current alarm state is always maintained when the 
sample size is too low. For more information, see Percentile-based CloudWatch alarms and low 
data samples  (p. 186).
8. Choose Next.
9. Under Notiﬁcation , select an SNS topic to notify when the alarm is in ALARM  state, OK state, or
INSUFFICIENT_DATA  state.
To have the alarm send multiple notiﬁcations for the same alarm state or for diﬀerent alarm states, 
choose Add notiﬁcation .
In CloudWatch cross-account observability, you can choose to have notiﬁcations sent to multiple 
AWS accounts. For example, to both the monitoring account and the source account.
To have the alarm not send notiﬁcations, choose Remove.
10. To have the alarm perform Auto Scaling, EC2, or Systems Manager actions, choose the appropriate 
button and choose the alarm state and action to perform. Alarms can perform Systems Manager 
actions only when they go into ALARM state. For more information about Systems Manager actions, 
see  Conﬁguring CloudWatch to create OpsItems from alarms and  Incident creation.
Note
To create an alarm that performs an SSM Incident Manager action, you must have certain 
permissions. For more information, see  Identity-based policy examples for AWS Systems 
Manager Incident Manager .
11. When ﬁnished, choose Next.
12. Enter a name and description for the alarm. The name must contain only UTF-8 characters, and 
can't contain ASCII control characters. The description can include markdown formatting, which is 
displayed only in the alarm Details  tab in the CloudWatch console. The markdown can be useful to 
add links to runbooks or other internal resources. Then choose Next.
13. Under Preview and create , conﬁrm that the information and conditions are what you want, then 
choose Create alarm .
You can also add alarms to a dashboard. For more information, see  Add or remove an alarm widget from 
a CloudWatch dashboard  (p. 62).
Create a CloudWatch alarm based on a Metrics 
Insights query
You can create an alarm on any Metrics Insights query that returns a single time series. This can 
be especially useful to create dynamic alarms that watch aggregated metrics across a ﬂeet of your 
191Amazon CloudWatch User Guide
Create an alarm based on anomaly detection
infrastructure or applications. Create the alarm once, and it adjusts as resources are added to or removed 
from the ﬂeet. For example, you can create an alarm that watches the CPU ulitization of all your 
instances, and the alarm dynamically adjusts as you add or remove instances.
For complete instructions, see Create alarms on Metrics Insights queries (p. 85).
Create a CloudWatch alarm based on anomaly 
detection
You can create an alarm based on CloudWatch anomaly detection, which analyzes past metric data and 
creates a model of expected values. The expected values take into account the typical hourly, daily, and 
weekly patterns in the metric.
You set a value for the anomaly detection threshold, and CloudWatch uses this threshold with the model 
to determine the "normal" range of values for the metric. A higher value for the threshold produces a 
thicker band of "normal" values.
You can choose whether the alarm is triggered when the metric value is above the band of expected 
values, below the band, or either above or below the band.
You also can create anomaly detection alarms on single metrics and the outputs of metric math 
expressions. You can use these expressions to create graphs that visualize anomaly detection bands.
Cross-account or cross-Region alarms based on anomaly detection are not supported.
For more information, see Using CloudWatch anomaly detection (p. 133).
Note
If you're already using anomaly detection for visualization purposes on a metric in the Metrics 
console and you create an anomaly detection alarm on that same metric, then the threshold 
that you set for the alarm doesn't change the threshold that you already set for visualization. 
For more information, see Creating a graph (p. 122).
To create an alarm that's based on anomaly detection
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , and then choose All alarms .
3. Choose Create alarm .
4. Do one of the following:
• Choose the service namespace that contains your metric, and then continue choosing options as 
they appear to narrow down your options. When a list of metrics appears, select the check box 
that's next to your metric.
• In the search box, enter the name of a metric, dimension, or resource ID. Select one of the 
results, and then continue choosing options as they appear until a list of metrics appears. Select 
the check box that's next to your metric.
5. Choose Graphed metrics .
a. (Optional) Under the Statistic  column, choose the dropdown, and then select one of the 
predeﬁned statistics or percentiles. You can use the search box in the dropdown to specify a 
custom percentile, such as p95.45 .
b. (Optional) Under the Period column, choose the dropdown, and then select one of the 
predeﬁned evaluation periods.
192Amazon CloudWatch User Guide
Create an alarm based on anomaly detection
Note
When CloudWatch evaluates your alarm, it aggragates the period into a single 
datapoint. For an anomaly detection alarm, the evaluation period must be one minute 
or longer.
c. (Optional) Under the Y axis  column, you can specify whether the Y-axis legend appears on the 
left or right side of the graph.
Note
This option can be used only while you're creating your alarm.
6. Choose Select metric.
7. Under Conditions , specify the following:
a. Choose Anomaly detection.
If the model for this metric and statistic already exists, CloudWatch displays a preview of the 
anomaly detection band in the graph at the top of the screen. After you create your alarm, it 
can take up to 15 minutes for the actual anomaly detection band to appear in the graph. Before 
that, the band that you see is an approximation of the anomaly detection band.
Tip
To see the graph at the top of the screen in a longer time frame, choose Edit at the 
top-right of the screen.
If the model for this metric and statistic doesn't already exist, CloudWatch generates the 
anomaly detection band after you ﬁnish creating your alarm. For new models, it can take up 
to 3 hours for the actual anomaly detection band to appear in your graph. It can take up to 
two weeks for the new model to train, so the anomaly detection band shows more accurate 
expected values.
b. For Whenever metric  is, specify when to trigger the alarm. For example, when the metric is 
greater than, lower than, or outside the band (in either direction).
c. For Anomaly detection threshold, choose the number to use for the anomaly detection 
threshold. A higher number creates a thicker band of "normal" values that is more tolerant of 
metric changes. A lower number creates a thinner band that will go to ALARM  state with smaller 
metric deviations. The number does not have to be a whole number.
d. Choose Additional conﬁguration. For Datapoints to alarm , specify how many evaluation 
periods (data points) must be in the ALARM state to trigger the alarm. If the two values here 
match, you create an alarm that goes to ALARM state if that many consecutive periods are 
breaching.
To create an M out of N alarm, specify a number for the ﬁrst value that is lower than the 
number for the second value. For more information, see Evaluating an alarm  (p. 181).
e. For Missing data treatment , choose how the alarm behaves when some data points are missing. 
For more information, see Conﬁguring how CloudWatch alarms treat missing data (p. 182).
f.If the alarm uses a percentile as the monitored statistic, a Percentiles with low samples box 
appears. Use it to choose whether to evaluate or ignore cases with low sample rates. If you 
choose Ignore (maintain alarm state) , the current alarm state is always maintained when the 
sample size is too low. For more information, see Percentile-based CloudWatch alarms and low 
data samples  (p. 186).
8. Choose Next.
9. Under Notiﬁcation , select an SNS topic to notify when the alarm is in ALARM  state, OK state, or
INSUFFICIENT_DATA  state.
To send multiple notiﬁcations for the same alarm state or for diﬀerent alarm states, choose Add 
notiﬁcation .
Choose Remove if you don't want the alarm to send notiﬁcations.
193Amazon CloudWatch User Guide
Modifying an anomaly detection model 
10. You can set up the alarm to perform EC2 actions when it changes state, or to create a Systems 
Manager OpsItem or incident when it goes into ALARM state. To do this, choose the appropriate 
button and then choose the alarm state and action to perform.
For more information about Systems Manager actions, see  Conﬁguring CloudWatch to create 
OpsItems from alarms and  Incident creation.
Note
To create an alarm that performs an AWS Systems Manager Incident Manager action, you 
must have certain permissions. For more information, see  Identity-based policy examples 
for AWS Systems Manager Incident Manager.
11. Choose Next.
12. Under Name and description , enter a name and description for your alarm, and choose Next. 
The name must contain only UTF-8 characters, and can't contain ASCII control characters. The 
description can include markdown formatting, which is displayed only in the alarm Details  tab in 
the CloudWatch console. The markdown can be useful to add links to runbooks or other internal 
resources.
Tip
The alarm name must contain only UTF-8 characters, and can't contain ASCII control 
characters
13. Under Preview and create , conﬁrm that your alarm's information and conditions are correct, and 
choose Create alarm .
Modifying an anomaly detection model
After you create an alarm, you can adjust the anomaly detection model. You can exclude certain time 
periods from being used in the model creation. It is critical that you exclude unusual events such as 
system outages, deployments, and holidays from the training data. You can also specify whether to 
adjust the model for Daylight Savings Time changes.
To adjust the anomaly detection model for an alarm
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , All alarms .
3. Choose the name of the alarm. If necessary, use the search box to ﬁnd the alarm.
4. Choose Analyse , In metrics .
5. In the Details  column, choose ANOMALY_DETECTION_BAND, Edit anomaly detection model.
6. To exclude a time period from being used to produce the model, choose the calendar icon by End 
date . Then, select or enter the days and times to exclude from training and choose Apply .
7. If the metric is sensitive to Daylight Savings Time changes, select the appropriate time zone in the
Metric timezone box.
8. Choose Update .
Deleting an anomaly detection model
Using anomaly detection for an alarm accrues charges. As a best practice, if your alarm no longer needs 
an anomaly dection model, delete the alarm ﬁrst and the model second. When anomaly dection alarms 
are evaluated, any missing anomaly detectors are created on your behalf. If you delete the model 
without deleting the alarm, the alarm automatically recreates the model.
To delete an alarm
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
194Amazon CloudWatch User Guide
Create an alarm based on a log group-metric ﬁlter
2. In the navigation pane, choose Alarms , All Alarms .
3. Choose the name of the alarm.
4. Choose Actions, Delete.
To delete an anomaly detection model that was used for an alarm
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics , and then choose All metrics .
3. Choose Browse, and then select the metric that includes the anomaly detection model. You can 
search for your metric in the search box or select your metric by choosing through the options.
• (Optional) If you're using the original interface, choose All metrics , and then choose the metric 
that includes the anomaly detection model. You can search for your metric in the search box or 
select your metric by choosing through the options.
4. Choose Graphed metrics .
5. In the Graphed metrics  tab, choose the name of the anomaly detection model that you want to 
remove, and choose Delete anomaly detection model.
• (Optional) If you're using the original interface, choose Edit model. You're directed to a new 
screen. On the new screen, choose Delete model, and then choose Delete.
Create a CloudWatch alarm based on a log group-
metric ﬁlter
The procedure in this section describes how to create an alarm based on a log group-metric ﬁlter. With 
metric ﬁlters, you can look for terms and patterns in log data as the data is sent to CloudWatch. For 
more information, see Create metrics from log events using ﬁlters in the Amazon CloudWatch Logs User 
Guide . Before you create an alarm based on a log group-metric ﬁlter, you must complete the following 
actions:
•Create a log group. For more information, see Working with log groups and log streams in the Amazon 
CloudWatch Logs User Guide.
•Create a metric ﬁlter. For more information, see Create a metric ﬁlter for a log group in the Amazon 
CloudWatch Logs User Guide.
To create an alarm based on a log group-metric ﬁlter
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. From the navigation pane, choose Logs , and then choose Log groups .
3. Choose the log group that includes your metric ﬁlter.
4. Choose Metric ﬁlters .
5. In the metric ﬁlters tab, select the box for the metric ﬁlter that you want to base your alarm on.
6. Choose Create alarm .
7. (Optional) Under Metric , edit Metric name , Statistic , and Period.
8. Under Conditions , specify the following:
a. For Threshold type, choose Static  or Anomaly detection.
b. For Whenever your-metric-name  is . . . , choose Greater , Greater/Equal, Lower/Equal , or
Lower.
c. For than . . . , specify a number for your threshold value.
195Amazon CloudWatch User Guide
Create an alarm based on a metric math expression
9. Choose Additional conﬁguration.
a. For Data points to alarm , specify how many data points trigger your alarm to go into the
ALARM state. If you specify matching values, your alarm goes into the ALARM state if that many 
consecutive periods are breaching. To create an M-out-of-N alarm, specify a number for the ﬁrst 
value that's lower than the number you specify for the second value. For more information, see
Using Amazon CloudWatch alarms.
b. For Missing data treatment , select an option to specify how to treat missing data when your 
alarm is evaluated.
10. Choose Next.
11. For Notiﬁcation , specify an Amazon SNS topic to notify when your alarm is in the ALARM , OK, or
INSUFFICIENT_DATA  state.
a. (Optional) To send multiple notiﬁcations for the same alarm state or for diﬀerent alarm states, 
choose Add notiﬁcation .
b. (Optional) To not send notiﬁcations, choose Remove.
12. (Optional) If you want your alarm to perform actions for Amazon EC2 Auto Scaling, Amazon EC2, 
tickets, or AWS Systems Manager, choose the appropriate button, and specify the alarm state and 
action.
Note
Your alarm can perform Systems Manager actions only when it's in the ALARM  state. 
For information about Systems Manager actions, see Conﬁguring CloudWatch to create 
OpsItems  and Incident creation.
13. Choose Next.
14. For Name and description , enter a name and description for your alarm. The name must contain 
only UTF-8 characters, and can't contain ASCII control characters. The description can include 
markdown formatting, which is displayed only in the alarm Details  tab in the CloudWatch console. 
The markdown can be useful to add links to runbooks or other internal resources.
15. For Preview and create , check that your conﬁguration is correct, and choose Create alarm .
Create a CloudWatch alarm based on a metric 
math expression
To create an alarm based on a metric math expression, choose one or more CloudWatch metrics to use in 
the expression. Then, specify the expression, threshold, and evaluation periods.
You can't create an alarm based on the SEARCH expression. This is because search expressions return 
multiple time series, and an alarm based on a math expression can watch only one time series.
To create an alarm that's based on a metric math expression
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , and then choose All alarms .
3. Choose Create alarm .
4. Choose Select Metric, and then perform one of the following actions:
• Select a namespace from the AWS namespaces dropdown or Custom namespaces dropdown. 
After you select a namespace, you continue choosing options until a list of metrics appears, 
where you select the checkbox next to the correct metric.
• Use the search box to ﬁnd a metric, account ID, dimension, or resource ID. After you enter the 
metric, dimension, or resource ID, you continue choosing options until a list of metrics appears, 
where you select the check box next to the correct metric.
196Amazon CloudWatch User Guide
Create an alarm based on a metric math expression
5. (Optional) If you want to add another metric to a metric math expression, you can use the search 
box to ﬁnd a speciﬁc metric. You can add as many as 10 metrics to a metric math expression.
6. Select the Graphed metrics  tab. For each of the metrics that you previously added, perform the 
following actions:
a. Under the Statistic  column, select the dropdown menu. In the dropdown menu, choose one of 
the predeﬁned statistics or percentiles. Use the search box in the dropdown menu to specify a 
custom percentile.
b. Under the Period column, select the dropdown menu. In the dropdown menu, choose one of 
the predeﬁned evaluation periods.
While you're creating your alarm, you can specify whether the Y-axis legend appears on the left 
or right side of your graph.
Note
When CloudWatch evaluates alarms, periods are aggregated into single data points.
7. Choose the Add math  dropdown, and then select Start with an empty expression from the list of 
predeﬁned metric math expressions.
After you choose Start with an empty expression, a math expression box appears where you apply 
or edit math expressions.
8. In the math expression box, enter your math expression, and then choose Apply .
After you choose Apply , an ID column appears next to the Label  column.
To use a metric or the result of another metric math expression as part of your current math 
expression's formula, you use the value that's shown under the ID column. To change the value of
ID, you select the pen-and-paper icon next to the current value. The new value must begin with a 
lowercase letter and can include numbers, letters, and the underscore symbol. Changing the value of
ID to a more signiﬁcant name can make your alarm graph easier to understand.
For information about the functions that are available for metric math, see Metric math syntax and 
functions (p. 137).
9. (Optional) Add more math expressions, using both metrics and the results of other math expressions 
in the formulas of the new math expressions.
10. When you have the expression to use for the alarm, clear the check boxes to the left of every other 
expression and every metric on the page. Only the check box next to the expression to use for the 
alarm should be selected. The expression that you choose for the alarm must produce a single time 
series and show only one line on the graph. Then choose Select metric.
The Specify metric and conditions page appears, showing a graph and other information about the 
math expression that you have selected.
11. For Whenever expression  is, specify whether the expression must be greater than, less than, or 
equal to the threshold. Under than... , specify the threshold value.
12. Choose Additional conﬁguration. For Datapoints to alarm , specify how many evaluation periods 
(data points) must be in the ALARM state to trigger the alarm. If the two values here match, you 
create an alarm that goes to ALARM state if that many consecutive periods are breaching.
To create an M out of N alarm, specify a lower number for the ﬁrst value than you specify for the 
second value. For more information, see Evaluating an alarm  (p. 181).
13. For Missing data treatment , choose how to have the alarm behave when some data points 
are missing. For more information, see Conﬁguring how CloudWatch alarms treat missing 
data  (p. 182).
14. Choose Next.
197Amazon CloudWatch User Guide
Create a composite alarm
15. Under Notiﬁcation , select an SNS topic to notify when the alarm is in ALARM  state, OK state, or
INSUFFICIENT_DATA  state.
To have the alarm send multiple notiﬁcations for the same alarm state or for diﬀerent alarm states, 
choose Add notiﬁcation .
To have the alarm not send notiﬁcations, choose Remove.
16. To have the alarm perform Auto Scaling, EC2, or Systems Manager actions, choose the appropriate 
button and choose the alarm state and action to perform. Alarms can perform Systems Manager 
actions only when they go into ALARM state. For more information about Systems Manager actions, 
see see  Conﬁguring CloudWatch to create OpsItems from alarms and  Incident creation.
Note
To create an alarm that performs an SSM Incident Manager action, you must have certain 
permissions. For more information, see  Identity-based policy examples for AWS Systems 
Manager Incident Manager .
17. When ﬁnished, choose Next.
18. Enter a name and description for the alarm. Then choose Next.
The name must contain only UTF-8 characters, and can't contain ASCII control characters. The 
description can include markdown formatting, which is displayed only in the alarm Details  tab in 
the CloudWatch console. The markdown can be useful to add links to runbooks or other internal 
resources.
19. Under Preview and create , conﬁrm that the information and conditions are what you want, then 
choose Create alarm .
You can also add alarms to a dashboard. For more information, see  Add or remove an alarm widget from 
a CloudWatch dashboard  (p. 62).
Create a composite alarm
Composite alarms determine their states by monitoring the states of other alarms. You can use 
composite alarms to reduce alarm noise. For example, you can create a composite alarm where the 
underlying metric alarms go into ALARM when they meet speciﬁc conditions. You then can set up your 
composite alarm to go into ALARM and send you notiﬁcations when the underlying metric alarms go into 
ALARM by conﬁguring the underlying metric alarms never to take actions. Currently, composite alarms 
can take the following actions:
•Notify SNS topics
•Create OpsItems in AWS Systems Manager Ops Center
•Create incidents in AWS Systems Manager Incident Manager
If you are not using CloudWatch cross-account observability, the composite alarm can monitor alarms in 
the current account.
Note
All of the underlying alarms in your composite alarm must be in the same account and the same 
Region as your composite alarm. However, if you set up a composite alarm in a CloudWatch 
cross-account observability monitoring account, the underlying alarms can watch metrics 
in diﬀerent source accounts and in the monitoring account itself. For more information, see
CloudWatch cross-account observability (p. 846).
A single composite alarm can monitor 100 underlying alarms, and 150 composite alarms can 
monitor a single underlying alarm.
198Amazon CloudWatch User Guide
Create a composite alarm
Rule expressions
All composite alarms contain rule expressions. Rule expressions tell composite alarms which other alarms 
to monitor and determine their states from. Rule expressions can refer to metric alarms and composite 
alarms. When you reference an alarm in a rule expression, you designate a function to the alarm that 
determines which of the following three states the alarm will be in:
•ALARM
ALARM ("alarm-name or alarm-ARN") is TRUE if the alarm is in ALARM state.
•OK
OK ("alarm-name or alarm-ARN") is TRUE if the alarm is in OK state.
•INSUFFICIENT_DATA
INSUFFICIENT_DATA (“alarm-name or alarm-ARN") is TRUE if the named alarm is in 
INSUFFICIENT_DATA state.
Note
TRUE always evaluates to TRUE, and FALSE always evaluates to FALSE.
Example expressions
The request parameter AlarmRule  supports the use of the logical operators AND, OR, and NOT, so you 
can combine multiple functions into a single expressions. The following example expressions show how 
you can conﬁgure the underlying alarms in your composite alarm:
•ALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh)
The expression speciﬁes that the composite alarm goes into ALARM  only if CPUUtilizationTooHigh
and DiskReadOpsTooHigh  are in ALARM .
•ALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress)
The expression speciﬁes that the composite alarm goes into ALARM  if CPUUtilizationTooHigh  is in
ALARM  and DeploymentInProgress  is not in ALARM. This is an example of a composite alarm that 
reduces alarm noise during a deployment window.
•(ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND 
OK(NetworkOutTooHigh)
The expression speciﬁes that the composite alarm goes into ALARM  if
(ALARM(CPUUtilizationTooHigh)  or (DiskReadOpsTooHigh)  is in ALARM  and
(NetworkOutTooHigh)  is in OK. This is an example of a composite alarm that reduces alarm noise by 
not sending you notiﬁcations when either of the underlying alarms aren’t in ALARM while a network 
issue is occurring.
Create a composite alarm
To create a composite alarm
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , and then choose In alarm .
3. From the list of alarms, select the check box next to each of the existing alarms that you want to 
reference in your rule expression, and then choose Create composite alarm.
4. Under Specify composite alarm conditions, specify the rule expression for your new composite 
alarm.
199Amazon CloudWatch User Guide
Create a composite alarm
Note
Automatically, the alarms that you selected from the list of alarms are listed in the
Conditions  box. By default, the ALARM function has been designated to each of your alarms, 
and each of your alarms is joined by the logical operator OR.
You can use the following substeps to modify your rule expression:
a. You can change the required state for each of your alarms from ALARM  to OK or
INSUFFICENT_DATA .
b. You can change the logical operator in your rule expression from OR to AND or NOT, and you can 
add parentheses to group your functions.
c. You can include other alarms in your rule expression or delete alarms from your rule expression.
Example: Rule expression with conditions
(ALARM("CPUUtilizationTooHigh") OR  
ALARM("DiskReadOpsTooHigh")) AND  
OK("NetworkOutTooHigh")
In the example rule expression where the composite alarm goes into ALARM when ALARM 
("CPUUtilizationTooHigh" or ALARM("DiskReadOpsTooHigh") is in ALARM  at the same time as 
OK("NetworkOutTooHigh") is in OK.
5. When ﬁnished, choose Next.
6. Under Conﬁgure actions, you can choose from the following:
For Notiﬁcation
•Select an exisiting SNS topic, Create a new SNS topic , or Use a topic ARN  to deﬁne the SNS 
topic that will receive the notiﬁcation.
•Add notiﬁcation , so your alarm can send multiple notiﬁcations for the same alarm state or 
diﬀerent alarm states.
•Remove to stop your alarm from sending notiﬁcations or taking actions.
For Systems Manager action
•Add Systems Manager action, so your alarm can perform an SSM action when it goes into 
ALARM.
To learn more about Systems Manager actions, see Conﬁguring CloudWatch to create OpsItems 
from alarms in the AWS Systems Manager User Guide and Incident creation in the Incident Manager 
User Guide . To create an alarm that performs an SSM Incident Manager action, you must have the 
correct permissions. For more information, see Identity-based policy examples for AWS Systems 
Manager Incident Manager  in the Incident Manager User Guide .
7. When ﬁnished, choose Next.
8. Under Add name and description , enter an alarm name and optional  description for your new 
composite alarm. The name must contain only UTF-8 characters, and can't contain ASCII control 
characters. The description can include markdown formatting, which is displayed only in the alarm
Details  tab in the CloudWatch console. The markdown can be useful to add links to runbooks or 
other internal resources.
9. When ﬁnished, choose Next.
10. Under Preview and create , conﬁrm your information, and then choose Create composite alarm.
200Amazon CloudWatch User Guide
Composite alarm action suppression 
Note
You can create a cycle of composite alarms, where one composite alarm and another 
composite alarm depend on each other. If you ﬁnd yourself in this scenario, your composite 
alarms stop being evaluated, and you can't delete your composite alarms because they're 
dependent on each other. The easiest way to break the cycle of dependecy between your 
composite alarms is to change the function AlarmRule  in one of your composite alarms to
False .
Composite alarm action suppression
With composite alarm action suppression, you deﬁne alarms as suppressor alarms. Suppressor alarms 
prevent composite alarms from taking actions. For example, you can specify a suppressor alarm that 
represents the status of a supporting resource. If the supporting resource is down, the suppressor alarm 
prevents the composite alarm from sending notiﬁcations. Composite alarm action suppression helps 
you reduce alarm noise, so you spend less time managing your alarms and more time focusing on your 
operations.
You specify suppressor alarms when you conﬁgure composite alarms. Any alarm can function as a 
suppressor alarm. When a suppressor alarm changes states from OK to ALARM, its composite alarm stops 
taking actions. When a suppressor alarm changes states from ALARM  to OK, its composite alarm resumes 
taking actions.
WaitPeriod  and ExtensionPeriod
When you specify a suppressor alarm, you set the parameters WaitPeriod  and ExtensionPeriod . 
These parameters prevent composite alarms from taking actions unexpectedly while suppressor alarms 
change states. Use WaitPeriod  to compensate for any delays that can occur when a suppressor alarm 
changes from OK to ALARM. For example, if a suppressor alarm changes from OK to ALARM  within 60 
seconds, set WaitPeriod  to 60 seconds.
In the image, the composite alarm changes from OK to ALARM  at t2. A WaitPeriod  starts at t2 and ends 
at t8. This gives the suppressor alarm time to change states from OK to ALARM at t4 before it suppresses 
the composite alarm's actions when the WaitPeriod  expires at t8.
Use ExtensionPeriod  to compensate for any delays that can occur when a composite alarm changes 
to OK following a suppressor alarm changing to OK. For example, if a composite alarm changes to OK
within 60 seconds of a suppressor alarm changing to OK, set ExtensionPeriod  to 60 seconds.
201Amazon CloudWatch User Guide
Composite alarm action suppression 
In the image, the suppressor alarm changes from ALARM  to OK at t2. An ExtensionPeriod  starts 
at t2 and ends at t8. This gives the composite alarm time to change from ALARM  to OK before the
ExtensionPeriod  expires at t8.
Composite alarms don't take actions when WaitPeriod  and ExtensionPeriod  become active. 
Composite alarms take actions that are based on their currents states when ExtensionPeriod  and
WaitPeriod  become inactive. We recommend that you set the value for each parameter to 60 seconds, 
as CloudWatch evaluates metric alarms every minute. You can set the parameters to any integer in 
seconds.
The following examples describe in more detail how WaitPeriod  and ExtensionPeriod  prevent 
composite alarms from taking actions unexpectedly.
Note
In the following examples, WaitPeriod  is conﬁgured as 2 time units, and ExtensionPeriod  is 
conﬁgured as 3 time units.
Examples
Example 1: Actions are not suppressed after WaitPeriod
In the image, the composite alarm changes states from OK to ALARM  at t2. A WaitPeriod  starts at t2 
and ends at t4, so it can prevent the composite alarm from taking actions. After the WaitPeriod  expires 
at t4, the composite alarm takes its actions because the suppressor alarm is still in OK.
202Amazon CloudWatch User Guide
Composite alarm action suppression 
Example 2: Actions are suppressed by alarm before WaitPeriod  expires
In the image, the composite alarm changes states from OK to ALARM  at t2. A WaitPeriod  starts at t2 
and ends at t4. This gives the suppressor alarm time to change states from OK to ALARM  at t3. Because 
the suppressor alarm changes states from OK to ALARM  at t3, the WaitPeriod  that started at t2 is 
discarded, and the suppressor alarm now stops the composite alarm from taking actions.
Example 3: State transition when actions are suppressed by WaitPeriod
In the image, the composite alarm changes states from OK to ALARM  at t2. A WaitPeriod  starts at t2 
and ends at t4. This gives the suppressor alarm time to change states. The composite alarm changes back 
to OK at t3, so the WaitPeriod  that started at t2 is discarded. A new WaitPeriod  starts at t3 and ends 
at t5. After the new WaitPeriod  expires at t5, the composite alarm takes its actions.
Example 4: State transition when actions are suppressed by alarm
203Amazon CloudWatch User Guide
Composite alarm action suppression 
In the image, the composite alarm changes states from OK to ALARM at t2. The suppressor alarm is 
already in ALARM. The suppressor alarm stops the composite alarm from taking actions.
Example 5: Actions are not suppressed after ExtensionPeriod
In the image, the composite alarm changes states from OK to ALARM  at t2. A WaitPeriod  starts at t2 
and ends at t4. This gives the suppressor alarm time to change states from OK to ALARM at t3 before it 
suppresses the composite alarm's actions until t6. Because the suppressor alarm changes states from
OK to ALARM  at t3, the WaitPeriod  that started at t2 is discarded. At t6, the suppressor alarm changes 
to OK. An ExtensionPeriod  starts at t6 and ends at t9. After the ExtensionPeriod  expires, the 
composite alarm takes its actions.
Example 6: State transition when actions are suppressed by ExtensionPeriod
204Amazon CloudWatch User Guide
Editing or deleting a CloudWatch alarm
In the image, the composite alarm changes states from OK to ALARM  at t2. A WaitPeriod  starts at t2 
and ends at t4. This gives the suppressor alarm time to change states from OK to ALARM at t3 before it 
suppresses the composite alarm's actions until t6. Because the suppressor alarm changes states from
OK to ALARM  at t3, the WaitPeriod  that started at t2 is discarded. At t6, the suppressor alarm changes 
back to OK. An ExtensionPeriod  starts at t6 and ends at t8. When the composite alarm changes back 
to OK at t7, the ExtensionPeriod  is discarded, and a new WaitPeriod  starts at t7 and ends at t9. 
After the new WaitPeriod  expires, the composite alarm can take its actions.
Tip
If you replace the action suppressor alarm, any active WaitPeriod  or ExtensionPeriod  is 
discarded.
Editing or deleting a CloudWatch alarm
You can edit or delete an existing alarm.
You can't change the name of an existing alarm. You can copy an alarm and give the new alarm a 
diﬀerent name. To copy an alarm, select the check box next to the alarm name in the alarm list and 
choose Action, Copy.
To edit an alarm
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , All Alarms .
3. Choose the name of the alarm.
4. To add or remove tags, choose the Tags tab and then choose Manage tags .
5. To edit other parts of the alarm, choose Actions, Edit.
The Specify metric and conditions page appears, showing a graph and other information about the 
metric and statistic that you selected.
6. To change the metric, choose Edit, choose the All metrics  tab, and do one of the following:
• Choose the service namespace that contains the metric that you want. Continue choosing 
options as they appear to narrow the choices. When a list of metrics appears, select the check 
box next to the metric that you want.
• In the search box, enter the name of a metric, dimension, or resource ID and press Enter. Then 
choose one of the results and continue until a list of metrics appears. Select the check box next 
to the metric that you want.
205Amazon CloudWatch User Guide
Create a CPU usage alarm
Choose Select metric.
7. To change other aspects of the alarm, choose the appropriate options. To change how many data 
points must be breaching for the alarm to go into ALARM state or to change how missing data is 
treated, choose Additional conﬁguration.
8. Choose Next.
9. Under Notiﬁcation , Auto Scaling action, and EC2 action, optionally edit the actions taken when the 
alarm is triggered. Then choose Next.
10. Optionally change the alarm description.
You can't change the name of an existing alarm. You can copy an alarm and give the new alarm a 
diﬀerent name. To copy an alarm, select the check box next to the alarm name in the alarm list and 
choose Action, Copy.
11. Choose Next.
12. Under Preview and create , conﬁrm that the information and conditions are what you want, then 
choose Update alarm .
To update an email notiﬁcation list that was created using the Amazon SNS console
1. Open the Amazon SNS console at https://console.aws.amazon.com/sns/v3/home.
2. In the navigation pane, choose Topics and then select the ARN for your notiﬁcation list (topic).
3. Do one of the following:
•To add an email address, choose Create subscription . For Protocol, choose Email . For Endpoint , 
enter the email address of the new recipient. Choose Create subscription .
•To remove an email address, choose the Subscription ID . Choose Other subscription actions,
Delete subscriptions.
4. Choose Publish to topic .
To delete an alarm
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms .
3. Select the check box to the left of the name of the alarm, and choose Actions, Delete.
4. Choose Delete.
Create a CPU usage alarm
You can create an CloudWatch alarm that sends a notiﬁcation using Amazon SNS when the alarm 
changes state from OK to ALARM .
The alarm changes to the ALARM state when the average CPU use of an EC2 instance exceeds a speciﬁed 
threshold for consecutive speciﬁed periods.
Setting up a CPU usage alarm using the AWS 
Management Console
Use these steps to use the AWS Management Console to create a CPU usage alarm.
206Amazon CloudWatch User Guide
Setting up a CPU usage alarm using 
the AWS Management Console
To create an alarm based on CPU usage
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , All Alarms .
3. Choose Create alarm .
4. Choose Select metric.
5. In the All metrics  tab, choose EC2 metrics.
6. Choose a metric category (for example, Per-Instance Metrics).
7. Find the row with the instance that you want listed in the InstanceId column and CPUUtilization  in 
the Metric Name  column. Select the check box next to this row, and choose Select metric.
8. Under Specify metric and conditions, for Statistic  choose Average, choose one of the predeﬁned 
percentiles, or specify a custom percentile (for example, p95.45 ).
9. Choose a period (for example, 5 minutes ).
10. Under Conditions , specify the following:
a. For Threshold type, choose Static .
b. For Whenever CPUUtilization is, specify Greater . Under than... , specify the threshold that is 
to trigger the alarm to go to ALARM state if the CPU utilization exceeds this percentage. For 
example, 70.
c. Choose Additional conﬁguration. For Datapoints to alarm , specify how many evaluation 
periods (data points) must be in the ALARM state to trigger the alarm. If the two values here 
match, you create an alarm that goes to ALARM state if that many consecutive periods are 
breaching.
To create an M out of N alarm, specify a lower number for the ﬁrst value than you specify for 
the second value. For more information, see Evaluating an alarm  (p. 181).
d. For Missing data treatment , choose how to have the alarm behave when some data points 
are missing. For more information, see Conﬁguring how CloudWatch alarms treat missing 
data  (p. 182).
e. If the alarm uses a percentile as the monitored statistic, a Percentiles with low samples box 
appears. Use it to choose whether to evaluate or ignore cases with low sample rates. If you 
choose ignore (maintain alarm state) , the current alarm state is always maintained when the 
sample size is too low. For more information, see Percentile-based CloudWatch alarms and low 
data samples  (p. 186).
11. Choose Next.
12. Under Notiﬁcation , choose In alarm  and select an SNS topic to notify when the alarm is in ALARM
state
To have the alarm send multiple notiﬁcations for the same alarm state or for diﬀerent alarm states, 
choose Add notiﬁcation .
To have the alarm not send notiﬁcations, choose Remove.
13. When ﬁnished, choose Next.
14. Enter a name and description for the alarm. Then choose Next.
The name must contain only UTF-8 characters, and can't contain ASCII control characters. The 
description can include markdown formatting, which is displayed only in the alarm Details  tab in 
the CloudWatch console. The markdown can be useful to add links to runbooks or other internal 
resources.
15. Under Preview and create , conﬁrm that the information and conditions are what you want, then 
choose Create alarm .
207Amazon CloudWatch User Guide
Setting up a CPU usage alarm using the AWS CLI
Setting up a CPU usage alarm using the AWS CLI
Use these steps to use the AWS CLI to create a CPU usage alarm.
To create an alarm based on CPU usage
1. Set up an SNS topic. For more information, see Setting up Amazon SNS notiﬁcations (p. 187).
2. Create an alarm using the put-metric-alarm command as follows.
aws cloudwatch put-metric-alarm --alarm-name cpu-mon --alarm-description "Alarm 
 when CPU exceeds 70%" --metric-name CPUUtilization --namespace AWS/EC2 --statistic 
 Average --period 300 --threshold 70 --comparison-operator GreaterThanThreshold --
dimensions  Name=InstanceId,Value= i-12345678  --evaluation-periods 2 --alarm-actions 
 arn:aws:sns: us-east-1 :111122223333 :my-topic  --unit Percent
3. Test the alarm by forcing an alarm state change using the set-alarm-state command.
a. Change the alarm state from INSUFFICIENT_DATA  to OK.
aws cloudwatch set-alarm-state --alarm-name cpu-mon --state-reason "initializing" 
 --state-value OK
b. Change the alarm state from OK to ALARM .
aws cloudwatch set-alarm-state --alarm-name cpu-mon --state-reason "initializing" 
 --state-value ALARM
c. Check that you have received a notiﬁcation about the alarm.
Create a load balancer latency alarm that sends 
email
You can set up an Amazon SNS notiﬁcation and conﬁgure an alarm that monitors latency exceeding 100 
ms for your Classic Load Balancer.
Setting up a latency alarm using the AWS 
Management Console
Use these steps to use the AWS Management Console to create a load balancer latency alarm.
To create a load balancer latency alarm
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , All Alarms .
3. Choose Create alarm .
4. Under CloudWatch Metrics by Category, choose the ELB Metrics  category.
5. Select the row with the Classic Load Balancer and the Latency metric.
6. For the statistic, choose Average, choose one of the predeﬁned percentiles, or specify a custom 
percentile (for example, p95.45 ).
208Amazon CloudWatch User Guide
Setting up a latency alarm using the AWS CLI
7. For the period, choose 1 Minute .
8. Choose Next.
9. Under Alarm Threshold, enter a unique name for the alarm (for example, myHighCpuAlarm ) and a 
description of the alarm (for example, Alarm when Latency exceeds 100s ). Alarm names must 
contain only UTF-8 characters, and can't contain ASCII control characters
The name must contain only UTF-8 characters, and can't contain ASCII control characters. The 
description can include markdown formatting, which is displayed only in the alarm Details  tab in 
the CloudWatch console. The markdown can be useful to add links to runbooks or other internal 
resources.
10. Under Whenever, for is, choose > and enter 0.1. For for, enter 3.
11. Under Additional settings, for Treat missing data as, choose ignore (maintain alarm state)  so that 
missing data points don't trigger alarm state changes.
For Percentiles with low samples, choose ignore (maintain the alarm state)  so that the alarm 
evaluates only situations with adequate numbers of data samples.
12. Under Actions, for Whenever this alarm, choose State is ALARM. For Send notiﬁcation to , choose 
an existing SNS topic or create a new one.
To create an SNS topic, choose New list . For Send notiﬁcation to , enter a name for the SNS 
topic (for example, myHighCpuAlarm ), and for Email list , enter a comma-separated list of email 
addresses to be notiﬁed when the alarm changes to the ALARM state. Each email address is sent a 
topic subscription conﬁrmation email. You must conﬁrm the subscription before notiﬁcations can be 
sent.
13. Choose Create Alarm .
Setting up a latency alarm using the AWS CLI
Use these steps to use the AWS CLI to create a load balancer latency alarm.
To create a load balancer latency alarm
1. Set up an SNS topic. For more information, see Setting up Amazon SNS notiﬁcations (p. 187).
2. Create the alarm using the put-metric-alarm command as follows:
aws cloudwatch put-metric-alarm --alarm-name lb-mon --alarm-description "Alarm 
 when Latency exceeds 100s" --metric-name Latency --namespace AWS/ELB --statistic 
 Average --period 60 --threshold 100 --comparison-operator GreaterThanThreshold --
dimensions Name=LoadBalancerName,Value= my-server  --evaluation-periods 3 --alarm-actions 
 arn:aws:sns: us-east-1 :111122223333 :my-topic  --unit Seconds
3. Test the alarm by forcing an alarm state change using the set-alarm-state command.
a. Change the alarm state from INSUFFICIENT_DATA  to OK.
aws cloudwatch set-alarm-state --alarm-name lb-mon --state-reason "initializing" --
state-value OK
b. Change the alarm state from OK to ALARM .
aws cloudwatch set-alarm-state --alarm-name lb-mon --state-reason "initializing" --
state-value ALARM
c. Check that you have received an email notiﬁcation about the alarm.
209Amazon CloudWatch User Guide
Create a storage throughput alarm
Create a storage throughput alarm that sends 
email
You can set up an SNS notiﬁcation and conﬁgure an alarm that is triggered when Amazon EBS exceeds 
100 MB throughput.
Setting up a storage throughput alarm using the AWS 
Management Console
Use these steps to use the AWS Management Console to create an alarm based on Amazon EBS 
throughput.
To create a storage throughput alarm
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , All Alarms .
3. Choose Create alarm .
4. Under EBS Metrics , choose a metric category.
5. Select the row with the volume and the VolumeWriteBytes metric.
6. For the statistic, choose Average. For the period, choose 5 Minutes . Choose Next.
7. Under Alarm Threshold, enter a unique name for the alarm (for example, myHighWriteAlarm ) 
and a description of the alarm (for example, VolumeWriteBytes exceeds 100,000 KiB/s ). 
The name must contain only UTF-8 characters, and can't contain ASCII control characters. The 
description can include markdown formatting, which is displayed only in the alarm Details  tab in 
the CloudWatch console. The markdown can be useful to add links to runbooks or other internal 
resources.
8. Under Whenever, for is, choose > and enter 100000. For for, enter 15 consecutive periods.
A graphical representation of the threshold is shown under Alarm Preview .
9. Under Additional settings, for Treat missing data as, choose ignore (maintain alarm state)  so that 
missing data points don't trigger alarm state changes.
10. Under Actions, for Whenever this alarm, choose State is ALARM. For Send notiﬁcation to , choose 
an existing SNS topic or create one.
To create an SNS topic, choose New list . For Send notiﬁcation to , enter a name for the SNS 
topic (for example, myHighCpuAlarm ), and for Email list , enter a comma-separated list of email 
addresses to be notiﬁed when the alarm changes to the ALARM state. Each email address is sent a 
topic subscription conﬁrmation email. You must conﬁrm the subscription before notiﬁcations can be 
sent to an email address.
11. Choose Create Alarm .
Setting up a storage throughput alarm using the AWS 
CLI
Use these steps to use the AWS CLI to create an alarm based on Amazon EBS throughput.
To create a storage throughput alarm
1. Create an SNS topic. For more information, see Setting up Amazon SNS notiﬁcations (p. 187).
210Amazon CloudWatch User Guide
Create alarms to stop, terminate, 
reboot, or recover an EC2 instance
2. Create the alarm.
aws cloudwatch put-metric-alarm --alarm-name ebs-mon --alarm-description "Alarm when 
 EBS volume exceeds 100MB throughput" --metric-name VolumeReadBytes --namespace AWS/
EBS --statistic Average --period 300 --threshold 100000000 --comparison-operator 
 GreaterThanThreshold --dimensions Name=VolumeId,Value= my-volume-id  --evaluation-
periods 3 --alarm-actions arn:aws:sns: us-east-1 :111122223333 :my-alarm-topic  --
insufficient-data-actions arn:aws:sns: us-east-1 :111122223333 :my-insufficient-data-topic
3. Test the alarm by forcing an alarm state change using the set-alarm-state command.
a. Change the alarm state from INSUFFICIENT_DATA  to OK.
aws cloudwatch set-alarm-state --alarm-name ebs-mon --state-reason "initializing" 
 --state-value OK
b. Change the alarm state from OK to ALARM .
aws cloudwatch set-alarm-state --alarm-name ebs-mon --state-reason "initializing" 
 --state-value ALARM
c. Change the alarm state from ALARM  to INSUFFICIENT_DATA .
aws cloudwatch set-alarm-state --alarm-name ebs-mon --state-reason "initializing" 
 --state-value INSUFFICIENT_DATA
d. Check that you have received an email notiﬁcation about the alarm.
Create alarms to stop, terminate, reboot, or 
recover an EC2 instance
Using Amazon CloudWatch alarm actions, you can create alarms that automatically stop, terminate, 
reboot, or recover your EC2 instances. You can use the stop or terminate actions to help you save money 
when you no longer need an instance to be running. You can use the reboot and recover actions to 
automatically reboot those instances or recover them onto new hardware if a system impairment occurs.
There are a number of scenarios in which you might want to automatically stop or terminate your 
instance. For example, you might have instances dedicated to batch payroll processing jobs or scientiﬁc 
computing tasks that run for a period of time and then complete their work. Rather than letting those 
instances sit idle (and accrue charges), you can stop or terminate them, which helps you to save money. 
The main diﬀerence between using the stop and the terminate alarm actions is that you can easily 
restart a stopped instance if you need to run it again later. You can also keep the same instance ID 
and root volume. However, you cannot restart a terminated instance. Instead, you must launch a new 
instance.
You can add the stop, terminate, or reboot, actions to any alarm that is set on an Amazon EC2 per-
instance metric, including basic and detailed monitoring metrics provided by Amazon CloudWatch 
(in the AWS/EC2 namespace), in addition to any custom metrics that include the "InstanceId=" 
dimension, as long as the InstanceId value refers to a valid running Amazon EC2 instance. You can 
also add the recover action to alarms that is set on any Amazon EC2 per-instance metric except for
StatusCheckFailed_Instance .
To set up a CloudWatch alarm action that can reboot, stop, or terminate an instance, you must use a 
service-linked IAM role, AWSServiceRoleForCloudWatchEvents. The AWSServiceRoleForCloudWatchEvents 
IAM role enables AWS to perform alarm actions on your behalf.
To create the service-linked role for CloudWatch Events, use the following command:
211Amazon CloudWatch User Guide
Adding stop actions to Amazon CloudWatch alarms
aws iam create-service-linked-role --aws-service-name events.amazonaws.com
Console support
You can create alarms using the CloudWatch console or the Amazon EC2 console. The procedures in 
this documentation use the CloudWatch console. For procedures that use the Amazon EC2 console, see
Create Alarms That Stop, Terminate, Reboot, or Recover an Instance in the Amazon EC2 User Guide for 
Linux Instances .
Permissions
If you are using an AWS Identity and Access Management (IAM) account to create or modify 
an alarm that performs EC2 actions or Systems Manager OpsItem actions, you must have the
iam:CreateServiceLinkedRole  permission.
Contents
•Adding stop actions to Amazon CloudWatch alarms (p. 212)
•Adding terminate actions to Amazon CloudWatch alarms (p. 213)
•Adding reboot actions to Amazon CloudWatch alarms (p. 214)
•Adding recover actions to Amazon CloudWatch alarms (p. 215)
•Viewing the history of triggered alarms and actions (p. 216)
Adding stop actions to Amazon CloudWatch alarms
You can create an alarm that stops an Amazon EC2 instance when a certain threshold has been met. For 
example, you may run development or test instances and occasionally forget to shut them oﬀ. You can 
create an alarm that is triggered when the average CPU utilization percentage has been lower than 10 
percent for 24 hours, signaling that it is idle and no longer in use. You can adjust the threshold, duration, 
and period to suit your needs, plus you can add an SNS notiﬁcation, so that you will receive an email 
when the alarm is triggered.
Amazon EC2 instances that use an Amazon Elastic Block Store volume as the root device can be stopped 
or terminated, whereas instances that use the instance store as the root device can only be terminated.
To create an alarm to stop an idle instance using the Amazon CloudWatch console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , All alarms .
3. Choose Create alarm .
4. Choose Select Metric.
5. For AWS namespaces, choose EC2.
6. Do the following:
a. Choose Per-Instance Metrics.
b. Select the check box in the row with the correct instance and the CPUUtilization  metric.
c. Choose Graphed metrics .
d. For the statistic, choose Average.
e. Choose a period (for example, 1 Hour ).
f.Choose Select metric.
7. For the Deﬁne Alarm  step, do the following:
a. Under Conditions , choose Static .
b. Under Whenever CPUUtilization is, choose Lower.
212Amazon CloudWatch User Guide
Adding terminate actions to Amazon CloudWatch alarms
c. For than , type 10.
d. Choose Next.
e. Under Notiﬁcation , for Send notiﬁcation to , choose an existing SNS topic or create a new one.
To create an SNS topic, choose New list . For Send notiﬁcation to , type a name for the SNS 
topic (for example, Stop_EC2_Instance). For Email list , type a comma-separated list of email 
addresses to be notiﬁed when the alarm changes to the ALARM state. Each email address is sent 
a topic subscription conﬁrmation email. You must conﬁrm the subscription before notiﬁcations 
can be sent to an email address.
f.Choose Add EC2 Action.
g. For Alarm state trigger , choose In alarm . For Take the following action, choose Stop this 
instance.
h. Choose Next.
i. Enter a name and description for the alarm. The name must contain only ASCII characters. Then 
choose Next.
j. Under Preview and create , conﬁrm that the information and conditions are what you want, 
then choose Create alarm .
Adding terminate actions to Amazon CloudWatch 
alarms
You can create an alarm that terminates an EC2 instance automatically when a certain threshold has 
been met (as long as termination protection is not enabled for the instance). For example, you might 
want to terminate an instance when it has completed its work, and you don't need the instance again. 
If you might want to use the instance later, you should stop the instance instead of terminating it. 
For information about enabling and disabling termination protection for an instance, see Enabling 
Termination Protection for an Instance in the Amazon EC2 User Guide for Linux Instances.
To create an alarm to terminate an idle instance using the Amazon CloudWatch console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , Create Alarm .
3. For the Select Metric step, do the following:
a. Under EC2 Metrics, choose Per-Instance Metrics.
b. Select the row with the instance and the CPUUtilization  metric.
c. For the statistic, choose Average.
d. Choose a period (for example, 1 Hour ).
e. Choose Next.
4. For the Deﬁne Alarm  step, do the following:
a. Under Alarm Threshold, type a unique name for the alarm (for example, Terminate EC2 
instance) and a description of the alarm (for example, Terminate EC2 instance when CPU is idle 
for too long). Alarm names must contain only ASCII characters.
b. Under Whenever, for is, choose < and type 10. For for, type 24 consecutive periods.
A graphical representation of the threshold is shown under Alarm Preview .
c. Under Notiﬁcation , for Send notiﬁcation to , choose an existing SNS topic or create a new one.
To create an SNS topic, choose New list . For Send notiﬁcation to , type a name for the SNS topic 
(for example, Terminate_EC2_Instance). For Email list , type a comma-separated list of email 
213Amazon CloudWatch User Guide
Adding reboot actions to Amazon CloudWatch alarms
addresses to be notiﬁed when the alarm changes to the ALARM state. Each email address is sent 
a topic subscription conﬁrmation email. You must conﬁrm the subscription before notiﬁcations 
can be sent to an email address.
d. Choose EC2 Action.
e. For Whenever this alarm, choose State is ALARM. For Take this action, choose Terminate this 
instance.
f.Choose Create Alarm .
Adding reboot actions to Amazon CloudWatch alarms
You can create an Amazon CloudWatch alarm that monitors an Amazon EC2 instance and automatically 
reboots the instance. The reboot alarm action is recommended for Instance Health Check failures (as 
opposed to the recover alarm action, which is suited for System Health Check failures). An instance 
reboot is equivalent to an operating system reboot. In most cases, it takes only a few minutes to reboot 
your instance. When you reboot an instance, it remains on the same physical host, so your instance keeps 
its public DNS name, private IP address, and any data on its instance store volumes.
Rebooting an instance doesn't start a new instance billing hour, unlike stopping and restarting your 
instance. For more information about rebooting an instance, see Reboot Your Instance in the Amazon 
EC2 User Guide for Linux Instances.
Important
To avoid a race condition between the reboot and recover actions, avoid setting the same 
evaluation period for both a reboot alarm and a recover alarm. We recommend that you set 
reboot alarms to three evaluation periods of one minute each.
To create an alarm to reboot an instance using the Amazon CloudWatch console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , Create Alarm .
3. For the Select Metric step, do the following:
a. Under EC2 Metrics, choose Per-Instance Metrics.
b. Select the row with the instance and the StatusCheckFailed_Instance metric.
c. For the statistic, choose Minimum .
d. Choose a period (for example, 1 Minute ) and choose Next.
4. For the Deﬁne Alarm  step, do the following:
a. Under Alarm Threshold, type a unique name for the alarm (for example, Reboot EC2 instance) 
and a description of the alarm (for example, Reboot EC2 instance when health checks fail). 
Alarm names must contain only ASCII characters.
b. Under Whenever, for is, choose > and type 0. For for, type 3 consecutive periods.
A graphical representation of the threshold is shown under Alarm Preview .
c. Under Notiﬁcation , for Send notiﬁcation to , choose an existing SNS topic or create a new one.
To create an SNS topic, choose New list . For Send notiﬁcation to , type a name for the SNS 
topic (for example, Reboot_EC2_Instance). For Email list , type a comma-separated list of email 
addresses to be notiﬁed when the alarm changes to the ALARM state. Each email address is sent 
a topic subscription conﬁrmation email. You must conﬁrm the subscription before notiﬁcations 
can be sent to an email address.
d. Choose EC2 Action.
e. For Whenever this alarm, choose State is ALARM. For Take this action, choose Reboot this 
instance.
214Amazon CloudWatch User Guide
Adding recover actions to Amazon CloudWatch alarms
f.Choose Create Alarm .
Adding recover actions to Amazon CloudWatch 
alarms
You can create an Amazon CloudWatch alarm that monitors an Amazon EC2 instance and automatically 
recovers the instance if it becomes impaired due to an underlying hardware failure or a problem that 
requires AWS involvement to repair. Terminated instances cannot be recovered. A recovered instance is 
identical to the original instance, including the instance ID, private IP addresses, Elastic IP addresses, and 
all instance metadata.
When the StatusCheckFailed_System  alarm is triggered, and the recover action is initiated, you 
will be notiﬁed by the Amazon SNS topic that you chose when you created the alarm and associated 
the recover action. During instance recovery, the instance is migrated during an instance reboot, and 
any data that is in-memory is lost. When the process is complete, information is published to the SNS 
topic you've conﬁgured for the alarm. Anyone who is subscribed to this SNS topic will receive an email 
notiﬁcation that includes the status of the recovery attempt and any further instructions. You will notice 
an instance reboot on the recovered instance.
The recover action can be used only with StatusCheckFailed_System , not with
StatusCheckFailed_Instance .
Examples of problems that cause system status checks to fail include:
•Loss of network connectivity
•Loss of system power
•Software issues on the physical host
•Hardware issues on the physical host that impact network reachability
The recover action is supported only on some instance types. For more information about supported 
instance types and other requirements, see  Recover your instance and  Requirements.
Important
To avoid a race condition between the reboot and recover actions, avoid setting the same 
evaluation period for both a reboot alarm and a recover alarm. We recommend that you set 
recover alarms to two evaluation periods of one minute each and reboot alarms to three 
evaluation periods of one minute each.
To create an alarm to recover an instance using the Amazon CloudWatch console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , Create Alarm .
3. For the Select Metric step, do the following:
a. Under EC2 Metrics, choose Per-Instance Metrics.
b. Select the row with the instance and the StatusCheckFailed_System metric.
c. For the statistic, choose Minimum .
d. Choose a period (for example, 1 Minute ).
Important
To avoid a race condition between the reboot and recover actions, avoid setting the 
same evaluation period for both a reboot alarm and a recover alarm. We recommend 
that you set recover alarms to two evaluation periods of one minute each.
e. Choose Next.
215Amazon CloudWatch User Guide
Viewing the history of triggered alarms and actions
4. For the Deﬁne Alarm  step, do the following:
a. Under Alarm Threshold, type a unique name for the alarm (for example, Recover EC2 instance) 
and a description of the alarm (for example, Recover EC2 instance when health checks fail). 
Alarm names must contain only ASCII characters.
b. Under Whenever, for is, choose > and type 0. For for, type 2 consecutive periods.
c. Under Notiﬁcation , for Send notiﬁcation to , choose an existing SNS topic or create a new one.
To create an SNS topic, choose New list . For Send notiﬁcation to , type a name for the SNS 
topic (for example, Recover_EC2_Instance). For Email list , type a comma-separated list of email 
addresses to be notiﬁed when the alarm changes to the ALARM state. Each email address is sent 
a topic subscription conﬁrmation email. You must conﬁrm the subscription before notiﬁcations 
can be sent to an email address.
d. Choose EC2 Action.
e. For Whenever this alarm, choose State is ALARM. For Take this action, choose Recover this 
instance.
f.Choose Create Alarm .
Viewing the history of triggered alarms and actions
You can view alarm and action history in the Amazon CloudWatch console. Amazon CloudWatch keeps 
the last two weeks' worth of alarm and action history.
To view the history of triggered alarms and actions
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms  and select an alarm.
3. To view the most recent state transition along with the time and metric values, choose Details .
4. To view the most recent history entries, choose History.
Create a billing alarm to monitor your estimated 
AWS charges
You can monitor your estimated AWS charges by using Amazon CloudWatch. When you enable the 
monitoring of estimated charges for your AWS account, the estimated charges are calculated and sent 
several times daily to CloudWatch as metric data.
Billing metric data is stored in the US East (N. Virginia) Region and represents worldwide charges. This 
data includes the estimated charges for every service in AWS that you use, in addition to the estimated 
overall total of your AWS charges.
The alarm triggers when your account billing exceeds the threshold you specify. It triggers only when the 
current billing exceeds the threshold. It doesn't use projections based on your usage so far in the month.
If you create a billing alarm at a time when your charges have already exceeded the threshold, the alarm 
goes to the ALARM state immediately.
Note
For information about analyzing CloudWatch charges that you have already been billed for, see
CloudWatch billing and cost (p. 18).
Tasks
216Amazon CloudWatch User Guide
Enabling billing alerts
•Enabling billing alerts (p. 217)
•Create a billing alarm (p. 217)
•Deleting a billing alarm  (p. 218)
Enabling billing alerts
Before you can create an alarm for your estimated charges, you must enable billing alerts, so that you 
can monitor your estimated AWS charges and create an alarm using billing metric data. After you enable 
billing alerts, you can't disable data collection, but you can delete any billing alarms that you created.
After you enable billing alerts for the ﬁrst time, it takes about 15 minutes before you can view billing 
data and set billing alarms.
Requirements
•You must be signed in using account root user credentials or as an IAM user that has been given 
permission to view billing information.
•For consolidated billing accounts, billing data for each linked account can be found by logging in as the 
paying account. You can view billing data for total estimated charges and estimated charges by service 
for each linked account, in addition to the consolidated account.
•In a consolidated billing account, member linked account metrics are captured only if the payer 
account enables the Receive Billing Alerts preference. If you change which account is your 
management/payer account, you must enable the billing alerts in the new management/payer 
account.
•The account must not be part of the Amazon Partner Network (APN) because billing metrics are not 
published to CloudWatch for APN accounts. For more information, see AWS Partner Network.
To enable the monitoring of estimated charges
1. Open the AWS Billing console at https://console.aws.amazon.com/billing/.
2. In the navigation pane, choose Billing Preferences.
3. By Alert preferences choose Edit.
4. Choose Receive CloudWatch Billing Alerts.
5. Choose Save preferences.
Create a billing alarm
Important
Before you create a billing alarm, you must set your Region to US East (N. Virginia). Billing 
metric data is stored in this Region and represents worldwide charges. You also must 
enable billing alerts for your account or in the management/payer account (if you are using 
consolidated billing). For more information, see Enabling billing alerts (p. 217).
In this procedure, you create an alarm that sends a notiﬁcation when your estimated charges for AWS 
exceed a deﬁned threshold.
To create a billing alarm using the CloudWatch console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , and then choose All alarms .
3. Choose Create alarm .
217Amazon CloudWatch User Guide
Deleting a billing alarm
4. Choose Select metric. In Browse, choose Billing , and then choose Total Estimated Charge.
Note
If you dont't see the Billing /Total Estimated Charge metric, enable billing alerts, and 
change your Region to US East (N. Virginia). For more information, see Enabling billing 
alerts (p. 217).
5. Select the box for the EstimatedCharges  metric, and then choose Select metric.
6. For Statistic , choose Maximum .
7. For Period, choose 6 hours .
8. For Threshold type, choose Static .
9. For Whenever EstimatedCharges is . . ., choose Greater .
10. For than . . . , deﬁne the value that you want to cause your alarm to trigger. For example, 200 USD.
The EstimatedCharges  metric values are only in US dollars (USD), and the currency conversion is 
provided by Amazon Services LLC. For more information, see  What is AWS Billing?.
Note
After you deﬁne a threshold value, the preview graph displays your estimated charges for 
the current month.
11. Choose Additional Conﬁguration  and do the following:
•For Datapoints to alarm , specify 1 out of 1 .
•For Missing data treatment , choose Treat missing data as missing.
12. Choose Next.
13. Under Notiﬁcation , ensure that In alarm  is selected. Then specify an Amazon SNS topic to be 
notiﬁed when your alarm is in the ALARM state. The Amazon SNS topic can include your email 
address so that you recieve email when the billing amount crosses the threshold that you speciﬁed.
You can select an existing Amazon SNS topic, create a new Amazon SNS topic, or use a topic ARN to 
notify other account. If you want your alarm to send multiple notiﬁcations for the same alarm state 
or for diﬀerent alarm states, choose Add notiﬁcation .
14. Choose Next.
15. Under Name and description , enter a name for your alarm. The name must contain only UTF-8 
characters, and can't contain ASCII control characters.
• (Optional) Enter a description of your alarm. The description can include markdown formatting, 
which is displayed only in the alarm Details  tab in the CloudWatch console. The markdown can 
be useful to add links to runbooks or other internal resources.
16. Choose Next.
17. Under Preview and create , make sure that your conﬁguration is correct, and then choose Create 
alarm .
Deleting a billing alarm
You can delete your billing alarm when you no longer need it.
To delete a billing alarm
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. If necessary, change the Region to US East (N. Virginia). Billing metric data is stored in this Region 
and reﬂects worldwide charges.
3. In the navigation pane, choose Alarms , All alarms .
4. Select the check box next to the alarm and choose Actions, Delete.
218Amazon CloudWatch User Guide
Hiding Auto Scaling alarms
5. When prompted for conﬁrmation, choose Yes, Delete.
Hiding Auto Scaling alarms
When you view your alarms in the AWS Management Console, you can hide the alarms related to 
both Amazon EC2 Auto Scaling and Application Auto Scaling. This feature is available only in the AWS 
Management Console.
To temporarily hide Auto Scaling alarms
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , All alarms , and select Hide Auto Scaling alarms .
Alarm events and EventBridge
CloudWatch sends events to Amazon EventBridge whenever a CloudWatch alarm is created, updated, 
deleted, or changes alarm state. You can use EventBridge and these events to write rules that take 
actions, such as notifying you, when an alarm changes state. For more information, see What is Amazon 
EventBridge?
CloudWatch guarantees the delivery of alarm state change events to EventBridge.
Sample events from CloudWatch
This section includes example events from CloudWatch.
State change for a single-metric alarm
{ 
    "version": "0", 
    "id": "c4c1c1c9-6542-e61b-6ef0-8c4d36933a92", 
    "detail-type": "CloudWatch Alarm State Change", 
    "source": "aws.cloudwatch", 
    "account": "123456789012", 
    "time": "2019-10-02T17:04:40Z", 
    "region": "us-east-1", 
    "resources": [ 
        "arn:aws:cloudwatch:us-east-1:123456789012:alarm:ServerCpuTooHigh" 
    ], 
    "detail": { 
        "alarmName": "ServerCpuTooHigh", 
        "configuration": { 
            "description": "Goes into alarm when server CPU utilization is too high!", 
            "metrics": [ 
                { 
                    "id": "30b6c6b2-a864-43a2-4877-c09a1afc3b87", 
                    "metricStat": { 
                        "metric": { 
                            "dimensions": { 
                                "InstanceId": "i-12345678901234567" 
                            }, 
                            "name": "CPUUtilization", 
                            "namespace": "AWS/EC2" 
                        }, 
                        "period": 300, 
                        "stat": "Average" 
219Amazon CloudWatch User Guide
Sample events from CloudWatch
                    }, 
                    "returnData": true 
                } 
            ] 
        }, 
        "previousState": { 
            "reason": "Threshold Crossed: 1 out of the last 1 datapoints 
 [0.0666851903306472 (01/10/19 13:46:00)] was not greater than the threshold (50.0) 
 (minimum 1 datapoint for ALARM -> OK transition).", 
            "reasonData": "{\"version\":\"1.0\",\"queryDate\":
\"2019-10-01T13:56:40.985+0000\",\"startDate\":\"2019-10-01T13:46:00.000+0000\",\"statistic
\":\"Average\",\"period\":300,\"recentDatapoints\":[0.0666851903306472],\"threshold
\":50.0}", 
            "timestamp": "2019-10-01T13:56:40.987+0000", 
            "value": "OK" 
        }, 
        "state": { 
            "reason": "Threshold Crossed: 1 out of the last 1 datapoints [99.50160229693434 
 (02/10/19 16:59:00)] was greater than the threshold (50.0) (minimum 1 datapoint for OK -> 
 ALARM transition).", 
            "reasonData": "{\"version\":\"1.0\",\"queryDate\":
\"2019-10-02T17:04:40.985+0000\",\"startDate\":\"2019-10-02T16:59:00.000+0000\",\"statistic
\":\"Average\",\"period\":300,\"recentDatapoints\":[99.50160229693434],\"threshold
\":50.0}", 
            "timestamp": "2019-10-02T17:04:40.989+0000", 
            "value": "ALARM" 
        } 
    }
}
State change for a metric math alarm
{ 
    "version": "0", 
    "id": "2dde0eb1-528b-d2d5-9ca6-6d590caf2329", 
    "detail-type": "CloudWatch Alarm State Change", 
    "source": "aws.cloudwatch", 
    "account": "123456789012", 
    "time": "2019-10-02T17:20:48Z", 
    "region": "us-east-1", 
    "resources": [ 
        "arn:aws:cloudwatch:us-east-1:123456789012:alarm:TotalNetworkTrafficTooHigh" 
    ], 
    "detail": { 
        "alarmName": "TotalNetworkTrafficTooHigh", 
        "configuration": { 
            "description": "Goes into alarm if total network traffic exceeds 10Kb", 
            "metrics": [ 
                { 
                    "expression": "SUM(METRICS())", 
                    "id": "e1", 
                    "label": "Total Network Traffic", 
                    "returnData": true 
                }, 
                { 
                    "id": "m1", 
                    "metricStat": { 
                        "metric": { 
                            "dimensions": { 
                                "InstanceId": "i-12345678901234567" 
                            }, 
                            "name": "NetworkIn", 
                            "namespace": "AWS/EC2" 
                        }, 
                        "period": 300, 
220Amazon CloudWatch User Guide
Sample events from CloudWatch
                        "stat": "Maximum" 
                    }, 
                    "returnData": false 
                }, 
                { 
                    "id": "m2", 
                    "metricStat": { 
                        "metric": { 
                            "dimensions": { 
                                "InstanceId": "i-12345678901234567" 
                            }, 
                            "name": "NetworkOut", 
                            "namespace": "AWS/EC2" 
                        }, 
                        "period": 300, 
                        "stat": "Maximum" 
                    }, 
                    "returnData": false 
                } 
            ] 
        }, 
        "previousState": { 
            "reason": "Unchecked: Initial alarm creation", 
            "timestamp": "2019-10-02T17:20:03.642+0000", 
            "value": "INSUFFICIENT_DATA" 
        }, 
        "state": { 
            "reason": "Threshold Crossed: 1 out of the last 1 datapoints [45628.0 (02/10/19 
 17:10:00)] was greater than the threshold (10000.0) (minimum 1 datapoint for OK -> ALARM 
 transition).", 
            "reasonData": "{\"version\":\"1.0\",\"queryDate\":
\"2019-10-02T17:20:48.551+0000\",\"startDate\":\"2019-10-02T17:10:00.000+0000\",\"period
\":300,\"recentDatapoints\":[45628.0],\"threshold\":10000.0}", 
            "timestamp": "2019-10-02T17:20:48.554+0000", 
            "value": "ALARM" 
        } 
    }
}
State change for an anomaly detection alarm
{ 
    "version": "0", 
    "id": "daafc9f1-bddd-c6c9-83af-74971fcfc4ef", 
    "detail-type": "CloudWatch Alarm State Change", 
    "source": "aws.cloudwatch", 
    "account": "123456789012", 
    "time": "2019-10-03T16:00:04Z", 
    "region": "us-east-1", 
    "resources": ["arn:aws:cloudwatch:us-east-1:123456789012:alarm:EC2 CPU Utilization 
 Anomaly"], 
    "detail": { 
        "alarmName": "EC2 CPU Utilization Anomaly", 
        "state": { 
            "value": "ALARM", 
            "reason": "Thresholds Crossed: 1 out of the last 1 datapoints [0.0 (03/10/19 
 15:58:00)] was less than the lower thresholds [0.020599444741798756] or greater than the 
 upper thresholds [0.3006915352732461] (minimum 1 datapoint for OK -> ALARM transition).", 
            "reasonData": "{\"version\":\"1.0\",\"queryDate\":
\"2019-10-03T16:00:04.650+0000\",\"startDate\":\"2019-10-03T15:58:00.000+0000\",\"period
\":60,\"recentDatapoints\":[0.0],\"recentLowerThresholds\":[0.020599444741798756],
\"recentUpperThresholds\":[0.3006915352732461]}", 
            "timestamp": "2019-10-03T16:00:04.653+0000" 
        }, 
        "previousState": { 
221Amazon CloudWatch User Guide
Sample events from CloudWatch
            "value": "OK", 
            "reason": "Thresholds Crossed: 1 out of the last 1 datapoints 
 [0.166666666664241 (03/10/19 15:57:00)] was not less than the lower thresholds 
 [0.0206719426210418] or not greater than the upper thresholds [0.30076870222143803] 
 (minimum 1 datapoint for ALARM -> OK transition).", 
            "reasonData": "{\"version\":\"1.0\",\"queryDate\":
\"2019-10-03T15:59:04.670+0000\",\"startDate\":\"2019-10-03T15:57:00.000+0000\",
\"period\":60,\"recentDatapoints\":[0.166666666664241],\"recentLowerThresholds\":
[0.0206719426210418],\"recentUpperThresholds\":[0.30076870222143803]}", 
            "timestamp": "2019-10-03T15:59:04.672+0000" 
        }, 
        "configuration": { 
            "description": "Goes into alarm if CPU Utilization is out of band", 
            "metrics": [{ 
                "id": "m1", 
                "metricStat": { 
                    "metric": { 
                        "namespace": "AWS/EC2", 
                        "name": "CPUUtilization", 
                        "dimensions": { 
                            "InstanceId": "i-12345678901234567" 
                        } 
                    }, 
                    "period": 60, 
                    "stat": "Average" 
                }, 
                "returnData": true 
            }, { 
                "id": "ad1", 
                "expression": "ANOMALY_DETECTION_BAND(m1, 0.8)", 
                "label": "CPUUtilization (expected)", 
                "returnData": true 
            }] 
        } 
    }
}
State change for a composite alarm with a suppressor alarm
{ 
    "version": "0", 
    "id": "d3dfc86d-384d-24c8-0345-9f7986db0b80", 
    "detail-type": "CloudWatch Alarm State Change", 
    "source": "aws.cloudwatch", 
    "account": "123456789012", 
    "time": "2022-07-22T15:57:45Z", 
    "region": "us-east-1", 
    "resources": [ 
        "arn:aws:cloudwatch:us-east-1:123456789012:alarm:ServiceAggregatedAlarm" 
    ], 
    "detail": { 
        "alarmName": "ServiceAggregatedAlarm", 
        "state": { 
            "actionsSuppressedBy": "WaitPeriod", 
            "actionsSuppressedReason": "Actions suppressed by WaitPeriod", 
            "value": "ALARM", 
            "reason": "arn:aws:cloudwatch:us-
east-1:123456789012:alarm:SuppressionDemo.EventBridge.FirstChild transitioned to ALARM at 
 Friday 22 July, 2022 15:57:45 UTC", 
            "reasonData": "{\"triggeringAlarms\":[{\"arn\":\"arn:aws:cloudwatch:us-
east-1:123456789012:alarm:ServerCpuTooHigh\",\"state\":{\"value\":\"ALARM\",\"timestamp\":
\"2022-07-22T15:57:45.394+0000\"}}]}", 
            "timestamp": "2022-07-22T15:57:45.394+0000" 
        }, 
        "previousState": { 
222Amazon CloudWatch User Guide
Sample events from CloudWatch
            "value": "OK", 
            "reason": "arn:aws:cloudwatch:us-
east-1:123456789012:alarm:SuppressionDemo.EventBridge.Main was created and its alarm rule 
 evaluates to OK", 
            "reasonData": "{\"triggeringAlarms\":[{\"arn\":\"arn:aws:cloudwatch:us-
east-1:123456789012:alarm:TotalNetworkTrafficTooHigh\",\"state\":{\"value\":\"OK\",
\"timestamp\":\"2022-07-14T16:28:57.770+0000\"}},{\"arn\":\"arn:aws:cloudwatch:us-
east-1:123456789012:alarm:ServerCpuTooHigh\",\"state\":{\"value\":\"OK\",\"timestamp\":
\"2022-07-14T16:28:54.191+0000\"}}]}", 
            "timestamp": "2022-07-22T15:56:14.552+0000" 
        }, 
        "configuration": { 
            "alarmRule": "ALARM(ServerCpuTooHigh) OR ALARM(TotalNetworkTrafficTooHigh)", 
            "actionsSuppressor": "ServiceMaintenanceAlarm", 
            "actionsSuppressorWaitPeriod": 120, 
            "actionsSuppressorExtensionPeriod": 180 
        } 
    }
}
Creation of a composite alarm
{ 
    "version": "0", 
    "id": "91535fdd-1e9c-849d-624b-9a9f2b1d09d0", 
    "detail-type": "CloudWatch Alarm Configuration Change", 
    "source": "aws.cloudwatch", 
    "account": "123456789012", 
    "time": "2022-03-03T17:06:22Z", 
    "region": "us-east-1", 
    "resources": [ 
        "arn:aws:cloudwatch:us-east-1:123456789012:alarm:ServiceAggregatedAlarm" 
    ], 
    "detail": { 
        "alarmName": "ServiceAggregatedAlarm", 
        "operation": "create", 
        "state": { 
            "value": "INSUFFICIENT_DATA", 
            "timestamp": "2022-03-03T17:06:22.289+0000" 
        }, 
        "configuration": { 
            "alarmRule": "ALARM(ServerCpuTooHigh) OR ALARM(TotalNetworkTrafficTooHigh)", 
            "alarmName": "ServiceAggregatedAlarm", 
            "description": "Aggregated monitor for instance", 
            "actionsEnabled": true, 
            "timestamp": "2022-03-03T17:06:22.289+0000", 
            "okActions": [], 
            "alarmActions": [], 
            "insufficientDataActions": [] 
        } 
    }
}
Creation of a composite alarm with a suppressor alarm
{ 
    "version": "0", 
    "id": "454773e1-09f7-945b-aa2c-590af1c3f8e0", 
    "detail-type": "CloudWatch Alarm Configuration Change", 
    "source": "aws.cloudwatch", 
    "account": "123456789012", 
    "time": "2022-07-14T13:59:46Z", 
223Amazon CloudWatch User Guide
Sample events from CloudWatch
    "region": "us-east-1", 
    "resources": [ 
        "arn:aws:cloudwatch:us-east-1:123456789012:alarm:ServiceAggregatedAlarm" 
    ], 
    "detail": { 
        "alarmName": "ServiceAggregatedAlarm", 
        "operation": "create", 
        "state": { 
            "value": "INSUFFICIENT_DATA", 
            "timestamp": "2022-07-14T13:59:46.425+0000" 
        }, 
        "configuration": { 
            "alarmRule": "ALARM(ServerCpuTooHigh) OR ALARM(TotalNetworkTrafficTooHigh)", 
            "actionsSuppressor": "ServiceMaintenanceAlarm", 
            "actionsSuppressorWaitPeriod": 120, 
            "actionsSuppressorExtensionPeriod": 180, 
            "alarmName": "ServiceAggregatedAlarm", 
            "actionsEnabled": true, 
            "timestamp": "2022-07-14T13:59:46.425+0000", 
            "okActions": [], 
            "alarmActions": [], 
            "insufficientDataActions": [] 
        } 
    }
}
Update of a metric alarm
{ 
    "version": "0", 
    "id": "bc7d3391-47f8-ae47-f457-1b4d06118d50", 
    "detail-type": "CloudWatch Alarm Configuration Change", 
    "source": "aws.cloudwatch", 
    "account": "123456789012", 
    "time": "2022-03-03T17:06:34Z", 
    "region": "us-east-1", 
    "resources": [ 
        "arn:aws:cloudwatch:us-east-1:123456789012:alarm:ServerCpuTooHigh" 
    ], 
    "detail": { 
        "alarmName": "ServerCpuTooHigh", 
        "operation": "update", 
        "state": { 
            "value": "INSUFFICIENT_DATA", 
            "timestamp": "2022-03-03T17:06:13.757+0000" 
        }, 
        "configuration": { 
            "evaluationPeriods": 1, 
            "threshold": 80, 
            "comparisonOperator": "GreaterThanThreshold", 
            "treatMissingData": "ignore", 
            "metrics": [ 
                { 
                    "id": "86bfa85f-b14c-ebf7-8916-7da014ce23c0", 
                    "metricStat": { 
                        "metric": { 
                            "namespace": "AWS/EC2", 
                            "name": "CPUUtilization", 
                            "dimensions": { 
                                "InstanceId": "i-12345678901234567" 
                            } 
                        }, 
                        "period": 300, 
                        "stat": "Average" 
224Amazon CloudWatch User Guide
Sample events from CloudWatch
                    }, 
                    "returnData": true 
                } 
            ], 
            "alarmName": "ServerCpuTooHigh", 
            "description": "Goes into alarm when server CPU utilization is too high!", 
            "actionsEnabled": true, 
            "timestamp": "2022-03-03T17:06:34.267+0000", 
            "okActions": [], 
            "alarmActions": [], 
            "insufficientDataActions": [] 
        }, 
        "previousConfiguration": { 
            "evaluationPeriods": 1, 
            "threshold": 70, 
            "comparisonOperator": "GreaterThanThreshold", 
            "treatMissingData": "ignore", 
            "metrics": [ 
                { 
                    "id": "d6bfa85f-893e-b052-a58b-4f9295c9111a", 
                    "metricStat": { 
                        "metric": { 
                            "namespace": "AWS/EC2", 
                            "name": "CPUUtilization", 
                            "dimensions": { 
                                "InstanceId": "i-12345678901234567" 
                            } 
                        }, 
                        "period": 300, 
                        "stat": "Average" 
                    }, 
                    "returnData": true 
                } 
            ], 
            "alarmName": "ServerCpuTooHigh", 
            "description": "Goes into alarm when server CPU utilization is too high!", 
            "actionsEnabled": true, 
            "timestamp": "2022-03-03T17:06:13.757+0000", 
            "okActions": [], 
            "alarmActions": [], 
            "insufficientDataActions": [] 
        } 
    }
}
Update of a composite alarm with a suppressor alarm
{ 
    "version": "0", 
    "id": "4c6f4177-6bd5-c0ca-9f05-b4151c54568b", 
    "detail-type": "CloudWatch Alarm Configuration Change", 
    "source": "aws.cloudwatch", 
    "account": "123456789012", 
    "time": "2022-07-14T13:59:56Z", 
    "region": "us-east-1", 
    "resources": [ 
        "arn:aws:cloudwatch:us-east-1:123456789012:alarm:ServiceAggregatedAlarm" 
    ], 
    "detail": { 
        "alarmName": "ServiceAggregatedAlarm", 
        "operation": "update", 
        "state": { 
            "actionsSuppressedBy": "WaitPeriod", 
            "value": "ALARM", 
            "timestamp": "2022-07-14T13:59:46.425+0000" 
225Amazon CloudWatch User Guide
Sample events from CloudWatch
        }, 
        "configuration": { 
            "alarmRule": "ALARM(ServerCpuTooHigh) OR ALARM(TotalNetworkTrafficTooHigh)", 
            "actionsSuppressor": "ServiceMaintenanceAlarm", 
            "actionsSuppressorWaitPeriod": 120, 
            "actionsSuppressorExtensionPeriod": 360, 
            "alarmName": "ServiceAggregatedAlarm", 
            "actionsEnabled": true, 
            "timestamp": "2022-07-14T13:59:56.290+0000", 
            "okActions": [], 
            "alarmActions": [], 
            "insufficientDataActions": [] 
        }, 
        "previousConfiguration": { 
            "alarmRule": "ALARM(ServerCpuTooHigh) OR ALARM(TotalNetworkTrafficTooHigh)", 
            "actionsSuppressor": "ServiceMaintenanceAlarm", 
            "actionsSuppressorWaitPeriod": 120, 
            "actionsSuppressorExtensionPeriod": 180, 
            "alarmName": "ServiceAggregatedAlarm", 
            "actionsEnabled": true, 
            "timestamp": "2022-07-14T13:59:46.425+0000", 
            "okActions": [], 
            "alarmActions": [], 
            "insufficientDataActions": [] 
        } 
    }
}
Deletion of a metric math alarm
{ 
    "version": "0", 
    "id": "f171d220-9e1c-c252-5042-2677347a83ed", 
    "detail-type": "CloudWatch Alarm Configuration Change", 
    "source": "aws.cloudwatch", 
    "account": "123456789012", 
    "time": "2022-03-03T17:07:13Z", 
    "region": "us-east-1", 
    "resources": [ 
        "arn:aws:cloudwatch:us-east-1:123456789012:alarm:TotalNetworkTrafficTooHigh" 
    ], 
    "detail": { 
        "alarmName": "TotalNetworkTrafficTooHigh", 
        "operation": "delete", 
        "state": { 
            "value": "INSUFFICIENT_DATA", 
            "timestamp": "2022-03-03T17:06:17.672+0000" 
        }, 
        "configuration": { 
            "evaluationPeriods": 1, 
            "threshold": 10000, 
            "comparisonOperator": "GreaterThanThreshold", 
            "treatMissingData": "ignore", 
            "metrics": [{ 
                    "id": "m1", 
                    "metricStat": { 
                        "metric": { 
                            "namespace": "AWS/EC2", 
                            "name": "NetworkIn", 
                            "dimensions": { 
                                "InstanceId": "i-12345678901234567" 
                            } 
                        }, 
                        "period": 300, 
226Amazon CloudWatch User Guide
Sample events from CloudWatch
                        "stat": "Maximum" 
                    }, 
                    "returnData": false 
                }, 
                { 
                    "id": "m2", 
                    "metricStat": { 
                        "metric": { 
                            "namespace": "AWS/EC2", 
                            "name": "NetworkOut", 
                            "dimensions": { 
                                "InstanceId": "i-12345678901234567" 
                            } 
                        }, 
                        "period": 300, 
                        "stat": "Maximum" 
                    }, 
                    "returnData": false 
                }, 
                { 
                    "id": "e1", 
                    "expression": "SUM(METRICS())", 
                    "label": "Total Network Traffic", 
                    "returnData": true 
                } 
            ], 
            "alarmName": "TotalNetworkTrafficTooHigh", 
            "description": "Goes into alarm if total network traffic exceeds 10Kb", 
            "actionsEnabled": true, 
            "timestamp": "2022-03-03T17:06:17.672+0000", 
            "okActions": [], 
            "alarmActions": [], 
            "insufficientDataActions": [] 
        } 
    }
}
Deletion of a composite alarm with a suppressor alarm
{ 
    "version": "0", 
    "id": "e34592a1-46c0-b316-f614-1b17a87be9dc", 
    "detail-type": "CloudWatch Alarm Configuration Change", 
    "source": "aws.cloudwatch", 
    "account": "123456789012", 
    "time": "2022-07-14T14:00:01Z", 
    "region": "us-east-1", 
    "resources": [ 
        "arn:aws:cloudwatch:us-east-1:123456789012:alarm:ServiceAggregatedAlarm" 
    ], 
    "detail": { 
        "alarmName": "ServiceAggregatedAlarm", 
        "operation": "delete", 
        "state": { 
            "actionsSuppressedBy": "WaitPeriod", 
            "value": "ALARM", 
            "timestamp": "2022-07-14T13:59:46.425+0000" 
        }, 
        "configuration": { 
            "alarmRule": "ALARM(ServerCpuTooHigh) OR ALARM(TotalNetworkTrafficTooHigh)", 
            "actionsSuppressor": "ServiceMaintenanceAlarm", 
            "actionsSuppressorWaitPeriod": 120, 
            "actionsSuppressorExtensionPeriod": 360, 
            "alarmName": "ServiceAggregatedAlarm", 
227Amazon CloudWatch User Guide
Sample events from CloudWatch
            "actionsEnabled": true, 
            "timestamp": "2022-07-14T13:59:56.290+0000", 
            "okActions": [], 
            "alarmActions": [], 
            "insufficientDataActions": [] 
        } 
    }
}
228Amazon CloudWatch User Guide
Using ServiceLens to monitor 
the health of your applications
Application monitoring
The topics in this section explain CloudWatch features that can help you gain operational visibility into 
your AWS resources.
Topics
•Using ServiceLens to monitor the health of your applications (p. 229)
•Using Amazon CloudWatch Internet Monitor (p. 243)
•Using synthetic monitoring  (p. 292)
•Perform launches and A/B experiments with CloudWatch Evidently (p. 383)
•Use CloudWatch RUM (p. 420)
Using ServiceLens to monitor the health of your 
applications
CloudWatch ServiceLens enhances the observability of your services and applications by enabling you to 
integrate traces, metrics, logs, alarms, and other resource health information into one place. ServiceLens 
integrates CloudWatch with AWS X-Ray to provide an end-to-end view of your application to help you 
more eﬃciently pinpoint performance bottlenecks and identify impacted users. A service map displays 
your service endpoints and resources as “nodes” and highlights the traﬃc, latency, and errors for each 
node and its connections. You can choose a node to see detailed insights about the correlated metrics, 
logs, and traces associated with that part of the service. This enables you to investigate problems and 
their eﬀect on the application.
If you are signed in to an account set up as a monitoring account in CloudWatch cross-account 
observability, the service maps that you view includes nodes for the source accounts linked to this 
monitoring account. Using CloudWatch cross-account observability with ServiceLens provides you end-
to-end visibility across nodes in multiple accounts calling each other through trace links. For more 
information, see CloudWatch cross-account observability (p. 846).
229Amazon CloudWatch User Guide
Deploying ServiceLens
To fully take advantage of ServiceLens and correlated metrics, logs, and traces, you must update the X-
Ray SDK and the instrumentation of your application. ServiceLens supports logs correlation for Lambda 
functions, API Gateway, Java-based applications running on Amazon EC2, and Java-based applications 
running on Amazon EKS or Kubernetes with Container Insights deployed.
Topics
•Deploying ServiceLens (p. 230)
•Using the service map in ServiceLens (p. 239)
•Using the resource health view in ServiceLens (p. 240)
•ServiceLens troubleshooting (p. 242)
Deploying ServiceLens
Deploying ServiceLens requires two steps:
•Deploy AWS X-Ray so that you can view the service map.
230Amazon CloudWatch User Guide
Deploying ServiceLens
•Deploy the CloudWatch agent and the X-Ray daemon to enable the service map integration with 
CloudWatch metrics and CloudWatch Logs.
Topics
•Deploying AWS X-Ray (p. 231)
•Deploying the CloudWatch agent and the X-Ray daemon (p. 232)
Deploying AWS X-Ray
You can use any AWS X-Ray SDK to enable X-Ray. However, the correlation of logs and metrics with your 
traces is supported only if you use the Java SDK.
To deploy X-Ray, follow the standard X-Ray setup. For more information, see the following:
•AWS X-Ray SDK for Java (supports logs correlations)
•The X-Ray SDK for Node.js
•AWS X-Ray SDK for .NET
•AWS X-Ray SDK for Go
•AWS X-Ray SDK for Python
•AWS X-Ray SDK for Ruby
After completing the X-Ray setup, follow the steps in the following sections to integrate X-Ray with 
CloudWatch Logs and enable segment metrics.
Topics
•Integrating with CloudWatch Logs (p. 231)
•Enabling segment metrics from X-Ray (p. 232)
Integrating with CloudWatch Logs
To enable integration with CloudWatch Logs, there are two steps:
•Enable trace to logs correlation. This is supported only using the SDK for Java.
•Conﬁgure trace ID injection.
Enabling trace to logs correlation
The SDK for Java supports both a set of standard application logging frameworks and CloudWatch Logs 
native support. Before completing the following steps, you must have completed a standard setup of the 
AWS X-Ray SDK for Java.
The supported runtimes are Amazon EC2, Amazon EKS with CloudWatch Container Insights enabled, and 
Lambda.
•To enable trace to logs correlation on Amazon EC2, enable the X-Ray EC2 Plugin. For more 
information, see Service Plugins
•To enable trace to logs correlation on Amazon EKS, ﬁrst enable Container Insights if you have not 
already done so. For more information, see Using Container Insights  (p. 464).
Then, enable the X-Ray SDK EKS Plugin. For more information, see Service Plugins.
231Amazon CloudWatch User Guide
Deploying ServiceLens
•To enable trace to logs correlation on Lambda, you must enable X-Ray on Lambda. For more 
information, see AWS Lambda and AWS X-Ray.
Enabling trace ID injection
For information about how to enable trace ID injection, see Logging .
Enabling segment metrics from X-Ray
The AWS X-Ray SDK for Java can emit several metrics about segments into CloudWatch to give an 
unsampled view of latency, throttle, error, and fault rates. It uses the CloudWatch agent to emit these 
metrics to minimize the impact on application performance. For more information about segments, see
Segments .
If you enable segment metrics, a log group called XRayApplicationMetrics is created, and the metrics
ErrorRate , FaultRate, ThrottleRate, and Latency, are published into a custom CloudWatch metric 
namespace called Observability.
Segment metrics are not currently supported in Lambda.
To enable the AWS X-Ray SDK for Java to publish segment metrics, use the following example.
AWSXRayRecorderBuilder builder = AWSXRayRecorderBuilder.standard().withSegmentListener(new 
 MetricsSegmentListener());
If you are using ServiceLens with Amazon EKS and Container Insights, add the
AWS_XRAY_METRICS_DAEMON_ADDRESS  environment variable to the HOST_IP as shown in the 
following example.
env:
- name: HOST_IP 
  valueFrom:  
    fieldRef:  
      apiVersion: v1  
      fieldPath: status.hostIP
- name: AWS_XRAY_METRICS_DAEMON_ADDRESS  
  value: $(HOST_IP):25888
For more information, see Enable X-Ray CloudWatch Metrics.
Deploying the CloudWatch agent and the X-Ray daemon
This section explains how to deploy the CloudWatch agent and the X-Ray daemon. You can deploy the 
agent and the daemon in the following environments:
•Amazon ECS or Fargate
•Amazon EKS or Kubernetes hosted on Amazon EC2
•Amazon EC2
The deployment steps for each of these environments are explained in the following sections.
Topics
•Deploying the CloudWatch agent and the X-Ray daemon on Amazon ECS (p. 233)
•Deploying the CloudWatch agent and the X-Ray daemon on Amazon EKS or Kubernetes (p. 236)
232Amazon CloudWatch User Guide
Deploying ServiceLens
•Deploying the CloudWatch agent and the X-Ray daemon on Amazon EC2 (p. 238)
Deploying the CloudWatch agent and the X-Ray daemon on Amazon ECS
On Amazon ECS, you deploy the CloudWatch agent as a sidecar to your application container to collect 
metrics. You can conﬁgure the CloudWatch Agent through SSM parameter store.
Creating IAM roles
You must create two IAM roles. If you already have created these roles, you may need to add permissions 
to them.
•ECS task role— Containers use this role to run. The permissions should be whatever your applications 
need, plus CloudWatchAgentServerPolicy and AWSXRayDaemonWriteAccess.
•ECS task execution role— Amazon ECS uses this role to launch and execute your 
containers. If you have already created this role, attach the AmazonSSMReadOnlyAccess,
AmazonECSTaskExecutionRolePolicy, and CloudWatchAgentServerPolicy policies to it.
If you need to store more sensitive data for Amazon ECS to use, see Specifying Sensitive Data for more 
information.
For more information about creating IAM roles, see Creating IAM Roles.
Store the agent conﬁguration in SSM Parameter Store
You need to make sure your agent conﬁguration ﬁle has the following section, and then upload it to the 
SSM parameter store.
{ 
  "logs": { 
    "metrics_collected": { 
      "emf": {} 
    } 
  }
}
To upload the agent conﬁguration to the SSM parameter store
1. Put the agent conﬁguration content into a local ﬁle /tmp/ecs-cwagent.json
2. Enter the following command. Replace region with the Region of your cluster.
aws ssm put-parameter \
--name "ecs-cwagent" \
--type "String" \
--value "`cat /tmp/ecs-cwagent.json`" \
--region " region"
Create a task deﬁnition and launch the task
The steps for this task depend on whether you want to use the EC2 launch type or the Fargate launch 
type.
EC2 launch type
First, create the task deﬁnition. In this example, the container "demo-app" sends X-Ray SDK metrics to 
the CloudWatch agent and sends trace information to the X-Ray daemon.
233Amazon CloudWatch User Guide
Deploying ServiceLens
Copy the following task deﬁnition to a local JSON ﬁle such as /tmp/ecs-cwagent-ec2.json . Replace 
the following placeholders:
•Replace {{ecs-task-role}}  with the ARN of your ECS task role.
•Replace {{ecs-task-execution-role}}  with the ARN of your ECS task execution role.
•Replace {{demo-app-image}}  with your application image that has X-Ray SDK integration enabled. 
Change the name from demo-app to your own application name.
•Replace {{region}}  with the name of the AWS Region where you want to send the logs for 
containers. For example, us-west-2 .
{ 
    "family": "ecs-cwagent-ec2", 
    "taskRoleArn": " {{ecs-task-role}} ", 
    "executionRoleArn": " {{ecs-task-execution-role}} ", 
    "networkMode": "bridge", 
    "containerDefinitions": [ 
        { 
            "name": "demo-app", 
            "image": " {{demo-app-image}} ", 
            "links": [ 
                "cloudwatch-agent", 
                "xray-daemon" 
            ], 
            "logConfiguration": { 
                "logDriver": "awslogs", 
                "options": { 
                  "awslogs-create-group": "True", 
                  "awslogs-group": "/ecs/ecs-cwagent-ec2", 
                  "awslogs-region": " {{region}} ", 
                  "awslogs-stream-prefix": "ecs" 
                } 
            } 
        }, 
        { 
            "name": "xray-daemon", 
            "image": "public.ecr.aws/xray/aws-xray-daemon:latest", 
            "logConfiguration": { 
                "logDriver": "awslogs", 
                "options": { 
                  "awslogs-create-group": "True", 
                  "awslogs-group": "/ecs/ecs-cwagent-ec2", 
                  "awslogs-region": " {{region}} ", 
                  "awslogs-stream-prefix": "ecs" 
                } 
            } 
        }, 
        { 
            "name": "cloudwatch-agent", 
            "image": "public.ecr.aws/cloudwatch-agent/cloudwatch-agent:latest", 
            "secrets": [ 
                { 
                    "name": "CW_CONFIG_CONTENT", 
                    "valueFrom": "ecs-cwagent" 
                } 
            ], 
            "logConfiguration": { 
                "logDriver": "awslogs", 
                "options": { 
                  "awslogs-create-group": "True", 
                  "awslogs-group": "/ecs/ecs-cwagent-ec2", 
                  "awslogs-region": " {{region}} ", 
                  "awslogs-stream-prefix": "ecs" 
234Amazon CloudWatch User Guide
Deploying ServiceLens
                } 
            } 
        } 
    ], 
    "requiresCompatibilities": [ 
        "EC2" 
    ], 
    "cpu": "256", 
    "memory": "256"
}
Enter the following command to create the task deﬁnition. Replace {{region}}  with the Region of your 
cluster.
aws ecs register-task-definition \ 
    --cli-input-json file:///tmp/ecs-cwagent-ec2.json \ 
    --region {{region}}
Enter the following command to launch the task. Replace {{cluster-name}}  and {{region}}  with 
the name and Region of your cluster.
aws ecs run-task \ 
    --cluster {{cluster-name}}  \ 
    --task-definition ecs-cwagent-ec2 \ 
    --region {{region}} \ 
    --launch-type EC2
Fargate launch type
First, create the task deﬁnition. In this example, the container “demo-app” sends X-Ray SDK metrics to 
the CloudWatch agent and sends trace information to the X-Ray daemon.
Copy the following task deﬁnition to a local JSON ﬁle such as /tmp/ecs-cwagent-ec2.json . Replace 
the following placeholders:
•Replace {{ecs-task-role}}  with the Amazon Resource Name (ARN) of your ECS task role.
•Replace {{ecs-task-execution-role}}  with the ARN of your ECS task execution role.
•Replace {{demo-app-image}}  with your application image that has X-Ray SDK integration enabled. 
Change the name from demo-app to your own application name.
•Replace {{region}}  with the name of the AWS Region where you want to send the logs for 
containers. For example, us-west-2 .
{ 
    "family": "ecs-cwagent-fargate", 
    "taskRoleArn": " {{ecs-task-role}} ", 
    "executionRoleArn": " {{ecs-task-execution-role} }", 
    "networkMode": "awsvpc", 
    "containerDefinitions": [ 
        { 
            "name": "demo-app", 
            "image": " {{demo-app-image}} ", 
            "logConfiguration": { 
                "logDriver": "awslogs", 
                "options": { 
                  "awslogs-create-group": "True", 
                  "awslogs-group": "/ecs/ecs-cwagent-fargate", 
                  "awslogs-region": " {{region}} ", 
                  "awslogs-stream-prefix": "ecs" 
                } 
235Amazon CloudWatch User Guide
Deploying ServiceLens
            } 
        }, 
        { 
            "name": "xray-daemon", 
            "image": "public.ecr.aws/xray/aws-xray-daemon:latest", 
            "logConfiguration": { 
                "logDriver": "awslogs", 
                "options": { 
                  "awslogs-create-group": "True", 
                  "awslogs-group": "/ecs/ecs-cwagent-fargate", 
                  "awslogs-region": " {{region}} ", 
                  "awslogs-stream-prefix": "ecs" 
                } 
            } 
        }, 
        { 
            "name": "cloudwatch-agent", 
            "image": "public.ecr.aws/cloudwatch-agent/cloudwatch-agent:latest", 
            "secrets": [ 
                { 
                    "name": "CW_CONFIG_CONTENT", 
                    "valueFrom": "ecs-cwagent" 
                } 
            ], 
            "logConfiguration": { 
                "logDriver": "awslogs", 
                "options": { 
                  "awslogs-create-group": "True", 
                  "awslogs-group": "/ecs/ecs-cwagent-fargate", 
                  "awslogs-region": " {{region}} ", 
                  "awslogs-stream-prefix": "ecs" 
                } 
            } 
        } 
    ], 
    "requiresCompatibilities": [ 
        "FARGATE" 
    ], 
    "cpu": "512", 
    "memory": "1024"
}
Enter the following command to create the task deﬁnition. Replace {{region}}  with the Region of your 
cluster.
aws ecs register-task-definition \ 
    --cli-input-json file:///tmp/ecs-cwagent-fargate.json \ 
    --region {{region}}
If you already have a Fargate cluster set up, you can use the task deﬁnition you just created to launch the 
task. If you do not yet have any Fargate clusters, see Conﬁgure the Service for more information about 
the rest of the steps to set up Fargate.
Deploying the CloudWatch agent and the X-Ray daemon on Amazon EKS or 
Kubernetes
These topics explain how to install the X-Ray daemon and the CloudWatch agent on Amazon EKS or 
Kubernetes.
Deploying the X-Ray daemon on Amazon EKS or Kubernetes
To install the CloudWatch agent and the X-Ray daemon on Amazon EKS or Kubernetes, you can use a 
quick setup.
236Amazon CloudWatch User Guide
Deploying ServiceLens
To install the CloudWatch agent and the X-Ray daemon on Amazon EKS or Kubernetes
1. Ensure that the IAM role that is attached to the EC2 instance, or the Kubernetes worker node, has 
the CloudWatchAgentServerPolicy and AWSXRayDaemonWriteAccess policies attached.
2. Enter the following command:
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/master/k8s-deployment-manifest-templates/deployment-mode/daemonset/cwagent-
fluentd-xray/cwagent-fluentd-xray-quickstart.yaml | sed "s/{{cluster_name}}/ cluster-
name/;s/{{region_name}}/ region/" | kubectl apply -f -
What the Quick Start does
This section describes the quick setup of the CloudWatch agent and the X-Ray daemon.
•The quick setup speciﬁes inbound ports and protocols. Outbound connections do not have to be 
explicitly opened.
•The quick setup installs the X-Ray daemon via the kubectl apply -f  command with the following 
ﬁle content.
apiVersion: apps/v1
kind: DaemonSet
metadata: 
  name: xray-daemon 
  namespace: amazon-cloudwatch
spec: 
  selector: 
    matchLabels: 
      name: xray-daemon 
  template: 
    metadata: 
      labels: 
        name: xray-daemon 
    spec: 
      containers: 
        - name: xray-daemon 
          image: amazon/aws-xray-daemon:latest 
          imagePullPolicy: Always 
          ports: 
            - containerPort: 2000 
              hostPort: 2000 
              protocol: UDP 
          resources: 
            limits: 
              cpu:  100m 
              memory: 256Mi 
            requests: 
              cpu: 50m 
              memory: 50Mi 
      terminationGracePeriodSeconds: 60
•The quick setup updates the CloudWatch agent using the Docker image version/label 1.231221.0 or 
later, or the latest version. You can ﬁnd the image at https://hub.docker.com/r/amazon/cloudwatch-
agent .
•To enable the X-Ray SDK to read cluster name and Region information, the quick setup updates the 
CloudWatch agent using the Docker image version/label 1.231221.0, or later, or the latest. You can 
ﬁnd the image at https://hub.docker.com/r/amazon/cloudwatch-agent.
•To enable the X-Ray SDK to read cluster name and Region information, the quick setup created a ﬁle 
with the following content, and then applied it with the kubectl apply -f  command.
237Amazon CloudWatch User Guide
Deploying ServiceLens
---
# create role binding for XRay SDK to read config map
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
name: container-insights-discovery-role
namespace: amazon-cloudwatch
rules:
- apiGroups:
- ""
resourceNames:
- cluster-info
resources:
- configmaps
verbs:
- get 
  
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
name: service-users-cloudwatch-discovery-role-binding
namespace: amazon-cloudwatch
roleRef:
apiGroup: rbac.authorization.k8s.io
kind: Role
name: container-insights-discovery-role
subjects:
- apiGroup: rbac.authorization.k8s.io
kind: Group 
                       
name: system:serviceaccounts
•The quick setup exposes the CloudWatch agent port that receives X-Ray SDK metrics. The default port 
is UDP 25888.
ports: 
  - containerPort: 25888 
    hostPort: 25888 
    protocol: UDP
•The quick setup merges the agent conﬁguration JSON with the X-Ray SDK metrics conﬁguration with 
the following JSON.
{ 
  "logs": { 
    "metrics_collected": { 
      "emf": {} 
    } 
  }
}
Deploying the CloudWatch agent and the X-Ray daemon on Amazon EC2
Standard installations of the CloudWatch agent and the X-Ray daemon are suﬃcient to enable 
ServiceLens on Amazon EC2, with the addition of the following CloudWatch agent conﬁguration 
section example. For more information about installing the agent, see Installing the CloudWatch 
agent  (p. 859). For more information about the CloudWatch agent conﬁguration ﬁle, see  Manually 
create or edit the CloudWatch agent conﬁguration ﬁle (p. 903).
238Amazon CloudWatch User Guide
Using the service map
When you conﬁgure the CloudWatch agent, include this section in your conﬁguration ﬁle:
{ 
  "logs": { 
    "metrics_collected": { 
      "emf": {} 
    } 
  }
}
For more information about installing the X-Ray daemon, see X-Ray Daemon Conﬁguration.
Using the service map in ServiceLens
This section introduces the service map and helps you learn to navigate it.
To see a service map, you must have installed AWS X-Ray and completed the other ServiceLens 
deployment steps. For more information, see Deploying ServiceLens (p. 230).
You must also be signed in to an account that has the AWSXrayReadOnlyAccess  managed policy, as 
well as permissions that enable you to view the CloudWatch console. For more information, see How 
AWS X-Ray Works with IAM and Using Amazon CloudWatch dashboards (p. 33).
If you are signed in to an account set up as a monitoring account in CloudWatch cross-account 
observability, the service maps that you view includes nodes for the source accounts linked to this 
monitoring account. For more information, see CloudWatch cross-account observability (p. 846).
To begin using the service map
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose ServiceLens, Service Map.
A service map appears. It has the following parts:
•The AWS services and your custom applications that you have enabled tracing for are shown as 
circles or “nodes.” The size of each node indicates the relative number of traced requests that are 
going to that service.
•Edges, or connections between nodes, are shown as lines connecting the nodes. By default, the 
thickness of a line indicates the relative number of traced requests between those nodes.
You can use the dropdown menu in the top right to choose whether the number of traced 
requests or the average latency is used for node and edge sizing. You can also select to use 
constant size for all nodes and edges.
•The entry point to your nodes is shown on the left as a "Client." A "Client" represents both web 
server traﬃc and traced API operation requests.
•A node outlined partially in red, orange, or purple has issues. Some traced requests to these nodes 
have faults, errors, or throttling. The percentage of the color outline indicates the percentage of 
traced requests that are having issues.
•If a node has a triangle with an exclamation point next to it, at least one CloudWatch alarm 
related to that node is in alarm state.
3. If this is a monitoring account, by default the map includes nodes for all source accounts as well 
as the monitoring account. To ﬁlter the map by account, choose Filters  from the upper left and 
select the accounts that you want to focus on. Once an account ﬁlter is applied, service nodes from 
accounts that don't match the current ﬁlter are grayed out.
4. By default, the data in the map is for the most recent 6-hour time window. To change the timeframe 
of the window, use the controls at the upper right of the screen. The time range to be shown can be 
up to 6 hours, and can be as much as 30 days in the past.
239Amazon CloudWatch User Guide
Using the resource health view
5. If you have enabled X-Ray groups, you can ﬁlter the map by selecting an X-ray group in the ﬁlter.
6. To view metrics for a node, choose the node. To then see more information about that node, choose
View logs, View traces, or View dashboard .
7. To focus on the incoming and outgoing connections for a node, select the node and choose View 
connections near the top of the service map.
8. To see a pop-up displaying latency, errors, requests, and alarm summary statistics for a node, pause 
on that node.
9. To see latency statistics for an edge connection, pause on the line representing that edge.
10. To display alarm status for a service, along with line charts for latency, errors, and trace counts, 
choose that service node on the map.
For more information about this view, see the following procedures.
11. To view the service map as a table, choose List view  near the top of the screen. In this view, you 
can ﬁlter and sort the nodes and alarms that are displayed on the map. If you are in a monitoring 
account, you can ﬁlter by account ID or account label.
12. To see a dashboard with metrics for a speciﬁc node, select the node and then choose View 
dashboard  near the bottom of the screen.
To view traces for a service or application on the service map
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose ServiceLens, Service Map.
3. Choose the node that represents the service or application that you want to investigate.
CloudWatch displays line charts of latency, errors, and trace counts for that service, along with a 
summary of alarm status.
Above those charts are options to dive down to logs and traces for the service.
4. To view traces related to the service, choose View traces.
The console switches to the Traces view, focused on the service that you are investigating.
The Traces page supports querying by account ID or account label. To get started, enter a query that 
includes one or more account IDs. You can reﬁne your query by choosing Account from Reﬁne query 
by, selecting one or more account IDs from the list, and then choosing Add to query to modify the 
query at the top of the page.
Using the resource health view in ServiceLens
You can use the resource health view to automatically discover, manage, and visualize the health and 
performance of hosts across their applications in a single view. You can visualize the health of their hosts 
by a performance dimension such as CPU or memory, and slice and dice hundreds of hosts in a single 
view using ﬁlters. You can ﬁlter by tags or by use cases, such as hosts in the same Auto Scaling group or 
hosts that use the same load balancer,
Prerequisites
To make sure that you get the full beneﬁt of the resource health view, check that you have the following 
prerequisites.
•To see the memory utilization of your hosts and use it as a ﬁlter, you must install the CloudWatch 
agent on your hosts and set it up to send a memory metric to CloudWatch in the default
CWAgent namespace. On Linux and macOS instances, the CloudWatch agent must send the
240Amazon CloudWatch User Guide
Using the resource health view
mem_used_percent  metric. On Windows instances, the agent must send the Memory % Committed 
Bytes In Use  metric. These metrics are included if you use the wizard to create the CloudWatch 
agent conﬁguration ﬁle and select any of the pre-deﬁned sets of metrics. Metrics collected by the 
CloudWatch agent are billed as custom metrics. For more information, see Installing the CloudWatch 
agent  (p. 859).
When you use the CloudWatch agent to collect these memory metrics to use with the resource health 
view, you must include the following section in the CloudWatch agent conﬁguration ﬁle. This section 
contains the default dimension settings and is created by default, so do not change any part of this 
section to anything diﬀerent than what is shown in the following example.
"append_dimensions": { 
  "ImageId": "${aws:ImageId}", 
  "InstanceId": "${aws:InstanceId}", 
  "InstanceType": "${aws:InstanceType}", 
  "AutoScalingGroupName": "${aws:AutoScalingGroupName}"
},
•To view all the information available in the resource health view, you must be signed in to an account 
that has the following permissions. If you are signed on with fewer permissions, you can still use the 
resource health view but some performance data will not be visible.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Action": [ 
                "autoscaling:Describe*", 
                "cloudwatch:Describe*", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "logs:Get*", 
                "logs:Describe*", 
                "sns:Get*", 
                "sns:List*", 
                "ec2:DescribeInstances", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeRegions" 
            ], 
            "Effect": "Allow", 
            "Resource": "*" 
        } 
    ]
}
To view resource health in your account
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Resource Health.
The resource health page appears, showing a square for each host in your account. Each square is 
colored based on the current status of that host, based on the setting for Color by. Host squares 
with an alarm symbol have one or more alarms currently in ALARM state.
You can see up to 500 hosts in a single view. If you have more hosts in your account, use the ﬁlter 
settings in step 6 of this procedure.
3. To change what criteria is used to show each host's health, choose a setting for Color by. You can 
choose CPU Utilization , Memory Utilization, or Status check . Memory utilization metrics are 
241Amazon CloudWatch User Guide
ServiceLens troubleshooting
available only for hosts that are running the CloudWatch agent and have it conﬁgured to collect 
memory metrics and send them to the default CWAgent namespace. For more information, see
Collect metrics and logs from Amazon EC2 instances and on-premises servers with the CloudWatch 
agent  (p. 857).
4. To change the thresholds and the colors that are used for the health indicators in the grid, choose 
the gear icon above the grid.
5. To toggle whether to show alarms in the host grid, choose or clear Show alarms across all metrics.
6. To split the hosts in the map into groups, choose a grouping criteria for Group by.
7. To narrow the view to fewer hosts, choose a ﬁlter criteria for Filter by. You can ﬁlter by tags and by 
resource groupings such as Auto Scaling group, instance type, security group, and more.
8. To sort hosts, choose a sorting criteria for Sort by. You can sort by status check results, instance 
state, CPU or memory utilization, and the number of alarms that are in ALARM state.
9. To see more information about a host, choose the square that represents that host. A popup pane 
appears. To then dive deeper into information about that host, choose View dashboard  or View on 
list.
ServiceLens troubleshooting
The following sections can help if you're having issues with CloudWatch ServiceLens.
I don't see all my logs
How to conﬁgure logs to appear in ServiceLens depends on the service.
•API Gateway logs appear if logging is turned on in API Gateway.
•Amazon ECS and Amazon EKS logs appear if you are using the latest versions of the X-Ray SDK and the 
CloudWatch agent. For more information, see Deploying ServiceLens (p. 230).
•Lambda logs appear if the request ID is in the log entry. This happens automatically for the situations 
listed in the following table. For other cases, where the runtime does not automatically include the 
trace ID, you can manually include the trace ID.
Runtime Method Request ID automatically in log 
entry?
Java context.getLogger.log
aws-lambda-java-log4j2Yes
Java System.out.println No
Python context.log
logging.info/error/log/etc...Yes
Python print No
Node.js context.log
console.log/info/error/etc...Yes
dotnet context.Logger.log
Console.WriteLine()No
Go fmt.Printf No
242Amazon CloudWatch User Guide
Using Internet Monitor
Runtime Method Request ID automatically in log 
entry?
log.Print
Ruby puts No
I don't see all my alarms on the service map
ServiceLens shows only the alert icon for a node if any alarms associated with that node are in the 
ALARM state.
ServiceLens associates alarms with nodes using the following logic:
•If the node represents an AWS service, then all alarms with the namespace associated with that service 
are associated with the node. For example, a node of type AWS::Kinesis  is linked with all alarms that 
are based on metrics in the CloudWatch namespace AWS/Kinesis .
•If the node represents an AWS resource, then the alarms on that speciﬁc resource are linked. For 
example, a node of type AWS::DynamoDB::Table  with the name “MyTable” is linked to all alarms 
that are based on a metric with the namespace AWS/DynamoDB  and have the TableName  dimension 
set to MyTable .
•If the node is of unknown type, which is identiﬁed by a dashed border around the name, then no 
alarms are associated with that node.
I don't see some AWS resources on the service map
For AWS resources to be traced on the service map, the AWS SDK must be captured using the X-Ray SDK. 
For more information about X-Ray, see What Is AWS X-Ray.
Not every AWS resource is represented by a dedicated node. Some AWS services are represented by a 
single node for all requests to the service. The following resource types are displayed with a node per 
resource:
•AWS::DynamoDB::Table
•AWS::Lambda::Function
Lambda functions are represented by two nodes— one for the Lambda Container, and one for the 
function. This helps to identify cold start problems with Lambda functions. Lambda container nodes 
are associated with alarms and dashboards in the same way as Lambda function nodes.
•AWS::ApiGateway::Stage
•AWS::SQS::Queue
•AWS::SNS::Topic
There are too many nodes on my service map
Use X-Ray groups to break your map into multiple maps. For more information, see  Using Filter 
Expressions with Groups.
Using Amazon CloudWatch Internet Monitor
Amazon CloudWatch Internet Monitor provides visibility into how internet issues impact the 
performance and availability between your applications hosted on AWS and your end users. It can 
243Amazon CloudWatch User Guide
Using Internet Monitor
reduce the time it takes for you to diagnose internet issues from days to minutes. Internet Monitor uses 
the connectivity data that AWS captures from its global networking footprint to calculate a baseline 
of performance and availability for internet-facing traﬃc. This is the same data that AWS uses to 
monitor internet uptime and availability. With those measurements as a baseline, Internet Monitor 
raises awareness for you when there are signiﬁcant problems for your end users (clients) in the diﬀerent 
geographic locations where your application runs.
In the Amazon CloudWatch console, you can see a global view of traﬃc patterns and health events, and 
easily drill down into information about events, at diﬀerent geographic granularities (locations). You 
can clearly visualize impact, and pinpoint the client locations and networks (ASNs, typically internet 
service providers or ISPs) that are aﬀected. If Internet Monitor determines that an internet availability or 
performance issue is caused by a speciﬁc ASN or by the AWS network, it provides that information.
Key features of Internet Monitor
•Internet Monitor suggests insights and recommendations that can help you improve your end 
users' experience. You can explore, in near real-time, how to improve the projected latency of your 
application by switching to use other services, or by rerouting traﬃc to your workload through 
diﬀerent AWS Regions.
•With Internet Monitor, you can quickly identify what's impacting your application's performance and 
availability, so that you can track down and address issues.
•Internet Monitor publishes internet measurements to CloudWatch Logs and CloudWatch Metrics, 
to support using CloudWatch tools with health information for locations and ASNs (internet service 
providers) speciﬁc to your application. Optionally, you can also publish internet measurements to 
Amazon S3.
•Internet Monitor sends health events to Amazon EventBridge so that you can set up notiﬁcations. 
If an issue is caused by the AWS network, you also automatically receive an AWS Health Dashboard 
notiﬁcation with the steps that AWS is taking to mitigate the problem.
How to use Internet Monitor
To use Internet Monitor, you create a monitor  and associate your application's resources with it—VPCs, 
Network Load Balancers, CloudFront distributions, or WorkSpaces directories—to enable Internet 
Monitor to know where your application's internet-facing traﬃc is. Internet Monitor then publishes 
internet measurements from AWS that are speciﬁc to the city-networks , that is, the client locations 
and ASNs (typically internet service providers or ISPs), where clients access your application. For 
more information, see How Amazon CloudWatch Internet Monitor works (p. 248). To begin working 
with Internet Monitor, see Getting started with Amazon CloudWatch Internet Monitor using the 
console (p. 252).
Contents
•Supported AWS Regions for Amazon CloudWatch Internet Monitor (p. 245)
•Pricing for Amazon CloudWatch Internet Monitor (p. 246)
•Components and terms for Amazon CloudWatch Internet Monitor (p. 246)
•How Amazon CloudWatch Internet Monitor works (p. 248)
•Amazon CloudWatch Internet Monitor example use cases (p. 252)
•Getting started with Amazon CloudWatch Internet Monitor using the console (p. 252)
•Examples of using the CLI with Amazon CloudWatch Internet Monitor (p. 260)
•Monitor and optimize with the Internet Monitor dashboard (p. 267)
•Viewing log ﬁles with CloudWatch tools (p. 273)
•Creating alarms with Amazon CloudWatch Internet Monitor (p. 282)
•Using Amazon CloudWatch Internet Monitor with Amazon EventBridge (p. 282)
•Data protection and data privacy with Amazon CloudWatch Internet Monitor (p. 283)
244Amazon CloudWatch User Guide
Supported Regions
•Identity and Access Management for Amazon CloudWatch Internet Monitor (p. 283)
•Quotas in Amazon CloudWatch Internet Monitor (p. 291)
Supported AWS Regions for Amazon CloudWatch 
Internet Monitor
The AWS Regions where Amazon CloudWatch Internet Monitor is supported are listed in this section. 
For a current list of Regions that Internet Monitor is supported in, including opt-in Regions, see Amazon 
CloudWatch Internet Monitor endpoints and quotas in the Amazon Web Services General Reference.
For Internet Monitor, Regional support depends on the types of resources that you add to your monitor:
•For Amazon CloudFront distributions and Amazon WorkSpaces directories, Internet Monitor is 
available in all the Regions listed here, with no special restrictions, including Regions listed for opt-in 
support and for default support.
•For Amazon Virtual Private Clouds (VPCs) and Network Load Balancers (NLBs), the VPCs or NLBs from 
an opt-in Region can be added only to a monitor created in the same Region.
Note that Internet Monitor stores data for a monitor in only the AWS Region in which you create the 
monitor, although a monitor can include resources in multiple Regions.
Region name (Opt-in support) Region
Africa (Cape Town) af-south-1
Asia Paciﬁc (Hong Kong) ap-east-1
Europe (Milan) eu-south-1
Middle East (Bahrain) me-south-1
Region name (Default support) Region
US East (Ohio) us-east-2
US East (N. Virginia) us-east-1
US West (N. California) us-west-1
US West (Oregon) us-west-2
Asia Paciﬁc (Hyderabad) ap-south-2
Asia Paciﬁc (Jakarta) ap-southeast-3
Asia Paciﬁc (Melbourne) ap-southeast-4
Asia Paciﬁc (Mumbai) ap-south-1
Asia Paciﬁc (Osaka) ap-northeast-3
Asia Paciﬁc (Seoul) ap-northeast-2
Asia Paciﬁc (Singapore) ap-southeast-1
245Amazon CloudWatch User Guide
Pricing
Region name (Default support)Region
Asia Paciﬁc (Sydney) ap-southeast-2
Asia Paciﬁc (Tokyo) ap-northeast-1
Canada (Central) ca-central-1
Europe (Frankfurt) eu-central-1
Europe (Ireland) eu-west-1
Europe (London) eu-west-2
Europe (Paris) eu-west-3
Europe (Spain) eu-south-2
Europe (Stockholm) eu-north-1
Europe (Zurich) eu-central-2
Middle East (UAE) me-central-1
South America (São Paulo) sa-east-1
Pricing for Amazon CloudWatch Internet Monitor
With Amazon CloudWatch Internet Monitor, there are no upfront costs or long-term commitments. 
Pricing for Internet Monitor has two components: a per monitored resource fee and a per city-network 
fee. A city-network  is the location where clients access your application resources from and the network 
(ASN, such as an internet service provider or ISP) that clients access the resources through.
You choose a percentage of traﬃc to monitor when you create a monitor. To help control your bill, 
you can also set a limit for the maximum number of city-networks to monitor. You can update the 
percentage of traﬃc to monitor or the maximum city-networks limit at any time by editing your monitor. 
The ﬁrst 100 city-networks (across all monitors per account) are included. After that, you only pay for the 
actual additional number of city-networks that you monitor, up to the maximum number.
For example, a large global company could choose to monitor 100% of its internet-facing traﬃc, and set 
a city-networks maximum of 50,000, for one monitor with one resource. Assuming the traﬃc reached 
50,000 city-networks, that portion of its bill would be around 2,700 USD/month. For more information, 
see Choosing a city-networks maximum limit (p. 256).
You can try out diﬀerent options with the pricing calculator. To explore pricing options, on the Pricing 
calculator for CloudWatch page, scroll down to Internet Monitor. For more information about pricing, see 
the Amazon CloudWatch pricing page.
Components and terms for Amazon CloudWatch 
Internet Monitor
Amazon CloudWatch Internet Monitor uses or references the following.
Monitor
A monitor includes the resources for a single application that you want to view internet performance 
and availability measurements for, and that you want to get health event alerts about. When 
246Amazon CloudWatch User Guide
Components
you create a monitor for an application, you add resources for the application to deﬁne the cities 
(locations) for Internet Monitor to monitor. Internet Monitor uses the traﬃc patterns from the 
application resources that you add so that it can publish internet performance and availability 
measurements speciﬁc to just the locations and ASNs (typically, internet service providers or ISPs) 
that communicate with your application. In other words, the resources that you add create a scope 
of the city-networks  that you want Internet Monitor to monitor and that you want it to publish 
measurements for.
Monitored resource
A resource that you add to a monitor is a monitored resource in Internet Monitor. That is:
•Each VPC that you add in a Region is a monitored resource. When you add a VPC, Internet Monitor 
monitors the traﬃc for any internet-facing application in the VPC, for example, an application 
hosted on an Amazon EC2 instance, behind an Network Load Balancer, or an AWS Fargate 
container.
•Each Network Load Balancer that you add is a monitored resource.
•Each CloudFront distribution that you add is a monitored resource.
•Each WorkSpaces directory that you add in a Region is a monitored resource.
Autonomous System Number (ASN)
In Internet Monitor, an ASN typically refers to an internet service provider (ISP), such as Verizon or 
Comcast. An ASN is a network provider that a client uses to access your internet application. An 
Autonomous System (AS) is a set of internet routable internet protocol (IP) preﬁxes that belong 
to a network or a collection of networks that are all managed, controlled, and supervised by one 
organization.
City-network (location and ASN)
A city-network is the location (such as a city) where clients access your application resources from 
and the ASN, typically an internet service provider (ISP), that clients access the resources through. 
To help control your bill, you set a limit for the maximum number of city-networks for Internet 
Monitor to monitor for each monitor. You pay only for the actual number of city-networks that you 
monitor, up to the maximum number. For more information, see Choosing a city-network maximum 
limit  (p. 256).
Internet measurements
Internet Monitor publishes internet measurements into log ﬁles in CloudWatch Logs every ﬁve 
minutes for the top 500 city-networks (client locations and ASNs, typically internet service providers 
or ISPs) in your account. These measurements quantify the performance score, availability score, 
bytes transferred (bytes in and bytes out), and round-trip time for your application's city-networks. 
These are measurements for the city-networks speciﬁc to your VPCs, Network Load Balancers, 
CloudFront distributions, or WorkSpaces directories. Optionally, you can choose to publish internet 
measurements and events for all monitored city-networks (up to the 500,000 city-networks service 
limit) to an Amazon S3 bucket.
Metrics
Internet Monitor generates aggregated metrics for CloudWatch metrics, for global traﬃc to your 
application and global traﬃc to each AWS Region. For more information, see Using CloudWatch 
Metrics with Amazon CloudWatch Internet Monitor (p. 277).
Health event
Internet Monitor creates a health event to alert you to a speciﬁc problem that aﬀects your 
application. Internet Monitor detects internet issues, such as increased network latency, across the 
world. It then uses its historical internet measurements from across the AWS global infrastructure 
footprint to calculate the impact of current issues on your application, and creates health events. 
Internet Monitor, by default, creates health events based on both overall impact and local 
impact thresholds. For more information about conﬁguring thresholds, see Change health event 
thresholds (p. 268).
247Amazon CloudWatch User Guide
How Internet Monitor works
Each health event includes information about the impacted city-networks. You can view health 
events in the CloudWatch console, or by using the AWS SDK or AWS CLI with Internet Monitor API 
actions. Internet Monitor also sends Amazon EventBridge notiﬁcations for health events. For more 
information, see When Internet Monitor creates and resolves health events (p. 251).
Thresholds
Internet Monitor creates health events based on both overall thresholds and local thresholds. You 
can change the default thresholds and conﬁgure other options, such as turning oﬀ local thresholds. 
For more information about conﬁguring thresholds, see Change health event thresholds (p. 268).
Performance and availability scores
By analyzing the data that AWS collects, Internet Monitor can detect when the performance and 
availability for your application has dropped, compared to estimated baselines that Internet Monitor 
calculates. To make it easier to see those drops, Internet Monitor reports the information to you 
as scores. A performance score represents the estimated percentage of traﬃc that is not seeing a 
performance drop. Similarly, an availability score represents the estimated percentage of traﬃc that 
is not seeing a availability drop. For more information, see How AWS calculates performance and 
availability scores (p. 250).
Bytes transferred and monitored bytes transferred
Bytes transferred is the total number of bytes of ingress and egress traﬃc between an application in 
AWS and the city-network (that is, the location and the ASN, typically the internet service provider) 
where clients access an application. Monitored bytes transferred is a similar metric, but includes only 
bytes for monitored traﬃc.
Round-trip time
Round-trip time (RTT) is how long it takes for a request from a client user to return a response to 
the user. When RTT is aggregated across client locations (cities or other geographies), the value is 
weighted by how much of your application traﬃc is driven by each client location.
How Amazon CloudWatch Internet Monitor works
This section provides information about how Amazon CloudWatch Internet Monitor works. This includes 
descriptions of how AWS collects the data that it uses to help detect connectivity issues across the 
internet, and how performance and availability scores are calculated.
Contents
•The AWS advantage (p. 248)
•How AWS measures connectivity issues (p. 249)
•How AWS calculates availability and RTT (p. 249)
•How Internet Monitor calculates performance and availability scores (p. 250)
•Geolocation accuracy in Internet Monitor (p. 250)
•What Internet Monitor includes in calculations for TTFB and RTT (latency) (p. 250)
•When Internet Monitor creates and resolves health events (p. 251)
•Health event report timing (p. 251)
•How Internet Monitor works with IPv4 and IPv6 traﬃc (p. 251)
The AWS advantage
Internet Monitor focuses monitoring on just the subset of the internet that's accessed by the users of 
your AWS resources, instead of broadly monitoring your website from every Region in the world as 
other tools do. It’s also a cost eﬀective solution, aﬀordable for large and small companies.
248Amazon CloudWatch User Guide
How Internet Monitor works
Internet Monitor uses the same powerful probes and issue-detection algorithms that AWS takes 
advantage of internally and alerts you to connectivity issues that aﬀect your application by 
creating health events in Internet Monitor. Internet Monitor then gives you access to the resulting 
performance and availability map, by overlaying the traﬃc proﬁle that it creates from your active 
viewers, based on your application resources.
Using this information, Internet Monitor shows you just relevant events (that is, the events from 
places where you have active viewers), and just the impact those events have on your overall viewer 
volume. So, how much an impact an event has, percentage-wise, is based on your total traﬃc world-
wide.
Internet Monitor publishes to CloudWatch Logs internet measurements every ﬁve minutes for the 
top 500 city-networks (client locations and ASNs, typically internet service providers or ISPs) that 
send traﬃc to each monitor. Optionally, you can choose to publish internet measurements for all 
monitored city-networks (up to the 500,000 city-networks service limit) to an Amazon S3 bucket. 
For more information, see Publishing internet measurements to Amazon S3 in Amazon CloudWatch 
Internet Monitor  (p. 258).
The beneﬁts of Internet Monitor include the following:
•Using Internet Monitor doesn't place additional load or cost on your application that's hosted on 
AWS.
•You don't need to include performance measurement code in your client-side resources, or in your 
application.
•You can get visibility into performance and availability across the internet that your application is 
connected to, including "last mile" information.
Note that because Internet Monitor creates measurements based on your AWS resources, Internet 
Monitor only creates events that are speciﬁc to your application traﬃc. Global internet issues in 
general are not reported. In addition, when the service location is an AWS Region, the measurements 
and events emitted are designed to represent connectivity at a Regional level and don’t accurately 
represent connectivity between an end user location and an Availability Zone.
How AWS measures connectivity issues
Amazon CloudWatch Internet Monitor uses internet connectivity data between diﬀerent AWS 
Regions and Amazon CloudFront points of presence (POPs) to diﬀerent locations through networks 
or Autonomous System Numbers (ASNs), typically internet service providers (ISPs). This connectivity 
data is used internally by operators in AWS, on a daily basis, to proactively detect connectivity issues 
across the global internet.
For every AWS Region, we know which portions of the internet communicate with the Region and do 
the following:
•We actively monitor those portions of the internet, with a rolling 30-day window.
•We use both network and higher-level protocol probes, including both inbound and outbound 
probing.
How AWS calculates availability and RTT
AWS has active and passive probes that measure the latency (performance) at the 90th percentile 
and reachability (availability) from every AWS Region and from the CloudFront service to the entire 
internet. Abnormal patterns in connectivity between a service and a customer location is monitored, 
and then reported as alerts to the customer.
Round-trip time (RTT) is how long it takes for a request from the user to return a response to the 
user. When round-trip time is aggregated across end user locations, the value is weighted by the 
amount of your traﬃc that is driven by each end user location.
As an example, with two end user locations, one serving 90% of traﬃc with a 5 ms RTT, and the 
other serving 10% of traﬃc with a 10 ms RTT, the result is an aggregated RTT of 5.5 ms (which 
comes from 5 ms * 0.9 + 10 ms * 0.1).
249Amazon CloudWatch User Guide
How Internet Monitor works
Note that there are diﬀerences for resources about measuring last-mile latency. For Internet Monitor 
latency measurements, VPCs, Network Load Balancers, and WorkSpaces directories do not include 
last-mile latency.
How Internet Monitor calculates performance and availability scores
AWS has substantial historical data about internet performance and availability between AWS 
services and diﬀerent city-networks (locations and ASNs). By applying statistical analysis to the data, 
Internet Monitor can detect when the performance and availability for your application has dropped, 
compared to an estimated baseline that it has calculated. To make it easier to see those drops, that 
information is reported to you in the form of health scores: a performance score and an availability 
score.
Health scores are calculated at diﬀerent granularities. At the ﬁnest granularity, we compute the 
health score for a geographic region, such as a city or a metro area, and an ASN (a city-network ). 
We also roll up the individual health scores to overall health score numbers for an application in a 
monitor. If you view performance or availability scores without ﬁltering for any speciﬁc geography or 
service provider, Internet Monitor provides overall health scores.
Overall health scores span your whole application for the speciﬁed time period. When the 
performance or availability score for your application's city-network pairs across your application 
reaches or drops below the corresponding health event threshold for performance or availability 
Internet Monitor triggers a health event. By default, the threshold is 95% for both overall 
performance and availability. Internet Monitor also creates health events based on local thresholds
—if the option is enabled, as it is by default—based on values that you conﬁgure. To learn more 
about conﬁguring health event thresholds, see Change health event thresholds (p. 268).
When you explore information in the monitor and log ﬁles to investigate issues and learn more, you 
can ﬁlter by speciﬁc cities (locations), networks (ASNs or internet service providers), or both. So, you 
can use ﬁlters to see health scores for diﬀerent cities, ASNs, or city-network pairs, depending on the 
ﬁlters that you choose.
•An availability score  represents the estimated percentage of traﬃc that is not seeing an availability 
drop. Internet Monitor estimates the percentage of traﬃc experiencing a drop from the total 
traﬃc seen and availability metrics measurements. For example, an availability score of 99% for 
an end user and service location pair is equivalent to 1% of the traﬃc experiencing an availability 
drop for that pair.
•A performance score represents the percentage of traﬃc that is not seeing a performance drop. 
For example, a performance score of 99% for an end user and service location pair is equivalent to 
1% of the traﬃc experiencing a performance drop for that pair.
Geolocation accuracy in Internet Monitor
For location information, Internet Monitor uses IP-geolocation data supplied by MaxMind . The 
accuracy of the location information in Internet Monitor measurements depends on the accuracy of 
MaxMind's data.
What Internet Monitor includes in calculations for TTFB and RTT (latency)
Time to ﬁrst byte (TTFB) refers to the time between when a client makes a request and when it 
receives the ﬁrst byte of information from the server. AWS calculations for TTFB measure the time 
elapsed from Amazon EC2 or Amazon CloudFront to the Internet Monitor measurement node 
(including the last mile of the node). That is, Internet Monitor measures time from the user to the 
Amazon EC2 Region for TTFB for EC2, and from the user to CloudFront for TTFB for CloudFront.
For round-trip time (RTT), Internet Monitor includes the time from the city-network (that is, the 
client location and ASN, typically an internet service provider), as mapped by the public IP address, 
to the AWS Region. This means that Internet Monitor does not have last mile visibility for users who 
access the internet from behind a gateway or VPN.
250Amazon CloudWatch User Guide
How Internet Monitor works
Note that there are diﬀerences for resources about measuring last-mile latency. For Internet Monitor 
latency measurements, VPCs, Network Load Balancers, and WorkSpaces directories do not include 
last-mile latency.
Internet Monitor includes average TTFB information in the Traﬃc optimization suggestions section 
of the Traﬃc insights tab on the CloudWatch dashboard, to help you evaluate options for diﬀerent 
setups for your application that can improve performance.
When Internet Monitor creates and resolves health events
Internet Monitor creates and closes health events for the application traﬃc that you monitor based 
on the current thresholds that are set. Internet Monitor has a default threshold conﬁguration, and 
you can also set your own conﬁguration for thresholds. Internet Monitor determines the overall 
impact that connectivity issues are having on your application, and the impact on local areas where 
your application has clients, and creates health events when the thresholds are crossed.
Internet Monitor calculates the impact of connectivity issues on a client location based on the 
historical data about internet performance and availability for network traﬃc that's available to 
the service through AWS. It applies the information relevant to your application, based on the 
geographic locations for ASNs and services where clients use your application: the city-network pairs 
that are aﬀected. The locations are determined from the resources that you add to your monitor. 
Then Internet Monitor uses statistical analysis to detect when performance and availability has 
dropped, aﬀecting the client experience for your application.
The performance and availability scores that Internet Monitor calculates are represented as the 
percentage of traﬃc that is not seeing a drop. Impact is the opposite of this: it's a representation of 
how much an issue is problematic for a customer's end users. So if there is a global availability drop 
of 93%, for example, the corresponding impact would be 7%.
When the performance or availability score for your application's city-network pairs globally reaches 
or drops below the corresponding health event threshold for performance or availability, this 
triggers Internet Monitor to generate a health event. By default, the threshold is 95% for both 
performance and availability. The values to meet, or drop below, the threshold are cumulative, so it 
could mean several smaller events combine to meet the threshold percentage, or that a single event 
meets or falls below the threshold level.
As long as performance or availability scores that triggered the event are at or below the 
corresponding health event threshold percentage for overall impact, the health event stays active. 
When the score or combined scores that triggered the event rise above the threshold, Internet 
Monitor resolves the health event.
Internet Monitor also creates health events based on local thresholds and the percentage of overall 
traﬃc that an issue has an impact on. You can conﬁgure options for local thresholds, or turn oﬀ local 
thresholds altogether.
To learn more about conﬁguring health event thresholds, see Change health event 
thresholds (p. 268).
Health event report timing
Internet Monitor uses an aggregator to gather all signals about internet issues, to create health 
events in monitors within minutes.
When possible, Internet Monitor analyzes the origin of a health event, to determine whether it 
was caused by AWS or an ASN. Health event analysis continues after an event is resolved. Internet 
Monitor can update events with new information for up to an hour.
How Internet Monitor works with IPv4 and IPv6 traﬃc
Internet Monitor measures health toward a network over only IPv4, and shows you health events, 
and availability and performance metrics, if you serve traﬃc to that network over any IP family (IPv4 
251Amazon CloudWatch User Guide
Use cases
or IPv6). If you serve traﬃc from a dual-stack resource, such as a dual-stack CloudFront distribution, 
Internet Monitor raises a health event and shows a drop in a performance score or availability score 
only if IPv4 traﬃc has the same issues for the resoure as IPv6 traﬃc does.
Note that the Internet Monitor metrics for overall bytes in and bytes out accurately reﬂect all 
internet traﬃc (IPv4 and IPv6).
Amazon CloudWatch Internet Monitor example use 
cases
In this section, we describe several speciﬁc examples, with links to blog posts with more details. These 
examples show how you can use the capabilities of Amazon CloudWatch Internet Monitor to help you 
monitor your application and improve your users' experience.
Set up alerts and decide on actions to take
You can use Internet Monitor to get insights about average internet performance metrics over time, 
and about health events by city-network (client location and ASN, typically an internet service 
provider). Using Internet Monitor, you can identify the events that are impacting end user experience 
for applications hosted on Amazon Virtual Private Clouds (VPCs), Network Load Balancers, Amazon 
WorkSpaces, or Amazon CloudFront.
After you create a monitor, you have several options for how to be alerted about Internet Monitor 
health events. These include notiﬁcations based on CloudWatch Alarms using event metrics 
or Amazon EventBridge rules to ﬁlter for health events. You can choose diﬀerent options for 
notiﬁcations or actions based on alarms, including, for example, AWS SMS notiﬁcations or updates 
to a CloudWatch log group.
To see an example with detailed guidance, see the following blog post: Introducing Amazon 
CloudWatch Internet Monitor.
Identify latency issues and improve TTFB to improve multiplayer gameplay experience
Use Internet Monitor to help you to quickly identify where game players in global cloud gaming 
apps are experiencing latency issues globally, and provide insights into improving performance. By 
identifying where the most players currently have the slowest time to ﬁrst byte (TTFB), you know 
how to improve latency to make your biggest player base happier.
Now, when you're ready to deploy the next EC2 server for your game, choose the AWS Region that 
Internet Monitor suggests will lower TTFB in the area with the high latency and large group of 
players.
For details about setting up and using Internet Monitor for this use case, see the following blog post:
Using Amazon CloudWatch Internet Monitor for a Better Gaming Experience.
Getting started with Amazon CloudWatch Internet 
Monitor using the console
To get started with Amazon CloudWatch Internet Monitor, you must create a monitor  in Internet Monitor 
for your application by adding AWS resources that it uses and setting several conﬁguration options. This 
chapter provides the procedure for adding a monitor in the console. It also includes a section with more 
details about resources in Internet Monitor, and then additional sections with descriptions about and 
limitations for the diﬀerent options that you can or must conﬁgure for your monitor.
Contents
252Amazon CloudWatch User Guide
Getting started
•Creating a monitor in Amazon CloudWatch Internet Monitor using the console (p. 253)
•Adding resources to your monitor (p. 254)
•Choosing an application traﬃc percentage to monitor (p. 255)
•Choosing a city-networks maximum limit (p. 256)
•Publishing internet measurements to Amazon S3 in Amazon CloudWatch Internet Monitor (p. 258)
•Using an Internet Monitor monitor  (p. 258)
•Editing or deleting an Internet Monitor monitor (p. 259)
Creating a monitor in Amazon CloudWatch Internet Monitor 
using the console
You create a monitor in Amazon CloudWatch Internet Monitor for your application by adding AWS 
resources that it uses, and then setting several conﬁguration options. The resources that you add, 
Amazon Virtual Private Clouds (VPCs), Network Load Balancers, CloudFront distributions, or WorkSpaces 
directories, provide the information for Internet Monitor to map internet traﬃc information for your 
application. After you create your monitor, wait 10-15 minutes, and then you can use the Internet 
Monitor monitor, or other tools, to visualize and explore performance and availability about your client 
usage. These tools provide insights for you using your application traﬃc's measurements, gathered and 
published by the monitor, for example, to CloudWatch Logs.
Typically, it's simplest to create one monitor in Internet Monitor for one application. Within the same 
monitor, you can search and sort through measurements and metrics in Internet Monitor log ﬁles by 
diﬀerent locations and ASNs (typically internet service providers), or other information. It's not necessary 
to create separate monitors for applications in diﬀerent areas, for example.
The steps here walk you through setting up your monitor by using the console. To see examples of using 
the AWS Command Line Interface with the Internet Monitor API actions, to create a monitor, view events, 
and so on, see Examples of using the CLI with Amazon CloudWatch Internet Monitor (p. 260).
To create a monitor using the console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the left navigation pane, under Application monitoring , choose Internet Monitor .
3. Choose Add monitor .
4. For Monitor name , enter the name you want to use for this monitor in Internet Monitor.
5. Choose Add resources, and then select the resources to set the monitoring boundaries for Internet 
Monitor to use for this monitor.
Note
Be aware of the following:
•If you add only VPCs, at least one VPC must have an Internet Gateway attached to it, to 
make sure that it has internet connectivity.
•You can add a combination of VPCs and CloudFront distributions, or you can add 
WorkSpaces directories, or you can add Network Load Balancers. You can't add Network 
Load Balancers or WorkSpaces directories together with other types of resources.
6. Choose a percentage of your internet traﬃc to monitor.
7. Optionally, under City-networks maximum limit, select a limit for the number of city-networks 
(locations and ASNs, or internet service providers) that Internet Monitor will monitor traﬃc for. 
You can change this at any time by editing your monitor. See Choosing a city-networks maximum 
limit  (p. 256).
253Amazon CloudWatch User Guide
Getting started
If you set a city-networks maximum limit, it sets a cap for the number of city-networks that Internet 
Monitor monitors for your application, regardless of the percentage of traﬃc that you choose to 
monitor.
8. Optionally, specify an Amazon S3 bucket name and custom preﬁx to publish internet measurements 
to Amazon S3 for all monitored city-networks.
Internet Monitor publishes the top 500 (by traﬃc volume) internet measurements for your 
application to CloudWatch Logs every ﬁve minutes. If you choose to publish measurements to S3, 
measurements are still published to CloudWatch Logs. For more information, see Publishing internet 
measurements to Amazon S3 in Amazon CloudWatch Internet Monitor (p. 258).
9. Choose Next.
10. Optionally, add a tag for your monitor.
11. Choose Next.
12. Review your monitor, including the resources that you've chosen to add.
13. Choose Create monitor .
After you create a monitor, you can edit the monitor at any time, for example, to change the application 
traﬃc percentage, update the maximum city-networks limit or add or remove resources. You can also 
delete the monitor. To do these tasks in the Internet Monitor console, choose a monitor, and then choose 
an option in the Action menu. Note that you can’t change the name of a monitor.
To view the Internet Monitor dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , then Internet Monitor .
The Monitors  tab displays a list of the monitors that you have created.
To see more information about a speciﬁc monitor, choose a monitor.
Adding resources to your monitor
When you create a monitor, you associate your application's resources with it: Amazon Virtual Private 
Clouds (VPCs), Network Load Balancers, Amazon CloudFront distributions, or Amazon WorkSpaces 
directories. Then Internet Monitor knows where your application's internet-facing traﬃc and clients are 
located, so it can determine the relevant measurements to publish for your monitor.
You can add the following resources to a monitor in Internet Monitor.
•VPCs: Each VPC that you add in a Region is a monitored resource. When you add a VPC, Internet 
Monitor monitors the traﬃc for any internet-facing application in the VPC, for example, an application 
hosted on an Amazon EC2 instance, behind an Network Load Balancer, or in an AWS Fargate container.
•Network Load Balancers: Each NLB that you add is a monitored resource.
•CloudFront distributions: Each CloudFront distribution that you add is a monitored resource.
•WorkSpaces directories: Each WorkSpaces directory that you add in a Region is a monitored resource.
When you monitor traﬃc for VPCs, traﬃc for applications that are hosted on load balancers behind the 
VPC is monitored. You can choose to monitor traﬃc for individual Network Load Balancer load balancers 
instead of monitoring a VPC with multiple load balancers. This can be helpful, for example, if you need 
to understand and conﬁgure features for better performance or eﬃciencies at the load balancer level. 
Or, you might need compliance information at the Network Load Balancer level.
254Amazon CloudWatch User Guide
Getting started
When you add resources to a monitor in Internet Monitor, be aware of the following:
•VPCs that you add must be connected to the internet with an Internet Gateway conﬁgured.
•You can add a combination of Amazon VPC and CloudFront distributions, or you can add WorkSpaces 
directories, or you can add Network Load Balancers. You can't add Network Load Balancers or 
WorkSpaces directories together with other types of resources.
There are Regional diﬀerences for opt-in Regions to keep in mind when you add VPCs and NLBs 
as resources. For more information, see Supported AWS Regions for Amazon CloudWatch Internet 
Monitor  (p. 245).
In addition, there are diﬀerences for resources about measuring last-mile latency. For Internet Monitor 
latency measurements, VPCs, NLBs, and WorkSpaces directories do not include last-mile latency.
Choosing an application traﬃc percentage to monitor
The coverage that you choose for the percentage of application traﬃc to monitor determines how many 
city-networks (client locations and ASNs, typically internet service providers) for your application are 
monitored, up to an optional city-networks maximum limit that you can also set.
If you choose to monitor less than 100% of your application traﬃc, an observability gap might exist 
with your monitor. That's because if there are health events that Amazon CloudWatch Internet Monitor 
creates where you aren't monitoring traﬃc, you won't be aware of those issues. You might also have less 
coverage for the performance and availability score information about client access to your application.
There are several ways to explore your options for traﬃc percentage coverage, and the impact of 
increasing or decreasing coverage.
Explore changing your application traﬃc percentage
You can explore values that you might want to change your application traﬃc percentage to, by viewing 
the number of city-networks monitored when you change the percentage. The procedure in this section 
provides step-by-step information.
In the Internet Monitor console, you can try increasing or decreasing the application traﬃc percentage 
for your monitor, and view the estimated number of your city-networks that would be covered as a 
result. With this option, you can quickly see how changing your traﬃc percentage aﬀects the number 
of city-monitors are monitored. This can help you to get a feel for what a good application traﬃc 
percentage to choose might be, for your application.
To explore monitoring coverage by increasing and decreasing application traﬃc percentage
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the left navigation pane, under Application monitoring , choose Internet Monitor .
3. In your list of monitors, choose a monitor.
4. On the Overview tab, in the Monitored traﬃc section, choose the percentage graph, and then 
choose Update monitoring coverage.
5. In the Explore and set traﬃc monitoring coverage dialog, click the arrows to increase or decrease 
the percentage of traﬃc to monitor. By choosing 100% traﬃc, you can see how many city-networks 
are monitored with full coverage for monitoring your application.
6. To learn more about how the number of city-networks monitored (estimated here) might aﬀect 
your costs, choose the link to the CloudWatch Pricing calculator, and then scroll down to Internet 
Monitor.
7. To set a new percentage of traﬃc to monitor, choose Update monitor coverage. Or, to keep the 
current coverage level, choose Cancel.
255Amazon CloudWatch User Guide
Getting started
View the number of city-networks monitored at diﬀerent traﬃc percentage 
settings
You can view the number of city-networks that would be monitored for your application at diﬀerent 
application traﬃc percentages. The procedure in this section provides step-by-step information.
In the Internet Monitor console, you can view graphs that show how coverage for your city-networks 
would change at diﬀerent of application traﬃc percentages, over a time interval that you specify. This 
is a quick way to visualize and compare the monitoring coverage for your application at speciﬁc traﬃc 
percentages, all on one graph.
To view graphs of application traﬃc percentage and corresponding city-networks coverage
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the left navigation pane, under Application monitoring , choose Internet Monitor .
3. In your list of monitors, choose a monitor.
4. Choose the Traﬃc insights tab, and scroll down to Internet traﬃc graphs .
5. Under Compare options for traﬃc coverage, in the drop-down list, select one or more percentages. 
You can choose one or more application traﬃc percentages, and the graph of Total monitored city-
networks is updated to display the monitoring coverage Internet Monitor provides for that traﬃc 
percentage. By choosing City-networks at 100% traﬃc, you can see how many city-networks are 
monitored with full coverage for monitoring your application.
Keep in mind the following:
•f you've set a city-networks maximum limit, the total number of monitored city-networks won't 
exceed that limit, no matter which application traﬃc percentage options you select in the drop-
down list.
•You can learn more about how the number of city-networks monitored might aﬀect your costs. 
On the Pricing calculator for CloudWatch page, scroll down to Internet Monitor.
6. To set a new percentage of traﬃc to monitor, under Explore other traﬃc coverage options, choose
Update monitoring coverage. In the dialog, choose a percentage of traﬃc, and then choose Update 
monitor coverage.
Choosing a city-networks maximum limit
Amazon CloudWatch Internet Monitor can monitor your application traﬃc for some or all the locations 
where clients access your application resources, and all the ASNs (typically internet service providers) 
that they access your application through—that is, the city-networks for your application internet traﬃc. 
You choose a percentage of application traﬃc (p. 255) to monitor when you create your monitor, which 
you can update at any time by editing the monitor.
In addition to setting a traﬃc percentage, you can also set a maximum limit for the number of city-
networks monitored. This section describes how the city-networks limit can help you manage billing 
costs, and provides information and an example to help you determine a limit to set.
The maximum limit that you set for the number of city-networks helps to make sure that your bill is 
predictable. For more information, see Amazon CloudWatch Pricing. You can also learn how diﬀerent 
values for the number of city-networks actually monitored can aﬀect your bill by using the CloudWatch 
price calculator. To explore options, on the Pricing calculator for CloudWatch page, scroll down to 
Internet Monitor.
To update your monitor and change the maximum city-networks limit, see Editing or deleting an Internet 
Monitor monitor  (p. 259).
256Amazon CloudWatch User Guide
Getting started
How billing works with city-networks maximum limits
Setting a maximum limit for the number of city-networks monitored can help prevent unexpected costs 
in your bill. This is useful, for example, if your traﬃc patterns vary widely. Billing costs increase for each 
city-network that is monitored after the ﬁrst 100 city-networks, which are included (across all monitors 
per account). If you set a city-networks maximum limit, it caps the number of city-networks that Internet 
Monitor monitors for your application, regardless of the percentage of traﬃc that you choose to monitor.
You only pay for the number of city-networks that are actually monitored. The city-network maximum 
limit that you choose lets you set a cap on the total that can be included when Internet Monitor monitors 
traﬃc with your monitor. You can change the maximum limit at any time by editing your monitor.
To explore options, on the Pricing calculator for CloudWatch page, scroll down to Internet Monitor. 
For more information on Internet Monitor pricing, see the Internet Monitor section on the Amazon 
CloudWatch Pricing page.
How to choose a city-networks maximum limit
To help you decide on a city-networks maximum limit to select, consider how much traﬃc you 
want to monitor for your application. The following Internet Monitor metrics can help you analyze 
your traﬃc usage and coverage after you create your monitor: CityNetworksMonitored ,
TrafficMonitoredPercent , and one or more of the CityNetworksFor NNPercentTraffic
metrics, where NN is a percentage value that is one of the following: 25, 50, 90, 95, 99, or 100. To review 
deﬁnitions for these metrics, and all other Internet Monitor metrics, see Using CloudWatch Metrics with 
Amazon CloudWatch Internet Monitor (p. 277).
To see an overview graph of your internet traﬃc coverage, go to the Traﬃc insights tab on the 
CloudWatch dashboard and, in the Internet traﬃc graphs  section, choose an option for Compare 
options for traﬃc coverage. The graph shown in the section displays the actual number of city-
networks that are monitored for your application, as well as graph lines for diﬀerent application traﬃc 
percentages that you select in the drop-down list. To learn more, see  Setting your application traﬃc 
percentage (p. 255).
To explore your options in more detail, you can use the Internet Monitor metrics, as described in the 
following examples. These examples show how to select a maximum city-networks limit that is best for 
you, depending on the breadth of application internet traﬃc coverage you want. Using the queries for 
Internet Monitor metrics in CloudWatch Metrics (p. 277) can help you understand more about your 
application internet traﬃc coverage.
Example of determining a city-networks maximum limit
As an example, say that you've set a monitoring maximum limit of 100 city-networks and that your 
application is accessed by clients across 2637 city-networks. In CloudWatch Metrics, you'd see the 
following Internet Monitor metrics returned:
CityNetworksMonitored 100
TrafficMonitoredPercent  12.5
CityNetworksFor90PercentTraffic  2143
CityNetworksFor100PercentTraffic  2637
From this example, you can see that you're currently monitoring 12.5% of your internet traﬃc, with the 
maximum limit set to 100 city-networks. If you want to monitor 90% of your traﬃc, the next metric 
provides information about that: CityNetworksFor90PercentTraffic  indicates that you would need 
to monitor 2,143 city-networks for 90% coverage. To do that, you would update your monitor and set 
the maximum city-networks limit to 2,143.
Similarly, say you'd like to have 100% internet traﬃc monitoring for your application. The next metric,
CityNetworksFor100PercentTraffic , indicates that to do this, you should update your monitor to 
set the maximum city-networks limit to 2,637.
257Amazon CloudWatch User Guide
Getting started
If you now set the maximum to 5,000 city-networks, since that's greater than 2,637, you see the 
following metrics returned:
CityNetworksMonitored 2637
TrafficMonitoredPercent  100
CityNetworksFor90PercentTraffic  2143
CityNetworksFor100PercentTraffic  2637
From these metrics, you can see that with the higher limit, you monitor all 2,637 city-networks, which is 
100% of your internet traﬃc.
Publishing internet measurements to Amazon S3 in Amazon 
CloudWatch Internet Monitor
You can choose to have Amazon CloudWatch Internet Monitor publish internet measurements to 
Amazon S3 for your internet-facing traﬃc to the monitored city-networks (client locations and ASNs, 
typically internet service providers) in your monitor, up to the 500,000 city-networks service limit. 
Internet Monitor automatically publishes internet measurements to CloudWatch Logs every ﬁve minutes 
for the top 500 (by traﬃc volume) city-networks for each monitor. Measurements that it publishes to S3 
include the top 500 that are published to CloudWatch Logs.
You can choose the option to publish to S3, and specify the bucket to publish the measurements, to 
when you create or update your monitor. The bucket must already be created in S3 before you can 
specify it in Internet Monitor. There's a service limit of 500,000 city-networks for internet measurements 
published to S3. Internet Monitor publishes internet measurements to S3 as events, a series of 
compressed log ﬁle objects that are stored in the bucket.
When you create the S3 bucket for Internet Monitor to publish measurements to, make sure that you 
follow the permissions guidance provided by CloudWatch Logs. Doing so ensures that Internet Monitor 
can publish logs directly to S3, and that AWS can, if needed, create and change the resource policies 
associated with the log group receiving the logs. For more information, see  Logs sent to CloudWatch 
Logs  in the Amazon CloudWatch Logs User Guide.
The published log ﬁles are compressed. If you open the log ﬁles using the Amazon S3 console, they are 
decompressed and the internet measurement events are displayed. If you download the ﬁles, you must 
decompress them to view the events.
You can also query the internet measurements in the log ﬁles using Amazon Athena. Amazon Athena is 
an interactive query service that makes it easier to analyze data in Amazon S3, by using standard SQL. 
For more information, see Using Amazon Athena to query internet measurements in Amazon S3 log 
ﬁles (p. 279).
Using an Internet Monitor monitor
There are several ways to use an Amazon CloudWatch Internet Monitor monitor after you create it: for 
example, you can view information in the CloudWatch dashboard, get information by using the AWS 
Command Line Interface, and set health alerts.
Your monitor provides information about your application and conﬁguration preferences so that Internet 
Monitor can customizes measurements and metrics to publish in events for you. Internet Monitor 
collects measurements from the global infrastructure footprint for AWS. These measurements are a 
tremendous amount of network performance and availability information, from all over the world. By 
using information from the resources that you add for your application, Internet Monitor publishes 
performance and availability measurements for you that is scoped to the city-networks (that is, client 
locations and ASNs, typically internet service providers or ISPs) where your application is active. So, 
the measurements and metrics in the Internet Monitor dashboard and in CloudWatch Logs —about 
availability, performance, monitored bytes transferred, and round-trip time—are speciﬁc to your client 
locations and ASNs.
258Amazon CloudWatch User Guide
Getting started
Internet Monitor also determines when there are anomalies in performance and availability. By default, 
Internet Monitor overlays your traﬃc with the availability and performance measurements that AWS has 
collected for each source-destination pair in your client locations, to determine when there are notable 
drops in performance or availability. When there's signiﬁcant degradation for your application's locations 
and scope, Internet Monitor generates a health event , and publishes information about the issue to your 
monitor.
After you create a monitor, you can use it to access or be alerted to the information that Internet Monitor 
provides, in the following ways:
•Use the CloudWatch dashboard to view and explore performance, availability, and health events; 
explore your application's historical data; and get insights into new ways to conﬁgure your application 
for better performance. To learn more, see the following:
•Tracking real-time performance and availability in Amazon CloudWatch Internet Monitor (Overview 
tab) (p. 268)
•Filtering and viewing historical data in Amazon CloudWatch Internet Monitor (Historical explorer 
tab) (p. 271)
•Getting insights to improve application performance in Amazon CloudWatch Internet Monitor 
(Traﬃc insights tab) (p. 272)
•Conﬁgure health event thresholds to change what triggers Internet Monitor to create a health event 
for your application. You can conﬁgure overall thresholds and local (city-network) thresholds. To learn 
more, see Change health event thresholds (p. 268).
•Use AWS CLI commands with Internet Monitor API actions to view traﬃc proﬁle information, view 
measurements, list health events, and so on. To learn more, see Examples of using the CLI with 
Amazon CloudWatch Internet Monitor (p. 260).
•Use standard CloudWatch tools, such as CloudWatch Contributor Insights, CloudWatch Metrics 
explorer, and CloudWatch Logs Insights to visualize the data in CloudWatch. To learn more, see
Viewing log ﬁles with CloudWatch tools (p. 273).
•Use Athena with S3 logs to access and analyze Internet Monitor internet measurements for your 
application, if you turned on publishing measurements to S3.
•Create Amazon EventBridge notiﬁcations to alert you when Internet Monitor determines there 
is a health event. To learn more, see Using Amazon CloudWatch Internet Monitor with Amazon 
EventBridge (p. 282).
•Receive an AWS Health Dashboard notiﬁcation automatically, when Internet Monitor determines 
that an issue is caused by the AWS network. The notiﬁcation includes the steps that AWS is taking to 
mitigate the problem.
Editing or deleting an Internet Monitor monitor
Using the Action menu, you can edit or delete a monitor in Amazon CloudWatch Internet Monitor after 
you create it. For example, you can edit a monitor to do the following:
•Change the percentage of application traﬃc to monitor
•Set or update the city-networks maximum limit
•Change health event thresholds for availability or performance scores
•Add or remove resources
•Enable or update publishing events to Amazon S3
You can also delete a monitor. Note that you can't change the name of a monitor after you create it.
To make changes to a monitor, use the following procedure.
259Amazon CloudWatch User Guide
Examples with the CLI
To edit a monitor
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the left navigation pane, under Application monitoring , choose Internet Monitor .
3. Choose your monitor, and then choose the Action menu.
4. Choose Update monitor .
5. Make the desired updates. For example, to change the percentage of traﬃc to monitor, under
Application traﬃc to monitor , select or enter a percentage.
6. Choose Update .
For more information about the options that you can update, see the following:
•To learn more about resources that you add in Internet Monitor, see Adding resources to your 
monitor  (p. 254).
•To learn more about the application traﬃc percentage, see Choosing an application traﬃc percentage 
to monitor  (p. 255).
•To learn more about changing the threshold for health events, see Change health event 
thresholds (p. 268).
•To learn more about the city-networks maximum limit, see Choosing a city-networks maximum 
limit  (p. 256).
•To learn more about opting to publish events to S3, see Publishing internet measurements to Amazon 
S3 in Amazon CloudWatch Internet Monitor (p. 258).
Examples of using the CLI with Amazon CloudWatch 
Internet Monitor
This section includes examples for using the AWS Command Line Interface with Amazon CloudWatch 
Internet Monitor operations.
Before you begin, make sure that you log in to use the AWS CLI with the same AWS account that has the 
Amazon Virtual Private Clouds (VPCs), Network Load Balancers, Amazon CloudFront distributions, or 
Amazon WorkSpaces directories that you want to monitor. Internet Monitor doesn't support accessing 
resources across accounts. For more information about using the AWS CLI, see the AWS CLI Command 
Reference. For more information about using API actions with Amazon CloudWatch Internet Monitor, see 
the Amazon CloudWatch Internet Monitor API Reference Guide.
Topics
•Create a monitor (p. 260)
•View monitor details  (p. 261)
•List health events (p. 262)
•View speciﬁc health event (p. 264)
•View monitor list  (p. 265)
•Edit monitor (p. 266)
•Delete monitor  (p. 266)
Create a monitor
When you create a monitor in Internet Monitor, you provide a name and associate resources with the 
monitor to show where your application's internet traﬃc is. You specify a traﬃc percentage that deﬁnes 
260Amazon CloudWatch User Guide
Examples with the CLI
how much of your application traﬃc is monitored. That also determines the number of city-networks, 
that is, client locations and ASNs, typically internet service providers or ISPs, that are monitored. You 
can also opt to set a limit for the maximum number of city-networks to monitor for your application 
resources, to help control your bill. For more information, see Choosing a city-networks maximum 
limit  (p. 256).
Finally, you can choose if you want to publish all internet measurements for your application to Amazon 
S3. Internet measurements for the top 500 city-networks (by traﬃc volume) are automatically published 
to CloudWatch Logs by Internet Monitor, but you can choose to publish all measurements to S3 as well.
To create a monitor with the AWS CLI, you use the create-monitor  command. The following command 
creates a monitor that monitors 100% of traﬃc but sets a maximum city-networks limit of 10,000, adds 
a VPC resource, and opts to publish internet measurements to Amazon S3.
Note
Internet Monitor publishes to CloudWatch Logs internet measurements every ﬁve minutes for 
the top 500 city-networks (client locations and ASNs, typically internet service providers or ISPs) 
that send traﬃc to each monitor. Optionally, you can choose to publish internet measurements 
for all monitored city-networks (up to the 500,000 city-networks service limit) to an Amazon S3 
bucket. For more information, see Publishing internet measurements to Amazon S3 in Amazon 
CloudWatch Internet Monitor (p. 258).
aws internetmonitor --create-monitor monitor-name "TestMonitor" \ 
    --traffic-percentage-to-monitor 100 \ 
    --max-city-networks-to-monitor 10000 \ 
    --resources "arn:aws:ec2:us-east-1:111122223333:vpc/vpc-11223344556677889" \ 
    --internet-measurements-log-delivery 
 S3Config="{BucketName=MyS3Bucket,LogDeliveryStatus=ENABLED}"
{
"Arn": "arn:aws:internetmonitor:us-east-1:111122223333:monitor/TestMonitor", 
 "Status": "ACTIVE"
}
Note
You can't change the name of a monitor.
View monitor details
To view information about a monitor with the AWS CLI, you use the get-monitor  command.
aws internetmonitor get-monitor --monitor-name "TestMonitor"
{ 
    "ClientLocationType": "city", 
    "CreatedAt": "2022-09-22T19:27:47Z", 
    "ModifiedAt": "2022-09-22T19:28:30Z", 
    "MonitorArn": "arn:aws:internetmonitor:us-east-1:111122223333:monitor/TestMonitor", 
    "MonitorName": "TestMonitor", 
    "ProcessingStatus": "OK", 
    "ProcessingStatusInfo": "The monitor is actively processing data", 
    "Resources": [ 
        "arn:aws:ec2:us-east-1:111122223333:vpc/vpc-11223344556677889" 
    ], 
    "MaxCityNetworksToMonitor": 10000, 
    "Status": "ACTIVE"
}
261Amazon CloudWatch User Guide
Examples with the CLI
List health events
When performance degrades for your application's internet traﬃc, Internet Monitor creates health 
events in your monitor. To see a list of current health events with the AWS CLI, use the list-health-
events command
aws internetmonitor list-health-events --monitor-name "TestMonitor"
{ 
    "HealthEvents": [ 
        { 
            "EventId": "2022-06-20T01-05-05Z/latency",  
            "Status": "RESOLVED",  
            "EndedAt": "2022-06-20T01:15:14Z",  
            "ServiceLocations": [ 
                { 
                    "Name": "us-east-1" 
                } 
            ],  
            "PercentOfTotalTrafficImpacted": 1.21,  
            "ClientLocations": [ 
                { 
                    "City": "Lockport",  
                    "PercentOfClientLocationImpacted": 60.370000000000005,  
                    "PercentOfTotalTraffic": 2.01,  
                    "Country": "United States",  
                    "Longitude": -78.6913,  
                    "AutonomousSystemNumber": 26101,  
                    "Latitude": 43.1721,  
                    "Subdivision": "New York",  
                    "NetworkName": "YAHOO-BF1" 
                } 
            ],  
            "StartedAt": "2022-06-20T01:05:05Z",  
            "ImpactType": "PERFORMANCE",  
            "EventArn": "arn:aws:internetmonitor:us-east-1:111122223333:monitor/
TestMonitor/health-event/2022-06-20T01-05-05Z/latency" 
        },  
        { 
            "EventId": "2022-06-20T01-17-56Z/latency",  
            "Status": "RESOLVED",  
            "EndedAt": "2022-06-20T01:30:23Z",  
            "ServiceLocations": [ 
                { 
                    "Name": "us-east-1" 
                } 
            ],  
            "PercentOfTotalTrafficImpacted": 1.29,  
            "ClientLocations": [ 
                { 
                    "City": "Toronto",  
                    "PercentOfClientLocationImpacted": 75.32,  
                    "PercentOfTotalTraffic": 1.05,  
                    "Country": "Canada",  
                    "Longitude": -79.3623,  
                    "AutonomousSystemNumber": 14061,  
                    "Latitude": 43.6547,  
                    "Subdivision": "Ontario",  
                    "CausedBy": { 
                        "Status": "ACTIVE",  
                        "Networks": [ 
                            { 
                                "AutonomousSystemNumber": 16509,  
262Amazon CloudWatch User Guide
Examples with the CLI
                                "NetworkName": "Amazon.com" 
                            } 
                        ],  
                        "NetworkEventType": "AWS" 
                    },  
                    "NetworkName": "DIGITALOCEAN-ASN" 
                },  
                { 
                    "City": "Lockport",  
                    "PercentOfClientLocationImpacted": 22.91,  
                    "PercentOfTotalTraffic": 2.01,  
                    "Country": "United States",  
                    "Longitude": -78.6913,  
                    "AutonomousSystemNumber": 26101,  
                    "Latitude": 43.1721,  
                    "Subdivision": "New York",  
                    "NetworkName": "YAHOO-BF1" 
                },  
                { 
                    "City": "Hangzhou",  
                    "PercentOfClientLocationImpacted": 2.88,  
                    "PercentOfTotalTraffic": 0.7799999999999999,  
                    "Country": "China",  
                    "Longitude": 120.1612,  
                    "AutonomousSystemNumber": 37963,  
                    "Latitude": 30.2994,  
                    "Subdivision": "Zhejiang",  
                    "NetworkName": "Hangzhou Alibaba Advertising Co.,Ltd." 
                } 
            ],  
            "StartedAt": "2022-06-20T01:17:56Z",  
            "ImpactType": "PERFORMANCE",  
            "EventArn": "arn:aws:internetmonitor:us-east-1:111122223333:monitor/
TestMonitor/health-event/2022-06-20T01-17-56Z/latency" 
        },  
        { 
            "EventId": "2022-06-20T01-34-20Z/latency",  
            "Status": "RESOLVED",  
            "EndedAt": "2022-06-20T01:35:04Z",  
            "ServiceLocations": [ 
                { 
                    "Name": "us-east-1" 
                } 
            ],  
            "PercentOfTotalTrafficImpacted": 1.15,  
            "ClientLocations": [ 
                { 
                    "City": "Lockport",  
                    "PercentOfClientLocationImpacted": 39.45,  
                    "PercentOfTotalTraffic": 2.01,  
                    "Country": "United States",  
                    "Longitude": -78.6913,  
                    "AutonomousSystemNumber": 26101,  
                    "Latitude": 43.1721,  
                    "Subdivision": "New York",  
                    "NetworkName": "YAHOO-BF1" 
                },  
                { 
                    "City": "Toronto",  
                    "PercentOfClientLocationImpacted": 29.770000000000003,  
                    "PercentOfTotalTraffic": 1.05,  
                    "Country": "Canada",  
                    "Longitude": -79.3623,  
                    "AutonomousSystemNumber": 14061,  
                    "Latitude": 43.6547,  
                    "Subdivision": "Ontario",  
263Amazon CloudWatch User Guide
Examples with the CLI
                    "CausedBy": { 
                        "Status": "ACTIVE",  
                        "Networks": [ 
                            { 
                                "AutonomousSystemNumber": 16509,  
                                "NetworkName": "Amazon.com" 
                            } 
                        ],  
                        "NetworkEventType": "AWS" 
                    },  
                    "NetworkName": "DIGITALOCEAN-ASN" 
                }, 
                { 
                    "City": "Hangzhou",  
                    "PercentOfClientLocationImpacted": 2.88,  
                    "PercentOfTotalTraffic": 0.7799999999999999,  
                    "Country": "China",  
                    "Longitude": 120.1612,  
                    "AutonomousSystemNumber": 37963,  
                    "Latitude": 30.2994,  
                    "Subdivision": "Zhejiang",  
                    "NetworkName": "Hangzhou Alibaba Advertising Co.,Ltd." 
                } 
            ],  
            "StartedAt": "2022-06-20T01:34:20Z",  
            "ImpactType": "PERFORMANCE",  
            "EventArn": "arn:aws:internetmonitor:us-east-1:111122223333:monitor/
TestMonitor/health-event/2022-06-20T01-34-20Z/latency" 
        } 
    ]
}
View speciﬁc health event
To see a more detailed information about a speciﬁc health event with the CLI, run the get-health-
event command with your monitor name and a health event ID.
aws internetmonitor get-monitor --monitor-name "TestMonitor" --event-id "health-event/
TestMonitor/2021-06-03T01:02:03Z/latency" 
{ 
    "EventId": "2022-06-20T01-34-20Z/latency",  
    "Status": "RESOLVED",  
    "EndedAt": "2022-06-20T01:35:04Z",  
    "ServiceLocations": [ 
        { 
            "Name": "us-east-1" 
        } 
    ],  
    "EventArn": "arn:aws:internetmonitor:us-east-1:111122223333:monitor/TestMonitor/health-
event/2022-06-20T01-34-20Z/latency",  
    "LastUpdatedAt": "2022-06-20T01:35:04Z",  
    "ClientLocations": [ 
        { 
            "City": "Lockport",  
            "PercentOfClientLocationImpacted": 39.45,  
            "PercentOfTotalTraffic": 2.01,  
            "Country": "United States",  
            "Longitude": -78.6913,  
            "AutonomousSystemNumber": 26101,  
            "Latitude": 43.1721,  
            "Subdivision": "New York",  
264Amazon CloudWatch User Guide
Examples with the CLI
            "NetworkName": "YAHOO-BF1" 
        },  
        { 
            "City": "Toronto",  
            "PercentOfClientLocationImpacted": 29.770000000000003,  
            "PercentOfTotalTraffic": 1.05,  
            "Country": "Canada",  
            "Longitude": -79.3623,  
            "AutonomousSystemNumber": 14061,  
            "Latitude": 43.6547,  
            "Subdivision": "Ontario",  
            "CausedBy": { 
                "Status": "ACTIVE",  
                "Networks": [ 
                    { 
                        "AutonomousSystemNumber": 16509,  
                        "NetworkName": "Amazon.com" 
                    } 
                ],  
                "NetworkEventType": "AWS" 
            },  
            "NetworkName": "DIGITALOCEAN-ASN" 
        },  
        { 
            "City": "Shenzhen",  
            "PercentOfClientLocationImpacted": 4.07,  
            "PercentOfTotalTraffic": 0.61,  
            "Country": "China",  
            "Longitude": 114.0683,  
            "AutonomousSystemNumber": 37963,  
            "Latitude": 22.5455,  
            "Subdivision": "Guangdong",  
            "NetworkName": "Hangzhou Alibaba Advertising Co.,Ltd." 
        },  
        { 
            "City": "Hangzhou",  
            "PercentOfClientLocationImpacted": 2.88,  
            "PercentOfTotalTraffic": 0.7799999999999999,  
            "Country": "China",  
            "Longitude": 120.1612,  
            "AutonomousSystemNumber": 37963,  
            "Latitude": 30.2994,  
            "Subdivision": "Zhejiang",  
            "NetworkName": "Hangzhou Alibaba Advertising Co.,Ltd." 
        } 
    ],  
    "StartedAt": "2022-06-20T01:34:20Z",  
    "ImpactType": "PERFORMANCE",  
    "PercentOfTotalTrafficImpacted": 1.15
}
View monitor list
To see a list of all monitors in your account with the CLI, run the list-monitors  command.
aws internetmonitor list-monitors
{ 
    "Monitors": [ 
        { 
            "MonitorName": "TestMonitor", 
            "ProcessingStatus": "OK", 
            "Status": "ACTIVE" 
265Amazon CloudWatch User Guide
Examples with the CLI
        } 
    ], 
    "NextToken": " zase12"
}
Edit monitor
To update information about your monitor by using the CLI, use the update-monitor  command and 
specify the name of the monitor to update. You can update the percentage of traﬃc to monitor, the limit 
of the maximum number of city-networks to monitor, add or remove the resources that Internet Monitor 
uses to monitor traﬃc, and change the monitor status from ACTIVE  to INACTIVE , or vice versa. Note 
that you can't change the name of the monitor.
The response for an update-monitor  call returns just the MonitorArn  and the Status .
The following example shows how to use the update-monitor  command to change the maximum 
number of city-networks to monitor to 50000 :
aws internetmonitor update-monitor --monitor-name "TestMonitor" --max-city-networks-to-
monitor 50000
{ 
    "MonitorArn": "arn:aws:internetmonitor:us-east-1:111122223333:monitor/TestMonitor", 
    "Status": " ACTIVE "
}
The following example shows how to add and remove resources:
aws internetmonitor update-monitor --monitor-name "TestMonitor" \ 
    --resources-to-add "arn:aws:ec2:us-east-1:111122223333:vpc/vpc-11223344556677889" \ 
    --resources-to-remove "arn:aws:ec2:us-east-1:111122223333:vpc/vpc-2222444455556666"
{ 
    "MonitorArn": "arn:aws:internetmonitor:us-east-1:111122223333:monitor/TestMonitor", 
    "Status": "ACTIVE"
}
The following example shows how to use the update-monitor  command to change the monitor status 
to INACTIVE :
aws internetmonitor update-monitor --monitor-name "TestMonitor" --status "INACTIVE"
{ 
    "MonitorArn": "arn:aws:internetmonitor:us-east-1:111122223333:monitor/TestMonitor", 
    "Status": "INACTIVE"
}
Delete monitor
You can delete a monitor with the CLI by using the delete-monitor  command. First, you must set 
the monitor to be inactive. To do that, use the update-monitor  command to change the status to
INACTIVE . Conﬁrm that the monitor is inactive by using the get-monitor  command and checking the 
status.
266Amazon CloudWatch User Guide
Internet Monitor dashboard
When the monitor status is INACTIVE , then you can use the CLI to run the delete-monitor  command 
to delete the monitor. The response for a successful delete-monitor  call is empty.
aws internetmonitor delete-monitor --monitor-name "TestMonitor"
{}
Monitor and optimize with the Internet Monitor 
dashboard
The information in this section describes how to ﬁlter and view information on the Amazon CloudWatch 
Internet Monitor dashboard to visualize and get insights about your AWS application's internet traﬃc 
and setup.
After you create a monitor to monitor your application's internet performance and availability, Amazon 
CloudWatch Internet Monitor publishes CloudWatch logs containing internet measurements for client 
location-network (city-network) pairs, and publishes aggregated CloudWatch metrics for traﬃc to your 
application, and to each AWS Region and edge location. You can ﬁlter, explore, and get action-oriented 
suggestions from this information from Internet Monitor in several diﬀerent ways.
To get started, on the CloudWatch console, under Application monitoring , choose Internet Monitor .
This section primarily describes how to ﬁlter and view Internet Monitor metrics using the AWS 
Management Console. Alternatively, you can use Internet Monitor API operations with the AWS CLI or an 
SDK to work directly with Internet Monitor events stored in CloudWatch Logs ﬁles. For more information, 
see Using your monitor and measurements information (p. 259). For more information about using API 
operations, see Examples of using the CLI with Amazon CloudWatch Internet Monitor (p. 260) and the
Amazon CloudWatch Internet Monitor API Reference.
There are three tabs in the Internet Monitor dashboard:
•On the Overview tab, you can see current and historical performance and availability information 
about your application, and health events impacting your client locations.
•On the next tab, Historical explorer, you can ﬁlter by location, ASN, date, and so on, and visualize 
metrics for your internet traﬃc over time, using the graphs.
•On the Traﬃc insights tab, in addition to viewing information about top monitored traﬃc summarized 
in several customizable ways, you can get suggestions for optimized setups to improve performance 
for diﬀerent location and ASN pairs. Internet Monitor predicts your application's performance 
improvement, based on your traﬃc patterns and past performance, when you change how you 
route your traﬃc or the AWS resources you use. You can also see a graph to compare how many city-
networks are included in your monitoring coverage, based on the application traﬃc percentage that 
you choose for your monitor.
In addition, because Internet Monitor generates and publishes log ﬁles with the measurements about 
your traﬃc, you can use other CloudWatch tools in the console to further visualize the data published by 
Internet Monitor, including CloudWatch Contributor Insights, CloudWatch Metrics, and CloudWatch Logs 
Insights. For more information, see Viewing log ﬁles with CloudWatch tools (p. 273).
Learn about using Internet Monitor to explore your performance and availability measurements in the 
following sections.
Topics
•Tracking real-time performance and availability in Amazon CloudWatch Internet Monitor (Overview 
tab) (p. 268)
267Amazon CloudWatch User Guide
Internet Monitor dashboard
•Filtering and viewing historical data in Amazon CloudWatch Internet Monitor (Historical explorer 
tab) (p. 271)
•Getting insights to improve application performance in Amazon CloudWatch Internet Monitor 
(Traﬃc insights tab) (p. 272)
Tracking real-time performance and availability in Amazon 
CloudWatch Internet Monitor (Overview tab)
Use the Overview tab in the CloudWatch console, under Internet Monitor, to get a high-level view of 
performance and availability for the traﬃc that your monitor tracks. The tab also displays an internet 
traﬃc overview map, with traﬃc clusters that can help you visualize your application's global traﬃc, and 
the location and impact of health events.
Health scores
The Health scores graph shows you performance and availability information for your global traﬃc. 
AWS has substantial historical data about internet performance and availability for network traﬃc 
between geographic locations for diﬀerent ASNs and AWS services. Internet Monitor uses the 
connectivity data that AWS has captured from its global networking footprint to calculate a baseline 
of performance and availability for internet traﬃc. This is the same data that we use at AWS to 
monitor our own internet uptime and availability.
With those measurements as a baseline, Internet Monitor can detect when the performance and 
availability for your application has dropped, compared to the baseline. To make it easier to see 
those drops, we report that information to you as a performance score and an availability score. For 
more information, see Viewing log ﬁles with CloudWatch tools (p. 273).
The Health scores graph includes health events that occurred during a time period that you choose. 
When there's a health event, you see a drop in the performance or availability line on the graph. 
If you select the event, you see more details and bands appear on the graph, with date and time 
information showing how long the event lasted.
You can also look at these metrics by accessing the log ﬁles directly for each data point. In the
Actions menu, choose View CloudWatch Logs.
Internet traﬃc overview
The Internet traﬃc overview map shows you the internet traﬃc and health events that are speciﬁc 
to the locations and ASNs where your users access your application from. The countries that are gray 
on the map are those that include traﬃc for your application.
Each circle on the map indicates a health event in an area, for a time period that you select. Internet 
Monitor creates health events when it detects a problem, at a speciﬁc threshold, with connectivity 
between one of your resources hosted in AWS and a city-network where a user is accessing your 
application. Choosing a circle on the map displays more details about the health event for that 
location. In addition, for clusters that have health events, you can see detailed information in the
Health events table below the map.
Note that Internet Monitor creates health events in a monitor when it determines that an event has 
signiﬁcant global impact on your application. If aren't any health events that exceed the threshold 
for impact on traﬃc for client locations in the time period that you've selected, the map is blank. For 
more information, see When Internet Monitor creates and resolves health events (p. 251).
Change health event thresholds
You can conﬁgure several options around how and when Internet Monitor creates health events for 
your application. Choose Update thresholds to make changes.
268Amazon CloudWatch User Guide
Internet Monitor dashboard
You can change the overall threshold that triggers Internet Monitor to create a health event. The 
default health event threshold, for both performance scores and availability scores, is 95%. That 
is, when the overall performance or availability score for your application falls to 95% or below, 
Internet Monitor creates a health event. For the overall threshold, the health event can be triggered 
by a single large issue, or by the combination of multiple smaller issues.
You can also change the local—that is, city-network—threshold, combined with a percentage of the 
overall level of impact, that combined will trigger a health event. By setting a threshold that creates 
a health event when a score drops below the threshold for one or more city-networks (locations and 
ASNs, typically ISPs), you can get insights into when there are issues in locations with lower traﬃc, 
for example.
An additional local threshold option works together with the local threshold for availability or 
performance scores. The second factor is the percentage of your overall traﬃc that must be 
impacted before Internet Monitor creates a health event based on the local threshold.
By conﬁguring the threshold options for overall traﬃc and local traﬃc, you can ﬁne-tune how 
frequently health events are created, to align with your application usage and your needs. Be 
aware that when you set the local threshold to be lower, typically more health events are created, 
depending on your application and the other threshold conﬁguration values that you set.
In summary, you can conﬁgure health event thresholds—for performance scores, availability scores, 
or both—in the following ways:
•Choose diﬀerent global thresholds for triggering a health event.
•Choose diﬀerent local thresholds for triggering a health event. With this option, you can also 
change the percentage of impact on your overall application that must be exceeded before 
Internet Monitor creates an event.
•Choose to turn oﬀ triggering a health event based on local thresholds, or enable local threshold 
options.
You can also conﬁgure options for performance scores, availability scores, or both. You can conﬁgure 
a combination of the options, or just one of them.
To update thresholds and other conﬁguration options for performance scores, availability scores, or 
both, do the following:
To change threshold conﬁguration options
1. In the AWS Management Console, navigate to CloudWatch, and then, in the left navigation 
pane, choose Internet Monitor.
2. On the Overview tab, in the Health events timeline section, choose Update thresholds.
3. On the dialog page that opens, choose the new values and options that you want for thresholds 
and other options that trigger Internet Monitor to create a health event. You can do any of the 
following:
•Choose a new value for Availability score threshold, Performance score threshold, or both.
The graphs in the sections for each setting display the current threshold setting and the 
actual recent health event scores, for availability or performance, for your application. By 
viewing the typical values, you can get an idea of values that you might want to change a 
threshold to.
Tip: To view a larger graph and change the timeframe, choose the expander in the upper right 
corner of the graph.
•Choose to turn on or oﬀ a local threshold for availability or performance, or both. When an 
option is enabled, you can set the threshold and impact level for when you want Internet 
Monitor to create a health event.
269Amazon CloudWatch User Guide
Internet Monitor dashboard
4. After you conﬁgure threshold options, save your updates by choosing Update health event 
thresholds.
To learn more about how health events work, see When Internet Monitor creates and resolves health 
events (p. 251).
Health events table
The Health events table lists client locations that have been aﬀected by health events, along with 
information about the events. The following columns are included in the table.
  Description
Client location The location of the end users who were 
impacted by the event, who experienced 
increased latency or reduced availability.
To learn more about client location accuracy in 
Internet Monitor, see  Geolocation information 
and accuracy in Internet Monitor (p. 250).
Traﬃc impact How much impact was caused by the event, in 
increased latency or reduced availability. For 
latency, this is the percentage of how much 
latency increased during the event compared to 
typical performance for traﬃc, from this client 
location to this AWS location using this client 
network.
Client network The network that the traﬃc traveled over. 
Typically, this is the internet service provider 
(ISP) or Autonomous System Number (ASN) for 
the network traﬃc.
AWS location The AWS location for the network traﬃc, which 
can be an AWS Region or an internet edge 
location.
Impact type The type of impact for the health event. Health 
events are typically caused by latency increases 
(performance issues) or reachability (availability 
issues).
You might also be able to click on the impact 
type to see the cause of the impairment. When 
possible, Internet Monitor analyzes the origin 
of a health event, to determine whether it was 
caused by AWS or an ASN (internet service 
provider).
Note that this analysis continues after the event 
is resolved. Internet Monitor can update events 
with new information for up to an hour.
If you choose one of the client locations in the Health events table, you can see more details about 
the health event at that location. For example, you can see when the event started, when it ended, 
and the local traﬃc impact.
270Amazon CloudWatch User Guide
Internet Monitor dashboard
Network path visualization
Impairment analysis that is complete has a full network path under Network path visualization. 
The full path shows you each node along the network path for your application for the health event, 
between the AWS location and the client, for a client-location pair.
If Internet Monitor determines the cause of an impairment, it's marked with a dashed red circle. 
Impairments can be caused by ASNs, typically internet service providers (ISPs), or the cause can be 
AWS. If there were multiple causes for an impairment, multiple nodes are circled.
Filtering and viewing historical data in Amazon CloudWatch 
Internet Monitor (Historical explorer tab)
Use the Historical explorer tab in the CloudWatch console, under Internet Monitor, to ﬁlter and view 
data for your application that's in CloudWatch Logs. Internet Monitor publishes measurements to 
CloudWatch Logs speciﬁc to your application for availability, performance, monitored bytes transferred 
(or client connection count, for WorkSpaces directories only), and round-trip time for your monitored 
city-networks in AWS Regions.
Note
Internet Monitor publishes internet measurements to CloudWatch Logs every ﬁve minutes 
for the top 500 (by traﬃc volume) city-networks (that is, client locations and ASNs, typically 
internet service providers or ISPs) that send traﬃc to each monitor. Optionally, you can choose 
to publish internet measurements for all monitored city-networks (up to the 500,000 city-
networks service limit) to an Amazon S3 bucket. For more information, see Publishing internet 
measurements to Amazon S3 in Amazon CloudWatch Internet Monitor (p. 258).
To start exploring your application's data, select a time period. Then, choose a speciﬁc geographical 
location, such a city, and (optionally) other ﬁlters. Internet Monitor applies the ﬁlters to the data in the 
internet measurements logs that it has published for the city-networks for your application traﬃc. Then 
you can see graphs of the data that show the performance score, availability score, monitored bytes 
transferred (for VPCs, Network Load Balancers, and CloudFront distributions) or client connection counts 
(for WorkSpaces directories), and round-trip time (RTT) for your application over time.
The All events table below the graphs shows you the health events that your ﬁlter returns for your 
application traﬃc, with information about each event. It includes the following columns.
  Description
Event start The time that the health event started.
Status Whether the event is still active or is resolved.
Client location The location of the end users who were impacted 
by the event, who experienced increased latency 
or reduced performance.
To learn more about client location accuracy in 
Internet Monitor, see  Geolocation information 
and accuracy in Internet Monitor (p. 250).
Traﬃc impact The weighted impact of the event on the 
location of the health event. That is, for example, 
the impact on latency, compared to typical 
performance for traﬃc from a client location to 
the AWS location over the client ASN, typically 
an internet service provider (ISP). Similarly, for an 
event that aﬀects availability, you see the impact 
271Amazon CloudWatch User Guide
Internet Monitor dashboard
  Description
on availability compared to typical availability for 
the client location for the AWS location over the 
client ASN.
Event duration How long the event lasted. Internet Monitor 
terminates health events when they no 
longer aﬀect more than 5% (in total) of your 
application's client locations.
Client ISP The ASN, typically the internet service provider 
(ISP), that was the carrier for the network traﬃc.
Service location The service location that the network traﬃc 
originated from, which can be an AWS Region or 
internet edge location.
Alternatively, you can look at your application's measurements by accessing the logs directly for each 
data point. In the Actions menu, choose View CloudWatch Logs. Note that because measurement 
events are published to your account when they're created, you can create other CloudWatch dashboards 
or alarms based on them as well. For more information, see Getting insights to improve application 
performance in Amazon CloudWatch Internet Monitor (Traﬃc insights tab) (p. 272) and Creating alarms 
with Amazon CloudWatch Internet Monitor (p. 282).
In addition to exploring and analyzing Internet Monitor measurements and metrics, and creating 
dashboards and alarms based on them, you can use Internet Monitor to help you understand ways 
that you could improve performance for your application. The Traﬃc insights tab has several ways to 
help you explore options. For more information, see Traﬃc optimization suggestions on the Traﬃc 
insights  (p. 272) tab. In addition, you can see the speciﬁc examples in the Internet Monitor use 
cases  (p. 252) chapter.
Getting insights to improve application performance in Amazon 
CloudWatch Internet Monitor (Traﬃc insights tab)
Use the Traﬃc insights tab in the CloudWatch console, under Internet Monitor, to look at summary 
information for top traﬃc (by volume) for your application. You can ﬁlter and sort your application 
traﬃc in multiple ways. Then, scroll down, and select diﬀerent setup combinations for your application 
to see what Internet Monitor suggests for the best alternatives to obtain the fastest time to ﬁrst byte 
(TTFB) performance.
Internet Monitor publishes to CloudWatch Logs internet measurements every ﬁve minutes for the 
top 500 (by traﬃc volume) city-networks (that is, client locations and ASNs, typically internet service 
providers or ISPs) that send traﬃc to each monitor. Optionally, you can choose to publish internet 
measurements for all monitored city-networks (up to the 500,000 city-networks service limit) to an 
Amazon S3 bucket. For more information, see Publishing internet measurements to Amazon S3 in 
Amazon CloudWatch Internet Monitor (p. 258).
Top traﬃc summaries
You can start by viewing high-level summaries of your application's overall traﬃc and performance, 
over a speciﬁc time period, ﬁltered by client location. You can also look at performance for your 
application for the top (or bottom) client locations by traﬃc volume, ﬁltered and sorted in multiple 
ways. For example, you can sort by granularity (that is, city, subdivision, country, or metro area), by 
total traﬃc, average time to ﬁrst byte (TTFB), and other factors.
To learn more about client location accuracy in Internet Monitor, see  Geolocation information and 
accuracy in Internet Monitor (p. 250).
272Amazon CloudWatch User Guide
Log ﬁle insights
Note
The ﬁlters that you use apply to whole page, so they aﬀect which city-networks are 
included in the summary graphs and information for total traﬃc, and also which city-
networks are included in the Traﬃc optimization suggestions section that follows.
Traﬃc optimization suggestions
The Traﬃc optimization suggestions section displays a ﬁltered set of monitored city-networks 
(locations and ASNs, internet service providers) for your traﬃc, along with the total client traﬃc for 
each one. The entries in the table is based on the ﬁlters that you chose for your application traﬃc 
for Traﬃc insights at the top of the page. The default is the top 10 cities by traﬃc volume. You 
typically see more than 10 rows in the table, because there's entry for each unique city-network 
pair. That is, there's one row for each combination of location (city) and ASN (network provider) that 
clients access your application through—such as, Dallas, Texas, USA and Comcast, for example.
Note
To see traﬃc optimization suggestions for all your monitored city-networks, you can 
run a query directly in CloudWatch Insights. For a sample query that doesn't include the 
geographical granularity ﬁlter that limits the city-networks list on this page, see Using 
CloudWatch Logs Insights with Amazon CloudWatch Internet Monitor (p. 274).
In this section, select diﬀerent options: Amazon EC2, CloudFront, or both. This lets you see what the 
predicted average time to ﬁrst byte (TTFB) values are for clients when you use your application with 
those services in diﬀerent AWS Regions, compared to the current TTFB. For more information about 
TTFB calculations, see AWS calculations for TTFB and latency (p. 250).
By selecting diﬀerent the options, and then viewing the results in the table, you can start planning 
setups and deployments that can improve performance for your clients. To see a speciﬁc example of 
how to improve performance, see  Using Amazon CloudWatch Internet Monitor for a Better Gaming 
Experience.
For example, to get started, for a speciﬁc city-network (client location and ASN pair), experiment 
with selecting either the EC2 or CloudFront option, or both. For each city-network listed in the table, 
Internet Monitor shows you the potential performance improvements to the TTFB, based on a traﬃc 
routing choice (through a speciﬁc AWS Region) with that option, compared to the current setup. 
(Note that, for completeness, the table also includes routes that are already optimized.) For example, 
you might see a predicted average TTFB that is 50ms for using EC2 routing through us-east-1
compared to your current setup with a TTFB of 100ms where you're using EC2 routing through us-
west-2. So you might consider routing through us-west-2 .
As another example, you might select EC2, and then see that it doesn't make a measurable 
performance diﬀerence for one client location and ASN, but then note that when you select 
CloudFront with the same Region, it lowers the TTFB somewhat. This suggests that if you add a 
CloudFront distribution in front of your application, it could result in a performance improvement 
and might be worth trying, for this client location and ASN.
Viewing log ﬁles with CloudWatch tools
In addition to visualizing your performance and availability for your application with the Amazon 
CloudWatch Internet Monitor dashboard, there are several CloudWatch tools that you can use to dive 
deeper into the CloudWatch log ﬁles that Internet Monitor generates for you. The log ﬁles aggregate 
CloudWatch metrics about traﬃc to your application and to each AWS Region, and include data such as 
total traﬃc impact, availability, and round-trip time. The tools that you can use include CloudWatch Logs 
Insights, CloudWatch Metrics, and CloudWatch Contributor Insights.
This section highlights some examples of using those tools to look at the data generated and published 
in the CloudWatch log ﬁles for Internet Monitor.
Topics
273Amazon CloudWatch User Guide
Log ﬁle insights
•Using CloudWatch Logs Insights with Amazon CloudWatch Internet Monitor (p. 274)
•Using Contributor Insights with Amazon CloudWatch Internet Monitor (p. 275)
•Using CloudWatch Metrics with Amazon CloudWatch Internet Monitor (p. 277)
•Using Amazon Athena to query internet measurements in Amazon S3 log ﬁles (p. 279)
Using CloudWatch Logs Insights with Amazon CloudWatch 
Internet Monitor
Amazon CloudWatch Internet Monitor publishes granular measurements of availability and round-trip 
time to CloudWatch Logs, and you can use CloudWatch Logs Insights queries to ﬁlter a subset of logs for 
a speciﬁc city or geography (client location), client ASN (ISP), and AWS source location.
To learn more about client location accuracy in Internet Monitor, see  Geolocation information and 
accuracy in Internet Monitor (p. 250).
The examples in this section can help you create CloudWatch Logs Insights queries to learn more about 
your own application traﬃc measurements and metrics. If you use these examples in CloudWatch Logs 
Insights, replace monitorName  with your own monitor name.
View traﬃc optimization suggestions
On the Traﬃc insights tab in Internet Monitor, you can view traﬃc optimization suggestions, ﬁltered 
by a location. To see the same information that is displayed in the Traﬃc optimization suggestions
section on that tab, but without the location granularity ﬁlter, you can use the following CloudWatch 
Logs Insights query.
1. In the AWS Management Console, navigate to CloudWatch Logs Insights.
2. For Log Group , select /aws/internet-monitor/ monitorName /byCity  and /aws/internet-
monitor/ monitorName /byCountry , and then specify a time range.
3. Add the following query, and then run the query.
fields @timestamp,  
clientLocation.city as @city, clientLocation.subdivision as @subdivision, 
 clientLocation.country as @country,
`trafficInsights.timeToFirstByte.currentExperience.serviceName` as @serviceNameField,
concat(@serviceNameField, ` (`, `serviceLocation`, `)`) as @currentExperienceField,
concat(`trafficInsights.timeToFirstByte.ec2.serviceName`, ` (`, 
 `trafficInsights.timeToFirstByte.ec2.serviceLocation`, `)`) as @ec2Field,
`trafficInsights.timeToFirstByte.cloudfront.serviceName` as @cloudfrontField,
concat(`clientLocation.networkName`, ` (AS`, `clientLocation.asn`, `)`) as @networkName
| filter ispresent(`trafficInsights.timeToFirstByte.currentExperience.value`)
| stats avg(`trafficInsights.timeToFirstByte.currentExperience.value`) as @averageTTFB,
avg(`trafficInsights.timeToFirstByte.ec2.value`) as @ec2TTFB,
avg(`trafficInsights.timeToFirstByte.cloudfront.value`) as @cloudfrontTTFB,
sum(`bytesIn` + `bytesOut`) as @totalBytes,
latest(@ec2Field) as @ec2,
latest(@currentExperienceField) as @currentExperience,
latest(@cloudfrontField) as @cloudfront,
count(*) by @networkName, @city, @subdivision, @country
| display @city, @subdivision, @country, @networkName, @totalBytes, @currentExperience, 
 @averageTTFB, @ec2, @ec2TTFB, @cloudfront, @cloudfrontTTFB
| sort @totalBytes desc
View internet availability and RTT (p50, p90, and p95)
To view the internet availability and round-trip time (p50, p90, and p95) for traﬃc, you can use the 
following CloudWatch Logs Insights query.
274Amazon CloudWatch User Guide
Log ﬁle insights
End user geography:  Chicago, IL, United States
End user network (ASN):  AS7018
AWS service location:  US East (N. Virginia) Region
To view the logs, do the following:
1. In the AWS Management Console, navigate to CloudWatch Logs Insights.
2. For Log Group , select /aws/internet-monitor/ monitorName /byCity  and /aws/internet-
monitor/ monitorName /byCountry , and then specify a time range.
3. Add the following query, and then run the query.
The query returns all the performance data for users connecting from AS7018 in Chicago, IL towards US 
East (N. Virginia) Region over the selected time period.
fields @timestamp,  
internetHealth.availability.experienceScore as availabilityExperienceScore,  
internetHealth.availability.percentageOfTotalTrafficImpacted as 
 percentageOfTotalTrafficImpacted,
internetHealth.performance.experienceScore as performanceExperienceScore,
internetHealth.performance.roundTripTime.p50 as roundTripTimep50,  
internetHealth.performance.roundTripTime.p90 as roundTripTimep90,  
internetHealth.performance.roundTripTime.p95 as roundTripTimep95 
 | filter clientLocation.country == `United States`  
 and clientLocation.city == `Chicago`  
 and serviceLocation == `us-east-1`  
 and clientLocation.asn == 7018
For more information, see Analyzing log data with CloudWatch Logs Insights.
Using Contributor Insights with Amazon CloudWatch Internet 
Monitor
CloudWatch Contributor Insights can help you identify top client locations and networks (ASNs or 
internet service providers) for your application. Use the following sample Contributor Insights rules to 
get started with rules that are useful with Amazon CloudWatch Internet Monitor. For more information, 
see Create a Contributor Insights rule (p. 656).
To learn more about client location accuracy in Internet Monitor, see  Geolocation information and 
accuracy in Internet Monitor (p. 250).
Note
Internet Monitor publishes data every ﬁve minutes, so after you set up a Contributor Insights 
rule, you must adjust the period to ﬁve minutes to see a graph.
View top locations and ASNs impacted by an availability impact
To view top client locations and ASNs impacted by a drop in availability, you can use the following 
Contributor Insights rule in the Syntax editor. Replace monitor-name  with your own monitor name.
{ 
    "Schema": { 
        "Name": "CloudWatchLogRule", 
        "Version": 1 
    }, 
    "AggregateOn": "Sum", 
    "Contribution": { 
275Amazon CloudWatch User Guide
Log ﬁle insights
        "Filters": [ 
            { 
                "Match": "$.clientLocation.city", 
                "IsPresent": true 
            } 
        ], 
        "Keys": [ 
            "$.clientLocation.city", 
            "$.clientLocation.networkName" 
        ], 
        "ValueOf": "$.awsInternetHealth.availability.percentageOfTotalTrafficImpacted" 
    }, 
    "LogFormat": "JSON", 
    "LogGroupNames": [ 
        "/aws/internet-monitor/ monitor-name /byCity" 
    ]
}
View top client locations and ASNs impacted by a latency impact
To view top client locations and ASNs impacted by an increase in round-trip time (latency), you can use 
the following Contributor Insights rule in the Syntax editor. Replace monitor-name  with your own 
monitor name.
{ 
    "Schema": { 
        "Name": "CloudWatchLogRule", 
        "Version": 1 
    }, 
    "AggregateOn": "Sum", 
    "Contribution": { 
        "Filters": [            { 
                "Match": "$.clientLocation.city", 
                "IsPresent": true 
            } 
        ], 
        "Keys": [ 
            "$.clientLocation.city", 
            "$.clientLocation.networkName" 
        ], 
        "ValueOf": "$.awsInternetHealth.performance.percentageOfTotalTrafficImpacted" 
    }, 
    "LogFormat": "JSON", 
    "LogGroupNames": [ 
        "/aws/internet-monitor/ monitor-name /byCity" 
    ]
}
View top client locations and ASNs impacted by total percentage of traﬃc
To view top client locations and ASNs impacted by total percentage of traﬃc, you can use the following 
Contributor Insights rule in the Syntax editor. Replace monitor-name  with your own monitor name.
{ 
    "Schema": { 
        "Name": "CloudWatchLogRule", 
        "Version": 1 
    }, 
    "AggregateOn": "Sum", 
    "Contribution": { 
        "Filters": [ 
            { 
                "Match": "$.clientLocation.city", 
276Amazon CloudWatch User Guide
Log ﬁle insights
                "IsPresent": true 
            } 
        ], 
        "Keys": [ 
            "$.clientLocation.city", 
            "$.clientLocation.networkName" 
        ], 
        "ValueOf": "$.percentageOfTotalTraffic" 
    }, 
    "LogFormat": "JSON", 
    "LogGroupNames": [ 
        "/aws/internet-monitor/ monitor-name /byCity" 
    ]
}
Using CloudWatch Metrics with Amazon CloudWatch Internet 
Monitor
Amazon CloudWatch Internet Monitor publishes metrics to your account, including metrics for 
performance, availability, round-trip time, and throughput (bytes per second), which you can view in 
CloudWatch Metrics in the CloudWatch console. To ﬁnd all metrics for your monitor, in the CloudWatch 
Metrics dashboard, see the custom namespace AWS/InternetMonitor .
Metrics are aggregated across all internet traﬃc to your VPCs, Network Load Balancers, CloudFront 
distributions, or WorkSpaces directories in the monitor, and to all traﬃc to each AWS Region and internet 
edge location that is monitored. Regions are deﬁned by the service location, which can either be all 
locations or a speciﬁc Region, such as us-east-1 .
Note: city-networks  are client locations and ASNs (typically internet service providers or ISPs).
Internet Monitor provides the following metrics.
Metric Description
PerformanceScore A performance score represents the estimated 
percentage of traﬃc that is not seeing a 
performance drop.
AvailabilityScore An availability score represents the estimated 
percentage of traﬃc that is not seeing an 
availability drop.
BytesIn Bytes transferred in for your application internet 
traﬃc at all application city-networks.
BytesOut Bytes transferred out for your application internet 
traﬃc at all application city-networks.
BytesInMonitored Bytes transferred in for your application internet 
traﬃc at monitored city-networks.
BytesOutMonitored Bytes transferred out for your application internet 
traﬃc at monitored city-networks.
Round-trip time (RTT) Round-trip time between the AWS Regions, ASNs 
(typically internet service providers or ISPs), and 
locations (such as cities) speciﬁc to your VPCs, 
Network Load Balancers, CloudFront distributions, 
or WorkSpaces directories.
277Amazon CloudWatch User Guide
Log ﬁle insights
Metric Description
CityNetworksMonitored The number of city-networks Internet Monitor 
monitored for your application internet traﬃc. 
This is never more than the upper limit that 
you set as the maximum city-networks for the 
monitor.
TraﬃcMonitoredPercent The percentage of total application internet traﬃc 
for this monitor that is represented (included) 
by the city-networks that Internet Monitor is 
monitoring. This is less than 100 (that is, less than 
100%) if clients access your application in more 
city-networks than the maximum city-networks 
limit that you have set for the monitor.
CityNetworksFor100PercentTraﬃcThe number that you should set your city-
networks maximum limit to if you want to 
monitor 100% of your application internet traﬃc 
in Internet Monitor.
CityNetworksFor99PercentTraﬃcThe number that you should set your city-
networks maximum limit to if you want to 
monitor 99% of your application internet traﬃc in 
Internet Monitor.
CityNetworksFor95PercentTraﬃcThe number that you should set your city-
networks maximum limit to if you want to 
monitor 95% of your application internet traﬃc in 
Internet Monitor.
CityNetworksFor90PercentTraﬃcThe number that you should set your city-
networks maximum limit to if you want to 
monitor 90% of your application internet traﬃc in 
Internet Monitor.
CityNetworksFor75PercentTraﬃcThe number that you should set your city-
networks maximum limit to if you want to 
monitor 75% of your application internet traﬃc in 
Internet Monitor.
CityNetworksFor50PercentTraﬃcThe number that you should set your city-
networks maximum limit to if you want to 
monitor 50% of your application internet traﬃc in 
Internet Monitor.
CityNetworksFor25PercentTraﬃcThe number that you should set your city-
networks maximum limit to if you want to 
monitor 25% of your application internet traﬃc in 
Internet Monitor.
Note
To see examples for using several of these metrics to help determine values to choose for a city-
networks maximum for your monitor, see Choosing a city-network maximum value (p. 256).
For more information, see Use Amazon CloudWatch metrics (p. 77).
278Amazon CloudWatch User Guide
Log ﬁle insights
Using Amazon Athena to query internet measurements in 
Amazon S3 log ﬁles
You can use Amazon Athena to query and view the internet measurements that Amazon CloudWatch 
Internet Monitor publishes to an Amazon S3 bucket. There's an option in Internet Monitor to publish 
internet measurements for your application to an S3 bucket for internet-facing traﬃc for your monitored 
city-networks (client locations and ASNs, typically internet service providers or ISPs). Regardless of 
whether you choose to publish measurements to S3, Internet Monitor automatically publishes internet 
measurements to CloudWatch Logs every ﬁve minutes for the top 500 (by traﬃc volume) city-networks 
for each monitor.
This chapter includes steps for how to create a table in Athena for internet measurements located in an 
S3 log ﬁle, and then provides example queries  (p. 280) to see diﬀerent views of the measurements. For 
example, you can query for your top 10 impacted city-networks by latency impact.
Using Amazon Athena to create a table for internet measurements in Internet 
Monitor
To start using Athena with your Internet Monitor S3 log ﬁles, you ﬁrst create a table for the internet 
measurements.
Follow the steps in this procedure to create a table in Athena based on the S3 log ﬁles. Then, you can 
run Athena queries on the table, such as these example internet measurements queries (p. 280), to get 
information about your measurements.
To create an Athena table
1. Open the Athena console at https://console.aws.amazon.com/athena/.
2. In the Athena query editor, enter a query statement to generate a table with Internet Monitor 
internet measurements. Replace the value for the LOCATION parameter with the location of S3 
bucket where your Internet Monitor internet measurements are stored.
CREATE EXTERNAL TABLE internet_measurements ( 
    version INT, 
    timestamp INT, 
    clientlocation STRING, 
    servicelocation STRING, 
    percentageoftotaltraffic DOUBLE, 
    bytesin INT, 
    bytesout INT, 
    clientconnectioncount INT, 
    internethealth STRING, 
    trafficinsights STRING
)
PARTITIONED BY (year STRING, month STRING, day STRING)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
LOCATION
's3://bucket_name /bucket_prefix /AWSLogs/ account_id /internetmonitor/ AWS_Region /'
TBLPROPERTIES ('skip.header.line.count' = '1');
3. Enter a statement to create a partition to read the data. For example, the following query creates a 
single partition for a speciﬁed date and location:
ALTER TABLE internet_measurements
ADD PARTITION (year = 'YYYY', month = 'MM', day = 'dd')
LOCATION
's3://bucket_name /bucket_prefix /AWSLogs/ account_id /internetmonitor/ AWS_Region /YYYY/MM/
DD';
279Amazon CloudWatch User Guide
Log ﬁle insights
4. Choose Run.
Example Athena statements for internet measurements
The following is an example of a statement to generate a table:
CREATE EXTERNAL TABLE internet_measurements ( 
    version INT, 
    timestamp INT, 
    clientlocation STRING, 
    servicelocation STRING, 
    percentageoftotaltraffic DOUBLE, 
    bytesin INT, 
    bytesout INT, 
    clientconnectioncount INT, 
    internethealth STRING, 
    trafficinsights STRING
)
PARTITIONED BY (year STRING, month STRING, day STRING)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
LOCATION 's3://internet-measurements/TestMonitor/AWSLogs/1111222233332/internetmonitor/us-
east-2/'
TBLPROPERTIES ('skip.header.line.count' = '1');
The following is an example of a statement to create a partition to read the data:
ALTER TABLE internet_measurements
ADD PARTITION (year = '2023', month = '04', day = '07')
LOCATION 's3://internet-measurements/TestMonitor/AWSLogs/1111222233332/internetmonitor/us-
east-2/2023/04/07/'
Sample Amazon Athena queries to use with internet measurements in Internet 
Monitor
This section includes example queries that you can use with Amazon Athena to get information about 
your application's internet measurements published to Amazon S3.
Query your top 10 impacted (by total percentage of traﬃc) client locations and ASNs
Run this Athena query to return your top 10 impacted (by total percentage of traﬃc) city-networks—
that is, client locations and ASNs, typically internet service providers.
SELECT json_extract_scalar(clientLocation, '$.city') as city, 
    json_extract_scalar(clientLocation, '$.networkname') as networkName, 
    sum(percentageoftotaltraffic) as percentageoftotaltraffic
FROM internet_measurements
GROUP BY json_extract_scalar(clientLocation, '$.city'), 
    json_extract_scalar(clientLocation, '$.networkname')
ORDER BY percentageoftotaltraffic desc
limit 10
Query your top 10 impacted (by availability) client locations and ASNs
Run this Athena query to return your top 10 impacted (by total percentage of traﬃc) city-networks—
that is, client locations and ASNs, typically internet service providers.
SELECT json_extract_scalar(clientLocation, '$.city') as city, 
    json_extract_scalar(clientLocation, '$.networkname') as networkName, 
    sum( 
        cast( 
280Amazon CloudWatch User Guide
Log ﬁle insights
            json_extract_scalar( 
                internetHealth, 
                '$.availability.percentageoftotaltrafficimpacted' 
            ) 
        as double )  
    ) as percentageOfTotalTrafficImpacted
FROM internet_measurements
GROUP BY json_extract_scalar(clientLocation, '$.city'), 
    json_extract_scalar(clientLocation, '$.networkname')
ORDER BY percentageOfTotalTrafficImpacted desc
limit 10
Query your top 10 impacted (by latency) client locations and ASNs
Run this Athena query to return your top 10 impacted (by latency impact) city-networks—that is, client 
locations and ASNs, typically internet service providers.
SELECT json_extract_scalar(clientLocation, '$.city') as city, 
    json_extract_scalar(clientLocation, '$.networkname') as networkName, 
    sum( 
        cast( 
            json_extract_scalar( 
                internetHealth, 
                '$.performance.percentageoftotaltrafficimpacted' 
            ) 
        as double )  
    ) as percentageOfTotalTrafficImpacted
FROM internet_measurements
GROUP BY json_extract_scalar(clientLocation, '$.city'), 
    json_extract_scalar(clientLocation, '$.networkname')
ORDER BY percentageOfTotalTrafficImpacted desc
limit 10
Query traﬃc highlights for your client locations and ASNs
Run this Athena query to return traﬃc highlights, including availability score, performance score, and 
time to ﬁrst byte for your city-networks—that is, client locations and ASNs, typically internet service 
providers. .
SELECT json_extract_scalar(clientLocation, '$.city') as city, 
    json_extract_scalar(clientLocation, '$.subdivision') as subdivision, 
    json_extract_scalar(clientLocation, '$.country') as country, 
    avg(cast(json_extract_scalar(internetHealth, '$.availability.experiencescore') as 
 double)) as availabilityScore, 
    avg(cast(json_extract_scalar(internetHealth, '$.performance.experiencescore') as 
 double)) performanceScore, 
    avg(cast(json_extract_scalar(trafficinsights, 
 '$.timetofirstbyte.currentexperience.value') as double)) as averageTTFB, 
    sum(bytesIn) as bytesIn, 
    sum(bytesOut) as bytesOut, 
    sum(bytesIn + bytesOut) as totalBytes
FROM internet_measurements
where json_extract_scalar(clientLocation, '$.city') != 'N/A'
GROUP BY  
json_extract_scalar(clientLocation, '$.city'), 
    json_extract_scalar(clientLocation, '$.subdivision'), 
    json_extract_scalar(clientLocation, '$.country')
ORDER BY totalBytes desc
limit 100
For more information about using Athena, see the Amazon Athena User Guide.
281Amazon CloudWatch User Guide
Create alarms
Creating alarms with Amazon CloudWatch Internet 
Monitor
You can create Amazon CloudWatch alarms based on Amazon CloudWatch Internet Monitor metrics, just 
as you can for other Amazon CloudWatch metrics.
For example, you can create an alarm based on the Internet Monitor metric PerformanceScore , and 
conﬁgure it to send a notiﬁcation when the metric is lower than a value that you choose. You conﬁgure 
alarms for Internet Monitor metrics following the same guidelines as for other CloudWatch metrics.
Following are the example Internet Monitor metrics that you might choose to create an alarm for:
•PerformanceScore
•AvailabilityScore
•RoundtripTime
To see all the metrics available for Internet Monitor, see Using CloudWatch Metrics with Amazon 
CloudWatch Internet Monitor (p. 277).
The following procedure provides an example of setting an alarm on PerformanceScore by navigating to 
the metric in the CloudWatch dashboard. Then, you follow the standard CloudWatch steps to create an 
alarm based on a threshold that you choose, and set up a notiﬁcation or choose other options.
To create an alarm for PerformanceScore in CloudWatch Metrics
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. Choose Metrics , and then choose All metrics .
3. Filter for Internet Monitor by choosing AWS/InternetMonitor .
4. Choose MeasurementSource, MonitorName.
5. In the list, select PerformanceScore.
6. On the GraphedMetrics  tab, under Actions, choose the bell icon to create an alarm based on a static 
threshold.
Now, follow the standard CloudWatch steps to choose options for the alarm. For example, you can 
choose to be notiﬁed by an Amazon SNS message if PerformanceScore is below a speciﬁc threshold 
number. Alternatively, or in addition, you can add the alarm to a dashboard.
For more information about options when you create a CloudWatch alarm, see Create a CloudWatch 
alarm based on a static threshold (p. 190).
Using Amazon CloudWatch Internet Monitor with 
Amazon EventBridge
The health events that Amazon CloudWatch Internet Monitor creates for networking issues are published 
with Amazon EventBridge, so that you can send notiﬁcations about any degradation in end users' 
experience for your application.
To use EventBridge to work with Internet Monitor health events, follow the guidance here.
To set up a rule for Internet Monitor in EventBridge
1. In the AWS Management Console, in EventBridge, choose Rules, then enter a name and a 
description. Create the rule on the Default  event bus.
282Amazon CloudWatch User Guide
Data protection and data privacy
2. In Step 2, select Other  for the event source, and then, under Event pattern, match the following 
source.
{ 
  "source": ["aws.internetmonitor"]
}
3. In Step 3, for the target, select AWS Service and CloudWatch Logs Group, then select an existing 
log group or create a new one.
4. Add any desired tags, and then create the rule. This should populate your selected CloudWatch Logs 
Group with events from EventBridge.
For more information about how EventBridge rules work with event patterns, see Amazon EventBridge 
event patterns in the Amazon EventBridge User Guide.
Data protection and data privacy with Amazon 
CloudWatch Internet Monitor
The AWS  shared responsibility model applies to data protection and data privacy in Amazon 
CloudWatch Internet Monitor. As described in this model, AWS is responsible for protecting the global 
infrastructure that runs all of the AWS cloud. You are responsible for maintaining control over your 
content that is hosted on this infrastructure. For more information about data privacy, see the  Data 
Privacy FAQ. For information about data protection in Europe, see  The AWS Shared Responsibility 
Model and GDPR  blog post on the AWS Security Blog. For more resources about complying with GDPR 
requirements, see the  General Data Protection Regulation (GDPR) Center.
We strongly recommend that you never put sensitive identifying information, such as your end users’ 
account numbers, email addresses, or other personal information, into free-form ﬁelds. Any data that 
you enter into Amazon CloudWatch Internet Monitor or other services might be included in diagnostic 
logs.
Identity and Access Management for Amazon 
CloudWatch Internet Monitor
AWS Identity and Access Management (IAM) is an AWS service that helps an administrator securely 
control access to AWS resources. IAM administrators control who can be authenticated  (signed in) and
authorized  (have permissions) to use Internet Monitor resources. IAM is an AWS service that you can use 
with no additional charge.
Important
Internet Monitor resource changes on February 24, 2023
If you created IAM policies that included Internet Monitor resources before February 24, 2023, 
be aware of the following changes to Internet Monitor resources and resource types.
•HealthEvents resource was renamed to HealthEvent.
•The ARN and Regex formats for the HealthEvent resource were updated.
•The ARN and Regex formats for the Monitor  resource were updated.
•Resource-level permissions for the GetHealthEvent action are now supported only on the
HealthEvent resource type. They're not supported on the Monitor  resource.
•TagResource, UntagResource, and ListTagsForResource for the Monitor  resource type were 
updated to be required.
283Amazon CloudWatch User Guide
Identity and Access Management
To see more information about the actions, resources, and condition keys that you can specify 
in policies to manage access to AWS resources in Internet Monitor, see Actions, resources, and 
condition keys for Amazon CloudWatch Internet Monitor.
Contents
•How Amazon CloudWatch Internet Monitor works with IAM (p. 284)
•IAM permissions for Amazon CloudWatch Internet Monitor (p. 288)
•Using a service-linked role for Amazon CloudWatch Internet Monitor (p. 290)
How Amazon CloudWatch Internet Monitor works with IAM
Before you use IAM to manage access to Internet Monitor, learn what IAM features are available to use 
with Internet Monitor.
To see tables showing a similar high-level view of how AWS services work with most IAM features, see
AWS services that work with IAM in the IAM User Guide .
IAM features you can use with Amazon CloudWatch Internet Monitor
IAM feature Internet Monitor support
Identity-based policies (p. 284) Yes
Resource-based policies (p. 285) No
Policy actions (p. 285) Yes
Policy resources (p. 285) Yes
Policy condition keys (service-speciﬁc) (p. 286) Yes
ACLs (p. 286) No
ABAC (tags in policies) (p. 287) Partial
Temporary credentials (p. 287) Yes
Principal permissions  (p. 287) Yes
Service roles (p. 288) No
Service-linked roles (p. 288) Yes
Identity-based policies for Internet Monitor
Supports identity-based policies Yes
Identity-based policies are JSON permissions policy documents that you can attach to an identity, such 
as an IAM user, group of users, or role. These policies control what actions users and roles can perform, 
on which resources, and under what conditions. To learn how to create an identity-based policy, see
Creating IAM policies in the IAM User Guide .
With IAM identity-based policies, you can specify allowed or denied actions and resources as well as the 
conditions under which actions are allowed or denied. You can't specify the principal in an identity-based 
284Amazon CloudWatch User Guide
Identity and Access Management
policy because it applies to the user or role to which it is attached. To learn about all of the elements 
that you can use in a JSON policy, see IAM JSON policy elements reference in the IAM User Guide .
Resource-based policies within Internet Monitor
Supports resource-based policies No
Resource-based policies are JSON policy documents that you attach to a resource. Examples of resource-
based policies are IAM role trust policies and Amazon S3 bucket policies. In services that support 
resource-based policies, service administrators can use them to control access to a speciﬁc resource.
Policy actions for Internet Monitor
Supports policy actions Yes
Administrators can use AWS JSON policies to specify who has access to what. That is, which principal  can 
perform actions on what resources, and under what conditions.
The Action element of a JSON policy describes the actions that you can use to allow or deny access in a 
policy. Policy actions usually have the same name as the associated AWS API operation. There are some 
exceptions, such as permission-only actions that don't have a matching API operation. There are also 
some operations that require multiple actions in a policy. These additional actions are called dependent 
actions .
Include actions in a policy to grant permissions to perform the associated operation.
To see a list of Internet Monitor actions, see Actions deﬁned by Amazon CloudWatch Internet Monitor in 
the Service Authorization Reference.
Policy actions in Internet Monitor use the following preﬁx before the action:
internetmonitor
To specify multiple actions in a single statement, separate them with commas.
"Action": [ 
      "internetmonitor: action1", 
      "internetmonitor: action2" 
         ]
You can specify multiple actions using wildcards (*). For example, to specify all actions that begin with 
the word Describe , include the following action:
"Action": "internetmonitor:Describe*"
Policy resources for Internet Monitor
Supports policy resources Yes
In the Service Authorization Reference, you can see the following information related to Internet Monitor:
285Amazon CloudWatch User Guide
Identity and Access Management
•To see a list of Internet Monitor resource types and their ARNs, see Resources deﬁned by Amazon 
CloudWatch Internet Monitor.
•To learn the actions that you can specify with the ARN of each resource, see Actions deﬁned by 
Amazon CloudWatch Internet Monitor.
Administrators can use AWS JSON policies to specify who has access to what. That is, which principal  can 
perform actions on what resources, and under what conditions.
The Resource  JSON policy element speciﬁes the object or objects to which the action applies. 
Statements must include either a Resource  or a NotResource  element. As a best practice, specify 
a resource using its Amazon Resource Name (ARN). You can do this for actions that support a speciﬁc 
resource type, known as resource-level permissions .
For actions that don't support resource-level permissions, such as listing operations, use a wildcard (*) to 
indicate that the statement applies to all resources.
"Resource": "*"
Policy condition keys for Internet Monitor
Supports service-speciﬁc policy condition keys Yes
Administrators can use AWS JSON policies to specify who has access to what. That is, which principal  can 
perform actions on what resources, and under what conditions.
The Condition  element (or Condition  block ) lets you specify conditions in which a statement is in 
eﬀect. The Condition  element is optional. You can create conditional expressions that use condition 
operators , such as equals or less than, to match the condition in the policy with values in the request.
If you specify multiple Condition  elements in a statement, or multiple keys in a single Condition
element, AWS evaluates them using a logical AND operation. If you specify multiple values for a single 
condition key, AWS evaluates the condition using a logical OR operation. All of the conditions must be 
met before the statement's permissions are granted.
You can also use placeholder variables when you specify conditions. For example, you can grant an IAM 
user permission to access a resource only if it is tagged with their IAM user name. For more information, 
see IAM policy elements: variables and tags in the IAM User Guide .
AWS supports global condition keys and service-speciﬁc condition keys. To see all AWS global condition 
keys, see AWS global condition context keys in the IAM User Guide .
To see a list of Internet Monitor condition keys, see Condition keys for Amazon CloudWatch Internet 
Monitor  in the Service Authorization Reference. To learn with which actions and resources you can use a 
condition key, see Actions deﬁned by Amazon CloudWatch Internet Monitor.
ACLs in Internet Monitor
Supports ACLs No
Access control lists (ACLs) control which principals (account members, users, or roles) have permissions to 
access a resource. ACLs are similar to resource-based policies, although they do not use the JSON policy 
document format.
286Amazon CloudWatch User Guide
Identity and Access Management
ABAC with Internet Monitor
Supports ABAC (tags in policies) Partial
Internet Monitor has partial support for tags in policies. It supports tagging for one resource, monitors.
To use tags with Internet Monitor, use the AWS Command Line Interface or an AWS SDK. Tagging for 
Internet Monitor is not supported with the AWS Management Console.
To learn more about using tags in policies in general, review the following information.
Attribute-based access control (ABAC) is an authorization strategy that deﬁnes permissions based on 
attributes. In AWS, these attributes are called tags. You can attach tags to IAM entities (users or roles) 
and to many AWS resources. Tagging entities and resources is the ﬁrst step of ABAC. Then you design 
ABAC policies to allow operations when the principal's tag matches the tag on the resource that they are 
trying to access.
ABAC is helpful in environments that are growing rapidly and helps with situations where policy 
management becomes cumbersome.
To control access based on tags, you provide tag information in the condition element of a policy using 
the aws:ResourceTag/ key-name , aws:RequestTag/ key-name , or aws:TagKeys  condition keys.
If a service supports all three condition keys for every resource type, then the value is Yes for the service. 
If a service supports all three condition keys for only some resource types, then the value is Partial.
For more information about ABAC, see What is ABAC? in the IAM User Guide . To view a tutorial with steps 
for setting up ABAC, see Use attribute-based access control (ABAC) in the IAM User Guide .
Using temporary credentials with Internet Monitor
Supports temporary credentials Yes
Some AWS services don't work when you sign in using temporary credentials. For additional information, 
including which AWS services work with temporary credentials, see AWS services that work with IAM in 
the IAM User Guide .
You are using temporary credentials if you sign in to the AWS Management Console using any method 
except a user name and password. For example, when you access AWS using your company's single 
sign-on (SSO) link, that process automatically creates temporary credentials. You also automatically 
create temporary credentials when you sign in to the console as a user and then switch roles. For more 
information about switching roles, see Switching to a role (console) in the IAM User Guide .
You can manually create temporary credentials using the AWS CLI or AWS API. You can then use those 
temporary credentials to access AWS. AWS recommends that you dynamically generate temporary 
credentials instead of using long-term access keys. For more information, see Temporary security 
credentials in IAM.
Cross-service principal permissions for Internet Monitor
Supports principal permissions Yes
287Amazon CloudWatch User Guide
Identity and Access Management
When you use an IAM user or role to perform actions in AWS, you are considered a principal. Policies 
grant permissions to a principal. When you use some services, you might perform an action that 
then triggers another action in a diﬀerent service. In this case, you must have permissions to perform 
both actions. To see whether an action requires additional dependent actions in a policy, see Actions, 
resources, and condition keys for Amazon CloudWatch Internet Monitor in the Service Authorization 
Reference.
Service roles for Internet Monitor
Supports service roles No
A service role is an IAM role that a service assumes to perform actions on your behalf. An IAM 
administrator can create, modify, and delete a service role from within IAM. For more information, see
Creating a role to delegate permissions to an AWS service in the IAM User Guide .
Service-linked role for Internet Monitor
Supports service-linked roles Yes
A service-linked role is a type of service role that is linked to an AWS service. The service can assume the 
role to perform an action on your behalf. Service-linked roles appear in your AWS account and are owned 
by the service. An IAM administrator can view, but not edit the permissions for service-linked roles.
For more information about the service-linked role for Internet Monitor, see Using a service-linked role 
for Amazon CloudWatch Internet Monitor (p. 290).
For details about creating or managing service-linked roles in general in AWS, see AWS services that 
work with IAM. Find a service in the table that includes a Yes in the Service-linked role column. Choose 
the Yes link to view the service-linked role documentation for that service.
IAM permissions for Amazon CloudWatch Internet Monitor
To use Amazon CloudWatch Internet Monitor, users must have the correct permissions.
For more information about security in Amazon CloudWatch, see Identity and access management for 
Amazon CloudWatch (p. 1153 ).
Permissions required to view a monitor
To view a monitor for Amazon CloudWatch Internet Monitor in the AWS Management Console, you must 
be signed in as a user or role that has the following permissions:
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "internetmonitor:Get*", 
                "internetmonitor:List*", 
                "logs:DescribeLogGroups", 
                "logs:GetQueryResults", 
                "logs:StartQuery", 
288Amazon CloudWatch User Guide
Identity and Access Management
                "logs:StopQuery", 
                "cloudwatch:GetMetricData" 
                ], 
            "Resource": "*" 
        } 
    ]
}
Permissions required to create a monitor
To create a monitor in Amazon CloudWatch Internet Monitor, users must have permission to create a 
service-linked role that is associated with Internet Monitor. To learn more about the Internet Monitor 
service-linked role, see Using a service-linked role for Amazon CloudWatch Internet Monitor (p. 290).
To create a monitor for Amazon CloudWatch Internet Monitor in the AWS Management Console, you 
must be signed in as a user or role that has the permissions included in the following policy.
Note
If you create an identity-based permissions policy that is more restrictive, users with that policy 
won't be able to create a monitor.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "internetmonitor:*" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/
internetmonitor.amazonaws.com/AWSServiceRoleForInternetMonitor", 
            "Condition": { 
                "StringLike": { 
                    "iam:AWSServiceName": "internetmonitor.amazonaws.com" 
                } 
            } 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "iam:AttachRolePolicy", 
                "iam:PutRolePolicy" 
            ], 
            "Resource": "arn:aws:iam::*:role/aws-service-role/
internetmonitor.amazonaws.com/AWSServiceRoleForInternetMonitor" 
        }, 
        { 
            "Action": [ 
                "ec2:DescribeVpcs", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "workspaces:DescribeWorkspaceDirectories", 
                "cloudfront:GetDistribution" 
            ], 
            "Effect": "Allow", 
            "Resource": "*" 
        } 
    ]
}
289Amazon CloudWatch User Guide
Identity and Access Management
Using a service-linked role for Amazon CloudWatch Internet 
Monitor
Amazon CloudWatch Internet Monitor uses an AWS Identity and Access Management (IAM) service-linked 
role. A service-linked role is a unique type of IAM role that is linked directly to Internet Monitor. The 
service-linked role is predeﬁned by Internet Monitor and includes all the permissions that the service 
requires to call other AWS services on your behalf.
Internet Monitor deﬁnes the permissions of the service-linked role, and unless deﬁned otherwise, 
only Internet Monitor can assume the role. The deﬁned permissions include the trust policy and the 
permissions policy, and that permissions policy cannot be attached to any other IAM entity.
You can delete the role only after ﬁrst deleting its related resources. This restriction protects your 
Internet Monitor resources because you can't inadvertently remove permissions to access the resources.
For information about other services that support service-linked roles, see AWS services that work with 
IAM and look for the services that have Yes in the Service-linked role column. Choose a Yes with a link 
to view the service-linked role documentation for that service.
Service-linked role permissions for Internet Monitor
Internet Monitor uses the service-linked role named AWSServiceRoleForInternetMonitor. This role 
allows Internet Monitor to access resources in your account, such as Amazon Virtual Private Cloud 
resources, Amazon CloudFront distributions, Amazon WorkSpaces directories, and Network Load 
Balancers, so that you can select them when you create a monitor.
This service-linked role uses the managed policy CloudWatchInternetMonitorServiceRolePolicy.
The AWSServiceRoleForInternetMonitor service-linked role trusts the following service to assume the 
role:
•internetmonitor.amazonaws.com
The role permissions policy allows Internet Monitor to complete the following actions on the speciﬁed 
resources:
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Action": [ 
                "cloudfront:GetDistribution", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DescribeVpcs", 
                "elasticloadbalancing:DescribeLoadBalancers", 
                "workspaces:DescribeWorkspaceDirectories" 
            ], 
            "Effect": "Allow", 
            "Resource": "*" 
        }, 
        { 
            "Action": "logs:CreateLogGroup", 
            "Effect": "Allow", 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/internet-monitor/*" 
        }, 
        { 
            "Action": [ 
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
290Amazon CloudWatch User Guide
Quotas
                "logs:PutLogEvents" 
            ], 
            "Effect": "Allow", 
            "Resource": "arn:aws:logs:*:*:log-group:/aws/internet-monitor/*:log-stream:*" 
        }, 
        { 
            "Action": "cloudwatch:PutMetricData", 
            "Effect": "Allow", 
            "Condition": { 
                "StringEquals": { 
                    "cloudwatch:namespace": "AWS/InternetMonitor" 
                } 
            }, 
            "Resource": "*" 
        } 
    ],
}
Creating a service-linked role for Internet Monitor
You do not need to manually create the service-linked role for Internet Monitor. The ﬁrst time that you 
create a monitor, Internet Monitor creates AWSServiceRoleForInternetMonitor for you.
For more information, see Creating a service-linked role in the IAM User Guide .
Editing a service-linked role for Internet Monitor
After Internet Monitor creates a service-linked role in your account, you cannot change the name of the 
role because various entities might reference the role. You can edit the description of the role using IAM. 
For more information, see Editing a service-linked role in the IAM User Guide .
Deleting a service-linked role for Internet Monitor
If you no longer need to use a feature or service that requires a service-linked role, we recommend 
that you delete the role. That way you don’t have an unused entity that is not actively monitored 
or maintained. However, you must clean up the resources for the service-linked role before you can 
manually delete it.
After you've removed your resources from your monitors in Internet Monitor and then deleted the 
monitors, you can delete the service-linked role AWSServiceRoleForInternetMonitor.
Note
If the Internet Monitor service is using the role when you try to delete it, then the deletion 
might fail. If that happens, wait for a few minutes and then try again.
To manually delete the service-linked role using IAM
Use the IAM console, the AWS CLI, or the AWS API to delete the AWSServiceRoleForInternetMonitor
service-linked role. For more information, see Deleting a service-linked role in the IAM User Guide .
Updates to the Internet Monitor service-linked role
For updates to AWSServiceRoleForInternetMonitor, the AWS managed policy for the Internet Monitor 
service-linked role, see CloudWatch updates to AWS managed policies (p. 1184 ). For automatic alerts 
about managed policy changes in CloudWatch, subscribe to the RSS feed on the CloudWatch Document 
history page.
Quotas in Amazon CloudWatch Internet Monitor
Amazon CloudWatch Internet Monitor has the following quotas.
291Amazon CloudWatch User Guide
Using synthetic monitoring
Resource Default quota
Monitors per Region 50
Resources per monitor 50
Days that resolved Internet Monitor 
health events are retained400
Using synthetic monitoring
You can use Amazon CloudWatch Synthetics to create canaries , conﬁgurable scripts that run on a 
schedule, to monitor your endpoints and APIs. Canaries follow the same routes and perform the same 
actions as a customer, which makes it possible for you to continually verify your customer experience 
even when you don't have any customer traﬃc on your applications. By using canaries, you can discover 
issues before your customers do.
Canaries are scripts written in Node.js or Python. They create Lambda functions in your account that use 
Node.js or Python as a framework. Canaries work over both HTTP and HTTPS protocols.
Canaries oﬀer programmatic access to a headless Google Chrome Browser via Puppeteer or Selenium 
Webdriver. For more information about Puppeteer, see Puppeteer . For more information about Selenium, 
see www.selenium.dev/.
Canaries check the availability and latency of your endpoints and can store load time data and 
screenshots of the UI. They monitor your REST APIs, URLs, and website content, and they can check for 
unauthorized changes from phishing, code injection and cross-site scripting.
For a video demonstration of canaries, see the following:
•Introduction to Amazon CloudWatch Synthetics
•Amazon CloudWatch Synthetics Demo
•Create Canaries Using Amazon CloudWatch Synthetics
•Visual Monitoring with Amazon CloudWatch Synthetics
You can run a canary once or on a regular schedule. Canaries can run as often as once per minute. You 
can use both cron and rate expressions to schedule canaries.
For information about security issues to consider before you create and run canaries, see Security 
considerations for Synthetics canaries (p. 1229 ).
By default, canaries create several CloudWatch metrics in the CloudWatchSynthetics  namespace. 
These metrics have CanaryName  as a dimension. Canaries that use the executeStep()  or
executeHttpStep()  function from the function library also have StepName  as a dimension. 
For more information about the canary function library, see Library functions available for canary 
scripts  (p. 332).
CloudWatch Synthetics integrates well with CloudWatch ServiceLens, which uses CloudWatch with AWS 
X-Ray to provide an end-to-end view of your services to help you more eﬃciently pinpoint performance 
bottlenecks and identify impacted users. Canaries that you create with CloudWatch Synthetics appear on 
the ServiceLens service map. For more information about ServiceLens, see Using ServiceLens to monitor 
the health of your applications (p. 229).
CloudWatch Synthetics is currently available in all commercial AWS Regions and the GovCloud Regions.
292Amazon CloudWatch User Guide
Required roles and permissions
Note
In Asia Paciﬁc (Osaka), AWS PrivateLink is not supported. In Asia Paciﬁc (Jakarta), AWS 
PrivateLink and X-Ray are not supported.
Topics
•Required roles and permissions for CloudWatch canaries (p. 293)
•Creating a canary (p. 303)
•Groups (p. 364)
•Troubleshooting a failed canary (p. 365)
•Sample code for canary scripts (p. 368)
•Canaries and X-Ray tracing (p. 372)
•Running a canary on a VPC (p. 373)
•Encrypting canary artifacts (p. 374)
•Viewing canary statistics and details (p. 375)
•CloudWatch metrics published by canaries (p. 377)
•Edit or delete a canary (p. 378)
•Start, stop, delete, or update runtime for multiple canaries (p. 380)
•Monitoring canary events with Amazon EventBridge (p. 380)
Required roles and permissions for CloudWatch 
canaries
Both the users who create and manage canaries, and the canaries themselves, must have certain 
permissions.
Required roles and permissions for users who manage 
CloudWatch canaries
To view canary details and the results of canary runs, you must be signed in as a user with either the
CloudWatchSyntheticsFullAccess  or the CloudWatchSyntheticsReadOnlyAccess  policies 
attached. To read all Synthetics data in the console, you also need the AmazonS3ReadOnlyAccess  and
CloudWatchReadOnlyAccess  policies. To view the source code used by canaries, you also need the
AWSLambda_ReadOnlyAccess  policy.
To create canaries, you must be signed in as an user who has the CloudWatchSyntheticsFullAccess
policy or a similar set of permissions. To create IAM roles for the canaries, you also need the following 
inline policy statement:
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "iam:CreateRole", 
                "iam:CreatePolicy", 
                "iam:AttachRolePolicy" 
            ], 
            "Resource": [ 
                "arn:aws:iam::*:role/service-role/CloudWatchSyntheticsRole*", 
                "arn:aws:iam::*:policy/service-role/CloudWatchSyntheticsPolicy*" 
293Amazon CloudWatch User Guide
Required roles and permissions
            ] 
        } 
    ]
}
Important
Granting a user the iam:CreateRole , iam:CreatePolicy , and iam:AttachRolePolicy
permissions gives that user full administrative access to your AWS account. For example, a user 
with these permissions can create a policy that has full permissions for all resources and can 
attach that policy to any role. Be very careful about who you grant these permissions to.
For information about attaching policies and granting permissions to users, see Changing Permissions for 
an IAM User  and To embed an inline policy for a user or role.
Required roles and permissions for canaries
Each canary must be associated with an IAM role that has certain permissions attached. When you create 
a canary using the CloudWatch console, you can choose for CloudWatch Synthetics to create an IAM role 
for the canary. If you do, the role will have the permissions needed.
If you want to create the IAM role yourself, or create an IAM role that you can use when using the AWS 
CLI or APIs to create a canary, the role must contain the permissions listed in this section.
All IAM roles for canaries must include the following trust policy statement.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Principal": { 
                "Service": "lambda.amazonaws.com" 
            }, 
            "Action": "sts:AssumeRole" 
        } 
    ]
}
Additionally, the canary's IAM role needs one of the following statements.
Basic canary that doesn't use AWS KMS or need Amazon VPC access
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:PutObject", 
                "s3:GetObject" 
            ], 
            "Resource": [ 
                "arn:aws:s3::: path/to/your/s3/bucket/canary/results/folder "         
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:GetBucketLocation" 
            ], 
            "Resource": [ 
294Amazon CloudWatch User Guide
Required roles and permissions
                "arn:aws:s3::: name/of/the/s3/bucket/that/contains/canary/results "         
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:CreateLogGroup" 
            ], 
            "Resource": [ 
                "arn:aws:logs: canary_region_name :canary_account_id :log-group:/aws/lambda/
cwsyn-canary_name -*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:ListAllMyBuckets", 
                "xray:PutTraceSegments" 
            ], 
            "Resource": [ 
                "*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Resource": "*", 
            "Action": "cloudwatch:PutMetricData", 
            "Condition": { 
               "StringEquals": { 
                "cloudwatch:namespace": "CloudWatchSynthetics" 
               } 
            } 
        } 
    ]
}
Canary that uses AWS KMS to encrypt canary artifacts but does not need Amazon VPC access
{ 
    "Version": "2012-10-17", 
    "Statement": [{ 
            "Effect": "Allow", 
            "Action": [ 
                "s3:PutObject", 
                "s3:GetObject" 
            ], 
            "Resource": [ 
                "arn:aws:s3::: path/to/your/S3/bucket/canary/results/folder " 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:GetBucketLocation" 
            ], 
            "Resource": [ 
                "arn:aws:s3::: name/of/the/S3/bucket/that/contains/canary/results " 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "logs:CreateLogStream", 
295Amazon CloudWatch User Guide
Required roles and permissions
                "logs:PutLogEvents", 
                "logs:CreateLogGroup" 
            ], 
            "Resource": [ 
                "arn:aws:logs: canary_region_name :canary_account_id :log-group:/aws/lambda/
cwsyn-canary_name -*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:ListAllMyBuckets", 
                "xray:PutTraceSegments" 
            ], 
            "Resource": [ 
                "*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Resource": "*", 
            "Action": "cloudwatch:PutMetricData", 
            "Condition": { 
                "StringEquals": { 
                    "cloudwatch:namespace": "CloudWatchSynthetics" 
                } 
            } 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "kms:Decrypt", 
                "kms:GenerateDataKey" 
            ], 
            "Resource": 
 "arn:aws:kms: KMS_key_region_name :KMS_key_account_id :key/KMS_key_id ", 
            "Condition": { 
                "StringEquals": { 
                    "kms:ViaService": [ 
                        "S3. region_name_of_the_canary_results_S3_bucket .amazonaws.com" 
                    ] 
                } 
            } 
        } 
    ]
}
Canary that does not use AWS KMS but does need Amazon VPC access
{ 
    "Version": "2012-10-17", 
    "Statement": [{ 
            "Effect": "Allow", 
            "Action": [ 
                "s3:PutObject", 
                "s3:GetObject" 
            ], 
            "Resource": [ 
                "arn:aws:s3::: path/to/your/S3/bucket/canary/results/folder " 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:GetBucketLocation" 
296Amazon CloudWatch User Guide
Required roles and permissions
            ], 
            "Resource": [ 
                "arn:aws:s3::: name/of/the/S3/bucket/that/contains/canary/results " 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:CreateLogGroup" 
            ], 
            "Resource": [ 
                "arn:aws:logs: canary_region_name :canary_account_id :log-group:/aws/lambda/
cwsyn-canary_name -*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:ListAllMyBuckets", 
                "xray:PutTraceSegments" 
            ], 
            "Resource": [ 
                "*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Resource": "*", 
            "Action": "cloudwatch:PutMetricData", 
            "Condition": { 
                "StringEquals": { 
                    "cloudwatch:namespace": "CloudWatchSynthetics" 
                } 
            } 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface" 
            ], 
            "Resource": [ 
                "*" 
            ] 
       } 
    ]
}
Canary that uses AWS KMS to encrypt canary artifacts and also needs Amazon VPC access
If you update a non-VPC canary to start using a VPC, you'll need to update the canary's role to include 
the network interface permissions listed in the following policy.
{ 
    "Version": "2012-10-17", 
    "Statement": [{ 
            "Effect": "Allow", 
            "Action": [ 
                "s3:PutObject", 
                "s3:GetObject" 
            ], 
297Amazon CloudWatch User Guide
Required roles and permissions
            "Resource": [ 
                "arn:aws:s3::: path/to/your/S3/bucket/canary/results/folder " 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:GetBucketLocation" 
            ], 
            "Resource": [ 
                "arn:aws:s3::: name/of/the/S3/bucket/that/contains/canary/results " 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "logs:CreateLogStream", 
                "logs:PutLogEvents", 
                "logs:CreateLogGroup" 
            ], 
            "Resource": [ 
                "arn:aws:logs: canary_region_name :canary_account_id :log-group:/aws/lambda/
cwsyn-canary_name -*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:ListAllMyBuckets", 
                "xray:PutTraceSegments" 
            ], 
            "Resource": [ 
                "*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Resource": "*", 
            "Action": "cloudwatch:PutMetricData", 
            "Condition": { 
                "StringEquals": { 
                    "cloudwatch:namespace": "CloudWatchSynthetics" 
                } 
            } 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "ec2:CreateNetworkInterface", 
                "ec2:DescribeNetworkInterfaces", 
                "ec2:DeleteNetworkInterface" 
            ], 
            "Resource": [ 
                "*" 
            ] 
       }, 
       { 
            "Effect": "Allow", 
            "Action": [ 
                "kms:Decrypt", 
                "kms:GenerateDataKey" 
            ], 
            "Resource": 
 "arn:aws:kms: KMS_key_region_name :KMS_key_account_id :key/KMS_key_id ", 
            "Condition": { 
                "StringEquals": { 
298Amazon CloudWatch User Guide
Required roles and permissions
                    "kms:ViaService": [ 
                        "S3. region_name_of_the_canary_results_S3_bucket .amazonaws.com" 
                    ] 
                } 
            } 
        } 
    ]
}
AWS managed policies for CloudWatch Synthetics
To add permissions to users, groups, and roles, it is easier to use AWS managed policies than to write 
policies yourself. It takes time and expertise to create IAM customer managed policies that provide your 
team with only the permissions they need. To get started quickly, you can use our AWS managed policies. 
These policies cover common use cases and are available in your AWS account. For more information 
about AWS managed policies, see AWS managed policies AWS managed policies in the IAM User Guide.
AWS services maintain and update AWS managed policies. You can't change the permissions in AWS 
managed policies. Services occasionally change the permissions in an AWS managed policy. This type of 
update aﬀects all identities (users, groups, and roles) where the policy is attached.
CloudWatch Synthetics updates to AWS managed policies
View details about updates to AWS managed policies for CloudWatch Synthetics since this service began 
tracking these changes. For automatic alerts about changes to this page, subscribe to the RSS feed on 
the CloudWatch Document history page.
Change Description Date
Redundant actions 
removed from
CloudWatchSyntheticsFullAccessCloudWatch Synthetics 
removed the
s3:PutBucketEncryption
and
lambda:GetLayerVersionByArn
actions from
CloudWatchSyntheticsFullAccess
policy because those actions 
were redundant with other 
permissions in the policy. The 
removed actions did not provide 
any permissions, and there’s no 
net change to the permissions 
granted by the policy.March 12, 2021
CloudWatch Synthetics started 
tracking changesCloudWatch Synthetics started 
tracking changes for its AWS 
managed policies.March 10, 2021
CloudWatchSyntheticsFullAccess
Here are the contents of the CloudWatchSyntheticsFullAccess  policy:
{ 
   "Version":"2012-10-17", 
   "Statement":[ 
      { 
299Amazon CloudWatch User Guide
Required roles and permissions
         "Effect":"Allow", 
         "Action":[ 
            "synthetics:*" 
         ], 
         "Resource":"*" 
      }, 
      { 
         "Effect":"Allow", 
         "Action":[ 
            "s3:CreateBucket", 
            "s3:PutEncryptionConfiguration" 
         ], 
         "Resource":[ 
            "arn:aws:s3:::cw-syn-results-*" 
         ] 
      }, 
      { 
         "Effect":"Allow", 
         "Action":[ 
            "iam:ListRoles", 
            "s3:ListAllMyBuckets", 
            "s3:GetBucketLocation", 
            "xray:GetTraceSummaries", 
            "xray:BatchGetTraces", 
            "apigateway:GET" 
         ], 
         "Resource":"*" 
      }, 
      { 
         "Effect":"Allow", 
         "Action":[ 
            "s3:GetObject", 
            "s3:ListBucket" 
         ], 
         "Resource":"arn:aws:s3:::cw-syn-*" 
      }, 
      { 
         "Effect":"Allow", 
         "Action":[ 
            "s3:GetObjectVersion" 
         ], 
         "Resource":"arn:aws:s3:::aws-synthetics-library-*" 
      }, 
      { 
         "Effect":"Allow", 
         "Action":[ 
            "iam:PassRole" 
         ], 
         "Resource":[ 
            "arn:aws:iam::*:role/service-role/CloudWatchSyntheticsRole*" 
         ], 
         "Condition":{ 
            "StringEquals":{ 
               "iam:PassedToService":[ 
                  "lambda.amazonaws.com", 
                  "synthetics.amazonaws.com" 
               ] 
            } 
         } 
      }, 
      { 
         "Effect":"Allow", 
         "Action":[ 
            "iam:GetRole" 
         ], 
         "Resource":[ 
300Amazon CloudWatch User Guide
Required roles and permissions
            "arn:aws:iam::*:role/service-role/CloudWatchSyntheticsRole*" 
         ] 
      }, 
      { 
         "Effect":"Allow", 
         "Action":[ 
            "cloudwatch:GetMetricData", 
            "cloudwatch:GetMetricStatistics" 
         ], 
         "Resource":"*" 
      }, 
      { 
         "Effect":"Allow", 
         "Action":[ 
            "cloudwatch:PutMetricAlarm", 
            "cloudwatch:DeleteAlarms" 
         ], 
         "Resource":[ 
            "arn:aws:cloudwatch:*:*:alarm:Synthetics-*" 
         ] 
      }, 
      { 
         "Effect":"Allow", 
         "Action":[ 
            "cloudwatch:DescribeAlarms" 
         ], 
         "Resource":[ 
            "arn:aws:cloudwatch:*:*:alarm:*" 
         ] 
      }, 
      { 
         "Effect":"Allow", 
         "Action":[ 
            "lambda:CreateFunction", 
            "lambda:AddPermission", 
            "lambda:PublishVersion", 
            "lambda:UpdateFunctionConfiguration", 
            "lambda:GetFunctionConfiguration" 
         ], 
         "Resource":[ 
            "arn:aws:lambda:*:*:function:cwsyn-*" 
         ] 
      }, 
      { 
         "Effect":"Allow", 
         "Action":[ 
            "lambda:GetLayerVersion", 
            "lambda:PublishLayerVersion" 
         ], 
         "Resource":[ 
            "arn:aws:lambda:*:*:layer:cwsyn-*", 
            "arn:aws:lambda:*:*:layer:Synthetics:*" 
         ] 
      }, 
      { 
         "Effect":"Allow", 
         "Action":[ 
            "ec2:DescribeVpcs", 
            "ec2:DescribeSubnets", 
            "ec2:DescribeSecurityGroups" 
         ], 
         "Resource":[ 
            "*" 
         ] 
      }, 
      { 
301Amazon CloudWatch User Guide
Required roles and permissions
         "Effect":"Allow", 
         "Action":[ 
            "sns:ListTopics" 
         ], 
         "Resource":[ 
            "*" 
         ] 
      }, 
      { 
         "Effect":"Allow", 
         "Action":[ 
            "sns:CreateTopic", 
            "sns:Subscribe", 
            "sns:ListSubscriptionsByTopic" 
         ], 
         "Resource":[ 
            "arn:*:sns:*:*:Synthetics-*" 
         ] 
      } 
   ]
}
CloudWatchSyntheticsReadOnlyAccess
Here are the contents of the CloudWatchSyntheticsReadOnlyAccess  policy:
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "synthetics:Describe*", 
                "synthetics:Get*", 
                "synthetics:List*" 
            ], 
            "Resource": "*" 
        } 
    ]
}
Limiting a user to viewing speciﬁc canaries
You can limit a user's ability to view information about canaries, so that they can only see information 
about the canaries you specify. To do this, use an IAM policy with a Condition  statement similar to the 
following, and attach this policy to a user or an IAM role.
The following example limits the user to only viewing information about name-of-allowed-canary-1
and name-of-allowed-canary-2 .
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": "synthetics:DescribeCanaries", 
            "Resource": "*", 
            "Condition": { 
                "ForAnyValue:StringEquals": { 
                    "synthetics:Names": [ 
                        " name-of-allowed-canary-1 ", 
                        " name-of-allowed-canary-2 " 
302Amazon CloudWatch User Guide
Creating a canary
                    ] 
                } 
            } 
        } 
    ]
}
CloudWatch Synthetics supports listing as many as ﬁve items in the synthetics:Names  array.
You can also create a policy that uses a * as a wildcard in canary names that are to be allowed, as in the 
following example:
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Sid": "VisualEditor0", 
            "Effect": "Allow", 
            "Action": "synthetics:DescribeCanaries", 
            "Resource": "*", 
            "Condition": { 
                "ForAnyValue:StringLike": { 
                    "synthetics:Names": [ 
                        "my-team-canary-*" 
                    ] 
                } 
            } 
        } 
    ]
}
Any user signed in with one of these policies attached can't use the CloudWatch console to view any 
canary information. They can view canary information only for the canaries authorized by the policy and 
only by using the DescribeCanaries  API or the describe-canaries  AWS CLI command.
Creating a canary
Important
Ensure that you use Synthetics canaries to monitor only endpoints and APIs where you have 
ownership or permissions. Depending on the canary frequency settings, these endpoints might 
experience increased traﬃc.
When you use the CloudWatch console to create a canary, you can use a blueprint provided by 
CloudWatch to create your canary or you can write your own script. For more information, see Using 
canary blueprints (p. 306).
You can also create a canary using AWS CloudFormation if you are using your own script for the canary. 
For more information, see AWS::Synthetics::Canary  in the AWS CloudFormation User Guide.
If you are writing your own script, you can use several functions that CloudWatch Synthetics has built 
into a library. For more information, see Synthetics runtime versions (p. 311).
To create a canary
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Synthetics Canaries .
3. Choose Create Canary.
303Amazon CloudWatch User Guide
Creating a canary
4. Choose one of the following:
•To base your canary on a blueprint script, choose Use a blueprint , and then choose the type of 
canary you want to create. For more information about what each type of blueprint does, see
Using canary blueprints (p. 306).
•To upload your own Node.js script to create a custom canary, choose Upload a script.
You can then drag your script into the Script  area or choose Browse ﬁles to navigate to the script 
in your ﬁle system.
•To import your script from an S3 bucket, choose Import from S3. Under Source location, enter 
the complete path to your canary or choose Browse S3.
You must have s3:GetObject  and s3:GetObjectVersion  permissions for the S3 bucket that 
you use. The bucket must be in the same AWS Region where you are creating the canary.
5. Under Name , enter a name for your canary. The name is used on many pages, so we recommend 
that you give it a descriptive name that distinguishes it from other canaries.
6. Under Application or endpoint URL , enter the URL that you want the canary to test. This URL must 
include the protocol (such as https://).
If you want the canary to test an endpoint on a VPC, you must also enter information about your 
VPC later in this procedure.
7. If you are using your own script for the canary, under Lambda handler, enter the entry point where 
you want the canary to start. If you use a runtime earlier than syn-nodejs-puppeteer-3.4  or
syn-python-selenium-1.1 , the string that you enter must end with .handler . If you use syn-
nodejs-puppeteer-3.4  or syn-python-selenium-1.1  or a later runtime, this restriction does 
not apply.
8. If you are using environment variables in your script, choose Environment variables and then 
specify a value for each environment variable deﬁned in your script. For more information, see
Environment variables (p. 327).
9. Under Schedule, choose whether to run this canary just once, run it continuously using a rate 
expression, or schedule it using a cron expression.
•When you use the CloudWatch console to create a canary that runs continuously, you can choose a 
rate anywhere between once a minute and once an hour.
•For more information about writing a cron expression for canary scheduling, see Scheduling 
canary runs using cron (p. 363).
10. (Optional) To set a timeout value for the canary, choose Additional conﬁguration and then specify 
the timeout value. Make it no shorter than 15 seconds to allow for Lambda cold starts and the time 
it takes to boot up the canary instrumentation.
11. Under Data retention , specify how long to retain information about both failed and successful 
canary runs. The range is 1-455 days.
This setting aﬀects only the data that CloudWatch Synthetics stores and displays in the console. It 
does not aﬀect the data stored in your Amazon S3 buckets, or logs or metrics that are published by 
the canary.
12. Under Data Storage , select the S3 bucket to use to store the data from the canary runs. The bucket 
name can't contain a period (.). If you leave this blank, a default S3 bucket is used or created.
If you are using the syn-nodejs-puppeteer-3.0  or later runtime, when you enter the URL for the 
bucket in the text box, you can specify a bucket in the current Region or in a diﬀerent Region. If you 
are using an earlier runtime version, the bucket must be in the current Region.
13. (Optional) By default, canaries store their artifacts on Amazon S3, and the artifacts are encrypted at 
rest using an AWS-managed AWS KMS key. You can use a diﬀerent encryption option by choosing
304Amazon CloudWatch User Guide
Creating a canary
Additional conﬁguration in the Data Storage  section. You can then choose the type of key to use 
for encryption. For more information, see Encrypting canary artifacts (p. 374).
14. Under Access permissions, choose whether to create an IAM role to run the canary or use an existing 
one.
If you have CloudWatch Synthetics create the role, it automatically includes all the necessary 
permissions. If you want to create the role yourself, see Required roles and permissions for 
canaries  (p. 294) for information about the necessary permissions.
If you use the CloudWatch console to create a role for a canary when you create the canary, you 
can't re-use the role for other canaries, because these roles are speciﬁc to just one canary. If you 
have manually created a role that works for multiple canaries, you can use that existing role.
To use an existing role, you must have the iam:PassRole  permission to pass that role to Synthetics 
and Lambda. You must also have the iam:GetRole  permission.
15. (Optional) Under Alarms , choose whether you want default CloudWatch alarms to be created 
for this canary. If you choose to create alarms, they are created with the following name 
convention:Synthetics-Alarm- canaryName -index
index is a number representing each diﬀerent alarm created for this canary. The ﬁrst alarm has an 
index of 1, the second alarm has an index of 2, and so on.
16. (Optional) To have this canary test an endpoint that is on a VPC, choose VPC settings, and then do 
the following:
a. Select the VPC that hosts the endpoint.
b. Select one or more subnets on your VPC. You must select a private subnet because a Lambda 
instance can't be conﬁgured to run in a public subnet when an IP address can't be assigned 
to the Lambda instance during execution. For more information, see Conﬁguring a Lambda 
Function to Access Resources in a VPC.
c. Select one or more security groups on your VPC.
If the endpoint is on a VPC, you must enable your canary to send information to CloudWatch and 
Amazon S3. For more information, see Running a canary on a VPC (p. 373).
17. (Optional) Under Tags, add one or more key-value pairs as tags for this canary. Tags can help you 
identify and organize your AWS resources and track your AWS costs. For more information, see
Tagging your Amazon CloudWatch resources (p. 1240 ).
18. (Optional) Under Active tracing, choose whether to enable active X-Ray tracing for this canary. 
This option is available only if the canary uses runtime version syn-nodejs-2.0  or later. For more 
information, see Canaries and X-Ray tracing (p. 372).
Resources that are created for canaries
When you create a canary, the following resources are created:
•An IAM role with the name CloudWatchSyntheticsRole- canary-name -uuid (if you use 
CloudWatch console to create the canary and specify for a new role to be created for the canary)
•An IAM policy with the name CloudWatchSyntheticsPolicy- canary-name -uuid .
•An S3 bucket with the name cw-syn-results- accountID -region .
•Alarms with the name Synthetics-Alarm- MyCanaryName , if you want alarms to be created for the 
canary.
•Lambda functions and layers, if you use a blueprint to create the canary. These resources have the 
preﬁx cwsyn-MyCanaryName .
•CloudWatch Logs log groups with the name /aws/lambda/cwsyn- MyCanaryName -randomId .
305Amazon CloudWatch User Guide
Creating a canary
Using canary blueprints
This section provides details about each of the canary blueprints and the tasks each blueprint is best 
suited for. Blueprints are provided for the following canary types:
•Heartbeat Monitor
•API Canary
•Broken Link Checker
•Visual Monitoring
•Canary Recorder
•GUI Workﬂow
When you use a blueprint to create a canary, as you ﬁll out the ﬁelds in the CloudWatch console, the
Script editor  area of the page displays the canary you are creating as a Node.js script. You can also edit 
your canary in this area to customize it further.
Heartbeat monitoring
Heartbeat scripts load the speciﬁed URL and store a screenshot of the page and an HTTP archive ﬁle 
(HAR ﬁle). They also store logs of accessed URLs.
You can use the HAR ﬁles to view detailed performance data about the web pages. You can analyze the 
list of web requests and catch performance issues such as time to load for an item.
If your canary uses the syn-nodejs-puppeteer-3.1  or later runtime version, you can use the 
heartbeat monitoring blueprint to monitor multiple URLs and see the status, duration, associated 
screenshots, and failure reason for each URL in the step summary of the canary run report.
API canary
API canaries can test the basic Read and Write functions of a REST API. REST stands for representational 
state transfer  and is a set of rules that developers follow when creating an API. One of these rules states 
that a link to a speciﬁc URL should return a piece of data.
Canaries can work with any APIs and test all types of functionality. Each canary can make multiple API 
calls.
In canaries that use runtime version syn-nodejs-2.2  or later, the API canary blueprint supports multi-
step canaries that monitor your APIs as HTTP steps. You can test multiple APIs in a single canary. Each 
step is a separate request that can access a diﬀerent URL, use diﬀerent headers, and use diﬀerent rules 
for whether headers and response bodies are captured. By not capturing headers and response body, you 
can prevent sensitive data from being recorded.
Each request in an API canary consists of the following information:
•The endpoint , which is the URL that you request.
•The method , which is the type of request that is sent to the server. REST APIs support GET (read), POST 
(write), PUT (update), PATCH (update), and DELETE (delete) operations.
•The headers , which provide information to both the client and the server. They are used for 
authentication and providing information about the body content. For a list of valid headers, see HTTP 
Headers .
•The data  (or body ), which contains information to be sent to the server. This is used only for POST, 
PUT, PATCH, or DELETE requests.
306Amazon CloudWatch User Guide
Creating a canary
The API canary blueprint supports GET and POST methods. When you use this blueprint, you must 
specify headers. For example, you can specify Authorization  as a Key and specify the necessary 
authorization data as the Value for that key.
If you are testing a POST request, you also specify the content to post in the Data  ﬁeld.
Integration with API Gateway
The API blueprint is integrated with Amazon API Gateway. This enables you to select an API Gateway API 
and stage from the same AWS account and Region as the canary, or to upload a Swagger template from 
API Gateway for cross-account and cross-Region API monitoring. You can then choose the rest of the 
details in the console to create the canary, instead of entering them from scratch. For more information 
about API Gateway, see What is Amazon API Gateway?
Using a private API
You can create a canary that uses a private API in Amazon API Gateway. For more information, see
Creating a private API in Amazon API Gateway?
Broken link checker
The broken link checker collects all the links inside the URL that you are testing by using
document.getElementsByTagName('a') . It tests only up to the number of links that you specify, 
and the URL itself is counted as the ﬁrst link. For example, if you want to check all the links on a page 
that contains ﬁve links, you must specify for the canary to follow six links.
Broken link checker canaries created using the syn-nodejs-2.0-beta  runtime or later support the 
following additional features:
•Provides a report that includes the links that were checked, status code, failure reason (if any), and 
source and destination page screenshots.
•When viewing canary results, you can ﬁlter to see only the broken links and then ﬁx the link based on 
the reason for failure.
•This version captures annotated source page screenshots for each link and highlights the anchor where 
the link was found. Hidden components are not annotated.
•You can conﬁgure this version to capture screenshots of both source and destination pages, just source 
pages, or just destination pages.
•This version ﬁxes an issue in the earlier version where the canary script stops after the ﬁrst broken link 
even when more links are scraped from the ﬁrst page.
If you want to update an existing canary using syn-1.0 to use the new runtime, you must delete and 
re-create the canary. Updating an existing canary to the new runtime does not make these features 
available.
A broken link checker canary detects the following types of link errors:
•404 Page Not Found
•Invalid Host Name
•Bad URL. For example, the URL is missing a bracket, has extra slashes, or uses the wrong protocol.
•Invalid HTTP response code.
•The host server returns empty responses with no content and no response code.
•The HTTP requests constantly time out during the canary's run.
•The host consistently drops connections because it is misconﬁgured or is too busy.
307Amazon CloudWatch User Guide
Creating a canary
Visual monitoring blueprint
The visual monitoring blueprint includes code to compare screenshots taken during a canary run with 
screenshots taken during a baseline canary run. If the discrepancy between the two screenshots is 
beyond a threshold percentage, the canary fails. Visual monitoring is supported in canaries running syn-
puppeteer-node-3.2  and later. It is not currently supported in canaries running Python and Selenium.
The visual monitoring blueprint includes the following line of code in the default blueprint canary script, 
which enables visual monitoring.
syntheticsConfiguration.withVisualCompareWithBaseRun(true);
The ﬁrst time that the canary runs successfully after this line is added to the script, it uses the 
screenshots taken during that run as the baseline for comparison. After that ﬁrst canary run, you can use 
the CloudWatch console to edit the canary to do any of the following:
•Set the next run of the canary as the new baseline.
•Draw boundaries on the current baseline screenshot to designate areas of the screenshot to ignore 
during visual comparisons.
•Remove a screenshot from being used for visual monitoring.
For more information about using the CloudWatch console to edit a canary, see Edit or delete a 
canary (p. 378).
You can also change the canary run that is used as the baseline by using the nextrun  or lastrun
parameters or speciﬁng a canary run ID in the UpdateCanary API.
When you use the visual monitoring blueprint, you enter the URL where you want the screenshot to 
be taken, and specify a diﬀerence threshold as a percentage. After the baseline run, future runs of the 
canary that detect a visual diﬀerence greater than that threshold trigger a canary failure. After the 
baseline run, you can also edit the canary to "draw" boundaries on the baseline screenshot that you want 
to ignore during the visual monitoring.
The visual monitoring feature is powered by the the ImageMagick open source software toolkit. For more 
information, see ImageMagick .
Canary recorder
With the canary recorder blueprint, you can use the CloudWatch Synthetics Recorder to record your click 
and type actions on a website and automatically generate a Node.js script that can be used to create a 
canary that follows the same steps. The CloudWatch Synthetics Recorder is a Google Chrome extension 
provided by Amazon.
Credits : The CloudWatch Synthetics Recorder is based on the  Headless recorder .
For more information, see Using the CloudWatch Synthetics Recorder for Google Chrome (p. 310).
GUI workﬂow builder
The GUI Workﬂow Builder blueprint veriﬁes that actions can be taken on your webpage. For example, if 
you have a webpage with a login form, the canary can populate the user and password ﬁelds and submit 
the form to verify that the webpage is working correctly.
When you use a blueprint to create this type of canary, you specify the actions that you want the canary 
to take on the webpage. The actions that you can use are the following:
•Click — Selects the element that you specify and simulates a user clicking or choosing the element.
308Amazon CloudWatch User Guide
Creating a canary
To specify the element in a Node.js script, use [id=]  or a[class=] .
To specify the element in a Python script, use xpath //*[@id=]  or //*[@class=] .
•Verify selector— Veriﬁes that the speciﬁed element exists on the webpage. This test is useful for 
verifying that a previous action has causes the correct elements to populate the page.
To specify the element to verify in a Node.js script, use [id=]  or a[class=] .
To specify the element to verify in a Python script, use xpath //*[@id=]  or //*[class=] .
•Verify text— Veriﬁes that the speciﬁed string is contained within the target element. This test is useful 
for verifying that a previous action has caused the correct text to be displayed.
To specify the element in a Node.js script, use a format such as div[@id=]//h1  because this action 
uses the waitForXPath  function in Puppeteer.
To specify the element in a Python script, use xpath format such as //*[@id=] or //*[@class=] 
because this action uses the implicitly_wait  function in Selenium.
•Input text— Writes the speciﬁed text in the target element.
To specify the element to verify in a Node.js script, use [id=]  or a[class=] .
To specify the element to verify in a Python script, use xpath //*[@id=]  or //*[@class=] .
•Click with navigation— Waits for the whole page to load after choosing the speciﬁed element. This is 
most useful when you need to reload the page.
To specify the element in a Node.js script, use [id=]  or a[class=] .
To specify the element in a Python script, use xpath //*[@id=]  or //*[@class=] .
For example, the following blueprint uses Node.js. It clicks the ﬁrstButton on the speciﬁed URL, veriﬁes 
that the expected selector with the expected text appears, inputs the name Test_Customer  into the
Name  ﬁeld, clicks the Login  button, and then veriﬁes that the login is successful by checking for the
Welcome text on the next page.
309Amazon CloudWatch User Guide
Creating a canary
GUI workﬂow canaries that use the following runtimes also provide a summary of the steps executed for 
each canary run. You can use the screenshots and error message associated with each step to ﬁnd the 
root cause of failure.
•syn-nodejs-2.0  or later
•syn-python-selenium-1.0  or later
Using the CloudWatch Synthetics Recorder for Google Chrome
Amazon provides a CloudWatch Synthetics Recorder to help you create canaries more easily. The recorder 
is a Google Chrome extension.
The recorder records your click and type actions on a website and automatically generates a Node.js 
script that can be used to create a canary that follows the same steps.
After you start recording, the CloudWatch Synthetics Recorder detects your actions in the browser and 
converts them to a script. You can pause and resume the recording as needed. When you stop recording, 
the recorder produces a Node.js script of your actions, which you can easily copy with the Copy to 
Clipboard  button. You can then use this script to create a canary in CloudWatch Synthetics.
Credits : The CloudWatch Synthetics Recorder is based on the  Headless recorder .
Installing the CloudWatch Synthetics Recorder extension for Google Chrome
To use the CloudWatch Synthetics Recorder, you can start creating a canary and choose the Canary 
Recorder blueprint. If you do this when you haven't already downloaded the recorder, the CloudWatch 
Synthetics console provides a link to download it.
Alternatively, you can follow these steps to download and install the recorder directly.
To install the CloudWatch Synthetics Recorder
1. Using Google Chrome, go to this website:  https://chrome.google.com/webstore/detail/cloudwatch-
synthetics-rec/bhdnlmmgiplmbcdmkkdfplenecpegfno
2. Choose Add to Chrome , then choose Add extension.
Using the CloudWatch Synthetics Recorder for Google Chrome
To use the CloudWatch Synthetics Recorder to help you create a canary, you can choose Create canary in 
the CloudWatch console, and then choose Use a blueprint , Canary Recorder. For more information, see
Creating a canary (p. 303).
Alternatively, you can use the recorder to record steps without immediately using them to create a 
canary.
To use the CloudWatch Synthetics Recorder to record your actions on a website
1. Navigate to the page that you want to monitor.
2. Choose the Chrome extensions icon, and then choose CloudWatch Synthetics Recorder.
3. Choose Start Recording.
4. Perform the steps that you want to record. To pause recording, choose Pause.
5. When you are ﬁnished recording the workﬂow, choose Stop recording.
6. Choose Copy to clipboard to copy the generated script to your clipboard. Or, if you want to start 
over, choose New recording.
7. To create a canary with the copied script, you can paste your copied script into the recorder blueprint 
inline editor, or save it to an Amazon S3 bucket and import it from there.
310Amazon CloudWatch User Guide
Creating a canary
8. If you're not immediately creating a canary, you can save your recorded script to a ﬁle.
Known limitations of the CloudWatch Synthetics Recorder
The CloudWatch Synthetics Recorder for Google Chrome currently has the following limitations.
•HTML elements that don’t have IDs will use CSS selectors. This can break canaries if the webpage 
structure changes later. We plan to provide some conﬁguration options (such as using data-id) around 
this in a future version of the recorder.
•The recorder doesn't support actions such as double-click or copy/paste, and doesn't support key 
combinations such as CMD+0.
•To verify the presence of an element or text on the page, users must add assertions after the script is 
generated. The recorder doesn't support verifying an element without performing any action on that 
element. This is similar to the “Verify text” or “Verify element” options in the canary workﬂow builder. 
We plan to add some assertions support in a future version of the recorder.
•The recorder records all actions in the tab where the recording is initiated. It doesn't record pop-ups 
(for instance, to allow location tracking) or navigation to diﬀerent pages from pop-ups.
Synthetics runtime versions
When you create or update a canary, you choose a Synthetics runtime version for the canary. A 
Synthetics runtime is a combination of the Synthetics code that calls your script handler, and the Lambda 
layers of bundled dependencies.
CloudWatch Synthetics currently supports runtimes that use Node.js for scripts and the Puppeteer 
framework, and runtimes that use Python for scripting and Selenium Webdriver for the framework.
We recommend that you always use the most recent runtime version for your canaries, to be able to use 
the latest features and updates made to the Synthetics library.
Topics
•CloudWatch Synthetics runtime support policy (p. 311)
•Runtime versions using Node.js and Puppeteer (p. 315)
•Runtime versions using Python and Selenium Webdriver (p. 323)
CloudWatch Synthetics runtime support policy
Synthetics runtime versions are subject to maintenance and security updates. When any component of a 
runtime version is no longer supported, that Synthetics runtime version is deprecated.
You can't create canaries using deprecated runtime versions. Canaries that use deprecated runtimes 
continue to run. You can stop, start, and delete these canaries. You can update an existing canary that 
uses a deprecated runtime version by updating the canary to use a supported runtime version.
CloudWatch Synthetics notiﬁes you by email if you have canaries that use runtimes that are scheduled 
to be deprecated in the next 60 days. We recommend that you migrate your canaries to a supported 
runtime version to beneﬁt from the new functionality, security, and performance enhancements that are 
included in more recent releases.
How do I update a canary to a new runtime version?
You can update a canary’s runtime version by using the CloudWatch console, AWS CloudFormation, the 
AWS CLI or the AWS SDK. When you use the CloudWatch console, you can update up to ﬁve canaries at 
once by selecting them in the canary list page and then choosing Actions, Update Runtime .
311Amazon CloudWatch User Guide
Creating a canary
You can verify the upgrade by ﬁrst cloning the canary using the CloudWatch console and updating its 
runtime version. This creates another canary which is a clone of your original canary. Once you have 
veriﬁed your canary with the new runtime version, you can update the runtime version of your original 
canary and delete the clone canary.
You can also update multiple canaries using an upgrade script. For more information, see Canary runtime 
upgrade script  (p. 312).
If you upgrade a canary and it fails, see Troubleshooting a failed canary (p. 365).
Runtime deprecation dates
Runtime Version Deprecation date
syn-nodejs-
puppeteer-3.4November 13, 2022
syn-nodejs-
puppeteer-3.3November 13, 2022
syn-nodejs-
puppeteer-3.2November 13, 2022
syn-nodejs-
puppeteer-3.1November 13, 2022
syn-nodejs-
puppeteer-3.0November 13, 2022
syn-nodejs-2.2 May 28, 2021
syn-nodejs-2.1 May 28, 2021
syn-nodejs-2.0 May 28, 2021
syn-nodejs-2.0-
betaFebruary 8, 2021
syn-1.0 May 28, 2021
Canary runtime upgrade script
To upgrade a canary script to a supported runtime version, use the following script.
const AWS = require('aws-sdk');
// You need to configure your AWS credentials and Region.
//   https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/setting-credentials-
node.html
//   https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/setting-region.html
const synthetics = new AWS.Synthetics();
const DEFAULT_OPTIONS = { 
  /** 
   * The number of canaries to upgrade during a single run of this script. 
   */ 
  count: 10, 
  /** 
   * No canaries are upgraded unless force is specified. 
312Amazon CloudWatch User Guide
Creating a canary
   */ 
  force: false
};
/** 
 * The number of milliseconds to sleep between GetCanary calls when 
 * verifying that an update succeeded. 
 */
const SLEEP_TIME = 5000;
(async () => { 
  try { 
    const options = getOptions(); 
    const versions = await getRuntimeVersions(); 
    const canaries = await getAllCanaries(); 
    const upgrades = canaries 
      .filter(canary => !versions.isLatestVersion(canary.RuntimeVersion)) 
      .map(canary => { 
        return { 
          Name: canary.Name, 
          FromVersion: canary.RuntimeVersion, 
          ToVersion: versions.getLatestVersion(canary.RuntimeVersion) 
        }; 
      }); 
    if (options.force) { 
      const promises = []; 
      for (const upgrade of upgrades.slice(0, options.count)) { 
        const promise = upgradeCanary(upgrade); 
        promises.push(promise); 
        // Sleep for 100 milliseconds to avoid throttling. 
        await usleep(100); 
      } 
      const succeeded = []; 
      const failed = []; 
      for (let i = 0; i < upgrades.slice(0, options.count).length; i++) { 
        const upgrade = upgrades[i]; 
        const promise = promises[i]; 
        try { 
          await promise; 
          console.log(`The update of ${upgrade.Name} succeeded.`); 
          succeeded.push(upgrade.Name); 
        } catch (e) { 
          console.log(`The update of ${upgrade.Name} failed with error: ${e}`); 
          failed.push({ 
            Name: upgrade.Name, 
            Reason: e 
          }); 
        } 
      } 
      if (succeeded.length) { 
        console.group('The following canaries were upgraded successfully.'); 
        for (const name of succeeded) { 
          console.log(name); 
        } 
        console.groupEnd() 
      } else { 
        console.log('No canaries were upgraded successfully.'); 
      } 
      if (failed.length) { 
        console.group('The following canaries were not upgraded successfully.'); 
313Amazon CloudWatch User Guide
Creating a canary
        for (const failure of failed) { 
          console.log('\x1b[31m', `${failure.Name}: ${failure.Reason}`, '\x1b[0m'); 
        } 
        console.groupEnd(); 
      } 
    } else { 
      console.log('Run with --force [--count <count>] to perform the first <count> upgrades 
 shown. The default value of <count> is 10.') 
      console.table(upgrades); 
    } 
  } catch (e) { 
    console.error(e); 
  }
})();
function getOptions() { 
  const force = getFlag('--force', DEFAULT_OPTIONS.force); 
  const count = getOption('--count', DEFAULT_OPTIONS.count); 
  return { force, count }; 
  function getFlag(key, defaultValue) { 
    return process.argv.includes(key) || defaultValue; 
  } 
  function getOption(key, defaultValue) { 
    const index = process.argv.indexOf(key); 
    if (index < 0) { 
      return defaultValue; 
    } 
    const value = process.argv[index + 1]; 
    if (typeof value === 'undefined' || value.startsWith('-')) { 
      throw `The ${key} option requires a value.`; 
    } 
    return value; 
  }
}
function getAllCanaries() { 
  return new Promise((resolve, reject) => { 
    const canaries = []; 
    synthetics.describeCanaries().eachPage((err, data) => { 
      if (err) { 
        reject(err); 
      } else { 
        if (data === null) { 
          resolve(canaries); 
        } else { 
          canaries.push(...data.Canaries); 
        } 
      } 
    }); 
  });
}
function getRuntimeVersions() { 
  return new Promise((resolve, reject) => { 
    const jsVersions = []; 
    const pythonVersions = []; 
    synthetics.describeRuntimeVersions().eachPage((err, data) => { 
      if (err) { 
        reject(err); 
      } else { 
        if (data === null) { 
          jsVersions.sort((a, b) => a.ReleaseDate - b.ReleaseDate); 
          pythonVersions.sort((a, b) => a.ReleaseDate - b.ReleaseDate); 
          resolve({ 
314Amazon CloudWatch User Guide
Creating a canary
            isLatestVersion(version) { 
              const latest = this.getLatestVersion(version); 
              return latest === version; 
            }, 
            getLatestVersion(version) { 
              if (jsVersions.some(v => v.VersionName === version)) { 
                return jsVersions[jsVersions.length - 1].VersionName; 
              } else if (pythonVersions.some(v => v.VersionName === version)) { 
                return pythonVersions[pythonVersions.length - 1].VersionName; 
              } else { 
                throw Error(`Unknown version ${version}`); 
              } 
            } 
          }); 
        } else { 
          for (const version of data.RuntimeVersions) { 
            if (version.VersionName === 'syn-1.0') { 
              jsVersions.push(version); 
            } else if (version.VersionName.startsWith('syn-nodejs-2.')) { 
              jsVersions.push(version); 
            } else if (version.VersionName.startsWith('syn-nodejs-puppeteer-')) { 
              jsVersions.push(version); 
            } else if (version.VersionName.startsWith('syn-python-selenium-')) { 
              pythonVersions.push(version); 
            } else { 
              throw Error(`Unknown version ${version.VersionName}`); 
            } 
          } 
        } 
      } 
    }); 
  });
}
async function upgradeCanary(upgrade) { 
  console.log(`Upgrading canary ${upgrade.Name} from ${upgrade.FromVersion} to 
 ${upgrade.ToVersion}`); 
  await synthetics.updateCanary({ Name: upgrade.Name, RuntimeVersion: 
 upgrade.ToVersion }).promise(); 
  while (true) { 
    await usleep(SLEEP_TIME); 
    console.log(`Getting the state of canary ${upgrade.Name}`); 
    const response = await synthetics.getCanary({ Name: upgrade.Name }).promise(); 
    const state = response.Canary.Status.State; 
    console.log(`The state of canary ${upgrade.Name} is ${state}`); 
    if (state === 'ERROR' || response.Canary.Status.StateReason) { 
      throw response.Canary.Status.StateReason; 
    } 
    if (state !== 'UPDATING') { 
      return; 
    } 
  }
}
function usleep(ms) { 
  return new Promise(resolve => setTimeout(resolve, ms));
}
Runtime versions using Node.js and Puppeteer
The ﬁrst runtime version for Node.js and Puppeteer was named syn-1.0 . Later runtime 
versions have the naming convention syn-language -majorversion .minorversion . 
Starting with syn-nodejs-puppeteer-3.0 , the naming convention is
syn-language -framework -majorversion .minorversion
315Amazon CloudWatch User Guide
Creating a canary
An additional -beta suﬃx shows that the runtime version is currently in a beta preview release.
Runtime versions with the same major version number are backward compatible.
Notes for all runtime versions
When using syn-nodejs-puppeteer-3.0  runtime version, make sure that your canary script is 
compatible with Node.js 12.x. If you use an earlier version of a syn-nodejs  runtime version, make sure 
that that your script is compatible with Node.js 10.x.
The Lambda code in a canary is conﬁgured to have a maximum memory of 1 GB. Each run of a canary 
times out after a conﬁgured timeout value. If no timeout value is speciﬁed for a canary, CloudWatch 
chooses a timeout value based on the canary's frequency. If you conﬁgure a timeout value, make it no 
shorter than 15 seconds to allow for Lambda cold starts and the time it takes to boot up the canary 
instrumentation.
Important
The following CloudWatch Synthetics runtime versions were deprecated on November 13, 2022. 
This is because AWS Lambda deprecated the Lambda Node.js 12 runtime on November 14, 
2022.
•syn-nodejs-puppeteer-3.4
•syn-nodejs-puppeteer-3.3
•syn-nodejs-puppeteer-3.2
•syn-nodejs-puppeteer-3.1
•syn-nodejs-puppeteer-3.0
For more information, see CloudWatch Synthetics runtime support policy (p. 311).
syn-nodejs-puppeteer-5.0
The syn-nodejs-puppeteer-5.0  runtime is the newest runtime version for Node.js and Puppeteer.
Major dependencies :
•Lambda runtime Node.js 16.x
•Puppeteer-core version 19.7.0
•Chromium version 111.0.5563.146
New features in syn-nodejs-puppeteer-5.0 :
•Dependency upgrade— The Puppeteer-core version is updated to 19.7.0. The Chromium version is 
upgraded to 111.0.5563.146.
Important
The new Puppeteer-core version is not completely backward-compatible with previous 
versions of Puppeteer. Some of the changes in this version can cause existing canaries that use 
deprecated Puppeteer functions to fail. For more information, see the breaking changes in the 
change logs for Puppeteer-core versions 19.7.0 through 6.0, in Puppeteer change logs .
syn-nodejs-puppeteer-4.0
Major dependencies :
•Lambda runtime Node.js 16.x
•Puppeteer-core version 5.5.0
316Amazon CloudWatch User Guide
Creating a canary
•Chromium version 92.0.4512
New features in syn-nodejs-puppeteer-4.0 :
•Dependency upgrade— The Node.js dependency is updated to 16.x.
syn-nodejs-puppeteer-3.9
Major dependencies :
•Lambda runtime Node.js 14.x
•Puppeteer-core version 5.5.0
•Chromium version 92.0.4512
New features in syn-nodejs-puppeteer-3.9 :
•Dependency upgrades— Upgrades some third-party dependency packages.
syn-nodejs-puppeteer-3.8
Major dependencies :
•Lambda runtime Node.js 14.x
•Puppeteer-core version 5.5.0
•Chromium version 92.0.4512
New features in syn-nodejs-puppeteer-3.8 :
•Proﬁle cleanup— Chromium proﬁles are now cleaned up after each canary run.
Bug ﬁxes in syn-nodejs-puppeteer-3.8:
•Bug ﬁxes— Previously, visual monitoring canaries would sometimes stop working properly after a run 
with no screenshots. This is now ﬁxed.
syn-nodejs-puppeteer-3.7
Major dependencies :
•Lambda runtime Node.js 14.x
•Puppeteer-core version 5.5.0
•Chromium version 92.0.4512
New features in syn-nodejs-puppeteer-3.7 :
•Logging enhancement— The canary will upload logs to Amazon S3 even if it times out or crashes.
•Lambda layer size reduced— The size of the Lambda layer used for canaries is reduced by 34%.
Bug ﬁxes in syn-nodejs-puppeteer-3.7:
•Bug ﬁxes— Japanese, Simpliﬁed Chinese, and Traditional Chinese fonts will render properly.
317Amazon CloudWatch User Guide
Creating a canary
syn-nodejs-puppeteer-3.6
Major dependencies :
•Lambda runtime Node.js 14.x
•Puppeteer-core version 5.5.0
•Chromium version 92.0.4512
New features in syn-nodejs-puppeteer-3.6 :
•More precise timestamps — The start time and stop time of canary runs are now precise to the 
millisecond.
syn-nodejs-puppeteer-3.5
Major dependencies :
•Lambda runtime Node.js 14.x
•Puppeteer-core version 5.5.0
•Chromium version 92.0.4512
New features in syn-nodejs-puppeteer-3.5 :
•Updated dependencies — The only new features in this runtime are the updated dependencies.
syn-nodejs-puppeteer-3.4
Important
This runtime version was be deprecated on November 13, 2022. For more information, see
CloudWatch Synthetics runtime support policy (p. 311).
Major dependencies :
•Lambda runtime Node.js 12.x
•Puppeteer-core version 5.5.0
•Chromium version 88.0.4298.0
New features in syn-nodejs-puppeteer-3.4 :
•Custom handler function— You can now use a custom handler function for your canary scripts. 
Previous runtimes required the script entry point to include .handler .
You can also put canary scripts in any folder and pass the folder name as part of the handler. For 
example, MyFolder/MyScriptFile.functionname  can be used as an entry point.
•Expanded HAR ﬁle information— You can now see bad, pending, and incomplete requests in the HAR 
ﬁles produced by canaries.
syn-nodejs-puppeteer-3.3
Important
This runtime version was deprecated on November 13, 2022. For more information, see
CloudWatch Synthetics runtime support policy (p. 311).
Major dependencies :
318Amazon CloudWatch User Guide
Creating a canary
•Lambda runtime Node.js 12.x
•Puppeteer-core version 5.5.0
•Chromium version 88.0.4298.0
New features in syn-nodejs-puppeteer-3.3 :
•More options for artifact encryption— For canaries using this runtime or later, instead of using 
an AWS managed key to encrypt artifacts that the canary stores in Amazon S3, you can choose to 
use an AWS KMS customer managed key or an Amazon S3-managed key. For more information, see
Encrypting canary artifacts (p. 374).
syn-nodejs-puppeteer-3.2
Important
This runtime version was deprecated on November 13, 2022. For more information, see
CloudWatch Synthetics runtime support policy (p. 311).
Major dependencies :
•Lambda runtime Node.js 12.x
•Puppeteer-core version 5.5.0
•Chromium version 88.0.4298.0
New features in syn-nodejs-puppeteer-3.2 :
•visual monitoring with screenshots — Canaries using this runtime or later can compare a screenshot 
taken during a run with a baseline version of the same screenshot. If the screenshots are more 
diﬀerent than a speciﬁed percentage threshold, the canary fails. For more information, see Visual 
monitoring  (p. 341) or Visual monitoring blueprint  (p. 308).
•New functions regarding sensitive data You can prevent sensitive data from appearing in canary logs 
and reports. For more information, see SyntheticsLogHelper class (p. 343).
•Deprecated function The RequestResponseLogHelper  class is deprecated in favor of other new 
conﬁguration options. For more information, see RequestResponseLogHelper class (p. 349).
syn-nodejs-puppeteer-3.1
Important
This runtime version was deprecated on November 13, 2022. For more information, see
CloudWatch Synthetics runtime support policy (p. 311).
Major dependencies :
•Lambda runtime Node.js 12.x
•Puppeteer-core version 5.5.0
•Chromium version 88.0.4298.0
New features in syn-nodejs-puppeteer-3.1 :
•Ability to conﬁgure CloudWatch metrics— With this runtime, you can disable the metrics that you do 
not require. Otherwise, canaries publish various CloudWatch metrics for each canary run.
•Screenshot linking — You can link a screenshot to a canary step after the step has completed. To do 
this, you take the screenshot by using the takeScreenshot method, using the name of the step that 
you want to associate the screenshot with. For example, you might want to perform a step, add a wait 
time, and then take the screenshot.
319Amazon CloudWatch User Guide
Creating a canary
•Heartbeat monitor blueprint can monitor multiple URLs— You can use the heartbeat monitoring 
blueprint in the CloudWatch console to monitor multiple URLs and see the status, duration, associated 
screenshots, and failure reason for each URL in the step summary of the canary run report.
syn-nodejs-puppeteer-3.0
Important
This runtime version was deprecated on November 13, 2022. For more information, see
CloudWatch Synthetics runtime support policy (p. 311).
Major dependencies :
•Lambda runtime Node.js 12.x
•Puppeteer-core version 5.5.0
•Chromium version 88.0.4298.0
New features in syn-nodejs-puppeteer-3.0 :
•Upgraded dependencies — This version uses Puppeteer version 5.5.0, Node.js 12.x, and Chromium 
88.0.4298.0.
•Cross-Region bucket access— You can now specify an S3 bucket in another Region as the bucket 
where your canary stores its log ﬁles, screenshots, and HAR ﬁles.
•New functions available— This version adds library functions to retrieve the canary name and the 
Synthetics runtime version.
For more information, see Synthetics class (p. 333).
syn-nodejs-2.2
This section contains information about the syn-nodejs-2.2  runtime version.
Important
This runtime version was deprecated on May 28, 2021. For more information, see CloudWatch 
Synthetics runtime support policy (p. 311).
Major dependencies :
•Lambda runtime Node.js 10.x
•Puppeteer-core version 3.3.0
•Chromium version 83.0.4103.0
New features in syn-nodejs-2.2 :
•Monitor your canaries as HTTP steps— You can now test multiple APIs in a single canary. Each 
API is tested as a separate HTTP step, and CloudWatch Synthetics monitors the status of each step 
using step metrics and the CloudWatch Synthetics step report. CloudWatch Synthetics creates
SuccessPercent  and Duration  metrics for each HTTP step.
This functionality is implemented by the executeHttpStep(stepName, requestOptions, callback, 
stepConﬁg)  function. For more information, see executeHttpStep(stepName, requestOptions, 
[callback], [stepConﬁg])  (p. 353).
The API canary blueprint is updated to use this new feature.
•HTTP request reporting— You can now view detailed HTTP requests reports which capture details 
such as request/response headers, response body, status code, error and performance timings, TCP 
320Amazon CloudWatch User Guide
Creating a canary
connection time, TLS handshake time, ﬁrst byte time, and content transfer time. All HTTP requests 
which use the HTTP/HTTPS module under the hood are captured here. Headers and response body are 
not captured by default but can be enabled by setting conﬁguration options.
•Global and step-level conﬁguration— You can set CloudWatch Synthetics conﬁgurations at the 
global level, which are applied to all steps of canaries. You can also override these conﬁgurations at 
the step level by passing conﬁguration key/value pairs to enable or disable certain options.
For more information, see SyntheticsConﬁguration class (p. 334).
•Continue on step failure conﬁguration— You can choose to continue canary execution when a step 
fails. For the executeHttpStep  function, this is turned on by default. You can set this option once at 
global level or set it diﬀerently per-step.
syn-nodejs-2.1
Important
This runtime version was deprecated on May 28, 2021. For more information, see CloudWatch 
Synthetics runtime support policy (p. 311).
Major dependencies :
•Lambda runtime Node.js 10.x
•Puppeteer-core version 3.3.0
•Chromium version 83.0.4103.0
New features in syn-nodejs-2.1 :
•Conﬁgurable screenshot behavior— Provides the ability to turn oﬀ the capturing of screenshots by UI 
canaries. In canaries that use previous versions of the runtimes, UI canaries always capture screenshots 
before and after each step. With syn-nodejs-2.1 , this is conﬁgurable. Turning oﬀ screenshots can 
reduce your Amazon S3 storage costs, and can help you comply with HIPAA regulations. For more 
information, see SyntheticsConﬁguration class (p. 334).
•Customize the Google Chrome launch parameters You can now conﬁgure the arguments 
used when a canary launches a Google Chrome browser window. For more information, see
launch(options) (p. 348).
There can be a small increase in canary duration when using syn-nodejs-2.0 or later, compared to earlier 
versions of the canary runtimes.
syn-nodejs-2.0
Important
This runtime version was deprecated on May 28, 2021. For more information, see CloudWatch 
Synthetics runtime support policy (p. 311).
Major dependencies :
•Lambda runtime Node.js 10.x
•Puppeteer-core version 3.3.0
•Chromium version 83.0.4103.0
New features in syn-nodejs-2.0 :
•Upgraded dependencies — This runtime version uses Puppeteer-core version 3.3.0 and Chromium 
version 83.0.4103.0
321Amazon CloudWatch User Guide
Creating a canary
•Support for X-Ray active tracing. When a canary has tracing enabled, X-Ray traces are sent for all 
calls made by the canary that use the browser, the AWS SDK, or HTTP or HTTPS modules. Canaries 
with tracing enabled appear on the service map in both CloudWatch ServiceLens and in X-Ray, even 
when they don't send requests to other services or applications that have tracing enabled. For more 
information, see Canaries and X-Ray tracing (p. 372).
•Synthetics reporting— For each canary run, CloudWatch Synthetics creates a report named
SyntheticsReport-PASSED.json  or SyntheticsReport-FAILED.json  which records data such 
as start time, end time, status, and failures. It also records the PASSED/FAILED status of each step of 
the canary script, and failures and screenshots captured for each step.
•Broken link checker report— The new version of the broken link checker included in this runtime 
creates a report that includes the links that were checked, status code, failure reason (if any), and 
source and destination page screenshots.
•New CloudWatch metrics— Synthetics publishes metrics named 2xx, 4xx, 5xx, and RequestFailed
in the CloudWatchSynthetics  namespace. These metrics show the number of 200s, 400s, 500s, and 
request failures in the canary runs. With this runtime version, these metrics are reported only for UI 
canaries, and are not reported for API canaries. They are also reported for API canaries starting with 
runtime version syn-nodejs-puppeteeer-2.2 .
•Sortable HAR ﬁles— You can now sort your HAR ﬁles by status code, request size, and duration.
•Metrics timestamp — CloudWatch metrics are now reported based on the Lambda invocation time 
instead of the canary run end time.
Bug ﬁxes in syn-nodejs-2.0:
•Fixed the issue of canary artifact upload errors not being reported. Such errors are now surfaced as 
execution errors.
•Fixed the issue of redirected requests (3xx) being incorrectly logged as errors.
•Fixed the issue of screenshots being numbered starting from 0. They should now start with 1.
•Fixed the issue of screenshots being garbled for Chinese and Japanese fonts.
There can be a small increase in canary duration when using syn-nodejs-2.0 or later, compared to earlier 
versions of the canary runtimes.
syn-nodejs-2.0-beta
Important
This runtime version was deprecated on February 8, 2021. For more information, see
CloudWatch Synthetics runtime support policy (p. 311).
Major dependencies :
•Lambda runtime Node.js 10.x
•Puppeteer-core version 3.3.0
•Chromium version 83.0.4103.0
New features in syn-nodejs-2.0-beta :
•Upgraded dependencies — This runtime version uses Puppeteer-core version 3.3.0 and Chromium 
version 83.0.4103.0
•Synthetics reporting— For each canary run, CloudWatch Synthetics creates a report named
SyntheticsReport-PASSED.json  or SyntheticsReport-FAILED.json  which records data such 
as start time, end time, status, and failures. It also records the PASSED/FAILED status of each step of 
the canary script, and failures and screenshots captured for each step.
322Amazon CloudWatch User Guide
Creating a canary
•Broken link checker report— The new version of the broken link checker included in this runtime 
creates a report that includes the links that were checked, status code, failure reason (if any), and 
source and destination page screenshots.
•New CloudWatch metrics— Synthetics publishes metrics named 2xx, 4xx, 5xx, and RequestFailed
in the CloudWatchSynthetics  namespace. These metrics show the number of 200s, 400s, 500s, 
and request failures in the canary runs. These metrics are reported only for UI canaries, and are not 
reported for API canaries.
•Sortable HAR ﬁles— You can now sort your HAR ﬁles by status code, request size, and duration.
•Metrics timestamp — CloudWatch metrics are now reported based on the Lambda invocation time 
instead of the canary run end time.
Bug ﬁxes in syn-nodejs-2.0-beta:
•Fixed the issue of canary artifact upload errors not being reported. Such errors are now surfaced as 
execution errors.
•Fixed the issue of redirected requests (3xx) being incorrectly logged as errors.
•Fixed the issue of screenshots being numbered starting from 0. They should now start with 1.
•Fixed the issue of screenshots being garbled for Chinese and Japanese fonts.
syn-1.0
Important
This runtime version is scheduled to be deprecated on May 28, 2021. For more information, see
CloudWatch Synthetics runtime support policy (p. 311).
The ﬁrst Synthetics runtime version is syn-1.0 .
Major dependencies :
•Lambda runtime Node.js 10.x
•Puppeteer-core version 1.14.0
•The Chromium version that matches Puppeteer-core 1.14.0
Runtime versions using Python and Selenium Webdriver
The following sections contain information about the CloudWatch Synthetics runtime versions for 
Python and Selenium Webdriver. Selenium is an open-source browser automation tool. For more 
information about Selenium, see www.selenium.dev/
The naming convention for these runtime versions is
syn-language -framework -majorversion .minorversion .
syn-python-selenium-1.3
Major dependencies :
•Python 3.8
•Selenium 3.141.0
•Chromium version 92.0.4512.0
New features in syn-python-selenium-1.3:
323Amazon CloudWatch User Guide
Creating a canary
•More precise timestamps — The start time and stop time of canary runs are now precise to the 
millisecond.
syn-python-selenium-1.2
Major dependencies :
•Python 3.8
•Selenium 3.141.0
•Chromium version 92.0.4512.0
•Updated dependencies — The only new features in this runtime are the updated dependencies.
syn-python-selenium-1.1
Major dependencies :
•Python 3.8
•Selenium 3.141.0
•Chromium version 83.0.4103.0
Features:
•Custom handler function— You can now use a custom handler function for your canary scripts. 
Previous runtimes required the script entry point to include .handler .
You can also put canary scripts in any folder and pass the folder name as part of the handler. For 
example, MyFolder/MyScriptFile.functionname  can be used as an entry point.
•Conﬁguration options for adding metrics and step failure conﬁgurations— These options were 
already available in runtimes for Node.js canaries. For more information, see SyntheticsConﬁguration 
class  (p. 355).
•Custom arguments in Chrome — You can now open a browser in incognito mode or pass in proxy 
server conﬁguration. For more information, see  Chrome() (p. 362).
•Cross-Region artifact buckets— A canary can store its artifacts in an Amazon S3 bucket in a diﬀerent 
Region.
•Bug ﬁxes, including a ﬁx for the index.py  issue — With previous runtimes, a canary ﬁle named
index.py  caused exceptions because it conﬂicted with the name of the library ﬁle. This issue is now 
ﬁxed.
syn-python-selenium-1.0
Major dependencies :
•Python 3.8
•Selenium 3.141.0
•Chromium version 83.0.4103.0
Features:
•Selenium support— You can write canary scripts using the Selenium test framework. You can bring 
your Selenium scripts from elsewhere into CloudWatch Synthetics with minimal changes, and they will 
work with AWS services.
324Amazon CloudWatch User Guide
Creating a canary
Writing a canary script
The following sections explain how to write a canary script and how to integrate a canary with other 
AWS Services.
Topics
•Writing a Node.js canary script (p. 325)
•Writing a Python canary script (p. 331)
•Changing an existing Selenium script to use a Synthetics canary (p. 332)
Writing a Node.js canary script
Topics
•Creating a CloudWatch Synthetics canary from scratch (p. 325)
•Packaging your canary ﬁles (p. 326)
•Changing an existing Puppeteer script to use as a Synthetics canary (p. 326)
•Environment variables (p. 327)
•Integrating your canary with other AWS services (p. 329)
•Forcing your canary to use a static IP address (p. 330)
Creating a CloudWatch Synthetics canary from scratch
Here is an example minimal Synthetics Canary script. This script passes as a successful run, and returns a 
string. To see what a failing canary looks like, change let fail = false;  to let fail = true; .
You must deﬁne an entry point function for the canary script. To see how ﬁles are uploaded to the 
Amazon S3 location speciﬁed as the canary's ArtifactS3Location , create these ﬁles under the /tmp 
folder. After the script runs, the pass/fail status and the duration metrics are published to CloudWatch 
and the ﬁles under /tmp are uploaded to S3.
const basicCustomEntryPoint = async function () { 
    // Insert your code here 
    // Perform multi-step pass/fail check 
    // Log decisions made and results to /tmp 
    // Be sure to wait for all your code paths to complete  
    // before returning control back to Synthetics. 
    // In that way, your canary will not finish and report success 
    // before your code has finished executing 
    // Throw to fail, return to succeed 
    let fail = false; 
    if (fail) { 
        throw "Failed basicCanary check."; 
    } 
    return "Successfully completed basicCanary checks.";
};
exports.handler = async () => { 
    return await basicCustomEntryPoint();
};
325Amazon CloudWatch User Guide
Creating a canary
Next, we'll expand the script to use Synthetics logging and make a call using the AWS SDK. For 
demonstration purposes, this script will create an Amazon DynamoDB client and make a call to the 
DynamoDB listTables API. It logs the response to the request and logs either pass or fail depending on 
whether the request was successful.
const log = require('SyntheticsLogger');
const AWS = require('aws-sdk');
// Require any dependencies that your script needs
// Bundle additional files and dependencies into a .zip file with folder structure
// nodejs/node_modules/ additional files and folders
const basicCustomEntryPoint = async function () { 
    log.info("Starting DynamoDB:listTables canary."); 
     
    let dynamodb = new AWS.DynamoDB(); 
    var params = {}; 
    let request = await dynamodb.listTables(params); 
    try { 
        let response = await request.promise(); 
        log.info("listTables response: " + JSON.stringify(response)); 
    } catch (err) { 
        log.error("listTables error: " + JSON.stringify(err), err.stack); 
        throw err; 
    } 
    return "Successfully completed DynamoDB:listTables canary.";
};
exports.handler = async () => { 
    return await basicCustomEntryPoint();
};
Packaging your canary ﬁles
If you are uploading your canary scripts using an Amazon S3 location, your zip ﬁle should include your 
script under this folder structure: nodejs/node_modules/ myCanaryFilename.js file .
If you have more than a single .js ﬁle or you have a dependency that your script depends 
on, you can bundle them all into a single ZIP ﬁle that contains the folder structure nodejs/
node_modules/ myCanaryFilename.js file and other folders and files . If you are using
syn-nodejs-puppeteer-3.4  or later, you can optionally put your canary ﬁles in another folder and 
creating your folder structure like this: nodejs/node_modules/ myFolder /myCanaryFilename.js 
file and other folders and files .
Handler name
Be sure to set your canary’s script entry point (handler) as myCanaryFilename.functionName
to match the ﬁle name of your script’s entry point. If you are using a runtime earlier than syn-
nodejs-puppeteer-3.4 , then functionName  must be handler. If you are using syn-nodejs-
puppeteer-3.4  or later, you can choose any function name as the handler. If you are using syn-
nodejs-puppeteer-3.4  or later, you can also optionally store the canary in a separate folder such as
nodejs/node_modules/myFolder/my_canary_filename . If you store it in a separate folder, specify 
that path in your script entry point, such as myFolder/my_canary_filename.functionName .
Changing an existing Puppeteer script to use as a Synthetics canary
This section explains how to take Puppeteer scripts and modify them to run as Synthetics canary scripts. 
For more information about Puppeteer, see Puppeteer API v1.14.0 .
We'll start with this example Puppeteer script:
326Amazon CloudWatch User Guide
Creating a canary
const puppeteer = require('puppeteer');
(async () => { 
  const browser = await puppeteer.launch(); 
  const page = await browser.newPage(); 
  await page.goto('https://example.com'); 
  await page.screenshot({path: 'example.png'}); 
  await browser.close();
})();
The conversion steps are as follows:
•Create and export a handler function. The handler is the entry point function for the script. If 
you are using a runtime earlier than syn-nodejs-puppeteer-3.4 , the handler function must be 
named handler. If you are using syn-nodejs-puppeteer-3.4  or later, the function can have any 
name, but it must be the same name that is used in the script. Also, if you are using syn-nodejs-
puppeteer-3.4  or later, you can store your scripts under any folder and specify that folder as part of 
the handler name.
const basicPuppeteerExample = async function () {};
exports.handler = async () => { 
    return await basicPuppeteerExample();
};
•Use the Synthetics  dependency.
var synthetics = require('Synthetics');
•Use the Synthetics.getPage  function to get a Puppeteer Page object.
const page = await synthetics.getPage();
The page object returned by the Synthetics.getPage function has the page.on  request , response
and requestfailed  events instrumented for logging. Synthetics also sets up HAR ﬁle generation for 
requests and responses on the page, and adds the canary ARN to the user-agent headers of outgoing 
requests on the page.
The script is now ready to be run as a Synthetics canary. Here is the updated script:
var synthetics = require('Synthetics');  // Synthetics dependency
const basicPuppeteerExample = async function () { 
    const page = await synthetics.getPage(); // Get instrumented page from Synthetics 
    await page.goto('https://example.com'); 
    await page.screenshot({path: '/tmp/example.png'}); // Write screenshot to /tmp folder
};
exports.handler = async () => {  // Exported handler function  
    return await basicPuppeteerExample();
};
Environment variables
You can use environment variables when creating canaries. This allows you to write a single canary script 
and then use that script with diﬀerent values to quickly create multiple canaries that have a similar task.
327Amazon CloudWatch User Guide
Creating a canary
For example, suppose your organization has endpoints such as prod , dev, and pre-release  for the 
diﬀerent stages of your software development, and you need to create canaries to test each of these 
endpoints. You can write a single canary script that tests your software and then specify diﬀerent values 
for the endpoint environment variable when you create each of the three canaries. Then, when you 
create a canary, you specify the script and the values to use for the environment variables.
The names of environment variables can contain letters, numbers, and the underscore character. They 
must start with a letter and be at least two characters. The total size of your environment variables 
can't exceed 4 KB. You can't specify any Lambda reserved environment variables as the names of your 
environment variables. For more information about reserved environment variables, see  Runtime 
environment variables.
Important
The environment variables keys and values are not encrypted. Do not store sensitive information 
in them.
The following example script uses two environment variables. This script is for a canary that checks 
whether a webpage is available. It uses environment variables to parameterize both the URL that it 
checks and the CloudWatch Synthetics log level that it uses.
The following function sets LogLevel  to the value of the LOG_LEVEL  environment variable.
 synthetics.setLogLevel(process.env.LOG_LEVEL);
This function sets URL to the value of the URL environment variable.
const URL = process.env.URL;
This is the complete script. When you create a canary using this script, you specify values for the
LOG_LEVEL  and URL environment variables.
var synthetics = require('Synthetics');
const log = require('SyntheticsLogger');
const pageLoadEnvironmentVariable = async function () { 
    // Setting the log level (0-3) 
    synthetics.setLogLevel(process.env.LOG_LEVEL); 
    // INSERT URL here 
    const URL = process.env.URL; 
    let page = await synthetics.getPage(); 
    //You can customize the wait condition here. For instance, 
    //using 'networkidle2' may be less restrictive. 
    const response = await page.goto(URL, {waitUntil: 'domcontentloaded', timeout: 30000}); 
    if (!response) { 
        throw "Failed to load page!"; 
    } 
    //Wait for page to render. 
    //Increase or decrease wait time based on endpoint being monitored. 
    await page.waitFor(15000); 
    await synthetics.takeScreenshot('loaded', 'loaded'); 
    let pageTitle = await page.title(); 
    log.info('Page title: ' + pageTitle); 
    log.debug('Environment variable:' + process.env.URL); 
    //If the response status code is not a 2xx success code 
    if (response.status() < 200 || response.status() > 299) { 
        throw "Failed to load page!"; 
    }
};
328Amazon CloudWatch User Guide
Creating a canary
exports.handler = async () => { 
    return await pageLoadEnvironmentVariable();
};
Passing environment variables to your script
To pass environment variables to your script when you create a canary in the console, specify the keys 
and values of the environment variables in the Environment variables section on the console. For more 
information, see Creating a canary (p. 303).
To pass environment variables through the API or AWS CLI, use the EnvironmentVariables  parameter 
in the RunConfig  section. The following is an example AWS CLI command that creates a canary that 
uses two environment variables with keys of Environment  and Region .
aws synthetics create-canary --cli-input-json '{ 
   "Name":"nameofCanary", 
   "ExecutionRoleArn":"roleArn", 
   "ArtifactS3Location":"s3://cw-syn-results-123456789012-us-west-2", 
   "Schedule":{ 
      "Expression":"rate(0 minute)", 
      "DurationInSeconds":604800 
   }, 
   "Code":{ 
      "S3Bucket": "canarycreation", 
      "S3Key": "cwsyn-mycanaryheartbeat-12345678-d1bd-1234-
abcd-123456789012-12345678-6a1f-47c3-b291-123456789012.zip", 
      "Handler":"pageLoadBlueprint.handler" 
   }, 
   "RunConfig": { 
      "TimeoutInSeconds":60, 
      "EnvironmentVariables": { 
         "Environment":"Production", 
         "Region": "us-west-1" 
      } 
   }, 
   "SuccessRetentionPeriodInDays":13, 
   "FailureRetentionPeriodInDays":13, 
   "RuntimeVersion":"syn-nodejs-2.0"
}'
Integrating your canary with other AWS services
All canaries can use the AWS SDK library. You can use this library when you write your canary to 
integrate the canary with other AWS services.
To do so, you need to add the following code to your canary. For these examples, AWS Secrets Manager 
is used as the service that the canary is integrating with.
•Import the AWS SDK.
const AWS = require('aws-sdk');
•Create a client for the AWS service that you are integrating with.
const secretsManager = new AWS.SecretsManager();
•Use the client to make API calls to that service.
var params = { 
  SecretId: secretName
329Amazon CloudWatch User Guide
Creating a canary
};
return await secretsManager.getSecretValue(params).promise();
The following canary script code snippet demonstrates an example of integration with Secrets Manager 
in more detail.
var synthetics = require('Synthetics');
const log = require('SyntheticsLogger'); 
  
const AWS = require('aws-sdk');
const secretsManager = new AWS.SecretsManager(); 
  
const getSecrets = async (secretName) => { 
    var params = { 
        SecretId: secretName 
    }; 
    return await secretsManager.getSecretValue(params).promise();
} 
  
const secretsExample = async function () { 
    let URL = "<URL>"; 
    let page = await synthetics.getPage(); 
     
    log.info(`Navigating to URL: ${URL}`); 
    const response = await page.goto(URL, {waitUntil: 'domcontentloaded', timeout: 30000}); 
     
    // Fetch secrets 
    let secrets = await getSecrets("secretname") 
    
    /** 
    * Use secrets to login.  
    * 
    * Assuming secrets are stored in a JSON format like: 
    * { 
    *   "username": "<USERNAME>", 
    *   "password": "<PASSWORD>" 
    * } 
    **/ 
    let secretsObj = JSON.parse(secrets.SecretString); 
    await synthetics.executeStep('login', async function () { 
        await page.type(">USERNAME-INPUT-SELECTOR<", secretsObj.username); 
        await page.type(">PASSWORD-INPUT-SELECTOR<", secretsObj.password); 
         
        await Promise.all([ 
          page.waitForNavigation({ timeout: 30000 }), 
          await page.click(">SUBMIT-BUTTON-SELECTOR<") 
        ]); 
    }); 
    
    // Verify login was successful 
    await synthetics.executeStep('verify', async function () { 
        await page.waitForXPath(">SELECTOR<", { timeout: 30000 }); 
    });
};
exports.handler = async () => { 
    return await secretsExample();
};
Forcing your canary to use a static IP address
You can set up a canary so that it uses a static IP address.
330Amazon CloudWatch User Guide
Creating a canary
To force a canary to use a static IP address
1. Create a new VPC. For more information, see Using DNS with Your VPC.
2. Create a new internet gateway. For more information, see Adding an internet gateway to your VPC.
3. Create a public subnet inside your new VPC.
4. Add a new route table to the VPC.
5. Add a route in the new route table, that goes from 0.0.0.0/0  to the internet gateway.
6. Associate the new route table with the public subnet.
7. Create an elastic IP address. For more information, see Elastic IP addresses .
8. Create a new NAT gateway and assign it to the public subnet and the elastic IP address.
9. Create a private subnet inside the VPC.
10. Add a route to the VPC default route table, that goes from 0.0.0.0/0  to the NAT gateway
11. Create your canary.
Writing a Python canary script
This script passes as a successful run, and returns a string. To see what a failing canary looks like, change 
fail = False to fail = True
def basic_custom_script(): 
    # Insert your code here 
    # Perform multi-step pass/fail check 
    # Log decisions made and results to /tmp 
    # Be sure to wait for all your code paths to complete  
    # before returning control back to Synthetics. 
    # In that way, your canary will not finish and report success 
    # before your code has finished executing 
    fail = False 
    if fail: 
        raise Exception("Failed basicCanary check.") 
    return "Successfully completed basicCanary checks."
def handler(event, context): 
    return basic_custom_script()
Packaging your canary ﬁles
If you have more than one .py ﬁle or your script has a dependency, you can bundle them all into a single 
ZIP ﬁle. If you use the syn-python-selenium-1.1  runtime, the ZIP ﬁle must contain your main 
canary .py ﬁle within a python folder, such as python/my_canary_filename.py . If you use syn-
python-selenium-1.1  or later, you can optionally use a diﬀerent folder , such as python/myFolder/
my_canary_filename.py .
This ZIP ﬁle should contain all necessary folders and ﬁles, but the other ﬁles do not need to be in the
python folder.
Be sure to set your canary’s script entry point as my_canary_filename.functionName  to match 
the ﬁle name and function name of your script’s entry point. If you are using the syn-nodejs-
selenium-1.0  runtime, then functionName  must be handler. If you are using syn-nodejs-
selenium-1.1  or later, this handler name restriction doesn't apply, and you can also optionally 
store the canary in a separate folder such as python/myFolder/my_canary_filename.py . If 
you store it in a separate folder, specify that path in your script entry point, such as myFolder/
my_canary_filename.functionName .
331Amazon CloudWatch User Guide
Creating a canary
Changing an existing Selenium script to use a Synthetics canary
You can quickly modify an existing script for Python and Selenium to be used as a canary. For more 
information about Selenium, see www.selenium.dev/.
For this example, we'll start with the following Selenium script:
from selenium import webdriver
def basic_selenium_script(): 
    browser = webdriver.Chrome() 
    browser.get('https://example.com') 
    browser.save_screenshot('loaded.png')
basic_selenium_script()
The conversion steps are as follows.
To convert a Selenium script to be used as a canary
1. Change the import statement to use Selenium from the aws_synthetics  module:
from aws_synthetics.selenium import synthetics_webdriver as webdriver
The Selenium module from aws_synthetics  ensures that the canary can emit metrics and logs, 
generate a HAR ﬁle, and work with other CloudWatch Synthetics features.
2. Create a handler function and call your Selenium method. The handler is the entry point function for 
the script.
If you are using syn-python-selenium-1.0 , the handler function must be named handler . If 
you are using syn-python-selenium-1.1  or later, the function can have any name, but it must 
be the same name that is used in the script. Also, if you are using syn-python-selenium-1.1  or 
later, you can store your scripts under any folder and specify that folder as part of the handler name.
def handler(event, context): 
    basic_selenium_script()
The script is now updated to be a CloudWatch Synthetics canary. Here is the updated script:
from aws_synthetics.selenium import synthetics_webdriver as webdriver
def basic_selenium_script(): 
    browser = webdriver.Chrome() 
    browser.get('https://example.com') 
    browser.save_screenshot('loaded.png')
def handler(event, context): 
    basic_selenium_script()
Library functions available for canary scripts
CloudWatch Synthetics includes several built-in classes and functions that you can call when writing 
Node.js scripts to use as canaries.
Some apply to both UI and API canaries. Others apply to UI canaries only. A UI canary is a canary 
that uses the getPage()  function and uses Puppeteer as a web driver to navigate and interact with 
webpages.
332Amazon CloudWatch User Guide
Creating a canary
Topics
•Library functions available for Node.js canary scripts (p. 333)
•Library functions available for Python canary scripts using Selenium (p. 355)
Library functions available for Node.js canary scripts
This section lists the library functions available for Node.js canary scripts.
Topics
•Node.js library classes and functions that apply to all canaries (p. 333)
•Node.js library classes and functions that apply to UI canaries only (p. 346)
•Node.js library classes and functions that apply to API canaries only (p. 353)
Node.js library classes and functions that apply to all canaries
The following CloudWatch Synthetics library functions for Node.js are useful for all canaries.
Topics
•Synthetics class (p. 333)
•SyntheticsConﬁguration class (p. 334)
•Synthetics logger (p. 342)
•SyntheticsLogHelper class (p. 343)
Synthetics class
The following functions for all canaries are in the Synthetics class.
addExecutionError(errorMessage, ex);
errorMessage  describes the error and ex is the exception that is encountered
You can use addExecutionError  to set execution errors for your canary. It fails the canary without 
interrupting the script execution. It also doesn't impact your successPercent  metrics.
You should track errors as execution errors only if they are not important to indicate the success or 
failure of your canary script.
An example of the use of addExecutionError  is the following. You are monitoring the availability 
of your endpoint and taking screenshots after the page has loaded. Because the failure of taking a 
screenshot doesn't determine availability of the endpoint, you can catch any errors encountered while 
taking screenshots and add them as execution errors. Your availability metrics will still indicate that the 
endpoint is up and running, but your canary status will be marked as failed. The following sample code 
block catches such an error and adds it as an execution error.
try { 
        await synthetics.takeScreenshot(stepName, "loaded"); 
    } catch(ex) { 
        synthetics.addExecutionError('Unable to take screenshot ', ex); 
    }
getCanaryName();
Returns the name of the canary.
333Amazon CloudWatch User Guide
Creating a canary
getRuntimeVersion();
This function is available in runtime version syn-nodejs-puppeteer-3.0  and later. It returns 
the Synthetics runtime version of the canary. For example, the return value could be syn-nodejs-
puppeteer-3.0 .
getLogLevel();
Retrieves the current log level for the Synthetics library. Possible values are the following:
•0 – Debug
•1 – Info
•2 – Warn
•3 – Error
Example:
let logLevel = synthetics.getLogLevel();
setLogLevel();
Sets the log level for the Synthetics library. Possible values are the following:
•0 – Debug
•1 – Info
•2 – Warn
•3 – Error
Example:
synthetics.setLogLevel(0);
SyntheticsConﬁguration class
This class is available only in the syn-nodejs-2.1  runtime version or later.
You can use the SyntheticsConﬁguration class to conﬁgure the behavior of Synthetics library functions. 
For example, you can use this class to conﬁgure the executeStep()  function to not capture 
screenshots.
You can set CloudWatch Synthetics conﬁgurations at the global level, which are applied to all steps of 
canaries. You can also override these conﬁgurations at the step level by passing conﬁguration key/value 
pairs.
You can pass in options at the step level. For examples, see async executeStep(stepName, 
functionToExecute, [stepConﬁg]); (p. 346) and executeHttpStep(stepName, requestOptions, [callback], 
[stepConﬁg])  (p. 353)
Function deﬁnitions:
setConﬁg(options)
options is an object, which is a set of conﬁgurable options for your canary. The following sections 
explain the possible ﬁelds in options .
334Amazon CloudWatch User Guide
Creating a canary
setConﬁg(options) for all canaries
For canaries using syn-nodejs-puppeteer-3.2  or later, the (options)  for setConﬁg  can include the 
following parameters:
•includeRequestHeaders  (boolean)— Whether to include request headers in the report. The default 
is false .
•includeResponseHeaders  (boolean)— Whether to include response headers in the report. The 
default is false .
•restrictedHeaders  (array)— A list of header values to ignore, if headers are included. This 
applies to both request and response headers. For example, you can hide your credentials by passing
includeRequestHeaders as true  and restrictedHeaders as ['Authorization'] .
•includeRequestBody  (boolean)— Whether to include the request body in the report. The default is
false .
•includeResponseBody  (boolean)— Whether to include the response body in the report. The default 
is false .
setConﬁg(options) regarding CloudWatch metrics
For canaries using syn-nodejs-puppeteer-3.1  or later, the (options)  for setConﬁg  can include the 
following Boolean parameters that determine which metrics are published by the canary. The default for 
each of these options is true. The options that start with aggregated  determine whether the metric is 
emitted without the CanaryName  dimension. You can use these metrics to see the aggregated results for 
all of your canaries. The other options determine whether the metric is emitted with the CanaryName
dimension. You can use these metrics to see results for each individual canary.
For a list of CloudWatch metrics emitted by canaries, see CloudWatch metrics published by 
canaries  (p. 377).
•failedCanaryMetric  (boolean)— Whether to emit the Failed metric (with the CanaryName
dimension) for this canary. The default is true .
•failedRequestsMetric  (boolean)— Whether to emit the Failed requests  metric (with the
CanaryName  dimension) for this canary. The default is true .
•_2xxMetric  (boolean)— Whether to emit the 2xx metric (with the CanaryName  dimension) for this 
canary. The default is true .
•_4xxMetric  (boolean)— Whether to emit the 4xx metric (with the CanaryName  dimension) for this 
canary. The default is true .
•_5xxMetric  (boolean)— Whether to emit the 5xx metric (with the CanaryName  dimension) for this 
canary. The default is true .
•stepDurationMetric  (boolean)— Whether to emit the Step duration  metric (with the
CanaryName  StepName  dimensions) for this canary. The default is true .
•stepSuccessMetric  (boolean)— Whether to emit the Step success  metric (with the CanaryName
StepName  dimensions) for this canary. The default is true .
•aggregatedFailedCanaryMetric  (boolean)— Whether to emit the Failed metric (without the
CanaryName  dimension) for this canary. The default is true .
•aggregatedFailedRequestsMetric  (boolean)— Whether to emit the Failed Requests  metric 
(without the CanaryName  dimension) for this canary. The default is true .
•aggregated2xxMetric  (boolean)— Whether to emit the 2xx metric (without the CanaryName
dimension) for this canary. The default is true .
•aggregated4xxMetric  (boolean)— Whether to emit the 4xx metric (without the CanaryName
dimension) for this canary. The default is true .
•aggregated5xxMetric  (boolean)— Whether to emit the 5xx metric (without the CanaryName
dimension) for this canary. The default is true .
335Amazon CloudWatch User Guide
Creating a canary
•visualMonitoringSuccessPercentMetric  (boolean)— Whether to emit the
visualMonitoringSuccessPercent  metric for this canary. The default is true .
•visualMonitoringTotalComparisonsMetric  (boolean)— Whether to emit the
visualMonitoringTotalComparisons  metric for this canary. The default is false .
•stepsReport  (boolean)— Whether to report a step execution summary. The default is true .
•includeUrlPassword  (boolean)— Whether to include a password that appears in the URL. By 
default, passwords that appear in URLs are redacted from logs and reports, to prevent disclosing 
sensitive data. The default is false .
•restrictedUrlParameters  (array)— A list of URL path or query parameters to redact. This applies 
to URLs appearing in logs, reports, and errors. The parameter is case-insensitive. You can pass an 
asterisk (*) as a value to redact all URL path and query parameter values. The default is an empty array.
•logRequest  (boolean)— Whether to log every request in canary logs. For UI canaries, this logs each 
request sent by the browser. The default is true .
•logResponse  (boolean)— Whether to log every response in canary logs. For UI canaries, this logs 
every response received by the browser. The default is true .
•logRequestBody  (boolean)— Whether to log request bodies along with the requests in canary logs. 
This conﬁguration applies only if logRequest  is true . The default is false .
•logResponseBody  (boolean)— Whether to log response bodies along with the responses in canary 
logs. This conﬁguration applies only if logResponse  is true . The default is false .
•logRequestHeaders  (boolean)— Whether to log request headers along with the requests in canary 
logs. This conﬁguration applies only if logRequest  is true . The default is false .
Note that includeRequestHeaders  enables headers in artifacts.
•logResponseHeaders  (boolean)— Whether to log response headers along with the responses in 
canary logs. This conﬁguration applies only if logResponse  is true . The default is false .
Note that includeResponseHeaders  enables headers in artifacts.
Note
The Duration  and SuccessPercent  metrics are always emitted for each canary, both with 
and without the CanaryName  metric.
Methods to enable or disable metrics
disableAggregatedRequestMetrics()
Disables the canary from emitting all request metrics that are emitted with no CanaryName  dimension.
disableRequestMetrics()
Disables all request metrics, including both per-canary metrics and metrics aggregated across all 
canaries.
disableStepMetrics()
Disables all step metrics, including both step success metrics and step duration metrics.
enableAggregatedRequestMetrics()
Enables the canary to emit all request metrics that are emitted with no CanaryName  dimension.
enableRequestMetrics()
Enables all request metrics, including both per-canary metrics and metrics aggregated across all canaries.
enableStepMetrics()
336Amazon CloudWatch User Guide
Creating a canary
Enables all step metrics, including both step success metrics and step duration metrics.
get2xxMetric()
Returns whether the canary emits a 2xx metric with the CanaryName  dimension.
get4xxMetric()
Returns whether the canary emits a 4xx metric with the CanaryName  dimension.
get5xxMetric()
Returns whether the canary emits a 5xx metric with the CanaryName  dimension.
getAggregated2xxMetric()
Returns whether the canary emits a 2xx metric with no dimension.
getAggregated4xxMetric()
Returns whether the canary emits a 4xx metric with no dimension.
getAggregatedFailedCanaryMetric()
Returns whether the canary emits a Failed  metric with no dimension.
getAggregatedFailedRequestsMetric()
Returns whether the canary emits a Failed requests  metric with no dimension.
getAggregated5xxMetric()
Returns whether the canary emits a 5xx metric with no dimension.
getFailedCanaryMetric()
Returns whether the canary emits a Failed  metric with the CanaryName  dimension.
getFailedRequestsMetric()
Returns whether the canary emits a Failed requests  metric with the CanaryName  dimension.
getStepDurationMetric()
Returns whether the canary emits a Duration  metric with the CanaryName  dimension for this canary.
getStepSuccessMetric()
Returns whether the canary emits a StepSuccess  metric with the CanaryName  dimension for this 
canary.
with2xxMetric(_2xxMetric)
Accepts a Boolean argument, which speciﬁes whether to emit a 2xx metric with the CanaryName
dimension for this canary.
with4xxMetric(_4xxMetric)
Accepts a Boolean argument, which speciﬁes whether to emit a 4xx metric with the CanaryName
dimension for this canary.
with5xxMetric(_5xxMetric)
337Amazon CloudWatch User Guide
Creating a canary
Accepts a Boolean argument, which speciﬁes whether to emit a 5xx metric with the CanaryName
dimension for this canary.
withAggregated2xxMetric(aggregated2xxMetric)
Accepts a Boolean argument, which speciﬁes whether to emit a 2xx metric with no dimension for this 
canary.
withAggregated4xxMetric(aggregated4xxMetric)
Accepts a Boolean argument, which speciﬁes whether to emit a 4xx metric with no dimension for this 
canary.
withAggregated5xxMetric(aggregated5xxMetric)
Accepts a Boolean argument, which speciﬁes whether to emit a 5xx metric with no dimension for this 
canary.
withAggregatedFailedCanaryMetric(aggregatedFailedCanaryMetric)
Accepts a Boolean argument, which speciﬁes whether to emit a Failed  metric with no dimension for 
this canary.
withAggregatedFailedRequestsMetric(aggregatedFailedRequestsMetric)
Accepts a Boolean argument, which speciﬁes whether to emit a Failed requests  metric with no 
dimension for this canary.
withFailedCanaryMetric(failedCanaryMetric)
Accepts a Boolean argument, which speciﬁes whether to emit a Failed  metric with the CanaryName
dimension for this canary.
withFailedRequestsMetric(failedRequestsMetric)
Accepts a Boolean argument, which speciﬁes whether to emit a Failed requests  metric with the
CanaryName  dimension for this canary.
withStepDurationMetric(stepDurationMetric)
Accepts a Boolean argument, which speciﬁes whether to emit a Duration  metric with the CanaryName
dimension for this canary.
withStepSuccessMetric(stepSuccessMetric)
Accepts a Boolean argument, which speciﬁes whether to emit a StepSuccess  metric with the
CanaryName  dimension for this canary.
Methods to enable or disable other features
withHarFile()
Accepts a Boolean argument, which speciﬁes whether to create a HAR ﬁle for this canary.
withStepsReport()
Accepts a Boolean argument, which speciﬁes whether to report a step execution summary for this 
canary.
withIncludeUrlPassword()
338Amazon CloudWatch User Guide
Creating a canary
Accepts a Boolean argument, which speciﬁes whether to include passwords that appear in URLs in logs 
and reports.
withRestrictedUrlParameters()
Accepts an array of URL path or query parameters to redact. This applies to URLs appearing in logs, 
reports, and errors. You can pass an asterisk (*) as a value to redact all URL path and query parameter 
values
withLogRequest()
Accepts a Boolean argument, which speciﬁes whether to log every request in the canary's logs.
withLogResponse()
Accepts a Boolean argument, which speciﬁes whether to log every response in the canary's logs.
withLogRequestBody()
Accepts a Boolean argument, which speciﬁes whether to log every request body in the canary's logs.
withLogResponseBody()
Accepts a Boolean argument, which speciﬁes whether to log every response body in the canary's logs.
withLogRequestHeaders()
Accepts a Boolean argument, which speciﬁes whether to log every request header in the canary's logs.
withLogResponseHeaders()
Accepts a Boolean argument, which speciﬁes whether to log every response header in the canary's logs.
getHarFile()
Returns whether the canary creates a HAR ﬁle.
getStepsReport()
Returns whether the canary reports a step execution summary.
getIncludeUrlPassword()
Returns whether the canary includes passwords that appear in URLs in logs and reports.
getRestrictedUrlParameters()
Returns whether the canary redacts URL path or query parameters.
getLogRequest()
Returns whether the canary logs every request in the canary's logs.
getLogResponse()
Returns whether the canary logs every response in the canary's logs.
getLogRequestBody()
Returns whether the canary logs every request body in the canary's logs.
getLogResponseBody()
339Amazon CloudWatch User Guide
Creating a canary
Returns whether the canary logs every response body in the canary's logs.
getLogRequestHeaders()
Returns whether the canary logs every request header in the canary's logs.
getLogResponseHeaders()
Returns whether the canary logs every response header in the canary's logs.
Functions for all canaries
•withIncludeRequestHeaders (includeRequestHeaders)
•withIncludeResponseHeaders (includeResponseHeaders)
•withRestrictedHeaders (restrictedHeaders)
•withIncludeRequestBody (includeRequestBody)
•withIncludeResponseBody (includeResponseBody)
•enableReportingOptions ()— Enables all reporting options-- includeRequestHeaders,
includeResponseHeaders, includeRequestBody, and includeResponseBody, .
•disableReportingOptions ()— Disables all reporting options-- includeRequestHeaders,
includeResponseHeaders, includeRequestBody, and includeResponseBody, .
setConﬁg(options) for UI canaries
For UI canaries, setConﬁg  can include the following Boolean parameters:
•continueOnStepFailure  (boolean)— Whether to continue with running the canary script after a 
step fails (this refers to the executeStep function). If any steps fail, the canary run will still be marked 
as failed. The default is false .
•harFile (boolean)— Whether to create a HAR ﬁle. The default is True .
•screenshotOnStepStart  (boolean)— Whether to take a screenshot before starting a step.
•screenshotOnStepSuccess  (boolean)— Whether to take a screenshot after completing a successful 
step.
•screenshotOnStepFailure  (boolean)— Whether to take a screenshot after a step fails.
Methods to enable or disable screenshots
disableStepScreenshots()
Disables all screenshot options (screenshotOnStepStart, screenshotOnStepSuccess, and 
screenshotOnStepFailure).
enableStepScreenshots()
Enables all screenshot options (screenshotOnStepStart, screenshotOnStepSuccess, and 
screenshotOnStepFailure). By default, all these methods are enabled.
getScreenshotOnStepFailure()
Returns whether the canary takes a screenshot after a step fails.
getScreenshotOnStepStart()
Returns whether the canary takes a screenshot before starting a step.
getScreenshotOnStepSuccess()
340Amazon CloudWatch User Guide
Creating a canary
Returns whether the canary takes a screenshot after completing a step successfully.
withScreenshotOnStepStart(screenshotOnStepStart)
Accepts a Boolean argument, which indicates whether to take a screenshot before starting a step.
withScreenshotOnStepSuccess(screenshotOnStepSuccess)
Accepts a Boolean argument, which indicates whether to take a screenshot after completing a step 
successfully.
withScreenshotOnStepFailure(screenshotOnStepFailure)
Accepts a Boolean argument, which indicates whether to take a screenshot after a step fails.
Usage in UI canaries
First, import the synthetics dependency and fetch the conﬁguration.
// Import Synthetics dependency
const synthetics = require('Synthetics');
// Get Synthetics configuration
const synConfig = synthetics.getConfiguration();
Then, set the conﬁguration for each option by calling the setConﬁg method using one of the following 
options.
// Set configuration values 
    synConfig.setConfig({ 
        screenshotOnStepStart: true,  
        screenshotOnStepSuccess: false, 
        screenshotOnStepFailure: false 
    });
Or
synConfig.withScreenshotOnStepStart(false).withScreenshotOnStepSuccess(true).withScreenshotOnStepFailure(true)
To disable all screenshots, use the disableStepScreenshots() function as in this example.
synConfig.disableStepScreenshots();
You can enable and disable screenshots at any point in the code. For example, to disable screenshots 
only for one step, disable them before running that step and then enable them after the step.
setConﬁg(options) for API canaries
For API canaries, setConﬁg  can include the following Boolean parameters:
•continueOnHttpStepFailure  (boolean)— Whether to continue with running the canary script after 
an HTTP step fails (this refers to the executeHttpStep function). If any steps fail, the canary run will 
still be marked as failed. The default is true .
Visual monitoring
Visual monitoring compares screenshots taken during a canary run with screenshots taken during a 
baseline canary run. If the discrepancy between the two screenshots is beyond a threshold percentage, 
341Amazon CloudWatch User Guide
Creating a canary
the canary fails and you can see the areas with diﬀerences highlighted in color in the canary run report. 
Visual monitoring is supported in canaries running syn-puppeteer-node-3.2  and later. It is not currently 
supported in canaries running Python and Selenium.
To enable visual monitoring, add the following line of code to the canary script. For more details, see
SyntheticsConﬁguration class (p. 334).
syntheticsConfiguration.withVisualCompareWithBaseRun(true);
The ﬁrst time that the canary runs successfully after this line is added to the script, it uses the 
screenshots taken during that run as the baseline for comparison. After that ﬁrst canary run, you can use 
the CloudWatch console to edit the canary to do any of the following:
•Set the next run of the canary as the new baseline.
•Draw boundaries on the current baseline screenshot to designate areas of the screenshot to ignore 
during visual comparisons.
•Remove a screenshot from being used for visual monitoring.
For more information about using the CloudWatch console to edit a canary, see Edit or delete a 
canary (p. 378).
Other options for visual monitoring
syntheticsConﬁguration.withVisualVarianceThresholdPercentage(desiredPercentage)
Set the acceptable percentage for screenshot variance in visual comparisons.
syntheticsConﬁguration.withVisualVarianceHighlightHexColor("#fafa00")
Set the highlight color that designates variance areas when you look at canary run reports that use visual 
monitoring.
syntheticsConﬁguration.withFailCanaryRunOnVisualVariance(failCanary)
Set whether or not the canary fails when there is a visual diﬀerence that is more than the threshold. The 
default is to fail the canary.
Synthetics logger
SyntheticsLogger writes logs out to both the console and to a local log ﬁle at the same log level. This 
log ﬁle is written to both locations only if the log level is at or below the desired logging level of the log 
function that was called.
The logging statements in the local log ﬁle are prepended with "DEBUG: ", "INFO: ", and so on to match 
the log level of the function that was called.
You can use the SyntheticsLogger, assuming you want to run the Synthetics Library at the same log level 
as your Synthetics canary logging.
Using the SyntheticsLogger is not required to create a log ﬁle that is uploaded to your S3 results 
location. You could instead create a diﬀerent log ﬁle in the /tmp folder. Any ﬁles created under the /tmp
folder are uploaded to the results location in S3 as artifacts.
To use the Synthetics Library logger:
const log = require('SyntheticsLogger');
Useful function deﬁnitions:
342Amazon CloudWatch User Guide
Creating a canary
log.debug(message , ex);
Parameters: message  is the message to log. ex is the exception, if any, to log.
Example:
log.debug("Starting step - login.");
log.error(message , ex);
Parameters: message  is the message to log. ex is the exception, if any, to log.
Example:
try { 
  await login();
catch (ex) { 
  log.error("Error encountered in step - login.", ex);
}
log.info(message , ex);
Parameters: message  is the message to log. ex is the exception, if any, to log.
Example:
log.info("Successfully completed step - login.");
log.log(message , ex);
This is an alias for log.info .
Parameters: message  is the message to log. ex is the exception, if any, to log.
Example:
 log.log("Successfully completed step - login.");
log.warn(message , ex);
Parameters: message  is the message to log. ex is the exception, if any, to log.
Example:
log.warn("Exception encountered trying to publish CloudWatch Metric.", ex);
SyntheticsLogHelper class
The SyntheticsLogHelper  class is available in the runtime syn-nodejs-puppeteer-3.2  and later 
runtimes. It is already initialized in the CloudWatch Synthetics library and is conﬁgured with Synthetics 
conﬁguration. You can add this as a dependency in your script. This class enables you to sanitize URLs, 
headers, and error messages to redact sensitive information.
Note
Synthetics sanitizes all URLs and error messages it logs before including them in 
logs, reports, HAR ﬁles, and canary run errors based on the Synthetics conﬁguration 
setting restrictedUrlParameters . You have to use getSanitizedUrl  or
getSanitizedErrorMessage  only if you are logging URLs or errors in your script. Synthetics 
343Amazon CloudWatch User Guide
Creating a canary
does not store any canary artifacts except for canary errors thrown by the script. Canary run 
artifacts are stored in your customer account. For more information, see Security considerations 
for Synthetics canaries (p. 1229 ).
getSanitizedUrl(url, stepConﬁg = null)
This function is available in syn-nodejs-puppeteer-3.2  and later. It returns sanitized url strings 
based on the conﬁguration. You can choose to redact sensitive URL parameters such as password and 
access_token by setting the property restrictedUrlParameters . By default, passwords in URLs are 
redacted. You can enable URL passwords if needed by setting includeUrlPassword  to true.
This function throws an error if the URL passed in is not a valid URL.
Parameters
•url is a string and is the URL to sanitize.
•stepConfig  (Optional) overrides the global Synthetics conﬁguration for this function. If stepConfig
is not passed in, the global conﬁguration is used to sanitize the URL.
Example
This example uses the following sample URL: https://example.com/learn/home?
access_token=12345&token_type=Bearer&expires_in=1200 . In this example, access_token
contains your sensitive information which shouldn't be logged. Note that the Synthetics services doesn't 
store any canary run artifacts. Artifacts such as logs, screenshots, and reports are all stored in an Amazon 
S3 bucket in your customer account.
The ﬁrst step is to set the Synthetics conﬁguration.
// Import Synthetics dependency
const synthetics = require('Synthetics');
// Import Synthetics logger for logging url
const log = require('SyntheticsLogger');
// Get Synthetics configuration
const synConfig = synthetics.getConfiguration();
// Set restricted parameters
synConfig.setConfig({ 
   restrictedUrlParameters: ['access_token'];
});
Next, sanitize and log the URL
// Import SyntheticsLogHelper dependency
const syntheticsLogHelper = require('SyntheticsLogHelper');
const sanitizedUrl = synthetics.getSanitizedUrl('https://example.com/learn/home?
access_token=12345&token_type=Bearer&expires_in=1200');
This logs the following in your canary log.
My example url is: https://example.com/learn/home?
access_token=REDACTED&token_type=Bearer&expires_in=1200
You can override the Synthetics conﬁguration for a URL by passing in an optional parameter containing 
Synthetics conﬁguration options, as in the following example.
344Amazon CloudWatch User Guide
Creating a canary
const urlConfig = { 
   restrictedUrlParameters = ['*']
};
const sanitizedUrl = synthetics.getSanitizedUrl('https://example.com/learn/home?
access_token=12345&token_type=Bearer&expires_in=1200', urlConfig);
logger.info('My example url is: ' + sanitizedUrl);
The preceding example redacts all query parameters, and is logged as follows:
My example url is: https://example.com/learn/home?
access_token=REDACTED&token_type=REDACTED&expires_in=REDACTED
getSanitizedErrorMessage
This function is available in syn-nodejs-puppeteer-3.2  and later. It returns sanitized error strings by 
sanitizing any URLs present based on the Synthetics conﬁguration. You can choose to override the global 
Synthetics conﬁguration when you call this function by passing an optional stepConfig  parameter.
Parameters
•error is the error to sanitize. It can be an Error object or a string.
•stepConfig  (Optional) overrides the global Synthetics conﬁguration for this function. If stepConfig
is not passed in, the global conﬁguration is used to sanitize the URL.
Example
This example uses the following error: Failed to load url: https://example.com/learn/
home?access_token=12345&token_type=Bearer&expires_in=1200
The ﬁrst step is to set the Synthetics conﬁguration.
// Import Synthetics dependency
const synthetics = require('Synthetics');
// Import Synthetics logger for logging url
const log = require('SyntheticsLogger');
// Get Synthetics configuration
const synConfig = synthetics.getConfiguration();
// Set restricted parameters
synConfig.setConfig({ 
   restrictedUrlParameters: ['access_token'];
});
Next, sanitize and log the error message
// Import SyntheticsLogHelper dependency
const syntheticsLogHelper = require('SyntheticsLogHelper');
try { 
   // Your code which can throw an error containing url which your script logs
} catch (error) { 
    const sanitizedErrorMessage = synthetics.getSanitizedErrorMessage(errorMessage); 
    logger.info(sanitizedErrorMessage);
}
This logs the following in your canary log.
345Amazon CloudWatch User Guide
Creating a canary
Failed to load url: https://example.com/learn/home?
access_token=REDACTED&token_type=Bearer&expires_in=1200
getSanitizedHeaders(headers, stepConﬁg=null)
This function is available in syn-nodejs-puppeteer-3.2  and later. It returns sanitized headers based 
on the restrictedHeaders  property of syntheticsConfiguration . The headers speciﬁed in the
restrictedHeaders  property are redacted from logs, HAR ﬁles, and reports.
Parameters
•headers is an object containing the headers to sanitize.
•stepConfig  (Optional) overrides the global Synthetics conﬁguration for this function. If stepConfig
is not passed in, the global conﬁguration is used to sanitize the headers.
Node.js library classes and functions that apply to UI canaries only
The following CloudWatch Synthetics library functions for Node.js are useful only for UI canaries.
Topics
•Synthetics class (p. 346)
•BrokenLinkCheckerReport class (p. 350)
•SyntheticsLink class (p. 352)
Synthetics class
The following functions are in the Synthetics class.
async addUserAgent(page, userAgentString);
This function appends userAgentString  to the speciﬁed page's user-agent header.
Example:
await synthetics.addUserAgent(page, "MyApp-1.0");
Results in the page’s user-agent header being set to browsers-user-agent-header-
valueMyApp-1.0
async executeStep(stepName, functionToExecute, [stepConﬁg]);
Executes the provided step, wrapping it with start/pass/fail logging, start/pass/fail screenshots, and 
pass/fail and duration metrics.
Note
If you are using the syn-nodejs-2.1  or later runtime, you can conﬁgure whether and when 
screenshots are taken. For more information, see SyntheticsConﬁguration class (p. 334).
The executeStep  function also does the following:
•Logs that the step started.
•Takes a screenshot named <stepName>-starting .
•Starts a timer.
•Executes the provided function.
•If the function returns normally, it counts as passing. If the function throws, it counts as failing.
346Amazon CloudWatch User Guide
Creating a canary
•Ends the timer.
•Logs whether the step passed or failed
•Takes a screenshot named <stepName>-succeeded  or <stepName>-failed .
•Emits the stepName  SuccessPercent  metric, 100 for pass or 0 for failure.
•Emits the stepName  Duration  metric, with a value based on the step start and end times.
•Finally, returns what the functionToExecute  returned or re-throws what functionToExecute
threw.
If the canary uses the syn-nodejs-2.0  runtime or later, this function also adds a step execution 
summary to the canary's report. The summary includes details about each step, such as start time, end 
time, status (PASSED/FAILED), failure reason (if failed), and screenshots captured during the execution of 
each step.
Example:
await synthetics.executeStep('navigateToUrl', async function (timeoutInMillis = 30000) { 
           await page.goto(url, {waitUntil: ['load', 'networkidle0'], timeout: 
 timeoutInMillis});});
Response:
Returns what functionToExecute  returns.
Updates with syn-nodejs-2.2
Starting with syn-nodejs-2.2 , you can optionally pass step conﬁgurations to override CloudWatch 
Synthetics conﬁgurations at the step level. For a list of options that you can pass to executeStep , see
SyntheticsConﬁguration class (p. 334).
The following example overrides the default false conﬁguration for continueOnStepFailure  to
true and speciﬁes when to take screenthots.
var stepConfig = { 
    'continueOnStepFailure': true, 
    'screenshotOnStepStart': false, 
    'screenshotOnStepSuccess': true, 
    'screenshotOnStepFailure': false
}
await executeStep('Navigate to amazon', async function (timeoutInMillis = 30000) { 
      await page.goto(url, {waitUntil: ['load', 'networkidle0'], timeout: 
 timeoutInMillis}); 
 }, stepConfig);
getDefaultLaunchOptions();
The getDefaultLaunchOptions()  function returns the browser launch options that are used by 
CloudWatch Synthetics. For more information, see Launch options type
// This function returns default launch options used by Synthetics.
const defaultOptions = await synthetics.getDefaultLaunchOptions();
getPage();
Returns the current open page as a Puppeteer object. For more information, see Puppeteer API v1.14.0 .
Example:
347Amazon CloudWatch User Guide
Creating a canary
let page = synthetics.getPage();
Response:
The page (Puppeteer object) that is currently open in the current browser session.
getRequestResponseLogHelper();
Important
In canaries that use the syn-nodejs-puppeteer-3.2  runtime or later, this function is 
deprecated along with the RequestResponseLogHelper  class. Any use of this function 
causes a warning to appear in your canary logs. This function will be removed in future runtime 
versions. If you are using this function, use RequestResponseLogHelper class (p. 349) instead.
Use this function as a builder pattern for tweaking the request and response logging ﬂags.
Example:
synthetics.setRequestResponseLogHelper(getRequestResponseLogHelper().withLogRequestHeaders(false));;
Response:
{RequestResponseLogHelper}
launch(options)
The options for this function are available only in the syn-nodejs-2.1  runtime version or later.
This function is used only for UI canaries. It closes the existing browser and launches a new one.
Note
CloudWatch Synthetics always launches a browser before starting to run your script. You don't 
need to call launch() unless you want to launch a new browser with custom options.
(options) is a conﬁgurable set of options to set on the browser. For more information, see Launch options 
type.
If you call this function with no options, Synthetics launches a browser with default arguments,
executablePath , and defaultViewport . The default viewport in CloudWatch Synthetics is 1920 by 
1080.
You can override launch parameters used by CloudWatch Synthetics and pass additional parameters 
when launching the browser. For example, the following code snippet launches a browser with default 
arguments and a default executable path, but with a viewport of 800 x 600.
await synthetics.launch({ 
        defaultViewport: {  
            "deviceScaleFactor": 1,  
            "width": 800, 
            "height": 600  
    }});
The following sample code adds a new ignoreHTTPSErrors  parameter to the CloudWatch Synthetics 
launch parameters:
await synthetics.launch({ 
        ignoreHTTPSErrors: true 
 });
348Amazon CloudWatch User Guide
Creating a canary
You can disable web security by adding a --disable-web-security  ﬂag to args in the CloudWatch 
Synthetics launch parameters:
// This function adds the --disable-web-security flag to the launch parameters
const defaultOptions = await synthetics.getDefaultLaunchOptions();
const launchArgs = [...defaultOptions.args, '--disable-web-security'];
await synthetics.launch({ 
     args: launchArgs 
  });
RequestResponseLogHelper class
Important
In canaries that use the syn-nodejs-puppeteer-3.2  runtime or later, this class is 
deprecated. Any use of this class causes a warning to appear in your canary logs. This 
function will be removed in future runtime versions. If you are using this function, use
RequestResponseLogHelper class (p. 349) instead.
Handles the ﬁne-grained conﬁguration and creation of string representations of request and response 
payloads.
class RequestResponseLogHelper { 
  
    constructor () { 
        this.request = {url: true, resourceType: false, method: false, headers: false, 
 postData: false}; 
        this.response = {status: true, statusText: true, url: true, remoteAddress: false, 
 headers: false}; 
    } 
  
    withLogRequestUrl(logRequestUrl); 
     
    withLogRequestResourceType(logRequestResourceType); 
     
    withLogRequestMethod(logRequestMethod); 
     
    withLogRequestHeaders(logRequestHeaders); 
     
    withLogRequestPostData(logRequestPostData); 
         
    withLogResponseStatus(logResponseStatus); 
     
    withLogResponseStatusText(logResponseStatusText); 
    
    withLogResponseUrl(logResponseUrl); 
  
    withLogResponseRemoteAddress(logResponseRemoteAddress); 
     
    withLogResponseHeaders(logResponseHeaders);
Example:
synthetics.setRequestResponseLogHelper(getRequestResponseLogHelper()
.withLogRequestPostData(true)
.withLogRequestHeaders(true)
.withLogResponseHeaders(true));
Response:
{RequestResponseLogHelper}
349Amazon CloudWatch User Guide
Creating a canary
setRequestResponseLogHelper();
Important
In canaries that use the syn-nodejs-puppeteer-3.2  runtime or later, this function is 
deprecated along with the RequestResponseLogHelper  class. Any use of this function 
causes a warning to appear in your canary logs. This function will be removed in future runtime 
versions. If you are using this function, use RequestResponseLogHelper class (p. 349) instead.
Use this function as a builder pattern for setting the request and response logging ﬂags.
Example:
synthetics.setRequestResponseLogHelper().withLogRequestHeaders(true).withLogResponseHeaders(true);
Response:
{RequestResponseLogHelper}
async takeScreenshot(name, suﬃx);
Takes a screenshot (.PNG) of the current page with name and suﬃx (optional).
Example:
await synthetics.takeScreenshot("navigateToUrl", "loaded")
This example captures and uploads a screenshot named 01-navigateToUrl-loaded.png  to the 
canary's S3 bucket.
You can take a screenshot for a particular canary step by passing the stepName  as the ﬁrst parameter. 
Screenshots are linked to the canary step in your reports, to help you track each step while debugging.
CloudWatch Synthetics canaries automatically take screenshots before starting a step (the executeStep
function) and after the step completion (unless you conﬁgure the canary to disable screenshots). You can 
take more screenshots by passing in the step name in the takeScreenshot  function.
The following example takes screenshot with the signupForm  as the value of the stepName . The 
screenshot will be named 02-signupForm-address  and will be linked to the step named signupForm
in the canary report.
await synthetics.takeScreenshot('signupForm', 'address')
BrokenLinkCheckerReport class
This class provides methods to add a synthetics link. It's supported only on canaries that use the syn-
nodejs-2.0-beta  version of the runtime or later.
To use BrokenLinkCheckerReport , include the following lines in the script:
const BrokenLinkCheckerReport = require('BrokenLinkCheckerReport'); 
             
const brokenLinkCheckerReport = new BrokenLinkCheckerReport();
Useful function deﬁnitions:
addLink(syntheticsLink , isBroken)
350Amazon CloudWatch User Guide
Creating a canary
syntheticsLink  is a SyntheticsLink  object representing a link. This function adds the link 
according to the status code. By default, it considers a link to be broken if the status code is not available 
or the status code is 400 or higher. You can override this default behavior by passing in the optional 
parameter isBrokenLink  with a value of true  or false .
This function does not have a return value.
getLinks()
This function returns an array of SyntheticsLink  objects that are included in the broken link checker 
report.
getTotalBrokenLinks()
This function returns a number representing the total number of broken links.
getTotalLinksChecked()
This function returns a number representing the total number of links included in the report.
How to use BrokenLinkCheckerReport
The following canary script code snippet demonstrates an example of navigating to a link and adding it 
to the broken link checker report.
1.Import SyntheticsLink , BrokenLinkCheckerReport , and Synthetics .
const BrokenLinkCheckerReport = require('BrokenLinkCheckerReport');
const SyntheticsLink = require('SyntheticsLink');
// Synthetics dependency
const synthetics = require('Synthetics');
2.To add a link to the report, create an instance of BrokenLinkCheckerReport .
let brokenLinkCheckerReport = new BrokenLinkCheckerReport();
3.Navigate to the URL and add it to the broken link checker report.
let url = "https://amazon.com";
let syntheticsLink = new SyntheticsLink(url);
// Navigate to the url.
let page = await synthetics.getPage();
// Create a new instance of Synthetics Link
let link = new SyntheticsLink(url)
try { 
    const response = await page.goto(url, {waitUntil: 'domcontentloaded', timeout: 
 30000});
} catch (ex) { 
    // Add failure reason if navigation fails. 
    link.withFailureReason(ex);
}
if (response) { 
    // Capture screenshot of destination page 
    let screenshotResult = await synthetics.takeScreenshot('amazon-home', 'loaded'); 
    
    // Add screenshot result to synthetics link 
    link.addScreenshotResult(screenshotResult); 
351Amazon CloudWatch User Guide
Creating a canary
    // Add status code and status description to the link 
    link.withStatusCode(response.status()).withStatusText(response.statusText())
}
// Add link to broken link checker report.
brokenLinkCheckerReport.addLink(link);
4.Add the report to Synthetics. This creates a JSON ﬁle named BrokenLinkCheckerReport.json  in 
your S3 bucket for each canary run. You can see a links report in the console for each canary run along 
with screenshots, logs, and HAR ﬁles.
await synthetics.addReport(brokenLinkCheckerReport);
SyntheticsLink class
This class provides methods to wrap information. It's supported only on canaries that use the syn-
nodejs-2.0-beta  version of the runtime or later.
To use SyntheticsLink , include the following lines in the script:
const SyntheticsLink = require('SyntheticsLink');
const syntheticsLink = new SyntheticsLink("https://www.amazon.com");
This function returns syntheticsLink Object
Useful function deﬁnitions:
withUrl(url)
url is a URL string. This function returns syntheticsLink Object
withText(text )
text is a string representing anchor text. This function returns syntheticsLink Object . It adds anchor 
text corresponding to the link.
withParentUrl(parentUrl )
parentUrl  is a string representing the parent (source page) URL. This function returns
syntheticsLink Object
withStatusCode( statusCode )
statusCode  is a string representing the status code. This function returns syntheticsLink Object
withFailureReason(failureReason )
failureReason  is a string representing the failure reason. This function returns
syntheticsLink Object
addScreenshotResult(screenshotResult )
screenshotResult  is an object. It is an instance of ScreenshotResult  that was returned by the 
Synthetics function takeScreenshot . The object includes the following:
•fileName — A string representing the screenshotFileName
•pageUrl (optional)
•error (optional)
352Amazon CloudWatch User Guide
Creating a canary
Node.js library classes and functions that apply to API canaries only
The following CloudWatch Synthetics library functions for Node.js are useful only for API canaries.
Topics
•executeHttpStep(stepName, requestOptions, [callback], [stepConﬁg]) (p. 353)
executeHttpStep(stepName, requestOptions, [callback], [stepConﬁg])
Executes the provided HTTP request as a step, and publishes SuccessPercent  (pass/fail) and
Duration  metrics.
executeHttpStep uses either HTTP or HTTPS native functions under the hood, depending upon the 
protocol speciﬁed in the request.
This function also adds a step execution summary to the canary's report. The summary includes details 
about each HTTP request, such as the following:
•Start time
•End time
•Status (PASSED/FAILED)
•Failure reason, if it failed
•HTTP call details such as request/response headers, body, status code, status message, and 
performance timings.
Parameters
stepName( String )
Speciﬁes the name of the step. This name is also used for publishing CloudWatch metrics for this step.
requestOptions( Object or String )
The value of this parameter can be a URL, a URL string, or an object. If it is an object, then it must be a 
set of conﬁgurable options to make an HTTP request. It supports all options in  http.request(options[, 
callback])  in the Node.js documentation.
In addition to these Node.js options, requestOptions  supports the additional parameter body. You can 
use the body parameter to pass data as a request body.
callback(response )
(Optional) This is a user function which is invoked with the HTTP response. The response is of the type 
Class: http.IncomingMessage.
stepConﬁg( object )
(Optional) Use this parameter to override global synthetics conﬁgurations with a diﬀerent conﬁguration 
for this step.
Examples of using executeHttpStep
The following series of examples build on each other to illustrate the various uses of this option.
This ﬁrst example conﬁgures request parameters. You can pass a URL as requestOptions :
let requestOptions = 'https://www.amazon.com';
353Amazon CloudWatch User Guide
Creating a canary
Or you can pass a set of options:
let requestOptions = { 
        'hostname': 'myproductsEndpoint.com', 
        'method': 'GET', 
        'path': '/test/product/validProductName', 
        'port': 443, 
        'protocol': 'https:' 
    };
The next example creates a callback function which accepts a response. By default, if you do not specify
callback , CloudWatch Synthetics validates that the status is between 200 and 299 inclusive.
// Handle validation for positive scenario 
    const callback = async function(res) { 
        return new Promise((resolve, reject) => { 
            if (res.statusCode < 200 || res.statusCode > 299) { 
                throw res.statusCode + ' ' + res.statusMessage; 
            } 
      
            let responseBody = ''; 
            res.on('data', (d) => { 
                responseBody += d; 
            }); 
      
            res.on('end', () => { 
                // Add validation on 'responseBody' here if required. For ex, your status 
 code is 200 but data might be empty 
                resolve(); 
            }); 
        }); 
    };
The next example creates a conﬁguration for this step that overrides the global CloudWatch Synthetics 
conﬁguration. The step conﬁguration in this example allows request headers, response headers, 
request body (post data), and response body in your report and restrict 'X-Amz-Security-Token' and 
'Authorization' header values. By default, these values are not included in the report for security reasons. 
If you choose to include them, the data is only stored in your S3 bucket.
// By default headers, post data, and response body are not included in the report for 
 security reasons.  
// Change the configuration at global level or add as step configuration for individual 
 steps
let stepConfig = { 
    includeRequestHeaders: true,  
    includeResponseHeaders: true, 
    restrictedHeaders: ['X-Amz-Security-Token', 'Authorization'], // Restricted header 
 values do not appear in report generated. 
    includeRequestBody: true, 
    includeResponseBody: true
};
This ﬁnal example passes your request to executeHttpStep and names the step.
await synthetics.executeHttpStep('Verify GET products API', requestOptions, callback, 
 stepConfig);
With this set of examples, CloudWatch Synthetics adds the details from each step in your report and 
produces metrics for each step using stepName .
354Amazon CloudWatch User Guide
Creating a canary
You will see successPercent  and duration  metrics for the Verify GET products API  step. You 
can monitor your API performance by monitoring the metrics for your API call steps.
For a sample complete script that uses these functions, see Multi-step API canary (p. 370).
Library functions available for Python canary scripts using Selenium
This section lists the Selenium library functions available for Python canary scripts.
Topics
•Python and Selenium library classes and functions that apply to all canaries (p. 355)
•Python and Selenium library classes and functions that apply to UI canaries only (p. 360)
Python and Selenium library classes and functions that apply to all canaries
The following CloudWatch Synthetics Selenium library functions for Python are useful for all canaries.
Topics
•SyntheticsConﬁguration class (p. 355)
•SyntheticsLogger class (p. 359)
SyntheticsConﬁguration class
You can use the SyntheticsConﬁguration class to conﬁgure the behavior of Synthetics library functions. 
For example, you can use this class to conﬁgure the executeStep()  function to not capture 
screenshots.
You can set CloudWatch Synthetics conﬁgurations at the global level.
Function deﬁnitions:
set_conﬁg(options)
from aws_synthetics.common import synthetics_configuration
options is an object, which is a set of conﬁgurable options for your canary. The following sections 
explain the possible ﬁelds in options .
•screenshot_on_step_start  (boolean)— Whether to take a screenshot before starting a step.
•screenshot_on_step_success  (boolean)— Whether to take a screenshot after completing a 
successful step.
•screenshot_on_step_failure  (boolean)— Whether to take a screenshot after a step fails.
with_screenshot_on_step_start(screenshot_on_step_start)
Accepts a Boolean argument, which indicates whether to take a screenshot before starting a step.
with_screenshot_on_step_success(screenshot_on_step_success)
Accepts a Boolean argument, which indicates whether to take a screenshot after completing a step 
successfully.
with_screenshot_on_step_failure(screenshot_on_step_failure)
Accepts a Boolean argument, which indicates whether to take a screenshot after a step fails.
get_screenshot_on_step_start()
355Amazon CloudWatch User Guide
Creating a canary
Returns whether to take a screenshot before starting a step.
get_screenshot_on_step_success()
Returns whether to take a screenshot after completing a step successfully.
get_screenshot_on_step_failure()
Returns whether to take a screenshot after a step fails.
disable_step_screenshots()
Disables all screenshot options (get_screenshot_on_step_start, get_screenshot_on_step_success, and 
get_screenshot_on_step_failure).
enable_step_screenshots()
Enables all screenshot options (get_screenshot_on_step_start, get_screenshot_on_step_success, and 
get_screenshot_on_step_failure). By default, all these methods are enabled.
setConﬁg(options) regarding CloudWatch metrics
For canaries using syn-python-selenium-1.1  or later, the (options)  for setConﬁg  can include the 
following Boolean parameters that determine which metrics are published by the canary. The default for 
each of these options is true. The options that start with aggregated  determine whether the metric is 
emitted without the CanaryName  dimension. You can use these metrics to see the aggregated results for 
all of your canaries. The other options determine whether the metric is emitted with the CanaryName
dimension. You can use these metrics to see results for each individual canary.
For a list of CloudWatch metrics emitted by canaries, see CloudWatch metrics published by 
canaries  (p. 377).
•failed_canary_metric  (boolean)— Whether to emit the Failed metric (with the CanaryName
dimension) for this canary. The default is true .
•failed_requests_metric  (boolean)— Whether to emit the Failed requests  metric (with the
CanaryName  dimension) for this canary. The default is true .
•2xx_metric  (boolean)— Whether to emit the 2xx metric (with the CanaryName  dimension) for this 
canary. The default is true .
•4xx_metric  (boolean)— Whether to emit the 4xx metric (with the CanaryName  dimension) for this 
canary. The default is true .
•5xx_metric  (boolean)— Whether to emit the 5xx metric (with the CanaryName  dimension) for this 
canary. The default is true .
•step_duration_metric  (boolean)— Whether to emit the Step duration  metric (with the
CanaryName  StepName  dimensions) for this canary. The default is true .
•step_success_metric  (boolean)— Whether to emit the Step success  metric (with the
CanaryName  StepName  dimensions) for this canary. The default is true .
•aggregated_failed_canary_metric  (boolean)— Whether to emit the Failed metric (without the
CanaryName  dimension) for this canary. The default is true .
•aggregated_failed_requests_metric  (boolean)— Whether to emit the Failed Requests
metric (without the CanaryName  dimension) for this canary. The default is true .
•aggregated_2xx_metric  (boolean)— Whether to emit the 2xx metric (without the CanaryName
dimension) for this canary. The default is true .
•aggregated_4xx_metric  (boolean)— Whether to emit the 4xx metric (without the CanaryName
dimension) for this canary. The default is true .
•aggregated_5xx_metric  (boolean)— Whether to emit the 5xx metric (without the CanaryName
dimension) for this canary. The default is true .
356Amazon CloudWatch User Guide
Creating a canary
with_2xx_metric(2xx_metric)
Accepts a Boolean argument, which speciﬁes whether to emit a 2xx metric with the CanaryName
dimension for this canary.
with_4xx_metric(4xx_metric)
Accepts a Boolean argument, which speciﬁes whether to emit a 4xx metric with the CanaryName
dimension for this canary.
with_5xx_metric(5xx_metric)
Accepts a Boolean argument, which speciﬁes whether to emit a 5xx metric with the CanaryName
dimension for this canary.
withAggregated2xxMetric(aggregated2xxMetric)
Accepts a Boolean argument, which speciﬁes whether to emit a 2xx metric with no dimension for this 
canary.
withAggregated4xxMetric(aggregated4xxMetric)
Accepts a Boolean argument, which speciﬁes whether to emit a 4xx metric with no dimension for this 
canary.
with_aggregated_5xx_metric(aggregated_5xx_metric)
Accepts a Boolean argument, which speciﬁes whether to emit a 5xx metric with no dimension for this 
canary.
with_aggregated_failed_canary_metric(aggregated_failed_canary_metric)
Accepts a Boolean argument, which speciﬁes whether to emit a Failed  metric with no dimension for 
this canary.
with_aggregated_failed_requests_metric(aggregated_failed_requests_metric)
Accepts a Boolean argument, which speciﬁes whether to emit a Failed requests  metric with no 
dimension for this canary.
with_failed_canary_metric(failed_canary_metric)
Accepts a Boolean argument, which speciﬁes whether to emit a Failed  metric with the CanaryName
dimension for this canary.
with_failed_requests_metric(failed_requests_metric)
Accepts a Boolean argument, which speciﬁes whether to emit a Failed requests  metric with the
CanaryName  dimension for this canary.
with_step_duration_metric(step_duration_metric)
Accepts a Boolean argument, which speciﬁes whether to emit a Duration  metric with the CanaryName
dimension for this canary.
with_step_success_metric(step_success_metric)
Accepts a Boolean argument, which speciﬁes whether to emit a StepSuccess  metric with the
CanaryName  dimension for this canary.
Methods to enable or disable metrics
disable_aggregated_request_metrics()
357Amazon CloudWatch User Guide
Creating a canary
Disables the canary from emitting all request metrics that are emitted with no CanaryName  dimension.
disable_request_metrics()
Disables all request metrics, including both per-canary metrics and metrics aggregated across all 
canaries.
disable_step_metrics()
Disables all step metrics, including both step success metrics and step duration metrics.
enable_aggregated_request_metrics()
Enables the canary to emit all request metrics that are emitted with no CanaryName  dimension.
enable_request_metrics()
Enables all request metrics, including both per-canary metrics and metrics aggregated across all canaries.
enable_step_metrics()
Enables all step metrics, including both step success metrics and step duration metrics.
Usage in UI canaries
First, import the synthetics dependency and fetch the conﬁguration. Then, set the conﬁguration for each 
option by calling the setConﬁg method using one of the following options.
from aws_synthetics.common import synthetics_configuration
synthetics_configuration.set_config( 
     { 
        "screenshot_on_step_start": False, 
        "screenshot_on_step_success": False, 
        "screenshot_on_step_failure": True 
     }
)
or 
Or
synthetics_configuration.with_screenshot_on_step_start(False).with_screenshot_on_step_success(False).with_screenshot_on_step_failure(True)
To disable all screenshots, use the disableStepScreenshots() function as in this example.
synthetics_configuration.disable_step_screenshots()
You can enable and disable screenshots at any point in the code. For example, to disable screenshots 
only for one step, disable them before running that step and then enable them after the step.
set_conﬁg(options) for UI canaries
Starting with syn-python-selenium-1.1 , for UI canaries, set_config  can include the following 
Boolean parameters:
•continue_on_step_failure  (boolean)— Whether to continue with running the canary script after 
a step fails (this refers to the executeStep function). If any steps fail, the canary run will still be marked 
as failed. The default is false .
358Amazon CloudWatch User Guide
Creating a canary
SyntheticsLogger class
synthetics_logger  writes logs out to both the console and to a local log ﬁle at the same log level. 
This log ﬁle is written to both locations only if the log level is at or below the desired logging level of the 
log function that was called.
The logging statements in the local log ﬁle are prepended with "DEBUG: ", "INFO: ", and so on to match 
the log level of the function that was called.
Using synthetics_logger  is not required to create a log ﬁle that is uploaded to your Amazon S3 
results location. You could instead create a diﬀerent log ﬁle in the /tmp folder. Any ﬁles created under 
the /tmp folder are uploaded to the results location in the S3 bucket as artifacts.
To use synthetics_logger :
from aws_synthetics.common import synthetics_logger
Useful function deﬁnitions:
Get log level:
log_level = synthetics_logger.get_level()
Set log level:
synthetics_logger.set_level()
Log a message with a speciﬁed level. The level can be DEBUG , INFO , WARN , or ERROR, as in the following 
syntax examples:
synthetics_logger.debug(message, *args, **kwargs)
synthetics_logger.info(message, *args, **kwargs)
synthetics_logger.log(message, *args, **kwargs)
synthetics_logger.warn(message, *args, **kwargs)
synthetics_logger.error(message, *args, **kwargs)
For information about debug parameters, see the standard Python documentation at logging.debug
In these logging functions, the message  is the message format string. The args are the arguments that 
are merged into msg using the string formatting operator.
There are three keyword arguments in kwargs :
•exc_info – If not evaluated as false, adds exception information to the logging message.
•stack_info – defaults to false. If true, adds stack information to the logging message, including the 
actual logging call.
•extra– The third optional keyword argument, which you can use to pass in a dictionary that is used to 
populate the __dict__  of the LogRecord  created for the logging event with user-deﬁned attributes.
Examples:
359Amazon CloudWatch User Guide
Creating a canary
Log a message with the level DEBUG :
synthetics_logger.debug('Starting step - login.')
Log a message with the level INFO . logger.log  is a synonym for logger.info :
synthetics_logger.info('Successfully completed step - login.')
or
synthetics_logger.log('Successfully completed step - login.')
Log a message with the level WARN :
synthetics_logger.warn('Warning encountered trying to publish %s', 'CloudWatch Metric')
Log a message with the level ERROR :
synthetics_logger.error('Error encountered trying to publish %s', 'CloudWatch Metric')
Log an exception:
synthetics_logger.exception(message, *args, **kwargs)
Logs a message with level ERROR. Exception information is added to the logging message. You should 
call this function only from an exception handler.
For information about exception parameters, see the standard Python documentation at
logging.exception
The message  is the message format string. The args are the arguments, which are merged into msg
using the string formatting operator.
There are three keyword arguments in kwargs :
•exc_info – If not evaluated as false, adds exception information to the logging message.
•stack_info – defaults to false. If true, adds stack information to the logging message, including the 
actual logging call.
•extra– The third optional keyword argument, which you can use to pass in a dictionary that is used to 
populate the __dict__  of the LogRecord  created for the logging event with user-deﬁned attributes.
Example:
synthetics_logger.exception('Error encountered trying to publish %s', 'CloudWatch Metric')
Python and Selenium library classes and functions that apply to UI canaries only
The following CloudWatch Synthetics Selenium library functions for Python are useful only for UI 
canaries.
Topics
•SyntheticsBrowser class (p. 361)
•SyntheticsWebDriver class (p. 361)
360Amazon CloudWatch User Guide
Creating a canary
SyntheticsBrowser class
When you create a browser instance by calling synthetics_webdriver.Chrome() , the returned 
browser instance is of the type SyntheticsBrowser . The SyntheticsBrowser  class controls the 
ChromeDriver, and enables the canary script to drive the browser, allowing the Selenium WebDriver to 
work with Synthetics.
In addition to the standard Selenium methods, it also provides the following methods.
set_viewport_size(width, height)
Sets the viewport of the browser. Example:
browser.set_viewport_size(1920, 1080)
save_screenshot(ﬁlename, suﬃx)
Saves screenshots to the /tmp directory. The screenshots are uploaded from there to the canary artifacts 
folder in the S3 bucket.
ﬁlename  is the ﬁle name for the screenshot, and suﬃx  is an optional string to be used for naming the 
screenshot.
Example:
browser.save_screenshot('loaded.png', 'page1')
SyntheticsWebDriver class
To use this class, use the following in your script:
from aws_synthetics.selenium import synthetics_webdriver
add_execution_error(errorMessage, ex);
errorMessage  describes the error and ex is the exception that is encountered
You can use add_execution_error  to set execution errors for your canary. It fails the canary without 
interrupting the script execution. It also doesn't impact your successPercent  metrics.
You should track errors as execution errors only if they are not important to indicate the success or 
failure of your canary script.
An example of the use of add_execution_error  is the following. You are monitoring the availability 
of your endpoint and taking screenshots after the page has loaded. Because the failure of taking a 
screenshot doesn't determine availability of the endpoint, you can catch any errors encountered while 
taking screenshots and add them as execution errors. Your availability metrics will still indicate that the 
endpoint is up and running, but your canary status will be marked as failed. The following sample code 
block catches such an error and adds it as an execution error.
try: 
    browser.save_screenshot("loaded.png")   
except Exception as ex: 
   self.add_execution_error("Unable to take screenshot", ex)
add_user_agent(user_agent_str)
Appends the value of user_agent_str  to the browser's user agent header. You must assign
user_agent_str  before creating the browser instance.
361Amazon CloudWatch User Guide
Creating a canary
Example:
synthetics_webdriver.add_user_agent('MyApp-1.0')
execute_step(step_name, function_to_execute)
Processes one function. It also does the following:
•Logs that the step started.
•Takes a screenshot named <stepName>-starting .
•Starts a timer.
•Executes the provided function.
•If the function returns normally, it counts as passing. If the function throws, it counts as failing.
•Ends the timer.
•Logs whether the step passed or failed
•Takes a screenshot named <stepName>-succeeded  or <stepName>-failed .
•Emits the stepName  SuccessPercent  metric, 100 for pass or 0 for failure.
•Emits the stepName  Duration  metric, with a value based on the step start and end times.
•Finally, returns what the functionToExecute  returned or re-throws what functionToExecute
threw.
Example:
def custom_actions(): 
        #verify contains 
        browser.find_element_by_xpath("//*[@id=\"id_1\"][contains(text(),'login')]") 
        #click a button 
        browser.find_element_by_xpath('//*[@id="submit"]/a').click() 
    await synthetics_webdriver.execute_step("verify_click", custom_actions)
Chrome()
Launches an instance of the Chromium browser and returns the created instance of the browser.
Example:
browser = synthetics_webdriver.Chrome()
browser.get("https://example.com/)
To launch a browser in incognito mode, use the following:
add_argument('——incognito')
To add proxy settings, use the following:
add_argument('--proxy-server=%s' % PROXY)
Example:
from selenium.webdriver.chrome.options import Options
chrome_options = Options()
362Amazon CloudWatch User Guide
Creating a canary
chrome_options.add_argument("——incognito")
browser = syn_webdriver.Chrome(chrome_options=chrome_options)
Scheduling canary runs using cron
Using a cron expression gives you ﬂexibility when you schedule a canary. Cron expressions contain ﬁve or 
six ﬁelds in the order listed in the following table. The ﬁelds are separated by spaces. The syntax diﬀers 
depending on whether you are using the CloudWatch console to create the canary, or the AWS CLI or 
AWS SDKs. When you use the console, you specify only the ﬁrst ﬁve ﬁelds. When you use the AWS CLI or 
AWS SDKs, you specify all six ﬁelds, and you must specify * for the Year  ﬁeld.
Field Allowed values Allowed special characters
Minutes 0-59 , - * /
Hours 0-23 , - * /
Day-of-month 1-31 , - * ? / L W
Month 1-12 or JAN-DEC , - * /
Day-of-week 1-7 or SUN-SAT , - * ? L #
Year *
Special characters
•The , (comma) includes multiple values in the expression for a ﬁeld. For example, in the Month ﬁeld, 
JAN,FEB,MAR would include January, February, and March.
•The - (dash) special character speciﬁes ranges. In the Day ﬁeld, 1-15 would include days 1 through 15 
of the speciﬁed month.
•The * (asterisk) special character includes all values in the ﬁeld. In the Hours ﬁeld, * includes every 
hour. You cannot use * in both the Day-of-month and Day-of-week ﬁelds in the same expression. If you 
use it in one, you must use ? in the other.
•The / (forward slash) speciﬁes increments. In the Minutes ﬁeld, you can enter 1/10 to specify every 
tenth minute, starting from the ﬁrst minute of the hour (for example, the eleventh, twenty-ﬁrst, and 
thirty-ﬁrst minute, and so on).
•The ? (question mark) speciﬁes one or another. If you enter 7 in the Day-of-month ﬁeld and you don't 
care what day of the week the seventh is, you can enter ? in the Day-of-week ﬁeld.
•The L wildcard in the Day-of-month or Day-of-week ﬁelds speciﬁes the last day of the month or week.
•The W wildcard in the Day-of-month ﬁeld speciﬁes a weekday. In the Day-of-month ﬁeld, 3W speciﬁes 
the weekday closest to the third day of the month.
•The # wildcard in the Day-of-week ﬁeld speciﬁes a certain instance of the speciﬁed day of the week 
within a month. For example, 3#2 is the second Tuesday of the month. The 3 refers to Tuesday because 
it is the third day of each week, and the 2 refers to the second day of that type within the month.
Limitations
•You can't specify the Day-of-month and Day-of-week ﬁelds in the same cron expression. If you specify 
a value or * (asterisk) in one of the ﬁelds, you must use a ? (question mark) in the other.
•Cron expressions that lead to rates faster than one minute are not supported.
•You can't set a canary to wait for more than a year before running, so you can specify only * in the
Year  ﬁeld.
363Amazon CloudWatch User Guide
Groups
Examples
You can refer to the following sample cron strings when you create a canary. The following examples are 
the correct syntax for using the AWS CLI or AWS SDKs to create or update a canary. If you are using the 
CloudWatch console, omit the ﬁnal * in each example.
Expression Meaning
0 10 * * ? * Run at 10:00 am (UTC) every day
15 12 * * ? * Run at 12:15 pm (UTC) every day
0 18 ? * MON-FRI * Run at 6:00 pm (UTC) every Monday through Friday
0 8 1 * ? * Run at 8:00 am (UTC) on the ﬁrst day of each month
0/10 * ? * MON-SAT * Run every 10 minutes Monday through Saturday of each week
0/5 8-17 ? * MON-FRI * Run every ﬁve minutes Monday through Friday between 8:00 am 
and 5:55 pm (UTC)
Groups
You can create groups  to associate canaries with each other, including cross-Region canaries. Using 
groups can help you with managing and automating your canaries, and you can also view aggregated run 
results and statistics for all canaries in a group.
Groups are global resources. When you create a group, it is replicated across all AWS Regions that 
support groups, and you can add canaries from any of these Regions to it, and view it in any of these 
Regions. Although the group ARN format reﬂects the Region name where it was created, a group is not 
constrained to any Region. This means that you can put canaries from multiple Regions into the same 
group, and then use that group to view and manage all of those canaries in a single view.
Groups are supported in all Regions except the Regions that are disabled by default. For more 
information about these Regions, see Enabling a Region .
Each group can contain as many as 10 canaries. You can have as many as 20 groups in your account. Any 
single canary can be a member of up to 10 groups.
To create a group
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Synthetics Canaries .
3. Choose Create Group .
4. Under Group Name , enter a name for the group.
5. Select canaries to associate with this group. To select a canary, type its complete name in Exact 
canary name and choose Search . Then select the check box next to the canary name. If there are 
multiple canaries with the same name in diﬀerent Regions, be sure to select the canaries that you 
want.
You can repeat this step to associate as many as 10 canaries with the group.
6. (Optional) Under Tags, add one or more key-value pairs as tags for this group. Tags can help you 
identify and organize your AWS resources and track your AWS costs. For more information, see
Tagging your Amazon CloudWatch resources (p. 1240 ).
364Amazon CloudWatch User Guide
Troubleshooting a failed canary
7. Choose Create Group .
Troubleshooting a failed canary
If your canary fails, check the following for troubleshooting.
General troubleshooting
•Use the canary details page to ﬁnd more information. In the CloudWatch console, choose Canaries
in the navigation pane and then choose the name of the canary to open the canary details page. 
In the Availability tab, check the SuccessPercent metric to see whether the problem is constant or 
intermittent.
While still in the Availability tab, choose a failed data point to see screenshots, logs, and step reports 
(if available) for that failed run.
If a step report is available because steps are part of your script, check to see which step has failed and 
see the associated screenshots to see the issue that your customers are seeing.
You can also check the HAR ﬁles to see if one or more requests are failing. You can dig deeper by 
using logs to drill down on failed requests and errors. Finally, you can compare these artifacts with the 
artiﬁacts from a successful canary run to pinpoint the issue.
By default, CloudWatch Synthetics captures screenshots for each step in a UI canary. However, 
your script might be conﬁgured to disable screenshots. During debugging, you may want to enable 
screenshots again. Similarly, for API canaries you might want to see HTTP request and response 
headers and body during debugging. For information about how to include this data in the report, see
executeHttpStep(stepName, requestOptions, [callback], [stepConﬁg]) (p. 353).
•If you had a recent deployment to your application, roll it back and then debug later.
•Connect to your endpoint manually to see if you can reproduce the same issue.
Topics
•Canary runtime version upgrade and downgrade issues (p. 365)
•Waiting for an element to appear (p. 366)
•Node is either not visible or not an HTMLElement for page.click()  (p. 366)
•Unable to upload artifacts to S3, Exception: Unable to fetch S3 bucket location: Access 
Denied  (p. 366)
•Error: Protocol error (Runtime.callFunctionOn): Target closed. (p. 366)
•Canary Failed. Error: No datapoint - Canary Shows timeout error (p. 366)
•Trying to access an internal endpoint (p. 367)
•Cross-origin request sharing (CORS) issue (p. 367)
•Troubleshooting a canary on a VPC (p. 367)
Canary runtime version upgrade and downgrade issues
If you recently upgraded the canary from runtime version syn-1.0 to a later version, it may be a cross-
origin request sharing (CORS) issue. For more information, see Cross-origin request sharing (CORS) 
issue  (p. 367).
If you recently downgraded the canary to an older runtime version, check to make sure that the 
CloudWatch Synthetics functions that you are using are available in the older runtime version that you 
downgraded to. For example, the executeHttpStep  function is available for runtime version syn-
nodejs-2.2  and later. To check on the availability of functions, see Writing a canary script (p. 325).
365Amazon CloudWatch User Guide
Troubleshooting a failed canary
Note
When you plan to updgrade or downgrade the runtime version for a canary, we recommend that 
you ﬁrst clone the canary and update the runtime version in the cloned canary. Once you have 
veriﬁed that the clone with the new runtime version works, you can update the runtime version 
of your original canary and delete the clone.
Waiting for an element to appear
After analyzing your logs and screenshots, if you see that your script is waiting for an element to appear 
on screen and times out, check the relevant screenshot to see if the element appears on the page. Verify 
your xpath to make sure that it is correct.
For Puppetteer-related issues, check  Puppeteer's GitHub page or internet forums.
Node is either not visible or not an HTMLElement for 
page.click()
If a node is not visible or is not an HTMLElement  for page.click() , ﬁrst verify the xpath that you 
are using to click the element. Also, if your element is at the bottom of the screen, adjust your viewport. 
CloudWatch Synthetics by default uses a viewport of 1920 * 1080. You can set a diﬀerent viewport when 
you launch the browser or by using the Puppeteer function page.setViewport .
Unable to upload artifacts to S3, Exception: Unable to fetch S3 
bucket location: Access Denied
If your canary fails because of an Amazon S3 error, CloudWatch Synthetics was unable to upload 
screenshots, logs, or reports created for the canary because of permission issues. Check the following:
•Check that the canary's IAM role has the s3:ListAllMyBuckets  permission, the
s3:GetBucketLocation  permission for the correct Amazon S3 bucket, and the s3:PutObject
permission for the bucket where the canary stores its artifacts. If the canary performs visual 
monitoring, the role also needs the s3:GetObject  permission for the bucket.
•If the canary uses an AWS KMS customer managed key for encryption instead of the standard AWS 
managed key (default), the canary's IAM role might not have the permission to encrypt or decrypt 
using that key. For more information, see Encrypting canary artifacts (p. 374).
•Your bucket policy might not allow the encryption mechanism that the canary uses. For example, if 
your bucket policy mandates to use a speciﬁc encryption mechanism or KMS key, then you must select 
the same encryption mode for your canary.
If the canary performs visual monitoring, see Updating artifact location and encryption when using 
visual monitoring  (p. 375) for more information.
Error: Protocol error (Runtime.callFunctionOn): Target closed.
This error appears if there are some network requests after the page or browser is closed. You might 
have forgotten to wait for an asynchronous operation. After executing your script, CloudWatch 
Synthetics closes the browser. The execution of any asynchronous operation after the browser is closed 
might cause target closed error .
Canary Failed. Error: No datapoint - Canary Shows timeout error
This means that your canary run exceeded the timeout. The canary execution stopped before 
CloudWatch Synthetics could publish success percent CloudWatch metrics or update artifacts such as 
HAR ﬁles, logs and screenshots. If your timeout is too low, you can increase it.
366Amazon CloudWatch User Guide
Troubleshooting a failed canary
By default, a canary timeout value is equal to its frequency. You can manually adjust the timeout value 
to be less than or equal to the canary frequency. If your canary frequency is low, you must increase 
the frequency to increase the timeout. You can adjust both the frequency and the timeout value under
Schedule when you create or update a canary by using the CloudWatch Synthetics console.
Be sure that your canary timeout value is no shorter than 15 seconds to allow for Lambda cold starts and 
the time it takes to boot up the canary instrumentation.
Canary artifacts are not available to view in the CloudWatch Synthetics console when this error happens. 
You can use CloudWatch Logs to see the canary's logs.
To use CloudWatch Logs to see the logs for a canary
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the left navigation pane, choose Log groups .
3. Find the log group by typing the canary name in the ﬁlter box. Log groups for canaries have the 
name /aws/lambda/cwsyn-canaryName -randomId .
Trying to access an internal endpoint
If you want your canary to access an endpoint on your internal network, we recommend that you set up 
CloudWatch Synthetics to use VPC. For more information, see Running a canary on a VPC (p. 373).
Cross-origin request sharing (CORS) issue
In a UI canary, if some network requests are failing with 403 or net::ERR_FAILED , check whether the 
canary has active tracing enabled and also uses the Puppeteer function page.setExtraHTTPHeaders
to add headers. If so, the failed network requests might be caused by cross-origin request sharing (CORS) 
restrictions. You can conﬁrm whether this is the case by disabling active tracing or removing the extra 
HTTP headers.
Why does this happen?
When active tracing is used, an extra header is added to all outgoing requests to trace the call. 
Modifying the request headers by adding a trace header or adding extra headers using Puppeteer’s
page.setExtraHTTPHeaders  causes a CORS check for XMLHttpRequest (XHR) requests.
If you don't want to disable active tracing or remove the extra headers, you can update your web 
application to allow cross-origin access or you can disable web security by using the disable-web-
security  ﬂag when you launch the Chrome browser in your script.
You can override launch parameters used by CloudWatch Synthetics and pass additional disable-web-
security  ﬂag parameters by using the CloudWatch Synthetics launch function. For more information, 
see Library functions available for Node.js canary scripts (p. 333).
Note
You can override launch parameters used by CloudWatch Synthetics when you use runtime 
version syn-nodejs-2.1  or later.
Troubleshooting a canary on a VPC
If you have issues after creating or updating a canary on a VPC, one of the following sections might help 
you troubleshoot the problem.
New canary in error state or canary can't be updated
If you create a canary to run on a VPC and it immediately goes into an error state, or you 
can't update a canary to run on a VPC, the canary's role might not have the right permissions. 
367Amazon CloudWatch User Guide
Sample code for canary scripts
To run on a VPC, a canary must have the permissions ec2:CreateNetworkInterface ,
ec2:DescribeNetworkInterfaces , and ec2:DeleteNetworkInterface . These permissions are 
all contained in the AWSLambdaVPCAccessExecutionRole  managed policy. For more information, see
Execution Role and User Permissions.
If this issue happened when you created a canary, you must delete the canary, and create a new one. If 
you use the CloudWatch console to create the new canary, under Access Permissions, select Create a 
new role. A new role that includes all permissions required to run the canary is created.
If this issue happens when you update a canary, you can update the canary again and provide a new role 
that has the required permissions.
"No test result returned" error
If a canary displays a "no test result returned" error, one of the following issues might be the cause:
•If your VPC does not have internet access, you must use VPC endpoints to give the canary access to 
CloudWatch and Amazon S3. You must enable the DNS resolution  and DNS hostname  options in the 
VPC for these endpoint addresses to resolve correctly. For more information, see Using DNS with Your 
VPC and Using CloudWatch and CloudWatch Synthetics with interface VPC endpoints .
•Canaries must run in private subnets within a VPC. To check this, open the Subnets  page in the VPC 
console. Check the subnets that you selected when conﬁguring the canary. If they have a path to an 
internet gateway (igw- ), they are not private subnets.
To help you troubleshoot these issues, see the logs for the canary.
To see the log events from a canary
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Log groups .
3. Choose the name of the canary's log group. The log group name starts with /aws/lambda/
cwsyn-canary-name .
Sample code for canary scripts
This section contains code samples that illustrate some possible functions for CloudWatch Synthetics 
canary scripts.
Samples for Node.js and Puppeteer
Setting cookies
Web sites rely on cookies to provide custom functionality or track users. By setting cookies in 
CloudWatch Synthetics scripts, you can mimic this custom behavior and validate it.
For example, a web site might display a Login  link for a revisiting user instead of a Register link.
var synthetics = require('Synthetics');
const log = require('SyntheticsLogger');
const pageLoadBlueprint = async function () { 
    let url = "http://smile.amazon.com/"; 
368Amazon CloudWatch User Guide
Sample code for canary scripts
    let page = await synthetics.getPage(); 
    // Set cookies.  I found that name, value, and either url or domain are required 
 fields. 
    const cookies = [{ 
      'name': 'cookie1', 
      'value': 'val1', 
      'url': url 
    },{ 
      'name': 'cookie2', 
      'value': 'val2', 
      'url': url 
    },{ 
      'name': 'cookie3', 
      'value': 'val3', 
      'url': url 
    }]; 
     
    await page.setCookie(...cookies); 
    // Navigate to the url 
    await synthetics.executeStep('pageLoaded_home', async function (timeoutInMillis = 
 30000) { 
         
        var response = await page.goto(url, {waitUntil: ['load', 'networkidle0'], timeout: 
 timeoutInMillis}); 
        // Log cookies for this page and this url 
        const cookiesSet = await page.cookies(url); 
        log.info("Cookies for url: " + url + " are set to: " + JSON.stringify(cookiesSet)); 
    });
};
exports.handler = async () => { 
    return await pageLoadBlueprint();
};
Device emulation
You can write scripts that emulate various devices so that you can approximate how a page looks and 
behaves on those devices.
The following sample emulates an iPhone 6 device. For more information about emulation, see 
page.emulate(options) in the Puppeteer documentation.
var synthetics = require('Synthetics');
const log = require('SyntheticsLogger');
const puppeteer = require('puppeteer-core');
const pageLoadBlueprint = async function () { 
     
    const iPhone = puppeteer.devices['iPhone 6']; 
    // INSERT URL here 
    const URL = "https://amazon.com"; 
    let page = await synthetics.getPage(); 
    await page.emulate(iPhone); 
    //You can customize the wait condition here. For instance, 
    //using 'networkidle2' may be less restrictive. 
    const response = await page.goto(URL, {waitUntil: 'domcontentloaded', timeout: 30000}); 
    if (!response) { 
369Amazon CloudWatch User Guide
Sample code for canary scripts
        throw "Failed to load page!"; 
    } 
     
    await page.waitFor(15000); 
    await synthetics.takeScreenshot('loaded', 'loaded'); 
     
    //If the response status code is not a 2xx success code 
    if (response.status() < 200 || response.status() > 299) { 
        throw "Failed to load page!"; 
    }
};
exports.handler = async () => { 
    return await pageLoadBlueprint();
};
Multi-step API canary
This sample code demonstrates an API canary with two HTTP steps: testing the same API for positive and 
negative test cases. The step conﬁguration is passed to enable reporting of request/response headers. 
Additionally, it hides the Authorization header and X-Amz-Security-Token, because they contain user 
credentials.
When this script is used as a canary, you can view details about each step and the associated HTTP 
requests such as step pass/fail, duration, and performance metrics like DNS look up time and ﬁrst byte 
time. You can view the number of 2xx, 4xx and 5xx for your canary run.
var synthetics = require('Synthetics');
const log = require('SyntheticsLogger');
const apiCanaryBlueprint = async function () { 
     
    // Handle validation for positive scenario 
    const validatePositiveCase = async function(res) { 
        return new Promise((resolve, reject) => { 
            if (res.statusCode < 200 || res.statusCode > 299) { 
                throw res.statusCode + ' ' + res.statusMessage; 
            } 
      
            let responseBody = ''; 
            res.on('data', (d) => { 
                responseBody += d; 
            }); 
      
            res.on('end', () => { 
                // Add validation on 'responseBody' here if required. For ex, your status 
 code is 200 but data might be empty 
                resolve(); 
            }); 
        }); 
    }; 
     
    // Handle validation for negative scenario 
    const validateNegativeCase = async function(res) { 
        return new Promise((resolve, reject) => { 
            if (res.statusCode < 400) { 
                throw res.statusCode + ' ' + res.statusMessage; 
            } 
             
            resolve(); 
        }); 
370Amazon CloudWatch User Guide
Sample code for canary scripts
    }; 
     
    let requestOptionsStep1 = { 
        'hostname': 'myproductsEndpoint.com', 
        'method': 'GET', 
        'path': '/test/product/validProductName', 
        'port': 443, 
        'protocol': 'https:' 
    }; 
     
    let headers = {}; 
    headers['User-Agent'] = [synthetics.getCanaryUserAgentString(), headers['User-
Agent']].join(' '); 
     
    requestOptionsStep1['headers'] = headers; 
    // By default headers, post data and response body are not included in the report for 
 security reasons.  
    // Change the configuration at global level or add as step configuration for individual 
 steps 
    let stepConfig = { 
        includeRequestHeaders: true,  
        includeResponseHeaders: true, 
        restrictedHeaders: ['X-Amz-Security-Token', 'Authorization'], // Restricted header 
 values do not appear in report generated. 
        includeRequestBody: true, 
        includeResponseBody: true 
    }; 
        
    await synthetics.executeHttpStep('Verify GET products API with valid name', 
 requestOptionsStep1, validatePositiveCase, stepConfig); 
     
    let requestOptionsStep2 = { 
        'hostname': 'myproductsEndpoint.com', 
        'method': 'GET', 
        'path': '/test/canary/InvalidName(', 
        'port': 443, 
        'protocol': 'https:' 
    }; 
     
    headers = {}; 
    headers['User-Agent'] = [synthetics.getCanaryUserAgentString(), headers['User-
Agent']].join(' '); 
     
    requestOptionsStep2['headers'] = headers; 
    // By default headers, post data and response body are not included in the report for 
 security reasons.  
    // Change the configuration at global level or add as step configuration for individual 
 steps 
    stepConfig = { 
        includeRequestHeaders: true,  
        includeResponseHeaders: true, 
        restrictedHeaders: ['X-Amz-Security-Token', 'Authorization'], // Restricted header 
 values do not appear in report generated. 
        includeRequestBody: true, 
        includeResponseBody: true 
    }; 
     
    await synthetics.executeHttpStep('Verify GET products API with invalid name', 
 requestOptionsStep2, validateNegativeCase, stepConfig); 
     
};
exports.handler = async () => { 
371Amazon CloudWatch User Guide
Canaries and X-Ray tracing
    return await apiCanaryBlueprint();
};
Samples for Python and Selenium
The following sample Selenium code is a canary that fails with a custom error message when a target 
element is not loaded.
from aws_synthetics.selenium import synthetics_webdriver as webdriver
from aws_synthetics.common import synthetics_logger as logger
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
def custom_selenium_script(): 
    # create a browser instance 
    browser = webdriver.Chrome() 
    browser.get('https://www.example.com/') 
    logger.info('navigated to home page') 
    # set cookie 
    browser.add_cookie({'name': 'foo', 'value': 'bar'}) 
    browser.get('https://www.example.com/') 
    # save screenshot 
    browser.save_screenshot('signed.png') 
    # expected status of an element 
    button_condition = EC.element_to_be_clickable((By.CSS_SELECTOR, '.submit-button')) 
    # add custom error message on failure 
    WebDriverWait(browser, 5).until(button_condition, message='Submit button failed to 
 load').click() 
    logger.info('Submit button loaded successfully') 
    # browser will be quit automatically at the end of canary run,  
    # quit action is not necessary in the canary script 
    browser.quit()
# entry point for the canary
def handler(event, context): 
    return custom_selenium_script()
Canaries and X-Ray tracing
You can choose to enable active AWS X-Ray tracing on canaries that use the syn-nodejs-2.0  or later 
runtime. With tracing enabled, traces are sent for all calls made by the canary that use the browser, 
the AWS SDK, or HTTP or HTTPS modules. Canaries with tracing enabled appear on the service map in 
both CloudWatch ServiceLens and in X-Ray, even when they don't send requests to other services or 
applications that have tracing enabled. For more information about X-Ray tracing, see Traces .
Note
Activating X-Ray tracing on canaries is not yet supported in Asia Paciﬁc (Jakarta).
When a canary appears on a service map, it appears as a new client node type. You can hover on a canary 
node to see data about latency, requests, and faults. You can also choose the canary node to see more 
data at the bottom of the page. From this area of the page, you can choose View in Synthetics  to jump 
to the CloudWatch Synthetics console for more details about the canary, or choose View Traces to see 
more details about the traces from this canary's runs.
A canary with tracing enabled also has a Tracing tab in its details page, with details about traces and 
segments from the canary's runs.
Enabling tracing increases canary run time by 2.5% to 7%.
372Amazon CloudWatch User Guide
Running a canary on a VPC
A canary with tracing enabled must use a role with the following permissions. If you use the console to 
create the role when you create the canary, it is given these permissions.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Sid": "Sid230934", 
            "Effect": "Allow", 
            "Action": [ 
                "xray:PutTraceSegments" 
            ], 
            "Resource": "*" 
        } 
    ]
}
Traces generated by canaries incur charges. For more information about X-Ray pricing, see AWS X-Ray 
Pricing .
Running a canary on a VPC
You can run canaries on endpoints on a VPC and public internal endpoints. To run a canary on a VPC, 
you must have both the DNS Resolution and  DNS hostnames  options enabled on the VPC. For more 
information, see Using DNS with Your VPC.
When you run a canary on a VPC endpoint, you must provide a way for it to send its metrics to 
CloudWatch and its artifacts to Amazon S3. If the VPC is already enabled for internet access, there's 
nothing more for you to do. The canary executes in your VPC, but can access the internet to upload its 
metrics and artifacts.
If the VPC is not already enabled for internet access, you have two options:
•Enable it for internet access. For more information, see the following section Giving internet access to 
your canary on a VPC (p. 373).
•If you want to keep your VPC private, you can conﬁgure the canary to send its data to CloudWatch 
and Amazon S3 through private VPC endpoints. If you have not already done so, you must create 
endpoints for these services on your VPC. For more information, see Using CloudWatch and 
CloudWatch Synthetics with interface VPC endpoints (p. 1226 ) and Amazon VPC Endpoints for 
Amazon S3.
Giving internet access to your canary on a VPC
Follow these steps to give internet access to your VPC canary.
To give internet access to a canary on a VPC
1. Create a NAT gateway in a public subnet on the VPC. For instructions, see Create a NAT gateway.
2. Add a new route to the route table in the private subnet where the canary is launched. Specify the 
following:
•For Destination , enter 0.0.0.0/0
•For Target, choose NAT Gateway, and then choose the ID of the NAT gateway that you created.
•Choose Save routes.
For more information about adding the route to the route table, see Add and remove routes from a 
route table.
373Amazon CloudWatch User Guide
Encrypting canary artifacts
Note
Be sure that the routes to your NAT gateway are in an active status. If the NAT gateway is 
deleted and you haven't updated the routes, they're in a blackhole status. For more information, 
see Work with NAT gateways.
Encrypting canary artifacts
CloudWatch Synthetics stores canary artifacts such as screenshots, HAR ﬁles, and reports in your 
Amazon S3 bucket. By default, these artifacts are encrypted at rest using an AWS managed key. For more 
information, see Customer keys and AWS keys.
You can choose to use a diﬀerent encryption option. CloudWatch Synthetics supports the following:
•SSE-S3– Server-side encryption (SSE) with an Amazon S3-managed key.
•SSE-KMS– Server-side encryption (SSE) with an AWS KMS customer managed key.
If you want to use the default encryption option with an AWS managed key, you don't need any 
additional permissions.
To use SSE-S3 encryption, you specify SSE_S3 as the encryption mode when you create or update your 
canary. You do not need any additional permissions to use this encryption mode. For more information, 
see Protecting data using server-side encryption with Amazon S3-managed encryption keys (SSE-S3).
To use an AWS KMS customer managed key, you specify SSE-KMS as the encryption mode when you 
create or update your canary, and you also provide the Amazon Resource Name (ARN) of your key. You 
can also use a cross-account KMS key.
To use a customer managed key, you need the following settings:
•The IAM role for your canary must have permission to encrypt your artifacts using your key. If you are 
using visual monitoring, you must also give it permission to decrypt artifacts.
{ 
    "Version": "2012-10-17", 
    "Statement": {"Effect": "Allow", 
        "Action": [ 
            "kms:GenerateDataKey", 
            "kms:Decrypt" 
        ], 
        "Resource": " Your KMS key ARN " 
    }
}
•Instead of adding permissions to your IAM role, you can add your IAM role to your key policy. If you use 
the same role for multiple canaries, you should consider this approach.
{ 
    "Sid": "Enable IAM User Permissions", 
    "Effect": "Allow", 
    "Principal": { 
        "AWS": " Your synthetics IAM role ARN " 
    }, 
    "Action": [ 
        "kms:GenerateDataKey", 
        "kms:Decrypt" 
    ], 
    "Resource": "*"
}
374Amazon CloudWatch User Guide
Viewing canary statistics and details
•If you are using a cross-account KMS key, see Allowing users in other accounts to use a KMS key.
Viewing encrypted canary artifacts when using a customer managed key
To view canary artifacts, update your customer managed key to give AWS KMS the decrypt permission 
to the user viewing the artifacts. Alternatively, add decrypt permissions to the user or IAM role that is 
viewing the artifacts.
The default AWS KMS policy enables IAM policies in the account to allow access to the KMS keys. If you 
are using a cross-account KMS key, see Why are cross-account users getting Access Denied errors when 
they try to access Amazon S3 objects encrypted by a custom AWS KMS key?.
For more information about troubleshooting access denied issues because of a KMS key, see
Troubleshooting key access.
Updating artifact location and encryption when using visual 
monitoring
To perform visual monitoring, CloudWatch Synthetics compares your screenshots with baseline 
screenshots acquired in the run selected as the baseline. If you update your artifact location or 
encryption option, you must do one of the following:
•Ensure that your IAM role has suﬃcient permission for both the previous Amazon S3 location and the 
new Amazon S3 location for artifacts. Also ensure that it has permission for both the previous and new 
encryption methods and KMS keys.
•Create a new baseline by selecting the next canary run as a new baseline. If you use this option, you 
only need to ensure that your IAM role has suﬃcient permissions for the new artifact location and 
encryption option.
We recommend the second option of selecting the next run as the new baseline. This avoids having a 
dependency on an artifact location or encryption option that you're not using anymore for the canary.
For example, suppose that your canary uses artifact location A and KMS key K for uploading artifacts. 
If you update your canary to artifact location B and KMS key L, you can ensure that your IAM role has 
permissions to both of the artifact locations (A and B) and both of the KMS keys (K and L). Alternatively, 
you can select the next run as the new baseline and ensure that your canary IAM role has permissions to 
artifact location B and KMS key L.
Viewing canary statistics and details
You can view details about your canaries and see statistics about their runs.
To be able to see all the details about your canary run results, you must be logged on to an account that 
has suﬃcient permissions. For more information, see Required roles and permissions for CloudWatch 
canaries  (p. 293).
To view canary statistics and details
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Synthetics Canaries .
In the details about the canaries that you have created:
•Status  visually shows how many of your canaries have passed their most recent runs.
•Groups  displays the groups you have created, and displays how many of them have failing or 
alarming canaries.
375Amazon CloudWatch User Guide
Viewing canary statistics and details
•Slowest performers displays the group and the Region with the slowest-performing canaries. 
These are calculated by adding up the average duration of all canaries (across the time span 
selected) within a group or Region and dividing it by the number of canaries in the group or 
Region. If you choose the metric for Slowest group, the table is ﬁltered to display only the slowest 
groups and their canaries. The table is sorted by Average Duration.
•Near the bottom of the page is a table displaying all canaries. One column displays the alarms 
created for each canary. Only alarms that conform to the naming standard for canary alarms 
are displayed. This standard is Synthetics-Alarm- canaryName -index . Canary alarms that 
you create in the Synthetics  section of the CloudWatch console automatically use this naming 
convention. If you create canary alarms in the Alarms  section of the CloudWatch console or by 
using AWS CloudFormation, and you don't use this naming convention, the alarms work but they 
do not appear in this list.
3. To see more details about a single canary, choose the name of the canary in the Canaries  table.
In the details about that canary:
•The Availability tab displays information about the recent runs of this canary.
Under Canary runs, you can choose one of the lines to see details about that run.
Under the graph, you can choose Steps , Screenshot , Logs , or HAR ﬁle to see these types of 
details. If the canary has active tracing enabled, you can also choose Traces to see tracing 
information from the canary's runs.
The logs for canary runs are stored in S3 buckets and in CloudWatch Logs.
Screenshots show how your customers view your webpages. You can use the HAR ﬁles (HTTP 
Archive ﬁles) to view detailed performance data about the webpages. You can analyze the list 
of web requests and catch performance issues such as time to load for an item. Log ﬁles show 
the record of interactions between the canary run and the webpage and can be used to identify 
details of errors.
If the canary uses the syn-nodejs-2.0-beta  runtime or later, you can sort the HAR ﬁles by 
status code, request size, or duration.
The Steps  tab displays a list of the canary's steps, each step's status, failure reason, URL after step 
execution, screenshots, and duration of step execution. For API canaries with HTTP steps, you can 
view steps and corresponding HTTP requests if you are using runtime syn-nodejs-2.2  or later.
Choose the HTTP Requests tab to view the log of each HTTP request made by the canary. You can 
view request/response headers, response body, status code, error and performance timings (total 
duration, TCP connection time, TLS handshake time, ﬁrst byte time, and content transfer time). All 
HTTP requests which use the HTTP/HTTPS module under the hood are captured here.
By default in API canaries, the request header, response header, request body, and response body 
are not included in the report for security reasons. If you choose to include them, the data is 
stored only in your S3 bucket. For information about how to include this data in the report, see
executeHttpStep(stepName, requestOptions, [callback], [stepConﬁg]) (p. 353).
Response body content types of text, HTML and JSON are supported. Content types like text/
HTML, text/plain, application/JSON and application/x-amz-json-1.0 are supported. Compressed 
responses are not supported.
•The Monitoring  tab displays graphs of the CloudWatch metrics published by this canary. For more 
information about these metrics, see CloudWatch metrics published by canaries (p. 377).
Below the CloudWatch graphics published by the canary are graphs of Lambda metrics related to 
the canary's Lambda code.
•The Conﬁguration  tab displays conﬁguration and schedule information about the canary.
376Amazon CloudWatch User Guide
CloudWatch metrics published by canaries
•The Groups  tab displays the groups that this canary is associated with, if any.
•The Tags tab displays the tags associated with the canary.
CloudWatch metrics published by canaries
Canaries publish the following metrics to CloudWatch in the CloudWatchSynthetics  namespace. For 
more information about viewing CloudWatch metrics, see View available metrics (p. 117).
Metric Description
SuccessPercent The percentage of the runs of this canary that succeed and ﬁnd no failures.
Valid Dimensions: CanaryName
Valid Statistic: Average
Units: Percent
Duration The duration in milliseconds of the canary run.
Valid Dimensions: CanaryName
Valid Statistic: Average
Units: Milliseconds
2xx The number of network requests performed by the canary that returned OK 
responses, with response codes between 200 and 299.
This metric is reported for UI canaries that use runtime version syn-
nodejs-2.0  or later, and is reported for API canaries that use runtime 
version syn-nodejs-2.2  or later.
Valid Dimensions: CanaryName
Valid Statistic: Sum
Units: Count
4xx The number of network requests performed by the canary that returned 
Error responses, with response codes between 400 and 499.
This metric is reported for UI canaries that use runtime version syn-
nodejs-2.0  or later, and is reported for API canaries that use runtime 
version syn-nodejs-2.2  or later.
Valid Dimensions: CanaryName
Valid Statistic: Sum
Units: Count
5xx The number of network requests performed by the canary that returned 
Fault responses, with response codes between 500 and 599.
This metric is reported for UI canaries that use runtime version syn-
nodejs-2.0  or later, and is reported for API canaries that use runtime 
version syn-nodejs-2.2  or later.
377Amazon CloudWatch User Guide
Edit or delete a canary
Metric Description
Valid Dimensions: CanaryName
Valid Statistic: Sum
Units: Count
Failed The number of canary runs that failed to execute. These failures are related 
to the canary itself.
Valid Dimensions: CanaryName
Valid Statistic: Sum
Units: Count
Failed requests The number of HTTP requests executed by the canary on the target website 
that failed with no response.
Valid Dimensions: CanaryName
Valid Statistic: Sum
Units: Count
VisualMonitoringSuccessPercent The percentage of visual comparisons that successfully matched the baseline 
screenshots during a canary run.
Valid Dimensions: CanaryName
Valid Statistic: Average
Units: Percent
VisualMonitoringTotalComparisons The total number of visual comparisons that happened during a canary run.
Valid Dimensions: CanaryName
Units: Count
Note
Canaries that use either the executeStep()  or executeHttpStep()  methods from the 
Synthetics library also publish SuccessPercent  and Duration  metrics with the dimensions
CanaryName  and StepName  for each step.
Edit or delete a canary
You can edit or delete an existing canary.
Edit canary
When you edit a canary, even if you don't change its schedule, the schedule is reset corresponding to 
when you edit the canary. For example, if you have a canary that runs every hour, and you edit that 
canary, the canary will run immediately after the edit is completed and then every hour after that.
To edit or update a canary
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
378Amazon CloudWatch User Guide
Edit or delete a canary
2. In the navigation pane, choose Application monitoring , Synthetics Canaries .
3. Select the button next to the canary name, and choose Actions, Edit.
4. (Optional) If this canary performs visual monitoring of screenshots and you want to set the next run 
of the canary as the baseline, select Set next run as new baseline.
5. (Optional) If this canary performs visual monitoring of screenshots and you want to remove a 
screenshot from visual monitoring or you want to designate parts of the screenshot to be ignored 
during visual comparisons, under Visual Monitoring  choose Edit Baseline.
The screenshot appears, and you can do one of the following:
•To remove the screenshot from being used for visual monitoring, select Remove screenshot from 
visual test baseline .
•To designate parts of the screenshot to be ignored during visual comparisons, click and drag to 
draw areas of the screen to ignore. Once you have done this for all the areas that you want to 
ignore during comparisons, choose Save.
6. Make any other changes to the canary that you'd like, and choose Save.
Delete canary
When you delete a canary, you can choose whether to also delete other resources used and created by 
the canary. When you delete a canary, you should also delete the following:
•Lambda functions and layers used by this canary. Their preﬁx is cwsyn-MyCanaryName .
•CloudWatch alarms created for this canary. These alarms have a name that starts with Synthetics-
Alarm-MyCanaryName . For more information about deleting alarms, see Editing or deleting a 
CloudWatch alarm (p. 205).
•Amazon S3 objects and buckets, such as the canary's results location and artifact location.
•IAM roles created for the canary. These have the name role/service-role/
CloudWatchSyntheticsRole- MyCanaryName .
•Log groups in CloudWatch Logs created for the canary. These logs groups have the following names: /
aws/lambda/cwsyn- MyCanaryName -randomId .
Before you delete a canary, you might want to view the canary details and make note of this information. 
That way, you can delete the correct resources after you delete the canary.
To delete a canary
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Synthetics Canaries .
3. If the canary is currently in the RUNNING state, you must stop it. Only canaries in the STOPPED ,
READY(NOT_STARTED) , or ERROR  states can be deleted.
To stop the canary, select the button next to the canary name, and choose Actions, Stop .
4. Select the button next to the canary name, and choose Actions, Delete.
5. Choose whether to also delete the other resources created for and used by the canary. This includes 
the Lambda function and layers, and the canary's IAM role and IAM policy.
To delete the canary's IAM role and IAM policy, you must have suﬃcient permissions. For more 
information, see AWS managed (predeﬁned) policies for CloudWatch Synthetics (p. 1174 ).
6. Enter Delete into the box and choose Delete.
7. Delete the other resources used by and created for the canary, as listed earlier in this section.
379Amazon CloudWatch User Guide
Start, stop, delete, or update runtime for multiple canaries
Start, stop, delete, or update runtime for multiple 
canaries
You can stop, start, delete, or update the runtime of as many as ﬁve canaries with one action. If you 
update the runtime of a canary, it is updated to the latest runtime available for the language and 
framework that the canary uses.
If you select multiple canaries and only some of them are in a state that is valid for the action that you 
select, the action is performed only on the canaries where that action is valid. For example, if you select 
some canaries that are currently running and some that are not, and you select to start the canaries, 
the canaries that weren't already running will start, and the canaries that were already running are not 
aﬀected.
If none of the canaries that you select are valid for an action, that action will not be available in the 
menu.
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Synthetics Canaries .
3. Select the check boxes next to the canaries that you want to stop, start, or delete.
4. Choose Actions and then choose either Start, Stop , Delete, or Update Runtime .
Monitoring canary events with Amazon EventBridge
Amazon EventBridge event rules can notify you when canaries change status or complete runs. 
EventBridge delivers a near-real-time stream of system events that describe changes in AWS resources. 
CloudWatch Synthetics sends these events to EventBridge on a best eﬀort basis. Best eﬀort delivery 
means that CloudWatch Synthetics attempts to send all events to EventBridge, but in some rare cases an 
event might not be delivered. EventBridge processes all received events at least once. Additionally, your 
event listeners might not receive the events in the order that the events occurred.
Note
Amazon EventBridge is an event bus service that you can use to connect your applications with 
data from a variety of sources. For more information, see What is Amazon EventBridge? in the
Amazon EventBridge User Guide .
CloudWatch Synthetics emits an event when a canary changes state or completes a run. You can create 
an EventBridge rule that includes an event pattern to match all event types sent from CloudWatch 
Synthetics, or that matches only speciﬁc event types. When a canary triggers a rule, EventBridge invokes 
the target actions deﬁned in the rule. This allows you to send notiﬁcations, capture event information, 
and take corrective action, in response to a canary state change or the completion of a canary run. For 
example, you can create rules for the following use cases:
•Investigating when a canary run fails
•Investigating when a canary has gone into the ERROR  state
•Tracking a canary's life cycle
•Monitoring canary run success or failure as part of a workﬂow
Example events from CloudWatch Synthetics
This section lists example events from CloudWatch Synthetics. For more information about event format, 
see  Events and Event Patterns in EventBridge.
380Amazon CloudWatch User Guide
Monitoring canary events with Amazon EventBridge
Canary status change
In this event type, the values of current-state  and previous-state  can be the following:
CREATING  | READY  | STARTING  | RUNNING  | UPDATING  | STOPPING  | STOPPED  | ERROR
{ 
                "version": "0", 
                "id": "8a99ca10-1e97-2302-2d64-316c5dedfd61", 
                "detail-type": "Synthetics Canary Status Change", 
                "source": "aws.synthetics", 
                "account": "123456789012", 
                "time": "2021-02-09T22:19:43Z", 
                "region": "us-east-1", 
                "resources": [], 
                "detail": { 
                                "account-id": "123456789012", 
                                "canary-id": "EXAMPLE-dc5a-4f5f-96d1-989b75a94226", 
                                "canary-name": "events-bb-1", 
                                "current-state": "STOPPED", 
                                "previous-state": "UPDATING", 
                                "source-location": "NULL", 
                                "updated-on": 1612909161.767, 
                                "changed-config": { 
                                                "executionArn": { 
                                                                "previous-value": 
 "arn:aws:lambda:us-east-1:123456789012:function:cwsyn-events-bb-1-af3e3a05-
dc5a-4f5f-96d1-989EXAMPLE:1", 
                                                                "current-value": 
 "arn:aws:lambda:us-east-1:123456789012:function:cwsyn-events-bb-1-af3e3a05-
dc5a-4f5f-96d1-989EXAMPLE:2" 
                                                }, 
                                                "vpcId": { 
                                                                "current-value": "NULL" 
                                                }, 
                                                "testCodeLayerVersionArn": { 
                                                                "previous-
value": "arn:aws:lambda:us-east-1:123456789012:layer:cwsyn-events-bb-1-af3e3a05-
dc5a-4f5f-96d1-989EXAMPLE:1", 
                                                                "current-value": 
 "arn:aws:lambda:us-east-1:123456789012:layer:cwsyn-events-bb-1-af3e3a05-
dc5a-4f5f-96d1-989EXAMPLE:2" 
                                                } 
                                }, 
                                "message": "Canary status has changed" 
                }
}
Successful canary run completed
{ 
                "version": "0", 
                "id": "989EXAMPLE-f4a5-57a7-1a8f-d9cc768a1375", 
                "detail-type": "Synthetics Canary TestRun Successful", 
                "source": "aws.synthetics", 
                "account": "123456789012", 
                "time": "2021-02-09T22:24:01Z", 
                "region": "us-east-1", 
                "resources": [], 
                "detail": { 
                                "account-id": "123456789012", 
                                "canary-id": "989EXAMPLE-dc5a-4f5f-96d1-989b75a94226", 
                                "canary-name": "events-bb-1", 
381Amazon CloudWatch User Guide
Monitoring canary events with Amazon EventBridge
                                "canary-run-id": "c6c39152-8f4a-471c-9810-989EXAMPLE", 
                                "artifact-location": "cw-syn-results-123456789012-us-
east-1/canary/us-east-1/events-bb-1-ec3-28ddbe266797/2021/02/09/22/23-41-200", 
                                "test-run-status": "PASSED", 
                                "state-reason": "null", 
                                "canary-run-timeline": { 
                                                "started": 1612909421, 
                                                "completed": 1612909441 
                                }, 
                                "message": "Test run result is generated successfully" 
                }
}
Failed canary run completed
{ 
                "version": "0", 
                "id": "2644b18f-3e67-5ebf-cdfd-bf9f91392f41", 
                "detail-type": "Synthetics Canary TestRun Failure", 
                "source": "aws.synthetics", 
                "account": "123456789012", 
                "time": "2021-02-09T22:24:27Z", 
                "region": "us-east-1", 
                "resources": [], 
                "detail": { 
                                "account-id": "123456789012", 
                                "canary-id": "af3e3a05-dc5a-4f5f-96d1-9989EXAMPLE", 
                                "canary-name": "events-bb-1", 
                                "canary-run-id": "0df3823e-7e33-4da1-8194-b04e4d4a2bf6", 
                                "artifact-location": "cw-syn-results-123456789012-us-
east-1/canary/us-east-1/events-bb-1-ec3-989EXAMPLE/2021/02/09/22/24-21-275", 
                                "test-run-status": "FAILED", 
                                "state-reason": "\"Error: net::ERR_NAME_NOT_RESOLVED \"" 
                                "canary-run-timeline": { 
                                                "started": 1612909461, 
                                                "completed": 1612909467 
                                }, 
                                "message": "Test run result is generated successfully" 
                }
}
It's possible that events might be duplicated or out of order. To determine the order of events, use the
time property.
Prerequisites for creating EventBridge rules
Before you create an EventBridge rule for CloudWatch Synthetics, you should do the following:
•Familiarize yourself with events, rules, and targets in EventBridge.
•Create and conﬁgure the targets invoked by your EventBridge rules. Rules can invoke many types of 
targets, including:
•Amazon SNS topics
•AWS Lambda functions
•Kinesis streams
•Amazon SQS queues
For more information, see What is Amazon EventBridge? and Getting started with Amazon EventBridge
in the Amazon EventBridge User Guide .
382Amazon CloudWatch User Guide
Perform launches and A/B experiments 
with CloudWatch Evidently
Create an EventBridge rule (CLI)
The steps in the following example create an EventBridge rule that publishes an Amazon SNS topic when 
the canary named my-canary-name  in us-east-1  completes a run or changes state.
1. Create the rule.
aws events put-rule \ 
  --name TestRule \ 
  --region us-east-1 \  
  --event-pattern "{\"source\": [\"aws.synthetics\"], \"detail\": {\"canary-name\": 
 [\"my-canary-name\"]}}"
Any properties you omit from the pattern are ignored.
2. Add the topic as a rule target.
•Replace topic-arn  with the Amazon Resource Name (ARN) of your Amazon SNS topic.
aws events put-targets \ 
  --rule TestRule \ 
  --targets "Id"="1","Arn"=" topic-arn "
Note
To allow Amazon EventBridge to call your target topic, you must add a resource-based 
policy to your topic. For more information, see Amazon SNS permissions in the Amazon 
EventBridge User Guide .
For more information, see Events and event patterns in EventBridge in the Amazon EventBridge User 
Guide .
Perform launches and A/B experiments with 
CloudWatch Evidently
You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a speciﬁed 
percentage of your users while you roll out the feature. You can monitor the performance of the new 
feature to help you decide when to ramp up traﬃc to your users. This helps you reduce risk and identify 
unintended consequences before you fully launch the feature.
You can also conduct A/B experiments to make feature design decisions based on evidence and data. An 
experiment can test as many as ﬁve variations at once. Evidently collects experiment data and analyzes it 
using statistical methods. It also provides clear recommendations about which variations perform better. 
You can test both user-facing features and backend features.
Evidently pricing
Evidently charges your account based on Evidently events and Evidently analysis units. Evidently events 
include both data events such as clicks and page views, and assignment events that determine the 
feature variation to serve to a user.
Evidently analysis units are generated from Evidently events, based on rules that you have created in 
Evidently. Analysis units are the number of rule matches on events. For example, a user click event might 
produce a single Evidently analysis unit, a click count. Another example is a user checkout event that 
383Amazon CloudWatch User Guide
IAM policies to use Evidently
might produce two Evidently analysis units, checkout value and the number of items in cart. For more 
information about pricing, see Amazon CloudWatch Pricing.
CloudWatch Evidently is currently available in the following Regions:
•US East (Ohio)
•US East (N. Virginia)
•US West (Oregon)
•Asia Paciﬁc (Singapore)
•Asia Paciﬁc (Sydney)
•Asia Paciﬁc (Tokyo)
•Europe (Frankfurt)
•Europe (Ireland)
•Europe (Stockholm)
Topics
•IAM policies to use Evidently  (p. 384)
•Create projects, features, launches, and experiments (p. 385)
•Manage features, launches, and experiments (p. 399)
•Adding code to your application (p. 403)
•Project data storage (p. 405)
•How Evidently calculates results (p. 407)
•View launch results in the dashboard (p. 409)
•View experiment results in the dashboard (p. 409)
•How CloudWatch Evidently collects and stores data (p. 410)
•Using service-linked roles for Evidently (p. 411)
•CloudWatch Evidently quotas (p. 412)
•Tutorial: A/B testing with the Evidently sample application (p. 413)
IAM policies to use Evidently
To fully manage CloudWatch Evidently, you must be signed in as an IAM user or role that has the 
following permissions:
•The AmazonCloudWatchEvidentlyFullAccess policy
•The ResourceGroupsandTagEditorReadOnlyAccess policy
Additionally, to be able to create a project that stores evaluation events in Amazon S3 or CloudWatch 
Logs, you need the following permissions:
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:GetBucketPolicy", 
                "s3:PutBucketPolicy", 
                "s3:GetObject", 
                "s3:ListBucket" 
            ], 
384Amazon CloudWatch User Guide
Create projects, features, launches, and experiments
            "Resource": "arn:aws:s3:::*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "logs:CreateLogDelivery", 
                "logs:DeleteLogDelivery", 
                "logs:DescribeResourcePolicies", 
                "logs:PutResourcePolicy" 
            ], 
            "Resource": [ 
                "*" 
            ] 
        } 
    ]
Additional permissions for CloudWatch RUM integration
Additionally, if you intend to manage Evidently launches or experiments that integrate with 
Amazon CloudWatch RUM and use CloudWatch RUM metrics for monitoring, you need the
AmazonCloudWatchRUMFullAccess policy. To create an IAM role to give the CloudWatch RUM web 
client permission to send data to CloudWatch RUM, you need the following permissions:
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "iam:CreateRole", 
                "iam:CreatePolicy", 
                "iam:AttachRolePolicy" 
            ], 
            "Resource": [ 
                "arn:aws:iam::*:role/service-role/CloudWatchRUMEvidentlyRole-*", 
                "arn:aws:iam::*:policy/service-role/CloudWatchRUMEvidentlyPolicy-*" 
            ] 
        } 
    ]
}
Permissions for read-only access to Evidently
For other users who need to view Evidently data but don't need to create Evidently resources, you can 
grant the AmazonCloudWatchEvidentlyReadOnlyAccess policy.
Create projects, features, launches, and experiments
To get started with CloudWatch Evidently, for either a feature launch or an A/B experiment, you ﬁrst 
create a project . A project is a logical grouping of resources. Within the project, you create features  that 
have variations that you want to test or launch. You can create a feature either before you create a 
launch or experiment, or at the same time.
Topics
•Create a new project (p. 386)
•Use client-side evaluation - powered by AWS AppConﬁg (p. 386)
•Add a feature to a project (p. 390)
•Use segments to focus your audience (p. 392)
•Create a launch (p. 395)
385Amazon CloudWatch User Guide
Create projects, features, launches, and experiments
•Create an experiment (p. 397)
Create a new project
Use these steps to set up a new CloudWatch Evidently project.
To create a new CloudWatch Evidently project
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Choose Create project.
4. For Project name, enter a name to be used to identify this project within the CloudWatch Evidently 
console.
You can optionally add a project description.
5. For Evaluation event storage, choose whether you want to store the evaluation events that 
you collect with Evidently. Even if you don't store these events, Evidently aggregates them to 
create metrics and other experiment data that you can view in the Evidently dashboard. For more 
information, see Project data storage (p. 405).
6. For Use client-side evaluation, choose whether you want to enable client-side evaluation for this 
project. With client-side evaluation, your application can assign variations to user sessions locally 
instead of by calling the EvaluateFeature operation. This mitigates the latency and availability risks 
that come with an API call. For more information, see Use client-side evaluation - powered by AWS 
AppConﬁg  (p. 386).
To create a project with client-side evaluation, you must have the
evidently:ExportProjectAsConfiguration  permission.
If you enable client-side evaluation, also do the following:
a. Choose whether to use an existing AWS AppConﬁg application or create a new one.
b. Choose whether to use an existing AWS AppConﬁg environment or create a new one.
For more information about applications and environments in AWS AppConﬁg, see  How AWS 
AppConﬁg works.
7. (Optional) To add tags to this project, choose Tags, Add new tag .
Then, for Key, enter a name for the tag. You can add an optional value for the tag in Value.
To add another tag, choose Add new tag  again.
For more information, see Tagging AWS Resources.
8. Choose Create project.
Use client-side evaluation - powered by AWS AppConﬁg
You can use client-side evaluation - powered by AWS AppConﬁg (client-side evaluation) in a project, which 
lets your application assign variations to user sessions locally instead of assigning variations by calling 
the EvaluateFeature operation. This mitigates the latency and availability risks that come with an API 
call.
To use client-side evaluation, attach the AWS AppConﬁg Lambda extension as a layer to your Lambda 
functions and conﬁgure the environment variables. The client-side evaluation runs as a side process 
on the local host. Then, you can call the EvaluationFeature and PutProjectEvent operations against
386Amazon CloudWatch User Guide
Create projects, features, launches, and experiments
localhost . The client-side evaluation process handles the variation assignment, caching, and data 
synchronization. For more information about AWS AppConﬁg, see  How AWS AppConﬁg works.
When you integrate with AWS AppConﬁg, you specify an AWS AppConﬁg application ID  and an AWS 
AppConﬁg environment ID to Evidently. You can use the same application ID and environment ID across 
Evidently projects.
When you create a project with client-side evaluation enabled, Evidently creates an AWS AppConﬁg 
conﬁguration proﬁle for that project. The conﬁguration proﬁle for each project will be diﬀerent.
Client-side evaluation access control
Evidently client-side evaluation uses a diﬀerent access control mechanism than the rest of Evidently 
does. We strongly recommend that you understand this so that you can implement the proper security 
measures.
With Evidently, you can create IAM policies that limit the actions a user can perform on individual 
resources. For example, you can create a user role that disallows a user from having the EvaluateFeature
action. For more information about the Evidently actions that can be controlled with IAM policies, see
Actions deﬁned by Amazon CloudWatch Evidently.
The client-side evaluation model allows local evaluations of Evidently features that use project 
metadata. A user of a project with client-side evaluation enabled can call the EvaluateFeature API 
against a local host endpoint, and this API call does not reach Evidently and is not authenticated by the 
Evidently service's IAM policies. This call is successful even if the user doesn't have the IAM permission 
to use the EvaluateFeature action. However, a user still needs the PutProjectEvents permission for the 
agent to buﬀer the evaluation events or custom events and to oﬄoad data to Evidently asynchronously.
Additionally, a user must have the evidently:ExportProjectAsConfiguration  permission to be 
able to create a project that uses client-side evaluation. This helps you control access to EvaluateFeature
actions that are called during client-side evaluation.
If you aren't careful, the client-side evaluation security model can subvert the policies that you have 
set on the rest of Evidently. A user who has the evidently:ExportProjectAsConfiguration
permission can create a project with client-side evaluation enabled, and then use the EvaluateFeature
action for client-side evaluation with that project even if they are expressly denied the EvaluateFeature
action in an IAM policy.
Get started with Lambda
Evidently currently supports client-side evaluation by using an AWS Lambda environment. To get 
started, ﬁrst decide which AWS AppConﬁg application and environment to use. Choose an existing 
application and environment, or create new ones.
The following sample AWS AppConﬁg AWS CLI commands create an application and environment.
aws appconfig create-application --name YOUR_APP_NAME
aws appconfig create-environment --application-id YOUR_APP_ID  --name YOUR_ENVIRONMENT_NAME
Next, create an Evidently project by using these AWS AppConﬁg resources. For more information, see
Create a new project (p. 386).
Client-side evaluation is supported in Lambda by using a Lambda layer. This is a public layer that is part 
of AWS-AppConfig-Extension , a public AWS AppConﬁg extension created by the AWS AppConﬁg 
service. For more information about Lambda layers, see  Layer.
To use client-side evaluation, you must add this layer to your Lambda function and conﬁgure permissions 
and environment variables.
387Amazon CloudWatch User Guide
Create projects, features, launches, and experiments
To add the Evidently client-side evaluation Lambda layer to your Lambda function and 
conﬁgure it
1. Create a Lambda function if you haven't already.
2. Add the client-side evaluation layer to your function. You can either specify its ARN or select it from 
the list of AWS layers if you haven't already. For more information, see  Conﬁguring functions to use 
layers and  Available versions of the AWS AppConﬁg Lambda extension.
3. Create an IAM policy named EvidentlyAppConﬁgCachingAgentPolicy with the following contents, 
and attach it to the function's execution role. For more information, see  Lambda execution role.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Sid": "VisualEditor0", 
            "Effect": "Allow", 
            "Action": [ 
                "appconfig:GetLatestConfiguration", 
                "appconfig:StartConfigurationSession", 
                "evidently:PutProjectEvents" 
            ], 
            "Resource": "*" 
        } 
    ]
}
4. Add the required environment variable
AWS_APPCONFIG_EXTENSION_EVIDENTLY_CONFIGURATIONS  to your Lambda function. This 
environment variable speciﬁes the mapping between the Evidently project and the AWS AppConﬁg 
resources.
If you are using this function for one Evidently project, set the value of the environment variable to:
applications/ APP_ID/environments/ ENVIRONMENT_ID /configurations/ PROJECT_NAME
If you are using this function for multiple Evidently projects, use a comma to separate the values, 
as in the following example: applications/ APP_ID_1 /environments/ ENVIRONMENT_ID_1 /
configurations/ PROJECT_NAME_1 , applications/ APP_ID_2 /
environments/ ENVIRONMENT_ID_2 /configurations/ PROJECT_NAME_2
5. (Optional) Set other environment variables. For more information, see  Conﬁguring the AWS 
AppConﬁg Lambda extension.
6. In your application, get Evidently evaluations locally by sending EvaluateFeature  to localhost .
Python example:
import boto3
from botocore.config import Config 
         
def lambda_handler(event, context): 
    local_client = boto3.client( 
        'evidently', 
        endpoint_url="http://localhost:2772", 
        config=Config(inject_host_prefix=False) 
    ) 
    response = local_client.evaluate_feature( 
        project=event['project'], 
        feature=event['feature'], 
        entityId=event['entityId'] 
    ) 
    print(response)
388Amazon CloudWatch User Guide
Create projects, features, launches, and experiments
Node.js example:
const AWS = require('aws-sdk');
const evidently = new AWS.Evidently({ 
    region: "us-west-2", 
    endpoint: "http://localhost:2772", 
    hostPrefixEnabled: false
});
exports.handler = async (event) => { 
     
    const evaluation = await evidently.evaluateFeature({ 
        project: 'John_ETCProject_Aug2022', 
        feature: 'Feature_IceCreamFlavors', 
        entityId: 'John' 
    }).promise() 
     
    console.log(evaluation) 
    const response = { 
        statusCode: 200, 
        body: evaluation, 
    }; 
    return response;
};
Kotlin example:
String localhostEndpoint = "http://localhost:2772/"
public AmazonCloudWatchEvidentlyClient getEvidentlyLocalClient() { 
    return AmazonCloudWatchEvidentlyClientBuilder.standard() 
        
 .withEndpointConfiguration(AwsClientBuilder.EndpointConfiguration(localhostEndpoint, 
 region)) 
        
 .withClientConfiguration(ClientConfiguration().withDisableHostPrefixInjection(true)) 
        .withCredentials(credentialsProvider) 
        .build();
}
AmazonCloudWatchEvidentlyClient evidently = getEvidentlyLocalClient();
// EvaluateFeature via local client.
EvaluateFeatureRequest evaluateFeatureRequest = new EvaluateFeatureRequest().builder() 
   .withProject(${YOUR_PROJECT}) //Required. 
   .withFeature(${YOUR_FEATURE}) //Required. 
   .withEntityId(${YOUR_ENTITY_ID}) //Required. 
   .withEvaluationContext(${YOUR_EVAL_CONTEXT}) //Optional: a JSON object of attributes 
 that you can optionally pass in as part of the evaluation event sent to Evidently. 
   .build(); 
    
EvaluateFeatureResponse evaluateFeatureResponse = 
 evidently.evaluateFeature(evaluateFeatureRequest);
// PutProjectEvents via local client.  
PutProjectEventsRequest putProjectEventsRequest = new 
 PutProjectEventsRequest().builder() 
    .withData(${YOUR_DATA}) 
    .withTimeStamp(${YOUR_TIMESTAMP}) 
    .withType(${YOUR_TYPE}) 
    .build(); 
     
389Amazon CloudWatch User Guide
Create projects, features, launches, and experiments
PutProjectEvents putProjectEventsResponse = 
 evidently.putProjectEvents(putProjectEventsRequest);
Conﬁgure how often the client sends data to Evidently
To specify how often client-side evaluation sends data to Evidently, you can optionally conﬁgure two 
environment variables.
•AWS_APPCONFIG_EXTENSION_EVIDENTLY_EVENT_BATCH_SIZE  speciﬁes the number of events per 
project to batch before sending them to Evidently. Valid values are integers between 1 and 50, and the 
default is 40.
•AWS_APPCONFIG_EXTENSION_EVIDENTLY_BATCH_COLLECTION_DURATION  speciﬁes the duration in 
seconds to wait for events before sending them to Evidently. The default is 30.
Troubleshooting
Use the following information to help troubleshoot problems with using CloudWatch Evidently with 
client-side evaluation - powered by AWS AppConﬁg.
An error occurred (BadRequestException) when calling the EvaluateFeature operation: HTTP 
method not supported for provided path
Your environment variables might be conﬁgured incorrectly. For example, you might 
have used EVIDENTLY_CONFIGURATIONS  as the environment variable name instead of
AWS_APPCONFIG_EXTENSION_EVIDENTLY_CONFIGURATIONS .
ResourceNotFoundException: Deployment not found
Your update to the project metadata has not been deployed to AWS AppConﬁg. Check for an active 
deployment in the AWS AppConﬁg environment that you used for client-side evaluation.
ValidationException: No Evidently conﬁguration for project
Your AWS_APPCONFIG_EXTENSION_EVIDENTLY_CONFIGURATIONS  environment variable might be 
conﬁgured with the incorrect project name.
Add a feature to a project
A feature  in CloudWatch Evidently represents a feature that you want to launch or that you want to test 
variations of.
Before you can add a feature, you must create a project. For more information, see Create a new 
project (p. 386).
To add a feature to a project
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Choose the name of the project.
4. Choose Add feature .
5. For Feature name, enter a name to be used to identify this feature within this project.
You can optionally add a feature description.
6. For Feature variations, for Variation type choose Boolean, Long , Double, or String . For more 
information, see Variation types (p. 391).
390Amazon CloudWatch User Guide
Create projects, features, launches, and experiments
7. Add up to ﬁve variations for your feature. The Value for each variation must be valid for the
Variation type that you selected.
Specify one of the variations to be the default. This is the baseline that the other variations will be 
compared to, and should be the variation that is being served to your users now. This is also the 
variation that is served to users who are not added to a launch or experiment for this feature.
8. Choose Sample code. The code example shows what you need to add to your application to set 
up the variations and assign user sessions to them. You can choose between JavaScript, Java, and 
Python for the code.
You don't need to add the code to your application right now, but you must do so before you start a 
launch or an experiment.
For more information, see Adding code to your application (p. 403).
9. (Optional) To specify that certain users always see a certain variation, choose Overrides, Add 
override. Then, specify a user by entering their user ID, account ID, or some other identiﬁer in
Identiﬁer , and specify which variation they should see.
This can be useful for members of your own testing team or other internal users when you want 
to make sure they see a speciﬁc variation. The sessions of users who are assigned overrides do not 
contribute to launch or experiment metrics.
You can repeat this for as many as 10 users by choosing Add override again.
10. (Optional) To add tags to this feature, choose Tags, Add new tag .
Then, for Key, enter a name for the tag. You can add an optional value for the tag in Value.
To add another tag, choose Add new tag  again.
For more information, see Tagging AWS Resources.
11. Choose Add feature .
Variation types
When you create a feature and deﬁne the variations, you must select a variation type . The possible types 
are:
•Boolean
•Long integer
•Double precision ﬂoating-point number
•String
The variation type sets how the diﬀerent variations are diﬀerentiated in your code. You can use the 
variation type to simplify the implementation of CloudWatch Evidently and also to simplify the process 
of modifying the features in your launches and experiments.
For example, if you deﬁne a feature with the long integer variation type, the integers that you specify 
to diﬀerentiate the variations can be numbers passed directly into your code. One example might be 
testing the pixel size of a button The values for the variation types can be the number of pixels used in 
each variation. The code for each variation can read the variation type value and use that as the button 
size. To test a new button size, you can change the number used for the value of the variation, without 
making any other code changes.
When you set the values for your variation types within a feature, you should avoid assigning the same 
values to multiple variations, unless you want to do A/A testing to initially try out CloudWatch Evidently, 
or have other reasons to do so.
391Amazon CloudWatch User Guide
Create projects, features, launches, and experiments
Evidently doesn't have native support for JSON as a type, but you can pass in JSON in the String 
variation type, and parse that JSON in your code.
Use segments to focus your audience
You can deﬁne audience segments  and use them in your launches and experiments. A segment is a 
portion of your audience that shares one or more characteristics. Examples could be Chrome browser 
users, users in Europe, or Firefox browser users in Europe who also ﬁt other criteria that your application 
collects, such as age.
Using a segment in an experiment limits that experiment to evaluating only the users who match the 
segment criteria. When you use one or more segments in a launch, you can deﬁne diﬀerent traﬃc splits 
for the diﬀerent audience segments.
Segment rule pattern syntax
To create a segment, deﬁne a segment rule pattern . Specify the attributes that you want to use to 
evaluate whether a user session will be in the segment. The pattern that you create is compared to the 
value of evaluationContext  that Evidently ﬁnds in a user session. For more information, see Using 
EvaluateFeature (p. 404).
To create an segment rule pattern, specify the ﬁelds that you want the pattern to match. You can also 
use logic in your pattern, such as And, Or, Not and Exists .
For an evaluationContext  to match a pattern, the evaluationContext  must match all parts of the 
rule pattern. Evidently ignores the ﬁelds in the evaluationContext  that aren't included in the rule 
pattern.
The values that rule patterns match follow JSON rules. You can include strings enclosed in quotation 
marks ("), numbers, and the keywords true , false , and null .
For strings, Evidently uses exact character-by-character matching without case-folding or any 
other string normalization. Therefore, rule matches are case-sensitive. For example, if your
evaluationContext  includes a browser attribute but your rule pattern checks for Browser , it will not 
match.
For numbers, Evidently uses string representation. For example, 300, 300.0, and 3.0e2 are not considered 
equal.
When you write rule patterns to match evaluationContext , you can use the TestSegmentPattern
API or the test-segment-pattern  CLI command to test that your pattern matches the correct JSON. 
For more information, see  TestSegmentPattern.
The following summary shows all the comparison operators that are available in Evidently segment 
patterns.
Comparison Example Rule syntax
Null UserID is null{ 
    "UserID": [ null ]
}
Empty LastName is empty{ 
    "LastName": [""]
}
392Amazon CloudWatch User Guide
Create projects, features, launches, and experiments
Comparison Example Rule syntax
Equals Browser is "Chrome"{ 
    "Browser": [ "Chrome" ]
}
And Country is "France" and Device is 
"Mobile"{ 
    "Country": [ "France" ], 
 "Device": ["Mobile"]
}
Or (multiple values of a single 
attribute)Browser is "Chrome" or "Firefox"{ 
    "Browser": ["Chrome", 
 "Firefox"]
}
Or (diﬀerent attributes)Browser is "Safari" or Device is 
"Tablet"{ 
 "$or": [ 
   {"Browser": ["Safari"]}, 
   {"Device": ["Tablet"}] 
 ]
}
Not Browser is anything but "Safari"{ 
    "Browser": 
 [ { "anything-but": 
 [ "Safari" ] } ]
}
Numeric (equals)Price is 100{ 
    "Price": [ { "numeric": 
 [ "=", 100 ] } ]
}
Numeric (range) Price is more than 10, and less 
than or equal to 20{ 
    "Price": [ { "numeric": 
 [ ">", 10, "<=", 20 ] } ]
}
Exists Age ﬁeld exists{ 
    "Age": [ { "exists": 
 true } ]
} 
Does not exist Age ﬁeld does not exist{ 
    "Age": [ { "exists": 
 false } ]
}
393Amazon CloudWatch User Guide
Create projects, features, launches, and experiments
Comparison Example Rule syntax
Begins with a preﬁxRegion is in the United States{ 
    "Region": [ {"prefix": 
 "us-" } ]
}
Ends with a suﬃx Location has a suﬃx "West"{ 
    "Region": [ {"suffix": 
 "West" } ]
}
Segment rule examples
All of the following examples assume that you are passing values for evaluationContext  with the 
same ﬁeld labels and values that you are using in your rule patterns.
The following example matches if Browser is Chrome or Firefox and Location  is US-West.
{ 
  "Browser": ["Chrome", "Firefox"], 
  "Location": ["US-West"]
}
The following example matches if Browser is any browser except Chrome, the Location  starts with US, 
and an Age ﬁeld exists.
{ 
  "Browser": [ {"anything-but": ["Chrome"]}], 
  "Location": [{"prefix": "US"}], 
  "Age": [{"exists": true}]
}
The following example matches if the Location  is Japan and either Browser  is Safari or Device  is 
Tablet.
{ 
 "Location": ["Japan"], 
 "$or": [ 
   {"Browser": ["Safari"]}, 
   {"Device": ["Tablet"]} 
 ]
}
Create a segment
After you create a segment, you can use it in any launch or experiment in any project.
To create a segment
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Choose the Segments  tab.
4. Choose Create segment .
394Amazon CloudWatch User Guide
Create projects, features, launches, and experiments
5. For Segment name , enter a name to use to identify this segment.
Optionally, add a description.
6. For Segment pattern, enter a JSON block that deﬁnes the rule pattern. For more information about 
rule pattern syntax, see Segment rule pattern syntax (p. 392).
Create a launch
To expose a new feature or change to a speciﬁed percentage of your users, create a launch. You can then 
monitor key metrics such as page load times and conversions before you roll out the feature to all of 
your users.
Before you can add a launch, you must have created a project. For more information, see Create a new 
project (p. 386).
When you add a launch, you can use a feature that you have already created, or create a new feature 
while you create the launch.
To add a launch to a project
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Select the button next to the name of the project and choose Project actions, Create launch .
4. For Launch name , enter a name to be used to identify this feature within this project.
You can optionally add a description.
5. Choose either Select from existing features or Add new feature .
If you are using an existing feature, select it under Feature name.
If you choose Add new feature , do the following:
a. For Feature name, enter a name to be used to identify this feature within this project. You can 
optionally add a description.
b. For Feature variations, for Variation type choose Boolean, Long , Double, or String . For more 
information, see Variation types (p. 391).
c. Add up to ﬁve variations for your feature. The Value for each variation must be valid for the
Variation type that you selected.
Specify one of the variations to be the default. This is the baseline that the other variations will 
be compared to, and should be the variation that is being served to your users now. If you stop 
an experiment, this default variation will then be served to all users.
d. Choose Sample code. The code example shows what you need to add to your application to set 
up the variations and assign user sessions to them. You can choose between JavaScript, Java, 
and Python for the code.
You don't need to add the code to your application right now, but you must do so before you 
start the launch.
For more information, see Adding code to your application (p. 403).
6. For Launch conﬁguration, choose whether to start the launch immediately or schedule it to start 
later.
7. (Optional) To specify diﬀerent traﬃc splits for audience segments that you have deﬁned, instead of 
the traﬃc split that you will use for your general audience, choose Add Segment Overrides.
In Segment Overrides, select a segment and deﬁne the traﬃc split to use for that segment.
395Amazon CloudWatch User Guide
Create projects, features, launches, and experiments
You can optionally deﬁne more segments to deﬁne traﬃc splits for by choosing Add Segment 
Override. A launch can have up to six segment overrides.
For more information, see Use segments to focus your audience (p. 392).
8. For Traﬃc conﬁguration, select the traﬃc percentage to assign to each variation for the general 
audience that doesn't match the segment overrides. You can also choose to exclude variations from 
being served to users.
The Traﬃc summary shows how much of your overall traﬃc is available for this launch.
9. If you choose to schedule the launch to start later, you can add multiple steps to the launch. Each 
step can use diﬀerent percentages for serving the variations. To do this, choose Add another step
and then specify the schedule and traﬃc percentages for the next step. You can include as many as 
ﬁve steps in a launch.
10. If you want to track your feature performance with metrics during the launch, choose Metrics , Add 
metric . You can use either CloudWatch RUM metrics or custom metrics.
To use a custom metric, you can create the metric here using an Amazon EventBridge rule. To create 
a custom metric, do the following:
•Choose Custom metrics  and enter a name for the metric.
•Under Metric rule, for Entity ID, enter the way to identify the entity. This can be a user 
or session that does an action that causes a metric value to be recorded. An example is
userDetails.userID .
•For Value key, enter the value that is to be tracked to produce the metric.
•Optionally, enter a name for the units for the metric. This unit name is for display purposes only, 
for use on graphs in the Evidently console.
As you enter those ﬁelds, the box shows examples of how to code the EventBridge rule to create the 
metric. For more information about EventBridge, see  What Is Amazon EventBridge?
To use RUM metrics, you must already have a RUM app monitor set up for your application. For more 
information, see Set up an application to use CloudWatch RUM (p. 422).
Note
If you use RUM metrics, and the app monitor is not conﬁgured to sample 100% of user 
sessions, then not all of the user sessions that participate in the launch will send metrics 
to Evidently. To ensure that the launch metrics are accurate, we recommend that the app 
monitor uses 100% of user sessions for sampling.
11. (Optional) If you create at least one metric for the launch, you can associate an existing CloudWatch 
alarm with this launch. To do so, choose Associate CloudWatch alarms.
When you associate an alarm with a launch, CloudWatch Evidently must add tags to the alarm with 
the project name and launch name. This is so that CloudWatch Evidently can display the correct 
alarms in the launch information in the console.
To acknowledge that CloudWatch Evidently will add these tags, choose Allow Evidently to tag the 
alarm resource identiﬁed below with this launch resource. Then, choose Associate alarm  and 
enter the alarm name.
For information about creating CloudWatch alarms, see  Using Amazon CloudWatch alarms (p. 180).
12. (Optional) To add tags to this launch, choose Tags, Add new tag .
Then, for Key, enter a name for the tag. You can add an optional value for the tag in Value.
To add another tag, choose Add new tag  again.
396Amazon CloudWatch User Guide
Create projects, features, launches, and experiments
For more information, see Tagging AWS Resources.
13. Choose Create launch .
Create an experiment
Use experiments to test diﬀerent versions of a feature or website and collect data from real user 
sessions. This way, you can make choices for your application based on evidence and data.
Before you can add an experiment, you must have created a project. For more information, see Create a 
new project (p. 386).
When you add an experiment, you can use a feature that you have already created, or create a new 
feature while you create the experiment.
To add an experiment to a project
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Select the button next to the name of the project and choose Project actions, Create experiment .
4. For Experiment name , enter a name to be used to identify this feature within this project.
You can optionally add a description.
5. Choose either Select from existing features or Add new feature .
If you are using an existing feature, select it under Feature name.
If you choose Add new feature , do the following:
a. For Feature name, enter a name to be used to identify this feature within this project. You can 
also optionally enter a description.
b. For Feature variations, for Variation type choose Boolean, Long , Double, or String . The type 
deﬁnes which type of value is used for each variation. For more information, see Variation 
types (p. 391).
c. Add up to ﬁve variations for your feature. The Value for each variation must be valid for the
Variation type that you selected.
Specify one of the variations to be the default. This is the baseline that the other variations will 
be compared to, and should be the variation that is being served to your users now. If you stop 
an experiment that uses this feature, the default variation is then served to the percentage of 
users that were in the experiment previously.
d. Choose Sample code. The code example shows what you need to add to your application to set 
up the variations and assign user sessions to them. You can choose between JavaScript, Java, 
and Python for the code.
You don't need to add the code to your application right now, but you must do so before you 
start the experiment. For more information, see Adding code to your application (p. 403).
6. For Audience, optionally select a segment that you have created if you want this experiment to 
apply only to the users who match that segment. For more information about segments, see Use 
segments to focus your audience (p. 392).
7. For Traﬃc split for the experiment, specify the percentage of the selected audience whose 
sessions will be used in the experiment. Then allocate the traﬃc for the diﬀerent variations that the 
experiment uses.
If a launch and an experiment are both running at the same time for the same feature, the audience 
is ﬁrst directed to the launch. Then, the percentage of traﬃc speciﬁed for the launch is taken from 
397Amazon CloudWatch User Guide
Create projects, features, launches, and experiments
the overall audience. After that, the percentage that you specify here is the percentage of the 
remaining audience that is used for the experiment. Any remaining traﬃc after that is served the 
default variation.
8. For Metrics , choose the metrics to use to evaluate the variations during the experiment. You must 
use at least one metric for evaluation.
a. For Metric source, choose whether to use CloudWatch RUM metrics or custom metrics.
b. Enter a name for the metric. For Goal , choose Increase  if you want a higher value for the metric 
to indicate a better variation. Choose Decrease  if you want a lower value for the metric to 
indicate a better variation.
c. If you are using a custom metric, you can create the metric here using an Amazon EventBridge 
rule. To create a custom metric, do the following:
•Under Metric rule, for Entity ID, enter a way to identify the entity, This can be a user 
or session that does an action that causes a metric value to be recorded. An example is
userDetails.userID .
•For Value key, enter the value that is to be tracked to produce the metric.
•Optionally, enter a name for the units for the metric. This unit name is for display purposes 
only, for use on graphs in the Evidently console.
You can use RUM metrics only if you have set up RUM to monitor this application. For more 
information, see Use CloudWatch RUM (p. 420).
Note
If you use RUM metrics, and the app monitor is not conﬁgured to sample 100% of 
user sessions, then not all of the user sessions in the experiment will send metrics to 
Evidently. To ensure that the experiment metrics are accurate, we recommend that the 
app monitor uses 100% of user sessions for sampling.
d. (Optional) To add more metrics to evaluate, choose Add metric . You can evaluate as many as 
three metrics during the experiment.
9. (Optional) To create CloudWatch alarms to use with this experiment, choose CloudWatch alarms. 
The alarms can monitor whether the diﬀerence in results between each variation and the default 
variation is larger than a threshold that you specify. If a variation's performance is worse than the 
default variation, and the diﬀerence is greater than your threshold, it goes into alarm state and 
notiﬁes you.
Creating an alarm here creates one alarm for each variation that is not the default variation.
If you create an alarm, specify the following:
•For Metric name , choose the experiment metric to use for the alarm.
•For Alarm condition choose what condition causes the alarm to go into alarm state, when 
the variation metric values are compared to the default variation metric values. For example, 
choose Greater  or Greater/Equal if higher numbers indicate for the variation indicates that it 
is performing poorly. This would be appropriate if the metric is measuring page load time, for 
example.
•Enter a number for the threshold, which is the percentage diﬀerence in performance that will 
cause the alarm to go into ALARM  state.
•For Average over period, choose how much metric data for each variation is aggregated together 
before being compared.
You can choose Add new alarm  again to add more alarms to the experiment.
398Amazon CloudWatch User Guide
Manage features, launches, and experiments
Next, choose Set notiﬁcations for the alarm  and select or create an Amazon Simple Notiﬁcation 
Service topic to send alarm notiﬁcations to. For more information, see Setting up Amazon SNS 
notiﬁcations  (p. 187),
10. (Optional) To add tags to this experiment, choose Tags, Add new tag .
Then, for Key, enter a name for the tag. You can add an optional value for the tag in Value.
To add another tag, choose Add new tag  again.
For more information, see Tagging AWS Resources.
11. Choose Create experiment .
12. If you haven't already, build the feature variants into your application.
13. Choose Done . The experiment does not start until you start it.
After you complete the steps in the following procedure, the experiment starts immediately.
To start an experiment that you have created
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Choose the name of the project.
4. Choose the Experiments  tab.
5. Choose the button next to the name of the experiment, and choose Actions, Start experiment.
6. (Optional) To view or modify the experiment settings you made when you created it, choose
Experiment setup .
7. Choose a time for the experiment to end.
8. Choose Start experiment.
The experiment starts immediately.
Manage features, launches, and experiments
Use the procedures in these sections to manage the features, launches, and experiments that you have 
created.
Topics
•See the current evaluation rules and audience traﬃc for a feature (p. 399)
•Modify launch traﬃc (p. 400)
•Modify a launch's future steps (p. 401)
•Modify experiment traﬃc (p. 401)
•Stop a launch  (p. 403)
•Stop an experiment  (p. 403)
See the current evaluation rules and audience traﬃc for a 
feature
You can use the CloudWatch Evidently console to see how the feature's evaluation rules are allocating 
the audience traﬃc among the feature's current launches, experiments, and variations.
399Amazon CloudWatch User Guide
Manage features, launches, and experiments
To view the audience traﬃc for a feature
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Choose the name of the project that contains the feature.
4. Choose the Features tab.
5. Choose the name of the feature.
In the Evaluation rules tab, you can see the ﬂow of audience traﬃc for your feature, as follows:
•First, the overrides are evaluated. These specify that certain users are always served a speciﬁc 
variation. The sessions of users who are assigned overrides do not contribute to launch or 
experiment metrics.
•Next, the remaining traﬃc is available for the ongoing launch, if there is one. If there is a launch 
in progress, the table in the Launches  section displays the launch name and the launch traﬃc 
split among the feature variations. On the right side of the Launches  section, a Traﬃc indicator 
displays how much of the available audience (after overrides) is allocated to this launch. The rest 
of the traﬃc not allocated to the launch ﬂows to the experiment (if any) and then the default 
variation.
•Next, the remaining traﬃc is available for the ongoing experiment, if there is one. If there is an 
experiment in progress, the table in the Experiments  section displays the experiment name and 
progress. On the right side of the Experiments  section, a Traﬃc indicator displays how much of 
the available audience (after overrides and launches) is allocated to this experiment. The rest of 
the traﬃc not allocated to the launch or the experiment is served the default variation of the 
feature.
Modify launch traﬃc
You can modify the traﬃc allocation for a launch at any time, including while the launch is ongoing.
If you have both an ongoing launch and an ongoing experiment for the same feature, any changes to the 
feature traﬃc will cause a change in the experiment traﬃc. This is because the audience available to the 
experiment is the portion of your total audience that is not already allocated to the launch. Increasing 
launch traﬃc will descrease the audience available to the experiment, and decreasing launch traﬃc or 
ending the launch will increase the audience available to the experiment.
To modify the traﬃc allocation for a launch
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Choose the name of the project that contains the launch.
4. Choose the Launches  tab.
5. Choose the name of the launch.
Choose Modify launch traﬃc.
6. For Serve, select the new traﬃc percentage to assign to each variation. You can also choose to 
exclude variations from being served to users. As you change these values, you can see the updated 
eﬀects on your overall feature traﬃc under Traﬃc summary.
The Traﬃc summary shows how much of your overall traﬃc is available for this launch, and how 
much of that available traﬃc is allocated to this launch.
7. Choose Modify.
400Amazon CloudWatch User Guide
Manage features, launches, and experiments
Modify a launch's future steps
You can modify the conﬁguration of launch steps that haven't happened yet, and also add more steps to 
a launch.
To modify the steps for a launch
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Choose the name of the project that contains the launch.
4. Choose the Launches  tab.
5. Choose the name of the launch.
Choose Modify launch traﬃc.
6. Choose Schedule launch.
7. For any steps that have not started yet, you can modify the percentage of the available audience to 
use in the experiment. You can also modify how their traﬃc is allocated among the variations.
You can add more steps to the launch by choosing Add another step . A launch can have a maximum 
of ﬁve steps.
8. Choose Modify.
Modify experiment traﬃc
You can modify the sampling rate for an experiment at any time, including while the experiment is 
ongoing. However, you can't update the treatment weights after an experiment is running. Therefore, 
you can change the total traﬃc exposed to the experiment after an experiment is running, but not the 
relative allocation to each treatment. If you modify the traﬃc of an ongoing experiment, we recommend 
that you only increase the traﬃc allocation, so that you don't introduce bias.
401Amazon CloudWatch User Guide
Manage features, launches, and experiments
To modify the traﬃc allocation for an experiment
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Choose the name of the project that contains the launch.
4. Choose the Experiments  tab.
5. Choose the name of the launch.
6. Choose Modify experiment traﬃc.
7. Enter a percentage or use the slider to specify how much of the available traﬃc to allocate to this 
experiment. The available traﬃc is the total audience minus the traﬃc that is allocated to a current 
launch, if there is one. The traﬃc that is not allocated to the launch or experiment is served the 
default variation.
402Amazon CloudWatch User Guide
Adding code to your application
8. Choose Modify.
Stop a launch
If you stop an ongoing launch, you will not be able to resume it or restart it. Also, it will not be evaluated 
as a rule for traﬃc allocation, and the traﬃc that was allocated to the launch will instead be available to 
the feature's experiment, if there is one. Otherwise, all traﬃc will be served the default variation after 
the launch is stopped.
To permanently stop a launch
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Choose the name of the project that contains the launch.
4. Choose the Launch  tab.
5. Choose the button to the left of the name of the launch.
6. Choose Actions, Cancel launch or Actions, Mark as complete.
Stop an experiment
If you stop an ongoing experiment, you will not be able to resume it or restart it. The portion of traﬃc 
that was previously used in the experiment will be served the default variation.
When an experiment is not manually stopped and passes its end date, the traﬃc does not change. The 
portion of traﬃc allocated to the experiment still goes to the experiment. To stop this, and cause the 
experiment traﬃc to instead be served the default variation, mark the experiment as complete.
When you stop an experiment, you can choose to cancel it or mark it as complete. If you cancel, it will 
be shown as Cancelled in the list of experiments. If you choose to mark it as complete, it is shown as
Completed.
To permanently stop an experiment
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Choose the name of the project that contains the experiment.
4. Choose the Experiments  tab.
5. Choose the button to the left of the name of the experiment.
6. Choose Actions, Cancel experiment or Actions, Mark as complete.
Adding code to your application
To work with CloudWatch Evidently, you add code to your application to assign a variation to each 
user session, and to send metrics to Evidently. You use the CloudWatch Evidently EvaluateFeature
operation to assign variations to user sessions, and you use the PutProjectEvents  operation to send 
events to Evidently to be used to calculate metrics for your launches or experiments.
When you create variations or custom metrics, the CloudWatch Evidently console provides samples of 
the code you need to add.
For an end-to-end example, see Tutorial: A/B testing with the Evidently sample application (p. 413).
403Amazon CloudWatch User Guide
Adding code to your application
Using EvaluateFeature
When feature variations are used in a launch or experiment, the application uses the  EvaluateFeature
operation to assign each user session a variation. The assignment of a variation to a user is an evaluation 
event . When you call this operation, you pass in the following:
•Feature name– Required. Evidently processes the evaluation according to the feature evaluation rules 
of the launch or experiment, and selects a variation for the entity.
•entityId– Required. Represents a unique user.
•evaluationContext– Optional. A JSON object representing additional information about a user. 
Evidently will use this value to match the user to a segment  of your audience during feature 
evaluations, if you have created segments. For more information, see Use segments to focus your 
audience (p. 392).
The following is an example of an evaluationContext  value that you can send to Evidently.
{ 
    "Browser": "Chrome", 
    "Location": { 
        "Country": "United States", 
        "Zipcode": 98007 
    }
}
Sticky evaluations
CloudWatch Evidently uses "sticky" evaluations. A single conﬁguration of entityId , feature, feature 
conﬁguration , and evaluationContext  always receives the same variation assignment. The only time 
this variation assignment changes is when an entity is added to an override or the experiment traﬃc is 
dialed up.
A feature conﬁguration includes the following:
•The feature variations
•The variation conﬁguration (percentages assigned to each variation) for a currently running 
experiment for this feature, if any.
•The variation conﬁguration for a currently running launch for this feature, if any. The variation 
conﬁguration includes the deﬁned segment overrides, if any.
If an experiment's traﬃc allocation is increased , any entityId  that was previously assigned to an 
experiment treatment group will continue to receive the same treatment. Any entityId  that was 
previously assigned to the control group, might be assigned to an experiment treatment group, 
according to the variation conﬁguration speciﬁed for the experiment.
If an experiment's traﬃc allocation is decreased , an entityId  might go from a treatment group to a 
control group, but it will not go into a diﬀerent treatment group.
Using PutProjectEvents
To code a custom metric for Evidently, you use the  PutProjectEvents operation. The following is a simple 
payload example.
{ 
    "events": [ 
        { 
            "timestamp": {{$timestamp}}, 
404Amazon CloudWatch User Guide
Project data storage
            "type": "aws.evidently.custom", 
            "data": "{\"details\": {\"pageLoadTime\": 800.0}, \"userDetails\": {\"userId\": 
 \"test-user\"}}" 
        } 
    ]
}
The entityIdKey  can just be an entityId  or you can rename it to anything else, such as userId . In 
the actual event, entityId  can be a username, a session ID, and so on.
"metricDefinition":{ 
    "name": "noFilter", 
    "entityIdKey": "userDetails.userId", //should be consistent with jsonValue in events 
 "data" fields 
    "valueKey": "details.pageLoadTime"
},
To ensure that events are associated with the correct launch or experiment, you must pass the 
same entityId  when you call both EvaluateFeature  and PutProjectEvents . Be sure to call
PutProjectEvents  after the EvaluateFeature  call, otherwise data is dropped and won't be used by 
CloudWatch Evidently.
The PutProjectEvents  operation does not require the feature name as an input parameter. This way, 
you can use a single event in multiple experiments. For example, suppose you call EvaluateFeature
with the entityId  set to userDetails.userId . If you have two or more experiments running, you 
can have a single event from that user's session emit metrics for each of those experiments. To do this, 
you call PutProjectEvents  once for each experiment, using that same entityId .
Timing
After your application calls EvaluateFeature , there is a one-hour time period where metric events 
from PutProjectEvents  are attributed based on that evaluation. If any more events occur after the 
one-hour period, they are not attributed.
However, if the same entityId  is used for a new EvaluateFeature  call during that initial call's 
one-hour window, the later EvaluateFeature  result is now used instead, and the one-hour timer is 
restarted. This can only happen in certain circumstances, such as when experiment traﬃc is dialed up 
between the two assignments, as explained in the previous Sticky evaluations section.
For an end-to-end example, see Tutorial: A/B testing with the Evidently sample application (p. 413).
Project data storage
Evidently collects two types of events:
•Evaluation events are related to which feature variation is assigned to a user session. Evidently uses 
these events to produce metrics and other experiment and launch data, which you can view in the 
Evidently console.
You can also choose to store these evaluation events in Amazon CloudWatch Logs or Amazon S3.
•Custom events are used to generate metrics from user actions such as clicks and checkouts. Evidently 
doesn't provide a method for you to store custom events. If you want to save them, you must modify 
your application code to send them to a storage option outside of Evidently.
Format of evaluation event logs
If you choose to store evaluation events in CloudWatch Logs or Amazon S3, each evaluation event is 
stored as a log event with the following format:
405Amazon CloudWatch User Guide
Project data storage
{ 
    "event_timestamp": 1642624900215, 
    "event_type": "evaluation", 
    "version": "1.0.0", 
    "project_arn": "arn:aws:evidently:us-east-1:123456789012:project/petfood", 
    "feature": "petfood-upsell-text", 
    "variation": "Variation1", 
    "entity_id": "7", 
    "entity_attributes": {}, 
    "evaluation_type": "EXPERIMENT_RULE_MATCH", 
    "treatment": "Variation1", 
    "experiment": "petfood-experiment-2"
}
Here are more details about the preceding evaluation event format:
•The timestamp is in UNIX time with milliseconds
•The variation is the name of the variation of the feature which was assigned to this user session.
•The entity ID is a string.
•Entity attributes are a hash of arbitrary values sent by the client. For example, if the entityId  is 
mapped to blue or green, then you can optionally send userIDs, session data, or whatever else that you 
want want from a correlation and data warehouse perspective.
IAM policy and encryption for evaluation event storage in 
Amazon S3
If you choose to use Amazon S3 to store evaluation events, you must add an IAM policy like the following 
to allow Evidently to publish logs to the Amazon S3 bucket. This is because Amazon S3 buckets and the 
objects they contain are private, and they don't allow access to other services by default.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Sid": "AWSLogDeliveryWrite", 
            "Effect": "Allow", 
            "Principal": {"Service": "delivery.logs.amazonaws.com"}, 
            "Action": "s3:PutObject", 
            "Resource": "arn:aws:s3:::bucket_name/ optional_folder /AWSLogs/ account_id /*", 
            "Condition": {"StringEquals": {"s3:x-amz-acl": "bucket-owner-full-control"}} 
        }, 
        { 
            "Sid": "AWSLogDeliveryCheck", 
            "Effect": "Allow", 
            "Principal": {"Service": "delivery.logs.amazonaws.com"}, 
            "Action": ["s3:GetBucketAcl", "s3:ListBucket"], 
            "Resource": "arn:aws:s3::: bucket_name " 
        } 
    ]
}
If you store Evidently data in Amazon S3, you can also choose to encrypt it with Server-Side Encryption 
with AWS Key Management Service Keys (SSE-KMS). For more information, see  Protecting data using 
server-side encryption.
If you use a customer managed key from AWS KMS, you must add the following to the IAM policy for 
your key. This allows Evidently to write to the bucket.
406Amazon CloudWatch User Guide
How Evidently calculates results
{ 
    "Sid": "AllowEvidentlyToUseCustomerManagedKey", 
    "Effect": "Allow", 
    "Principal": { 
        "Service": [ 
            "delivery.logs.amazonaws.com" 
        ] 
    }, 
   "Action": [ 
       "kms:Encrypt", 
       "kms:Decrypt", 
       "kms:ReEncrypt*", 
       "kms:GenerateDataKey*", 
       "kms:DescribeKey" 
    ], 
    "Resource": "*"
}
How Evidently calculates results
You can use Amazon CloudWatch Evidently A/B testing as a tool for data-driven decision making. In 
an A/B test, users are randomly assigned to either the control group (also called the default variation), 
or one of the treatment groups (also called the tested variations). For example, users in the control 
group might experience the website, service, or application in the same way that they did before the 
experiment started. Meanwhile, users in the treatment group might experience the change.
CloudWatch Evidently supports up to ﬁve diﬀerent variations in an experiment. Evidently randomly 
assigns traﬃc to these variations. This way, you can track business metrics (such as revenue) and 
performance metrics (such as latency) for each group. Evidently does the following:
•Compares the treatment with the control. (For example, compares whether revenue increases or 
decreases with a new checkout process.)
•Indicates whether the observed diﬀerence between the treatment and the control is signiﬁcant . For 
this, Evidently oﬀers two approaches: Frequentist signiﬁcance levels and Bayesian probabilities .
Why use Frequentist and Bayesian approaches?
Consider a case where the treatment has no eﬀect compared to the control, or a case where the 
treatment is identical to the control (an A/A test). You would still observe a small diﬀerence between 
the treatment and the control in the data. This is because the test participants consist of a ﬁnite sample 
of users, representing a small percentage of all users of the website, service, or application. Frequentist 
signiﬁcance levels and Bayesian probabilities provide insights into whether the observed diﬀerence is 
signiﬁcant or due to chance.
Evidently considers the following to determine whether the observed diﬀerence is signiﬁcant:
•How big the diﬀerence is
•How many samples are part of the test
•How the data is distributed
Frequentist analysis in Evidently
Evidently uses sequential testing, which avoids the usual problems of peeking , a common pitfall of 
frequentist statistics. Peeking is the practice of checking the results of an ongoing A/B test in order 
to stop it and make a decision based on the observed results. For more information about sequential 
407Amazon CloudWatch User Guide
How Evidently calculates results
testing, see  Time-uniform, nonparametric, nonasymptotic conﬁdence sequences by Howard et al. (Ann. 
Statist. 49 (2) 1055 - 1080, 2021).
Because Evidently's results are valid at any time (anytime-valid results), you can peek at results during 
the experiment and still draw sound conclusions. This can reduce some of the costs of experimentation, 
because you can stop an experiment before the scheduled time if the results already have signiﬁcance.
Evidently generates anytime-valid signiﬁcance levels and anytime-valid 95% conﬁdence intervals of the 
diﬀerence between the tested variation and the default variation in the target metric. The Result column 
in the experiment results indicates the tested variation performance, which can be one of the following:
•Inconclusive – The signiﬁcance level is less than 95%
•Better – The signiﬁcance level is 95% or higher and one of the following is true:
•The lower bound of the 95%-conﬁdence interval is higher than zero and the metric should increase
•The upper bound of the 95%-conﬁdence interval is lower than zero and the metric should decrease
•Worse – The signiﬁcance level is 95% or higher and one of the following is true:
•The upper bound of the 95%-conﬁdence interval is higher than zero and the metric should increase
•The lower bound of the 95%-conﬁdence interval is lower than zero and the metric should decrease
•Best  – The experiment has two or more tested variations in addition to the default variation, and the 
following conditions are met:
•The variation qualiﬁes for the Better  designation
•One of the following is true:
•The lower bound of the 95%-conﬁdence interval is higher than the upper bound of the 95%-
conﬁdence intervals of all the other variations and the metric should increase
•The upper bound of the 95%-conﬁdence interval is lower than the lower bound of the 95%-
conﬁdence intervals of all the other variations and the metric should decrease
Bayesian analysis in Evidently
With Bayesian analysis, you can calculate the probability that the mean in the tested variation is larger 
or smaller than the mean in the default variation. Evidently performs Bayesian inference for the mean of 
the target metric by using conjugate priors . With conjugate priors, Evidently can more eﬃciently infer the 
posterior distribution needed for the Bayesian analysis.
Evidently waits until the end date of the experiment to compute the results of the Bayesian analysis. The 
results page displays the following:
•probability of increase  – The probability that the mean of the metric in the tested variation is at least 
3% larger than the mean in the default variation
•probability of decrease  – The probability that the mean of the metric in the tested variation is at least 
3% smaller than the mean in the default variation
•probability of no change  – The probability that the mean of the metric in the tested variation lies 
within ±3% of the mean in the default variation
The Result column indicates the performance of the variation, and can be one of the following:
•Better – The probability of increase is at least 90% and the metric should increase, or the probability 
of decrease is at least 90% and the metric should decrease
•Worse – The probability of decrease is at least 90% and the metric should increase, or the probability 
of increase is at least 90% and the metric should decrease
408Amazon CloudWatch User Guide
View launch results in the dashboard
View launch results in the dashboard
You can see the progress and metric results of an experiment while it is ongoing and after it is 
completed.
To see the progress and results of a launch
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Choose the name of the project that contains the launch.
4. Choose the Launch  tab.
5. Choose the name of the launch.
6. To see the launch steps and the traﬃc allocations for each step, choose the Launch  tab.
7. To see the number of user sessions assigned to each variation over time, and to view the 
performance metrics for each variation in the launch, choose the Monitoring  tab.
This view also displays whether any launch alarms have gone into ALARM  state during the launch.
8. To see the variations, metrics, alarms, and tags for this launch, choose the Conﬁguration  tab.
View experiment results in the dashboard
You can see the statistical results of an experiment while it is ongoing and after it is completed. 
Experiment results are available up to 63 days after the start of the experiment. They are not available 
after that because of CloudWatch data retention policies.
No statistical results are displayed until each variation has at least 100 events.
Evidently performs an additional oﬄine p-value analysis at the end of the experiment. Oﬄine p-value 
analysis can detect statistical signiﬁcance in some cases where the anytime p-values used during the 
experiment do not ﬁnd statistical signiﬁcance.
For more information about how CloudWatch Evidently calculates experiment results, see How Evidently 
calculates results (p. 407).
To see the results of an experiment
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Choose the name of the project that contains the experiment.
4. Choose the Experiments  tab.
5. Choose the name of the experiment, and then choose the Results tab.
6. By Variation performance, there is a control where you can select which experiment statistics to 
display. If you select more than one statistic, Evidently displays a graph and table for each statistic.
Each graph and table displays the results of the experiment so far.
Each graph can display the following results. You can use the control at the right of the graph to 
determine which of the following items is displayed:
•The number of user session events recorded for each variation.
•The average value of the metric that is selected at the top of the graph, for each variation.
•The statistical signiﬁcance of the experiments. This compares the diﬀerence for the metric 
selected at the top of the graph with the default variation and each of the other variations.
409Amazon CloudWatch User Guide
How CloudWatch Evidently collects and stores data
•The 95% upper and lower conﬁdence bounds on the diﬀerence of the selected metric, between 
each of the variations and the default variation.
The table displays a row for each variation. For each variation that is not the default, Evidently 
displays whether it has received enough data to declare the results statistically signiﬁcant. It also 
shows whether the variation's improvement in the statistical value has reached a 95% conﬁdence 
level.
Finally, in the Result column, Evidently provides a recommendation about which variation performs 
best based on this statistic, or whether the results are inconclusive.
How CloudWatch Evidently collects and stores data
Amazon CloudWatch Evidently collects and stores data related to project conﬁgurations so that 
customers can run experiments and launches. The data includes the following:
•Metadata about projects, features, launches, and experiments
•Metric events
•Evaluation data
Resource metadata is stored in Amazon DynamoDB. The data is encrypted at rest by default, using AWS 
owned keys. These keys are a collection of AWS KMS keys that an AWS service owns and manages for use 
in multiple AWS accounts. Customers can’t view, manage, or audit the use of these keys. Customers are 
also not required to take action or change programs to protect the keys that encrypt their data.
For more information, see AWS owned keys in the AWS Key Management Service Developer Guide.
Evidently metric events and evaluation events are delivered directly to customer-owned locations.
Data in transit is automatically encrypted with HTTPS. This data will be delivered to customer-owned 
locations.
You can also choose to store evaluation events in Amazon Simple Storage Service or Amazon 
CloudWatch Logs. For more information about how you can secure your data in these services, see 
Enabling Amazon S3 default bucket encryption and  Encrypting log data in CloudWatch Logs using AWS 
KMS .
Retrieving data
You can retrieve your data using CloudWatch Evidently APIs. To retrieve project data, use GetProject or
ListProjects.
To retrieve feature data, use GetFeature or ListFeatures.
To retrieve launch data, use GetLaunch  or ListLaunches .
To retrieve experiment data, use GetExperiment , ListExperiments , or GetExperimentResults.
Modifying and deleting data
You can modify and delete your data using CloudWatch Evidently APIs. For project data, use
UpdateProject or DeleteProject.
For feature data, use UpdateFeature or DeleteFeature.
For launch data, use UpdateLaunch  or DeleteLaunch .
For experiment data, use UpdateExperiment  or DeleteExperiment .
410Amazon CloudWatch User Guide
Using service-linked roles
Using service-linked roles for Evidently
CloudWatch Evidently uses AWS Identity and Access Management (IAM) service-linked roles. A service-
linked role is a unique type of IAM role that is linked directly to Evidently. Service-linked roles are 
predeﬁned by Evidently and include all the permissions that the service requires to call other AWS 
services on your behalf.
A service-linked role makes setting up Evidently easier because you don’t have to manually add the 
necessary permissions. Evidently deﬁnes the permissions of its service-linked roles, and unless deﬁned 
otherwise, only Evidently can assume its roles. The deﬁned permissions include the trust policy and the 
permissions policy, and that permissions policy cannot be attached to any other IAM entity.
You can delete a service-linked role only after ﬁrst deleting its related resources. This protects your 
Evidently resources because you can't inadvertently remove permission to access the resources.
For information about other services that support service-linked roles, see AWS Services That Work with 
IAM and look for the services that have Yes in the Service-linked roles column. Choose a Yes with a link 
to view the service-linked role documentation for that service.
Service-linked role permissions for Evidently
Evidently uses the service-linked role named AWSServiceRoleForCloudWatchEvidently – Allows 
CloudWatch Evidently to manage associated AWS resourcees on behalf of the customer.
The AWSServiceRoleForCloudWatchEvidently service-linked role trusts the following services to assume 
the role:
•CloudWatch Evidently
The role permissions policy named AmazonCloudWatchEvidentlyServiceRolePolicy allows Evidently to 
complete the following actions on the speciﬁed resources:
•Actions: appconfig:StartDeployment , appconfig:StopDeployment ,
appconfig:ListDeployments , and appconfig:TagResource  on Evidently thick clients.
You must conﬁgure permissions to allow an IAM entity (such as a user, group, or role) to create, edit, or 
delete a service-linked role. For more information, see Service-linked role permissions in the IAM User 
Guide .
Creating a service-linked role for Evidently
You don't need to manually create a service-linked role. When you start using an Evidently thick client in 
the AWS Management Console, the AWS CLI, or the AWS API, Evidently creates the service-linked role for 
you.
If you delete this service-linked role, and then need to create it again, you can use the same process to 
recreate the role in your account. When you start using an Evidently thick client, Evidently creates the 
service-linked role for you again.
Editing a service-linked role for Evidently
Evidently does not allow you to edit the AWSServiceRoleForCloudWatchEvidently service-linked 
role. After you create a service-linked role, you cannot change the name of the role because various 
entities might reference the role. However, you can edit the description of the role using IAM. For more 
information, see Editing a service-linked role in the IAM User Guide .
411Amazon CloudWatch User Guide
CloudWatch Evidently quotas
Deleting a service-linked role for Evidently
If you no longer need to use a feature or service that requires a service-linked role, we recommend 
that you delete that role. That way you don’t have an unused entity that is not actively monitored 
or maintained. However, you must clean up the resources for your service-linked role before you can 
manually delete it. You must delete all Evidently projects that are using thick clients.
Note
If the Evidently service is using the role when you try to delete the resources, then the deletion 
might fail. If that happens, wait for a few minutes and try the operation again.
To delete Evidently resources used by AWSServiceRoleForCloudWatchEvidently
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. In the list of projects, select the check box next to the projects that used thick clients.
4. Choose Project actions, Delete project.
To manually delete the service-linked role using IAM
Use the IAM console, the AWS CLI, or the AWS API to delete the AWSServiceRoleForCloudWatchEvidently 
service-linked role. For more information, see Deleting a service-linked role in the IAM User Guide .
Supported regions for Evidently service-linked roles
Evidently supports using service-linked roles in all of the regions where the service is available. For more 
information, see AWS regions and endpoints.
CloudWatch Evidently quotas
CloudWatch Evidently has the following quotas.
Resource Default quota
Projects 50 per Region per account
You can request a quota increase.
Segments 500 per Region per account
You can request a quota increase.
Quotas per project •100 total features
•500 total launches
•50 running launches
•500 total experiments
•50 running experiments
You can request a quota increase for all of these quotas.
API quotas (all quotas are per Region) •PutProjectEvents: 1000 transactions per second (TPS) 
in US East (N. Virginia), US West (Oregon), and Europe 
(Ireland). 200 TPS in all other Regions.
412Amazon CloudWatch User Guide
Tutorial: A/B testing with the Evidently sample application
Resource Default quota
•EvaluateFeature: 1000 TPS in US East (N. Virginia), US 
West (Oregon), and Europe (Ireland). 200 TPS in all other 
Regions.
•BatchEvaluateFeature: 50 TPS
•Create, Read, Update, Delete (CRUD) APIs: 10 TPS 
combined across all CRUD APIs
You can request a quota increase for all of these quotas.
Tutorial: A/B testing with the Evidently sample 
application
This section provides a tutorial for using Amazon CloudWatch Evidently for A/B testing. This tutorial the 
Evidently sample application, which is a simple react application. The sample app will be conﬁgured to 
either display a showDiscount  feature or not. When the feature is shown to a user, the price displayed 
on the shopping website it shown at a 20% discount.
In addition to showing the discount to some users and not to others, in this tutorial you set up Evidently 
to collect page load time metrics from both variations.
Step 1: Download the sample application
Start by downloading the Evidently sample application.
To download the sample application
1. Download the sample application from the following Amazon S3 bucket:
https://evidently-sample-application.s3.us-west-2.amazonaws.com/evidently-sample-
shopping-app.zip
2. Unzip the package.
Step 2: Add the Evidently endpoint and set up credentials
Next, add the Region and endpoint for Evidently to the config.js  ﬁle in the src directory in the 
sample app package, as in the following example:
evidently: {  
    REGION: "us-west-2", 
    ENDPOINT: "https://evidently.us-west-2.amazonaws.com (https://evidently.us-
west-2.amazonaws.com/)",
},
You also must make sure that the application has permission to call CloudWatch Evidently.
To grant the sample app permissions to call Evidently
1. Federate to your AWS account.
2. Create an IAM user and attach the AmazonCloudWatchEvidentlyFullAccess policy to this user.
413Amazon CloudWatch User Guide
Tutorial: A/B testing with the Evidently sample application
3. Make a note of the IAM user's access key id and secret access key, because you will need them in the 
next step.
4. In the same config.js  ﬁle that you modiﬁed earlier in this section, enter the values of the access 
key ID and the secrect access key, as in the following example:
credential: { 
   accessKeyId: " Access key ID ", 
   secretAccessKey: " Secret key "
}
Important
We use this step to make the sample app as simple as possible for you to try out. We 
do not recommend that you put your IAM user credential into your actual production 
application. Instead, we recommend that you use Amazon Cognito for authentication. For 
more information, see  Integrating Amazon Cognito with web and mobile apps.
Step 3: Set up code for the feature evaluation
When you use CloudWatch Evidently to evaluate a feature, you must use the EvaluateFeature operation 
to randomly select a feature variation for each user session. This operation assigns user sessions to each 
variation of the feature, according to the percentages that you speciﬁed in the experiment.
To set up the feature evaluation code for the bookstore demo app
1. Add the client builder in the src/App.jsx  ﬁle so that the sample app can call Evidently.
import Evidently from 'aws-sdk/clients/evidently';
import config from './config';
const defaultClientBuilder = ( 
    endpoint, 
    region,
) => { 
    const credentials = { 
        accessKeyId: config.credential.accessKeyId, 
        secretAccessKey: config.credential.secretAccessKey 
    } 
    return new Evidently({ 
        endpoint, 
        region, 
        credentials, 
    });
};
2. Add the following to the const App  code section to initiate the client.
  if (client == null) { 
      client = defaultClientBuilder( 
        config.evidently.ENDPOINT, 
        config.evidently.REGION, 
      );
3. Construct evaluateFeatureRequest  by adding the following code. This code pre-ﬁlls the project 
name and feature name that we recommend later in this tutorial. You can substitute your own 
project and feature names, as long as you also specify those project and feature names in the 
Evidently console.
const evaluateFeatureRequest = { 
414Amazon CloudWatch User Guide
Tutorial: A/B testing with the Evidently sample application
              entityId: id, 
              // Input Your feature name 
              feature: 'showDiscount', 
              // Input Your project name' 
              project: 'EvidentlySampleApp', 
            };
4. Add the code to call Evidently for feature evaluation. When the request is sent, Evidently randomly 
assigns the user session to either see the showDiscount  feature or not.
client.evaluateFeature(evaluateFeatureRequest).promise().then(res => { 
    if(res.value?.boolValue !== undefined) { 
        setShowDiscount(res.value.boolValue); 
    } 
    getPageLoadTime() 
 })
Step 4: Set up code for the experiment metrics
For the custom metric, use Evidently's PutProjectEvents  API to send metric results to Evidently. The 
following examples show how to set up the custom metric and send experiment data to Evidently.
Add the following function to calculate the page load time and use PutProjectEvents  to send the 
metric values to Evidently. Add the following function to into Home.tsx  and call this function within the
EvaluateFeature  API:
const getPageLoadTime = () => { 
    const timeSpent = (new Date().getTime() - startTime.getTime()) * 1.000001; 
    const pageLoadTimeData = `{ 
      "details": { 
        "pageLoadTime": ${timeSpent} 
      }, 
      "UserDetails": { "userId": "${id}", "sessionId": "${id}"} 
    }`; 
    const putProjectEventsRequest = { 
      project: 'EvidentlySampleApp', 
      events: [ 
        { 
          timestamp: new Date(), 
          type: 'aws.evidently.custom', 
          data: JSON.parse(pageLoadTimeData) 
        }, 
      ], 
    }; 
    client.putProjectEvents(putProjectEventsRequest).promise(); 
  }
Here is what the App.js ﬁle should look like after all the editing that you have done since downloading 
it.
import React, { useEffect, useState } from "react";
import { BrowserRouter as Router, Switch } from "react-router-dom";
import AuthProvider from "contexts/auth";
import CommonProvider from "contexts/common";
import ProductsProvider from "contexts/products";
import CartProvider from "contexts/cart";
import CheckoutProvider from "contexts/checkout";
import RouteWrapper from "layouts/RouteWrapper";
import AuthLayout from "layouts/AuthLayout";
415Amazon CloudWatch User Guide
Tutorial: A/B testing with the Evidently sample application
import CommonLayout from "layouts/CommonLayout";
import AuthPage from "pages/auth";
import HomePage from "pages/home";
import CheckoutPage from "pages/checkout";
import "assets/scss/style.scss";
import { Spinner } from 'react-bootstrap';
import Evidently from 'aws-sdk/clients/evidently';
import config from './config';
const defaultClientBuilder = ( 
  endpoint, 
  region,
) => { 
  const credentials = { 
    accessKeyId: config.credential.accessKeyId, 
    secretAccessKey: config.credential.secretAccessKey 
  } 
  return new Evidently({ 
    endpoint, 
    region, 
    credentials, 
  });
};
const App = () => { 
  const [isLoading, setIsLoading] = useState(true); 
  const [startTime, setStartTime] = useState(new Date()); 
  const [showDiscount, setShowDiscount] = useState(false); 
  let client = null; 
  let id = null; 
  useEffect(() => { 
    id = new Date().getTime().toString(); 
    setStartTime(new Date()); 
    if (client == null) { 
      client = defaultClientBuilder( 
        config.evidently.ENDPOINT, 
        config.evidently.REGION, 
      ); 
    } 
    const evaluateFeatureRequest = { 
      entityId: id, 
      // Input Your feature name 
      feature: 'showDiscount', 
      // Input Your project name' 
      project: 'EvidentlySampleApp', 
    }; 
    // Launch 
    client.evaluateFeature(evaluateFeatureRequest).promise().then(res => { 
      if(res.value?.boolValue !== undefined) { 
        setShowDiscount(res.value.boolValue); 
      } 
    }); 
    // Experiment 
    client.evaluateFeature(evaluateFeatureRequest).promise().then(res => { 
      if(res.value?.boolValue !== undefined) { 
        setShowDiscount(res.value.boolValue); 
      } 
      getPageLoadTime() 
    }) 
    setIsLoading(false); 
  },[]); 
416Amazon CloudWatch User Guide
Tutorial: A/B testing with the Evidently sample application
  const getPageLoadTime = () => { 
    const timeSpent = (new Date().getTime() - startTime.getTime()) * 1.000001; 
    const pageLoadTimeData = `{ 
      "details": { 
        "pageLoadTime": ${timeSpent} 
      }, 
      "UserDetails": { "userId": "${id}", "sessionId": "${id}"} 
    }`; 
    const putProjectEventsRequest = { 
      project: 'EvidentlySampleApp', 
      events: [ 
        { 
          timestamp: new Date(), 
          type: 'aws.evidently.custom', 
          data: JSON.parse(pageLoadTimeData) 
        }, 
      ], 
    }; 
    client.putProjectEvents(putProjectEventsRequest).promise(); 
  } 
  return ( 
    !isLoading? ( 
    <AuthProvider> 
      <CommonProvider> 
        <ProductsProvider> 
          <CartProvider> 
            <CheckoutProvider> 
              <Router> 
                <Switch> 
                  <RouteWrapper 
                    path="/" 
                    exact 
                    component={() => <HomePage showDiscount={showDiscount}/>} 
                    layout={CommonLayout} 
                  /> 
                  <RouteWrapper 
                    path="/checkout" 
                    component={CheckoutPage} 
                    layout={CommonLayout} 
                  /> 
                  <RouteWrapper 
                    path="/auth" 
                    component={AuthPage} 
                    layout={AuthLayout} 
                  /> 
                </Switch> 
              </Router> 
            </CheckoutProvider> 
          </CartProvider> 
        </ProductsProvider> 
      </CommonProvider> 
    </AuthProvider> ) : ( 
      <Spinner animation="border" /> 
    ) 
  );
};
export default App;
Each time a user visits the sample app, a custom metric is sent to Evidently for analysis. Evidently 
analyzes each metric and displays results in real time on the Evidently dashboard. The following example 
shows a metric payload:
417Amazon CloudWatch User Guide
Tutorial: A/B testing with the Evidently sample application
[ {"timestamp": 1637368646.468, "type": "aws.evidently.custom", "data": "{\"details\":
{\"pageLoadTime\":2058.002058},\"userDetails\":{\"userId\":\"1637368644430\",\"sessionId\":
\"1637368644430\"}}" } ]
Step 5: Create the project, feature, and experiment
Next, you create the project, feature, and experiment in the CloudWatch Evidently console.
To create the project, feature, and experiment for this tutorial
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Choose Create project and ﬁll out the ﬁelds. You must use EvidentlySampleApp  for the 
project name for the sample to work correctly. For Evaluation event storage, choose Don't store 
Evaluation events.
After ﬁlling out the ﬁelds, choose Create Project.
For more details, see Create a new project (p. 386).
4. After the project is created, create a feature in that project. Name the feature showDiscount . In 
this feature, create two variations of the Boolean type. Name the ﬁrst variation disable  with a 
value of False and name the second variation enable  with a value of True .
For more information about creating a feature, see Add a feature to a project (p. 390).
5. After you have ﬁnished creating the feature, create an experiment in the project. Name the 
experiment pageLoadTime .
This experiment will use a custom metric called pageLoadTime  that measures the page load time of 
the page being tested. Custom metrics for experiments are created using Amazon EventBridge. For 
more information about EventBridge, see  What Is Amazon EventBridge?.
To create that custom metric, do the following when you create the experiment:
•Under Metrics , for Metric source, choose Custom metrics .
•For Metric name , enter pageLoadTime .
•For Goal  choose Decrease . This indicates that we want a lower value of this metric to indicate the 
best variation of the feature.
•For Metric rule, enter the following:
•For Entity ID, enter UserDetails.userId .
•For Value key, enter details.pageLoadTime .
•For Units , enter ms.
•Choose Add metric .
For Audiences, select 100%  so that all users are entered in the experiment. Set up the traﬃc split 
between the variations to be 50% each.
Then, choose Create experiment  to create the experiment. After you create it, it does not start until 
you tell Evidently to start it.
Step 6: Start the experiment and test CloudWatch Evidently
The ﬁnal steps are starting the experiment and starting the sample app.
418Amazon CloudWatch User Guide
Tutorial: A/B testing with the Evidently sample application
To start the tutorial experiment
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , Evidently .
3. Choose the EvidentlySampleApp project.
4. Choose the Experiments  tab.
5. Choose the button next to pageLoadTime  and choose Actions, Start experiment.
6. Choose a time for the experiment to end.
7. Choose Start experiment.
The experiment starts immediately.
Next, start the Evidently sample app with the following command:
npm install -f && npm start
Once the app has started, you will be assigned to one of the two feature variations being tested. One 
variation displays "20% discount" and the other doesn't. Keep refreshing the page to see the diﬀerent 
variations.
Note
Evidently has sticky evaluations. Feature evaluations are deterministic, meaning for the same
entityId  and feature, a user will always receive the same variation assignment. The only time 
variation assignments change is when an entity is added to an override or experiment traﬃc is 
dialed up.
However, to make the use of the sample app tutorial easy for you, Evidently reassigns the 
sample app feature evaluation every time that you refresh the page, so that you can experience 
both variations without having to add overrides.
Troubleshooting
We recommend that you use npm version 6.14.14. If you see any errors about building or starting the 
sample app and you are using a diﬀerent version of npm, do the following.
To install npm version 6.14.14
1. Use a browser to connect to https://nodejs.org/download/release/v14.17.5/.
2. Download node-v14.17.5.pkg and run this pkg to install npm.
If you see a webpack not found  error, navigate to the evidently-sample-shopping-app
folder and try the following:
a. Delete package-lock.json
b. Delete yarn-lock.json
c. Delete node_modules
d. Delete the webpack dependency from package.json
e. Run the following:
npm install -f && npm
419Amazon CloudWatch User Guide
Use CloudWatch RUM
Use CloudWatch RUM
With CloudWatch RUM, you can perform real user monitoring to collect and view client-side data about 
your web application performance from actual user sessions in near real time. The data that you can 
visualize and analyze includes page load times, client-side errors, and user behavior. When you view this 
data, you can see it all aggregated together and also see breakdowns by the browsers and devices that 
your customers use.
You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch 
RUM helps you visualize anomalies in your application performance and ﬁnd relevant debugging data 
such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of 
end user impact including the number of users, geolocations, and browsers used.
End user data that you collect for CloudWatch RUM is retained for 30 days and then automatically 
deleted. If you want to keep the RUM events for a longer time, you can choose to have the app monitor 
send copies of the events to CloudWatch Logs in your account. Then, you can adjust the retention period 
for that log group.
To use RUM, you create an app monitor  and provide some information. RUM generates a JavaScript 
snippet for you to paste into your application. The snippet pulls in the RUM web client code. The RUM 
web client captures data from a percentage of your application's user sessions, which is displayed in a 
pre-built dashboard. You can specify what percentage of user sessions to gather data from.
The RUM web client is open source. For more information, see CloudWatch RUM web client.
Performance considerations
This section discusses the performance considerations of using CloudWatch RUM.
•Load performance impact— The CloudWatch RUM web client can be installed in your web application 
as a JavaScript module, or loaded into your web application asynchronously from a content delivery 
network (CDN). It does not block the application’s load process. CloudWatch RUM is designed for there 
to be no perceptible impact to the application’s load time.
•Runtime impact— The RUM web client performs processing to record and dispatch RUM data to 
the CloudWatch RUM service. Because events are infrequent and the amount of processing is small, 
CloudWatch RUM is designed for there to be no detectable impact to the application’s performance.
•Network impact— The RUM web client periodically sends data to the CloudWatch RUM service. Data 
is dispatched at regular intervals while the application is running, and also immediately before the 
browser unloads the application. Data sent immediately before the browser unloads the application 
are sent as beacons, which, are designed to have no detectable impact on the application’s unload 
time.
RUM Pricing
With CloudWatch RUM, you incur charges for every RUM event that CloudWatch RUM receives. Each data 
item collected using the RUM web client is considered a RUM event. Examples of RUM events include a 
page view, a JavaScript error, and an HTTP error. You have options for which types of events are collected 
by each app monitor. You can activate or deactivate options to collect performance telemetry events, 
JavaScript errors, HTTP errors, and X-Ray traces. For more information about choosing these options, 
see Step 2: Create an app monitor (p. 424) and Information collected by the CloudWatch RUM web 
client  (p. 445). For more information about pricing, see Amazon CloudWatch Pricing.
Region availability
CloudWatch RUM is currently available in the following Regions:
•US East (N. Virginia)
420Amazon CloudWatch User Guide
IAM policies to use CloudWatch RUM
•US East (Ohio)
•US West (Oregon)
•Europe (Frankfurt)
•Europe (Stockholm)
•Europe (Ireland)
•Europe (London)
•Asia Paciﬁc (Tokyo)
•Asia Paciﬁc (Singapore)
•Asia Paciﬁc (Sydney)
Topics
•IAM policies to use CloudWatch RUM (p. 421)
•Set up an application to use CloudWatch RUM (p. 422)
•Conﬁguring the CloudWatch RUM web client (p. 428)
•Regionalization (p. 429)
•Use page groups (p. 430)
•Specify custom metadata (p. 430)
•Send custom events (p. 434)
•Viewing the CloudWatch RUM dashboard (p. 436)
•CloudWatch metrics that you can collect with CloudWatch RUM (p. 438)
•Data protection and data privacy with CloudWatch RUM (p. 444)
•Information collected by the CloudWatch RUM web client (p. 445)
•Manage your applications that use CloudWatch RUM (p. 461)
•CloudWatch RUM quotas (p. 462)
•Troubleshooting CloudWatch RUM (p. 463)
IAM policies to use CloudWatch RUM
To be able to fully manage CloudWatch RUM, you must be signed in as an IAM user or role that has 
the AmazonCloudWatchRUMFullAccess IAM policy. Additionally, you may need other policies or 
permissions:
•To create an app monitor that creates a new Amazon Cognito identity pool for authorization, you need 
to have the Admin  IAM role or the AdministratorAccess IAM policy.
•To create an app monitor that sends data to CloudWatch Logs, you must be logged on to an IAM role 
or policy that has the following permission:
{ 
    "Effect": "Allow", 
    "Action": [ 
        "logs:PutResourcePolicy" 
    ], 
    "Resource": [ 
        "*" 
    ]
}
Other users who need to view CloudWatch RUM data but don't need to create CloudWatch RUM 
resources, can be granted the AmazonCloudWatchRUMReadOnlyAccess policy.
421Amazon CloudWatch User Guide
Set up an application to use CloudWatch RUM
Set up an application to use CloudWatch RUM
Use the steps in these sections to set up your application to begin using CloudWatch RUM to collect 
performance data from real user sessions.
Topics
•Step 1: Authorize your application to send data to AWS (p. 422)
•Step 2: Create an app monitor (p. 424)
•(Optional) Step 3: Manually modify the code snippet to conﬁgure the CloudWatch RUM web 
client  (p. 425)
•Step 4: Insert the code snippet into your application (p. 427)
•Step 5: Test your app monitor setup by generating user events (p. 428)
Step 1: Authorize your application to send data to AWS
To use CloudWatch RUM, your application must have authorization.
You have three options to set up authorization:
•Let CloudWatch RUM create a new Amazon Cognito identity pool for the application. This method 
requires the least eﬀort to set up. It's the default option.
The identity pool will contain an unauthenticated identity. This allows the CloudWatch RUM web client 
to send data to CloudWatch RUM without authenticating the user of the application.
The Amazon Cognito identity pool has an attached IAM role. The Amazon Cognito unauthenticated 
identity allows the web client to assume the IAM role that is authorized to send data to CloudWatch 
RUM.
•Use an existing Amazon Cognito identity pool. In this case, you must also modify the IAM role that is 
attached to the identity pool.
•Use authentication from an existing identity provider that you have already set up. In this case, you 
must get credentials from the identity provider and your application must forward these credentials to 
the RUM web client.
The following sections include more details about these options.
CloudWatch RUM creates a new Amazon Cognito identity pool
This is the simplest option to set up, and if you choose this no further setup steps are required. You 
must have administrative permissions to use this option. For more information, see IAM policies to use 
CloudWatch RUM (p. 421).
With this option, CloudWatch RUM creates the following resources:
•A new Amazon Cognito identity pool
•An unauthenticated Amazon Cognito identity. This allows the RUM web client to assume an IAM role 
without authenticating the user of the application.
•The IAM role that the RUM web client will assume. The IAM policy attached to this role allows it to use 
the PutRumEvents  API with the app monitor resource. In other words, it allows the RUM web client to 
send data to RUM.
The RUM web client uses the Amazon Cognito identity to obtain AWS credentials. The AWS credentials 
are associated with the IAM role. The IAM role is authorized to use PutRumEvents  with the AppMonitor 
resource.
422Amazon CloudWatch User Guide
Set up an application to use CloudWatch RUM
Amazon Cognito sends the necessary security token to enable your application to send data to 
CloudWatch RUM. The JavaScript code snippet that CloudWatch RUM generates includes the following 
lines to enable authentication.
   { 
    identityPoolId: [identity pool id],  // e.g., 'us-west-2:EXAMPLE4a-66f6-4114-902a-
EXAMPLEbad7' 
    guestRoleArn: [iam role arn]         // e.g., 'arn:aws:iam::123456789012:role/Nexus-
Monitor-us-east-1-123456789012_Unauth_5889316876161' 
   }
);
Use an existing Amazon Cognito identity pool
If you choose to use an existing Amazon Cognito identity pool, you specify the identity pool when you 
add the application to CloudWatch RUM. The pool must support enabling access to unauthenticated 
identities. You also must add the following permissions to the IAM policy that is attached to the IAM role 
that is associated with this identity pool.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": "rum:PutRumEvents", 
            "Resource": "arn:aws:rum:[ region]:[accountid ]:appmonitor/[ app monitor name ]" 
        } 
    ]
}
Amazon Cognito will then send the necessary security token to enable your application to access 
CloudWatch RUM.
Third-party provider
If you choose to use private authentication from a third-party provider, you must get credentials from 
the identity provider and forward them to AWS. The best way to do this is by using a security token 
vendor . You can use any security token vendor, including Amazon Cognito with AWS Security Token 
Service. For more information about AWS STS, see Welcome to the AWS Security Token Service API 
Reference.
If you want to use Amazon Cognito as the token vendor in this scenario, you can conﬁgure Amazon 
Cognito to work with an authentication provider. For more information, see Getting Started with Amazon 
Cognito Identity Pools (Federated Identities).
After you conﬁgure Amazon Cognito to work with your identity provider, you also need to do the 
following:
•Create an IAM role with the following permissions. Your application will use this role to access AWS.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": "rum:PutRumEvents", 
            "Resource": "arn:aws:rum:[ region]:[accountID ]:appmonitor/[ app monitor name ]" 
        } 
423Amazon CloudWatch User Guide
Set up an application to use CloudWatch RUM
    ]
}
•Add the following to your application to have it pass the credentials from your provider to CloudWatch 
RUM. Insert the line so that it runs after a user has signed in to your application and the application 
has received the credentials to use to access AWS.
cwr('setAwsCredentials', {/* Credentials or CredentialProvider */});
For more information about credential providers in the AWS JavaScript SDK, see Setting credentials in a 
web browser in the v3 developer guide for SDK for JavaScript, Setting credentials in a web browser in the 
v2 developer guide for SDK for JavaScript, , and @aws-sdk/credential-providers.
You can also use the SDK for the CloudWatch RUM web client to conﬁgure the web client authentication 
methods. For more information about the web client SDK, see CloudWatch RUM web client SDK.
Step 2: Create an app monitor
To start using CloudWatch RUM with your application, you create an app monitor . When the app monitor 
is created, RUM generates a JavaScript snippet for you to paste into your application. The snippet pulls in 
the RUM web client code. The RUM web client captures data from a percentage of your application's user 
sessions and sends it to RUM.
To create an app monitor
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , RUM .
3. Choose Add app monitor .
4. Enter the information and settings for your application:
•For App monitor name , enter a name to be used to identify this app monitor within the 
CloudWatch RUM console.
•For Application domain , enter the top-level domain name where your application has 
administrative authority. This must be in a URL domain format.
Choose Include sub domains  to have the app monitor also collect data from all subdomains 
under the top-level domain.
5. For Conﬁgure RUM data collection, specify whether you want the app monitor to collect each of 
the following:
•Performance telemetry – Collects information about page load and resource load times
•JavaScript errors – Collects information about unhandled JavaScript errors raised by your 
application
•HTTP errors – Collects information about HTTP errors thrown by your application
Selecting these options provides more information about your application, but also generates more 
CloudWatch RUM events and thus incurs more charges.
If you don't select any of these, the app monitor still collects session start events and page IDs so 
that you can see how many users are using your application, including breakdowns by operating 
system type and version, browser type and version, device type, and location.
6. Select Check this option to allow the CloudWatch RUM Web Client to set cookies if you want to 
be able to collect user IDs and session IDs from sampled user sessions. The user IDs are randomly 
generated by RUM. For more information, see CloudWatch RUM web client cookies (p. 445).
424Amazon CloudWatch User Guide
Set up an application to use CloudWatch RUM
7. For Session samples, enter the percentage of user sessions that will be used to gather RUM data. 
The default is 100%. Reducing this number gives you less data, but reduces your charges. For more 
information about RUM pricing, see RUM pricing  (p. 420).
8. End user data that you collect for CloudWatch RUM is retained for 30 days and then deleted. If you 
want to keep copies of RUM events in CloudWatch Logs and conﬁgure how long to retain these 
copies, choose Check this option to store your application telemetry data in your CloudWatch 
Logs account under Data storage . By default, the CloudWatch Logs log group retains the data for 
30 days. You can adjust the retention period in the CloudWatch Logs console.
9. For Authorization , specify whether to use a new or existing Amazon Cognito identity pool or use 
a diﬀerent identity provider. Creating a new identity pool is the simplest option that requires no 
other setup steps. For more information, see Step 1: Authorize your application to send data to 
AWS (p. 422).
Creating a new Amazon Cognito identity pool requires administrative permissions. For more 
information, see IAM policies to use CloudWatch RUM (p. 421).
10. (Optional) By default, when you add the RUM code snippet to your application, the web client injects 
the JavaScript tag to monitor usage into the HTML code of all pages of your application. To change 
this, choose Conﬁgure pages  and then choose either Include only these pages  or Exclude these 
pages . Then, specify the pages to include or exclude. To specify a page to include or exclude, enter 
its complete URLs. To specify additional pages, choose Add URL .
11. To enable AWS X-Ray tracing of the user sessions that are sampled by the app monitor, choose
Active tracing and select Trace my service with AWS X-Ray.
If you select this, XMLHttpRequest  and fetch requests made during user sessions sampled by the 
app monitor are traced. You can then see traces and segments from these user sessions in the RUM 
dashboard, the CloudWatch ServiceLens console, and the X-Ray console.
By making additional conﬁguration changes to the CloudWatch RUM web client, you can add 
an X-Ray trace header to HTTP requests to enable end-to-end tracing of user sessions through 
to downstream AWS managed services. For more information, see Enabling X-Ray end-to-end 
tracing  (p. 426).
12. (Optional) To add tags to the app monitor, choose Tags, Add new tag .
Then, for Key, enter a name for the tag. You can add an optional value for the tag in Value.
To add another tag, choose Add new tag  again.
For more information, see Tagging AWS Resources.
13. Choose Add app monitor .
14. In the Sample code section, you can copy the code snippet to use to add to your application. We 
recommend that you choose JavaScript or TypeScript and use NPM to install the CloudWatch RUM 
web client as a JavaScript module.
Alternatively, you can choose HTML  to use a content delivery network (CDN) to install the 
CloudWatch RUM web client. The disadvantage of using a CDN is that the web client is often blocked 
by ad blockers.
15. Choose Copy or Download, and then choose Done .
(Optional) Step 3: Manually modify the code snippet to 
conﬁgure the CloudWatch RUM web client
You can modify the code snippet before inserting it into your application, to activate or deactivate 
several options. For more information, see the  CloudWatch RUM web client documentation.
425Amazon CloudWatch User Guide
Set up an application to use CloudWatch RUM
There are three conﬁguration options that you should deﬁnitely be aware of, as discussed in these 
sections.
Preventing the collection of resource URLs that might contain personal 
information
By default, the CloudWatch RUM web client is conﬁgured to record the URLs of resources downloaded 
by the application. These resources include HTML ﬁles, images, CSS ﬁles, JavaScript ﬁles, and so on. For 
some applications, URLs may contain personally identiﬁable information (PII).
If this is the case for your application, we strongly recommend that you disable the collection of resource 
URLs by setting recordResourceUrl: false  in the code snippet conﬁguration, before inserting it 
into your application.
Manually recording page views
By default, the web client records page views when the page ﬁrst loads and when the browser's history 
API is called. The default page ID is window.location.pathname . However, in some cases you might 
want to override this behavior and instrument the application to record page views programmatically. 
Doing so gives you control over the page ID and when it is recorded. For example, consider a web 
application that has a URI with a variable identiﬁer, such as /entity/123  or /entity/456 . By default, 
CloudWatch RUM generates a page view event for each URI with a distinct page ID matching the 
pathname, but you might want to group them by the same page ID instead. To accomplish this, disable 
the web client's page view automation by using the disableAutoPageView  conﬁguration, and use the
recordPageView  command to set the desired page ID. For more information, see  Application-speciﬁc 
Conﬁgurations  on GitHub.
Embedded script example:
cwr('recordPageView', { pageId: 'entityPageId' });
JavaScript module example:
awsRum.recordPageView({ pageId: 'entityPageId' });
Enabling X-Ray end-to-end tracing
When you create the app monitor, selecting Trace my service with AWS X-Ray enables the tracing of
XMLHttpRequest  and fetch requests made during user sessions that are sampled by the app monitor. 
You can then see traces from these HTTP requests in the CloudWatch RUM dashboard, the CloudWatch 
ServiceLens console, and the X-Ray console.
By default, these client-side traces are not connected to downstream server-side traces. To connect 
client-side traces to server-side traces and enable end-to-end tracing, set the addXRayTraceIdHeader
option to true in the web client. This causes the CloudWatch RUM web client to add an X-Ray trace 
header to HTTP requests.
The following code block shows an example of adding client-side traces. Some conﬁguration options are 
omitted from this sample for readibility.
<script> 
    (function(n,i,v,r,s,c,u,x,z){...})( 
        'cwr', 
        '00000000-0000-0000-0000-000000000000', 
        '1.0.0', 
        'us-west-2', 
426Amazon CloudWatch User Guide
Set up an application to use CloudWatch RUM
        'https://client.rum.us-east-1.amazonaws.com/1.0.2/cwr.js', 
        { 
            enableXRay: true, 
            telemetries: [  
                'errors',  
                'performance', 
                [ 'http', { addXRayTraceIdHeader: true } ] 
            ] 
        } 
    );
</script>
Warning
Conﬁguring the CloudWatch RUM web client to add an X-Ray trace header to HTTP requests 
can cause cross-origin resource sharing (CORS) to fail or invalidate the request's signature if 
the request is signed with SigV4. For more information, see the  CloudWatch RUM web client 
documentation . We strongly recommend that you test your application before adding a client-
side X-Ray trace header in a production environment.
For more information, see the  CloudWatch RUM web client documentation
Step 4: Insert the code snippet into your application
Next, you insert the code snippet that you created in the previous section into your application.
Warning
The web client, downloaded and conﬁgured by the code snippet, uses cookies (or similar 
technologies) to help you collect end user data. Before you insert the code snippet, see Filtering 
by metadata attributes in the console (p. 444).
If you don't have the code snippet that was previously generated, you can ﬁnd it by following the 
directions in How do I ﬁnd a code snippet that I've already generated? (p. 461).
To insert the CloudWatch RUM code snippet into your application
1. Insert the code snippet that you copied or downloaded in the previous section inside the <head>
element of your application. Insert it before the <body> element or any other <script>  tags.
The following is an example of a generated code snippet:
<script>
(function (n, i, v, r, s, c, x, z) { 
    x = window.AwsRumClient = {q: [], n: n, i: i, v: v, r: r, c: c}; 
    window[n] = function (c, p) { 
        x.q.push({c: c, p: p}); 
    }; 
    z = document.createElement('script'); 
    z.async = true; 
    z.src = s; 
    document.head.insertBefore(z, document.getElementsByTagName('script')[0]);
})('cwr', 
    '194a1c89-87d8-41a3-9d1b-5c5cd3dafbd0', 
    '1.0.0', 
    'us-east-2', 
    'https://client.rum.us-east-1.amazonaws.com/1.0.2/cwr.js', 
    { 
        sessionSampleRate: 1, 
        guestRoleArn: "arn:aws:iam::123456789012:role/RUM-Monitor-us-
east-2-123456789012-5934510917361-Unauth", 
        identityPoolId: "us-east-2:c90ef0ac-e3b8-4d1a-b313-7e73cfd21443", 
        endpoint: "https://dataplane.rum.us-east-2.amazonaws.com", 
        telemetries: ["performance", "errors", "http"], 
427Amazon CloudWatch User Guide
Conﬁguring the CloudWatch RUM web client
        allowCookies: true, 
        enableXRay: false 
    });
</script>
2. If your application is a multipage web application, you must repeat step 1 for each HTML page that 
you want included in the data collection.
Step 5: Test your app monitor setup by generating user events
After you have inserted the code snippet and your updated application is running, you can test it by 
manually generating user events. To test this, we recommend that you do the following. This testing 
incurs standard CloudWatch RUM charges.
•Navigate between pages in your web application.
•Create multiple user sessions, using diﬀerent browsers and devices.
•Make requests.
•Cause JavaScript errors.
After you have generated some events, view them in the CloudWatch RUM dashboard. For more 
information, see Viewing the CloudWatch RUM dashboard (p. 436).
Data from user sessions might take up to 15 minutes to appear in the dashboard.
If you don't see data 15 minutes after you generated events in the application, see Troubleshooting 
CloudWatch RUM (p. 463).
Conﬁguring the CloudWatch RUM web client
Your applications can use one of the code snippets generated by CloudWatch RUM to install the 
CloudWatch RUM web client. The generated snippets support two installation methods: as a JavaScript 
module through NPM, or from a content delivery network (CDN). For best performance, we recommend 
using the NPM installation method. For more information about using this method, see  Installing as a 
JavaScript Module.
If you use the CDN installation option, ad blockers might block the default CDN provided by CloudWatch 
RUM. This disables application monitoring for users who have ad blockers installed. Because of this, we 
recommend that you use the default CDN only for initial onboarding with CloudWatch RUM. For more 
information about the ways to mitigate this issue, see  Instrument the application .
The code snippet sits in the <head> tag of an HTML ﬁle and installs the web client by downloading 
the web client, and then conﬁguring the web client for the application it is monitoring. The snippet is a 
self-executing function which looks similar to the following. In this example, the body of the snippet's 
function has been omitted for readability.
<script>
(function(n,i,v,r,s,c,u,x,z){...})(
'cwr',
'00000000-0000-0000-0000-000000000000',
'1.0.0',
'us-west-2',
'https://client.rum.us-east-1.amazonaws.com/1.0.2/cwr.js',
{ /* Configuration Options Here */ }
);
<script>
428Amazon CloudWatch User Guide
Regionalization
Arguments
The code snippet accepts six arguments:
•A namespace for running commands on the web client, such as 'cwr'
•The ID of the app monitor, such as '00000000-0000-0000-0000-000000000000'
•The application version, such as '1.0.0'
•The AWS Region of the app monitor, such as 'us-west-2'
•The URL of the web client, such as 'https://client.rum.us-east-1.amazonaws.com/1.0.2/
cwr.js'
•Application-speciﬁc conﬁguration options. For more information, see the following section.
Ignoring errors
The CloudWatch RUM web client listens to all types of errors that happen in your applications. If your 
application emits JavaScript errors that you do not want to view in the CloudWatch RUM dashboard, you 
can conﬁgure the CloudWatch RUM web client to ﬁlter out these errors so that you see only the relevant 
error events on the CloudWatch RUM dashboard. For example, you might choose not to view some 
JavaScript errors in the dashboard because you have already identiﬁed a ﬁx for them and the volume of 
these errors is masking other errors. You might also want to ignore errors that you can't ﬁx because they 
are owned by a library owned by a third party.
For more information about how to instrument the web client to ﬁlter out speciﬁc JavaScript errors, see 
the example in  Errors in the web client Github documentation.
Conﬁguration options
For information about the conﬁguration options available for the CloudWatch RUM web client, see the 
CloudWatch RUM web client documentation
Regionalization
This section illustrates strategies for using CloudWatch RUM with applications in diﬀerent Regions.
My web application is deployed in multiple AWS Regions
If your web application is deployed in multipled AWS Regions, you have three options:
•Deploy one app monitor in one Region, in one account, serving all Regions.
•Deploy separate app monitors for each Region, in unique accounts.
•Deploy separate app monitors for each Region, all in one account.
The advantage of using one app monitor is that all data will be centralized into one visualization, and all 
logs are written to the same log group in CloudWatch Logs. With a single app monitor there is a small 
amount of extra latency for requests, and a single point of failure.
Using multiple app monitors removes the single point of failure, but prevents all data from being 
combined into one visualization.
CloudWatch RUM hasn't launched in some Regions that my application is 
deployed in
CloudWatch RUM is launched into many Regions and has wide geographical coverage. By setting 
up CloudWatch RUM in the Regions where it is available, you can get the beneﬁts. End users can be 
429Amazon CloudWatch User Guide
Use page groups
anywhere and still have their sessions included if you have set up an app monitor in the Region that they 
are connecting to.
However, CloudWatch RUM is not yet launched in AWS GovCloud (US-East), AWS GovCloud (US-West), or 
any Regions in China. You are not able to send data to CloudWatch RUM from these Regions.
Use page groups
Use page groups to associate diﬀerent pages in your application with each other so that you can see 
aggregated analytics for groups of pages. For example, you might want to see the aggregated page load 
times of all of your landing pages.
You put pages into page groups by adding one or more tags to page view events in the CloudWatch RUM 
web client. The following examples put the /home page into the page group named en and the page 
group named landing .
Embedded script example
cwr('recordPageView', { pageId: '/home', pageTags: ['en', 'landing']});
JavaScript module example
awsRum.recordPageView({ pageId: '/home', pageTags: ['en', 'landing']});
Note
Page groups are intended to facilitate aggregating analytics across diﬀerent pages. For 
information about how to deﬁne and manipulate pageIds for your application, see the
Manually recording page views section in (Optional) Step 3: Manually modify the code snippet 
to conﬁgure the CloudWatch RUM web client (p. 425).
Specify custom metadata
CloudWatch RUM attaches additional data to each event as metadata. Event metadata consists of 
attributes in the form of key-value pairs. You can use these attributes to search or ﬁlter events in the 
CloudWatch RUM console. By default, CloudWatch RUM creates some metadata for you. For more 
information about the default metadata, see RUM event metadata (p. 446).
You can also use the CloudWatch RUM web client to add custom metadata to CloudWatch RUM events. 
The custom metadata can include session attributes and page attributes.
To add custom metadata, you must use version 1.10.0 or later of the CloudWatch RUM web client.
Requirements and syntax
Each event can include as many as 10 custom attributes in the metadata. The syntax requirements for 
custom attributes are as follows:
•Keys
•Maximum of 128 characters
•Can include alphanumeric characters, colons (:), and underscores (_)
•Can't begin with aws: .
•Can't consist entirely of any of the reserved keywords listed in the following section. Can use those 
keywords as part of a longer key name.
•Values
•Maximum of 256 characters
430Amazon CloudWatch User Guide
Specify custom metadata
•Must be strings, numbers, or Boolean values
Reserved keywords
You can't use the following reserved keywords as complete key names. You can use the following 
keywords as part of a longer key name, such as applicationVersion .
•browserLanguage
•browserName
•browserVersion
•countryCode
•deviceType
•domain
•interaction
•osName
•osVersion
•pageId
•pageTags
•pageTitle
•pageUrl
•parentPageId
•platformType
•referrerUrl
•subdivisionCode
•title
•url
•version
Note
CloudWatch RUM removes custom attributes from RUM events if an attribute includes a key or 
value that is not valid, or if the limit of 10 custom attributes per event has already been reached.
Add session attributes
If you conﬁgure custom session attributes, they are added to all events in a session. You conﬁgure 
session attributes either during CloudWatch RUM web client initialization or at runtime by using the
addSessionAttributes  command.
For example, you can add your application’s version as a session attribute. Then, in the CloudWatch 
RUM console, you can ﬁlter errors by version to ﬁnd whether an increased error rate is associated with a 
particular version of your application.
Adding a session attribute at initialization, NPM example
The code section in bold adds the session attribute.
import { AwsRum, AwsRumConfig } from 'aws-rum-web';
try { 
  const config: AwsRumConfig = { 
    allowCookies: true, 
    endpoint: "https://dataplane.rum.us-west-2.amazonaws.com", 
431Amazon CloudWatch User Guide
Specify custom metadata
    guestRoleArn: "arn:aws:iam::000000000000:role/RUM-Monitor-us-west-2-000000000000-00xx-
Unauth", 
    identityPoolId: "us-west-2:00000000-0000-0000-0000-000000000000", 
    sessionSampleRate: 1, 
    telemetries: ['errors', 'performance'], 
     sessionAttributes: { 
        applicationVersion: "1.3.8"
    } 
  }; 
  const APPLICATION_ID: string = '00000000-0000-0000-0000-000000000000'; 
  const APPLICATION_VERSION: string = '1.0.0'; 
  const APPLICATION_REGION: string = 'us-west-2'; 
  const awsRum: AwsRum = new AwsRum( 
    APPLICATION_ID, 
    APPLICATION_VERSION, 
    APPLICATION_REGION, 
    config 
  );
} catch (error) { 
  // Ignore errors thrown during CloudWatch RUM web client initialization
}
Adding a session attribute at runtime, NPM example
awsRum.addSessionAttributes({  
    applicationVersion: "1.3.8"     
})
Adding a session attribute at initialization, embedded script example
The code section in bold adds the session attribute.
<script> 
    (function(n,i,v,r,s,c,u,x,z){...})( 
        'cwr', 
        '00000000-0000-0000-0000-000000000000', 
        '1.0.0', 
        'us-west-2', 
        'https://client.rum.us-east-1.amazonaws.com/1.0.2/cwr.js', 
        { 
            sessionSampleRate:1, 
            guestRoleArn:'arn:aws:iam::000000000000:role/RUM-Monitor-us-
west-2-000000000000-00xx-Unauth', 
            identityPoolId:'us-west-2:00000000-0000-0000-0000-000000000000', 
            endpoint:'https://dataplane.rum.us-west-2.amazonaws.com', 
            telemetries:['errors','http','performance'], 
            allowCookies:true, 
             sessionAttributes: { 
                applicationVersion: "1.3.8"
            } 
        } 
    );
</script>
Adding a session attribute at runtime, embedded script example
<script> 
    function addSessionAttribute() { 
        cwr('addSessionAttributes', { 
            applicationVersion: "1.3.8" 
432Amazon CloudWatch User Guide
Specify custom metadata
        }) 
    } 
             
</script>
Add page attributes
If you conﬁgure custom page attributes, they are added to all events on the current page. You conﬁgure 
page attributes either during CloudWatch RUM web client initialization or at runtime by using the
recordPageView  command.
For example, you can add your page template as a page attribute. Then, in the CloudWatch RUM console, 
you can ﬁlter errors by page templates to ﬁnd whether an increased error rate is associated with a 
particular page template of your application.
Adding a page attribute at initialization, NPM example
The code section in bold adds the page attribute.
const awsRum: AwsRum = new AwsRum( 
    APPLICATION_ID, 
    APPLICATION_VERSION, 
    APPLICATION_REGION, 
     { disableAutoPageView:  true // optional }
);
awsRum.recordPageView({   
    pageId:'/home',   
    pageAttributes: { 
      template: 'artStudio' 
    }
});
const credentialProvider = new CustomCredentialProvider();
if(awsCreds) awsRum.setAwsCredentials(credentialProvider);
Adding a page attribute at runtime, NPM example
awsRum.recordPageView({  
    pageId: '/home',  
    pageAttributes: { 
        template: 'artStudio' 
    }  
});
Adding a page attribute at initialization, embedded script example
The code section in bold adds the page attribute.
<script> 
    (function(n,i,v,r,s,c,u,x,z){...})( 
        'cwr', 
        '00000000-0000-0000-0000-000000000000', 
        '1.0.0', 
        'us-west-2', 
        'https://client.rum.us-east-1.amazonaws.com/1.0.2/cwr.js',
        { 
            disableAutoPageView: true //optional 
        } 
    ); 
    cwr('recordPageView', {  
       pageId: '/home',   
       pageAttributes: { 
433Amazon CloudWatch User Guide
Send custom events
           template: 'artStudio' 
       } 
    }); 
    const awsCreds = localStorage.getItem('customAwsCreds'); 
    if(awsCreds) cwr('setAwsCredentials', awsCreds)
</script>
Adding a page attribute at runtime, embedded script example
<script> 
    function recordPageView() { 
        cwr('recordPageView', {  
            pageId: '/home',  
            pageAttributes: { 
                template: 'artStudio' 
            } 
        }); 
    }         
</script>
Filtering by metadata attributes in the console
To ﬁlter the visualizations in the CloudWatch RUM console with any built-in or custom metadata 
attribute, use the search bar. In the search bar, you can specify as many as 20 ﬁlter terms in the form of
key=value to apply to the visualizations. For example, to ﬁlter data for only the Chrome browser, you 
could add the ﬁlter term browserName=Chrome.
By default, the CloudWatch RUM console retrieves the 100 most common attributes keys and values to 
display in the dropdown in the search bar. To add more metadata attributes as ﬁlter terms, enter the 
complete attribute key and value into the search bar.
A ﬁlter can include as many as 20 ﬁlter terms, and you can save up to 20 ﬁlters per app monitor. When 
you save a ﬁlter, it is saved in the Saved ﬁlters dropdown. You can also delete a saved ﬁlter.
Send custom events
CloudWatch RUM records and ingests the events listed in Information collected by the CloudWatch 
RUM web client (p. 445). If you use version 1.12.0 or later of the CloudWatch RUM web client, you can 
deﬁne, record, and send additional custom events. You deﬁne the event type name and the data to send 
for each event type that you deﬁne. Each custom event payload can be up to 6 KB.
Custom events are ingested only if the app monitor has custom events enabled. To update the 
conﬁguration settings of your app monitor, use the CloudWatch RUM console or the UpdateAppMonitor
API.
After you enable custom events, and then deﬁne and send custom events, you can search for them. To 
search for them, use the Events tab in the CloudWatch RUM console. Search by using the event type.
Requirements and syntax
Custom events consist of an event type and event details. The requirements for these are as follows:
•Event type
•This can be either the type or name  of your event. For example, the CloudWatch RUM built-in event 
type called JsError  has an event type of com.amazon.rum.js_error_event .
•Must be between 1 and 256 characters.
•Can be a combination of alphanumeric characters, underscores, hyphens, and periods.
434Amazon CloudWatch User Guide
Send custom events
•Event details
•Contains the actual data that you want to record in CloudWatch RUM.
•Must be an object that consists of ﬁelds and values.
Examples of recording custom events
There are two ways to record custom events in the CloudWatch RUM web client.
•Use the CloudWatch RUM web client's recordEvent  API.
•Use a customized plugin.
Send a custom event using the recordEvent  API, NPM example
awsRum.recordEvent('my_custom_event', { 
        location: 'IAD',  
        current_url: 'amazonaws.com',  
        user_interaction: { 
            interaction_1 : "click", 
            interaction_2 : "scroll" 
        },  
        visit_count:10 
    }
)
Send a custom event using the recordEvent  API, embedded script example
cwr('recordEvent', { 
    type: 'my_custom_event',  
    data: { 
        location: 'IAD',  
        current_url: 'amazonaws.com',  
        user_interaction: { 
            interaction_1 : "click", 
            interaction_2 : "scroll" 
        },  
        visit_count:10 
    }
})
Example of sending a custom event using a customized plugin
// Example of a plugin that listens to a scroll event, and
// records a 'custom_scroll_event' that contains the timestamp of the event.
class MyCustomPlugin implements Plugin { 
    // Initialize MyCustomPlugin. 
    constructor() { 
        this.enabled; 
        this.context; 
        this.id = 'custom_event_plugin'; 
    } 
    // Load MyCustomPlugin. 
    load(context) { 
        this.context = context; 
        this.enable(); 
    } 
    // Turn on MyCustomPlugin. 
    enable() { 
        this.enabled = true; 
435Amazon CloudWatch User Guide
Viewing the CloudWatch RUM dashboard
        this.addEventHandler(); 
    } 
    // Turn off MyCustomPlugin. 
    disable() { 
        this.enabled = false; 
        this.removeEventHandler(); 
    } 
    // Return MyCustomPlugin Id. 
    getPluginId() { 
        return this.id; 
    } 
    // Record custom event. 
    record(data) { 
        this.context.record('custom_scroll_event', data); 
    } 
    // EventHandler. 
    private eventHandler = (scrollEvent: Event) => { 
        this.record({timestamp: Date.now()}) 
    } 
    // Attach an eventHandler to scroll event. 
    private addEventHandler(): void { 
        window.addEventListener('scroll', this.eventHandler); 
    } 
    // Detach eventHandler from scroll event. 
    private removeEventHandler(): void { 
        window.removeEventListender('scroll', this.eventHandler); 
    }
}
Viewing the CloudWatch RUM dashboard
CloudWatch RUM helps you collect data from user sessions about your application's performance, 
including page load times, Apdex score, browsers and devices used, geolocation of user sessions, and 
sessions with errors. All of this information is displayed in a dashboard.
To view the RUM dashboard
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , RUM .
The Overview tab displays information collected by one of the app monitors that you have created.
The top row of panes displays the following information for this app monitor:
•Number of page loads
•Average page load speed
•Apdex score
•Status of any alarms associated with the app monitor
The application performance index (Apdex) score indicates end users' level of satisfaction. Scores 
range from 0 (least satisﬁed) to 1 (most satisﬁed). The scores are based on application performance 
only. Users are not asked to rate the application. For more information about Apdex scores, see How 
CloudWatch RUM sets Apdex scores (p. 437).
Several of these panes include links that you can use to further examine the data. Choosing any 
of these links displays a detailed view with Performance, Errors , HTTP requests, Sessions , Events 
Browsers & Devices, and User Journey  tabs at the top of the display.
3. To focus further, choose the List view  tab and then choose the name of the app monitor that you 
want to focus on. This displays the following tabs for the chosen app monitor.
436Amazon CloudWatch User Guide
Viewing the CloudWatch RUM dashboard
•The Performance tab displays page performance information including load times, session 
information, request information, web vitals, and page loads over time. This view includes controls 
to toggle the view between focusing on Page loads, Requests, and Location .
•The Errors  tab displays Javascript error information including the error message most frequently 
seen by users and the devices and browsers with the most errors. This view includes a histogram 
of the errors and a list view of errors. You can ﬁlter the list of errors by user and event details. 
Choose an error message to see more details.
•The HTTP requests tab displays HTTP request information including the request URL with most 
errors and the devices and browsers with the most errors. This tab includes a histogram of the 
requests, a list view of requests, and a list view of network errors. You can ﬁlter the lists by user 
and event details. Choose a response code or an error message to s ee more details about the 
request or network error, respectively.
•The Sessions  tab displays session metrics. This tab includes a histogram of session start events 
and a list view of sessions. You can ﬁlter the list of sessions by event type, user details, and event 
details. Choose a sessionId  to see more details about a session.
•The Events tab displays a histogram of RUM events and a list view of the events. You can ﬁlter the 
list of events by event type, user details, and event details. Choose a RUM event to see the raw 
event.
•The Browsers & Devices tab displays information such as the performance and usage of diﬀerent 
browsers and devices to access your application. This view includes controls to toggle the view 
between focusing on Browsers and Devices.
If you narrow the scope to a single browser, you see the data broken down by browser version.
•The User Journey  tab displays the paths that your customers use to navigate your application. 
You can see where your customers enter your application and what page they exit your application 
from. You can also see the paths that they take and the percentage of customers that follow those 
paths. You can pause on a node to get more details about that page. You can choose a single path 
to highlight the connections for easier viewing.
4. (Optional) On any of the ﬁrst six tabs, you can choose the Pages button and select a page or page 
group from the list. This narrows down the displayed data to a single page or group of pages of your 
application. You can also mark pages and page groups in the list as favorites.
How CloudWatch RUM sets Apdex scores
Apdex (Application Performance Index) is an open standard that deﬁnes a method to report, benchmark, 
and rate application response time. An Apdex score helps you understand and identify the impact on 
application performance over time.
The Apdex score indicates the end users' level of satisfaction Scores range from 0 (least satisﬁed) to 1 
(most satisﬁed). The scores are based on application performance only. Users are not asked to rate the 
application.
Each individual Apdex score falls into one of three thresholds. Based on the Apdex threshold and actual 
application response time, there are three kinds of performance, as follows:
•Satisﬁed – The actual application response time is less than or equal to the Apdex threshold. For 
CloudWatch RUM, this threshold is 2000 ms or less.
•Tolerable– The actual application response time is greater than the Apdex threshold, but less than or 
equal to four times the Apdex threshold. For CloudWatch RUM, this range is 2000–8000 ms.
•Frustrating– The actual application response time is greater than four times the Apdex threshold. For 
CloudWatch RUM, this range is over 8000 ms.
The total 0-1 Apdex score is calculated using the following formula:
437Amazon CloudWatch User Guide
CloudWatch metrics that you can 
collect with CloudWatch RUM
(positive scores + tolerable scores/2)/total scores * 100
CloudWatch metrics that you can collect with 
CloudWatch RUM
The table in this section lists the metrics that you automatically collect with CloudWatch RUM. You can 
see these metrics in the CloudWatch console. For more information, see View available metrics (p. 117).
You can also optionally send extended metrics to CloudWatch or CloudWatch Evidently. For more 
information, see Extended metrics (p. 441).
These metrics are published in the metric namespace named AWS/RUM. All of the following metrics are 
published with an application_name  dimension. The value of this dimension is the name of the app 
monitor. Some metrics are also published with additional dimensions, as listed in the table.
Metric Unit Description
HttpStatusCodeCount Count The count of HTTP 
responses in the 
application, by their 
response status code.
Additional dimensions:
•event_details.response.status
is the response status 
code, such as 200, 
400, 404, and so on.
•event_type  The 
type of event. 
Currently, the only 
possible value for this 
dimension is http .
JsErrorCount Count The count of JavaScript 
error events ingested.
NavigationFrustratedCount Count The count of navigation 
events with a
duration  higher 
than the frustrating 
threshold, which is 
8000ms. The duration 
of navigation events 
is tracked in the
PerformanceNavigationDuration
metric.
NavigationSatisfiedCount Count The count of navigation 
events with a
duration  that is 
less than the Apdex 
objective, which is 
2000ms. The duration 
of navigation events 
is tracked in the
438Amazon CloudWatch User Guide
CloudWatch metrics that you can 
collect with CloudWatch RUM
Metric Unit Description
PerformanceNavigationDuration
metric.
NavigationToleratedCount Count The count of navigation 
events with a
duration  between 
2000ms and 8000ms. 
The duration of 
navigation events 
is tracked in the
PerformanceNavigationDuration
metric.
PerformanceResourceDuration Milliseconds The duration  of a 
resource event.
Additional dimensions:
•event_details.file.type
is the ﬁle type of 
the resource event, 
such as a stylesheet, 
document, image, 
script, or font.
•event_type  The 
type of event. 
Currently, the only 
possible value for 
this dimension is
resource .
PerformanceNavigationDuration Milliseconds The duration  of a 
navigation event.
RumEventPayloadSize Bytes The size of every 
event ingested by 
CloudWatch RUM. 
You can also use the
SampleCount  statistic 
for this metric to 
monitor the number 
of events that an app 
monitor is ingesting.
SessionCount Count The count of session 
start events ingested 
by the app monitor. 
In other words, the 
number of new sessions 
started.
WebVitalsCumulativeLayoutShift None Tracks the value of the 
cumulative layout shift 
events.
439Amazon CloudWatch User Guide
CloudWatch metrics that you can 
collect with CloudWatch RUM
Metric Unit Description
WebVitalsFirstInputDelay MillisecondsTracks the value of the 
ﬁrst input delay events.
WebVitalsLargestContentfulPaint MillisecondsTracks the value of the 
largest contentful paint 
events.
Custom metrics and extended metrics that you can send to 
CloudWatch and CloudWatch Evidently
By default, RUM app monitors send metrics to CloudWatch. These default metrics and dimensions are 
listed in CloudWatch metrics that you can collect with CloudWatch RUM.
You can also set up an app monitor to send extended metrics, custom metrics, or both to CloudWatch or 
to CloudWatch Evidently.
•Custom metrics – Custom metrics are metrics that you deﬁne. With custom metrics, you can use any 
metric name and namespace. To derive the metrics, you can use any custom events, built-in events, 
custom attributes, or default attributes.
You can send custom metrics to both CloudWatch and CloudWatch Evidently.
•Extended metrics– Lets you send the default CloudWatch RUM metrics to CloudWatch Evidently to 
be used in Evidently experiments. You can also send any of the default CloudWatch RUM metrics to 
CloudWatch with additional dimensions. This way, these metrics can give you a more ﬁne-grained view.
Topics
•Custom metrics  (p. 440)
•Extended metrics (p. 441)
Custom metrics
To send custom metrics, you must use the AWS APIs or AWS CLI instead of the console. 
For more information about using the AWS APIs, see PutRumMetricsDestination  and
BatchCreateRumMetricDeﬁnitions.
The maximum number of extended metric and custom metric deﬁnitions that one destination can 
contain is 2000. For each custom metric or extended metric that you send to each destination, each 
combination of dimension name and dimension value counts toward this limit. This also counts as a 
CloudWatch custom metric for pricing.
The following example shows how to create a custom metric derived from a custom event. Here is the 
example custom event that is used:
cwr('recordEvent', { 
    type: 'my_custom_event',  
    data: { 
        location: 'IAD',  
        current_url: 'amazonaws.com',  
        user_interaction: { 
            interaction_1 : "click", 
            interaction_2 : "scroll" 
        },  
440Amazon CloudWatch User Guide
CloudWatch metrics that you can 
collect with CloudWatch RUM
        visit_count:10 
    }
})
Given this custom event, you can create a custom metric that counts the number of visits to the
amazonaws.com  URL from Chrome browsers. The following deﬁnition creates a metric named
AmazonVisitsCount  in your account, in the RUM/CustomMetrics/PageVisits  namespace.
{ 
    "AppMonitorName":"customer-appMonitor-name", 
    "Destination":"CloudWatch", 
    "MetricDefinitions":[ 
        { 
            "Name":"AmazonVisitsCount", 
            "Namespace":"PageVisit", 
            "ValueKey":"event_details.visit_count", 
            "UnitLabel":"Count", 
            "DimensionKeys":{ 
                "event_details.current_url": "URL" 
            }, 
            "EventPattern":"{\"metadata\":{\"browserName\":[\"Chrome\"]},\"event_type\":
[\"my_custom_event\"],\"event_details\": {\"current_url\": [\"amazonaws.com\"]}}"  
        } 
    ]
}
Extended metrics
If you set up extended metrics, you can do one or both of the following:
•Send default CloudWatch RUM metrics to CloudWatch Evidently to be used in Evidently 
experiments. Only the PerformanceNavigationDuration, PerformanceResourceDuration,
WebVitalsCumulativeLayoutShift, WebVitalsFirstInputDelay, and WebVitalsLargestContentfulPaint
metrics can be sent to Evidently.
•Send any of the default CloudWatch RUM metrics to CloudWatch with additional dimensions so that 
the metrics give you a more ﬁne-grained view. For example, you can see metrics speciﬁc to a certain 
browser that's used by your users, or metrics for users in a speciﬁc geolocation.
For more information about the default CloudWatch RUM metrics, see CloudWatch metrics that you can 
collect with CloudWatch RUM (p. 438).
The maximum number of extended metric and custom metric deﬁnitions that one destination 
can contain is 2000. For each extended or custom metric that you send to each destination, each 
combination of dimension name and dimension value counts as an extended metric for this limit. This 
also counts as a CloudWatch custom metric for pricing.
When you send extended metrics to CloudWatch, you can use the CloudWatch RUM console to create 
CloudWatch alarms on them.
Extended metrics are charged as CloudWatch custom metrics. For more information, see Amazon 
CloudWatch Pricing.
The following dimensions are supported for extended metrics for all the metric names that app monitors 
can send. These metric names are listed in CloudWatch metrics that you can collect with CloudWatch 
RUM  (p. 438).
•BrowserName
441Amazon CloudWatch User Guide
CloudWatch metrics that you can 
collect with CloudWatch RUM
Example dimension values: Chrome , Firefox , Chrome Headless
•CountryCode  This uses the ISO-3166 format, with two-letter codes.
Example dimension values: US, JP, DE
•DeviceType
Example dimension values: desktop , mobile , tablet , embedded
•FileType
Example dimension values: Image , Stylesheet
•OSName
Example dimension values: Linux , Windows, iOS, Android
•PageId
Set up extended metrics using the console
To use the console to send extended metrics to CloudWatch, use the following steps.
To send extended metrics to CloudWatch Evidently, you must use the AWS APIs or AWS CLI instead of 
the console. For information about using the AWS APIs to send extended metrics to either CloudWatch or 
Evidently, see PutRumMetricsDestination  and BatchCreateRumMetricDeﬁnitions.
To use the console to set up an app monitor and send RUM extended metrics to CloudWatch
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , RUM .
3. Choose List view  and then choose the name of the app monitor that is to send the metrics.
4. Choose the Conﬁguration  tab and then choose RUM extended metrics.
5. Choose Send metrics .
6. Select one or more metric names to send with additional dimensions.
7. Select one or more factors to use as dimensions for these metrics. As you make your choices, the 
number of extended metrics that your choices create is displayed in Number of extended metrics.
This number is calculated by multiplying the number of chosen metric names by the number of 
diﬀerent dimensions that you create. This number represents how many custom metrics you are 
charged for. For more information about CloudWatch pricing, see Amazon CloudWatch Pricing.
a. To send a metric with page ID as a dimension, choose Browse for page ID and then select the 
page IDs to use.
b. To send a metric with device type as a dimension, choose either Desktop devices or Mobile and 
tablets.
c. To send a metric with operating system as a dimension, select one or more operating systems 
under Operating system .
d. To send a metric with browser type as a dimension, select one or more browsers under
Browsers.
e. To send a metric with geolocation as a dimension, select one or more locations under Locations .
Only the locations where this app monitor has reported metrics from will appear in the list to 
choose from.
8. When you are ﬁnished with your choices, choose Send metrics .
9. (Optional) In the Extended metrics list, to create an alarm that watches one of the metrics, choose
Create alarm  in that metric's row.
442Amazon CloudWatch User Guide
CloudWatch metrics that you can 
collect with CloudWatch RUM
For general information about CloudWatch alarms, see  Using Amazon CloudWatch alarms (p. 180). 
For a tutorial for setting an alarm on a CloudWatch RUM extended metric, see Tutorial: create an 
extended metric and alarm it (p. 443).
Stop sending extended metrics
To use the console to stop sending extended metrics
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , RUM .
3. Choose List view  and then choose the name of the app monitor that is to send the metrics.
4. Choose the Conﬁguration  tab and then choose RUM extended metrics.
5. Select one or more metric name and dimension combinations to stop sending. Then choose Actions,
Delete.
Tutorial: create an extended metric and alarm it
This tutorial demonstrates how to set up an extended metric to be sent to CloudWatch, and then how 
to set an alarm on that metric. In this tutorial, you create a metric that tracks JavaScript errors on the 
Chrome browser.
To set up this extended metric and set an alarm on it
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , RUM .
3. Choose List view  and then choose the name of the app monitor that is to send the metric.
4. Choose the Conﬁguration  tab and then choose RUM extended metrics.
5. Choose Send metrics .
6. Select JSErrorCount .
7. Under Browsers, select Chrome .
This combination of JSErrorCount  and Chrome  will send one extended metric to CloudWatch. The 
metric counts JavaScript errors only for user sessions that use the Chrome browser. The metric name 
will be JsErrorCount  and the dimension name will be Browser.
8. Choose Send metrics .
9. In the Extended metrics list, choose Create alarm  in the row that displays JsErrorCount  under
Name  and displays Chrome  under BrowserName.
10. Under Specify metric and conditions, conﬁrm that the Metric name  and BrowserName ﬁelds are 
pre-ﬁlled with the correct values.
11. For Statistic , select the statistic that you want to use for the alarm. Average is a good choice for this 
type of counting metric.
12. For Period, select 5 minutes .
13. Under Conditions , do the following:
•Choose Static .
•Choose Greater  to specify that the alarm should go into ALARM state when the number of errors 
is higher than the threshold you are about to specify.
•Under than... , enter the number for the alarm threshold. The alarm goes into ALARM state when 
the number of errors over a 5-minute period exceeds this number.
443Amazon CloudWatch User Guide
Data protection and data privacy with CloudWatch RUM
14. (Optional) By default, the alarm goes into ALARM state as soon as the number of errors exceeds 
the threshold number you set during a 5-minute period. You can optionally change this so that the 
alarm goes into ALARM state only if this number is exceeded for more than one 5-minute period.
To do so, choose Additional conﬁguration and then for Datapoints to alarm , specify how many 5-
minute periods need to have the error number over the threshold to trigger the alarm. For example, 
you can select 2 out of 2 to have the alarm trigger only when two consecutive 5-minute periods are 
over the threshold, or 2 out of 3 to have the alarm trigger if any two of three consecutive 5-minute 
periods are over the threshold.
For more information about this type of alarm evaluation, see Evaluating an alarm  (p. 181).
15. Choose Next.
16. For Conﬁgure actions, specify what should happen when the alarm goes into alarm state. To receive 
a notiﬁcation with Amazon SNS, do the following:
•Choose Add notiﬁcation .
•Choose In alarm .
•Either select an existing SNS topic or create a new one. If you create a new one, specify a name for 
it and add at least one email address to it.
17. Choose Next.
18. Enter a name and optional description for the alarm, and choose Next.
19. Review the details and choose Create alarm .
Data protection and data privacy with CloudWatch 
RUM
The AWS  shared responsibility model applies to data protection and data privacy in Amazon 
CloudWatch RUM. As described in this model, AWS is responsible for protecting the global infrastructure 
that runs all of the AWS cloud. You are responsible for maintaining control over your content that is 
hosted on this infrastructure. For more information about data privacy, see the  Data Privacy FAQ. For 
information about data protection in Europe, see  The AWS Shared Responsibility Model and GDPR blog 
post on the AWS Security Blog. For more resources about complying with GDPR requirements, see the 
General Data Protection Regulation (GDPR) Center.
Amazon CloudWatch RUM generates a code snippet for you to embed into your website or web 
application code, based on your input of end user data that you want to collect. The web client, 
downloaded and conﬁgured by the code snippet, uses cookies (or similar technologies) to help you 
collect end user data. The use of cookies (or similar technologies) is subject to data privacy regulations 
in certain jurisdictions. Before using Amazon CloudWatch RUM, we strongly recommend that you assess 
your compliance obligations under applicable law, including any applicable legal requirements to provide 
legally adequate privacy notices and obtain any necessary consents for the use of cookies and the 
processing (including collection) of end user data. For more information about how the web client uses 
cookies and what end-user data the web client collects, see Information collected by the CloudWatch 
RUM web client (p. 445) and CloudWatch RUM web client cookies (p. 445).
We strongly recommend that you never put sensitive identifying information, such as your end users’ 
account numbers, email addresses, or other personal information, into free-form ﬁelds. Any data that 
you enter into Amazon CloudWatch RUM or other services might be included in diagnostic logs.
444Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
CloudWatch RUM web client cookies
The CloudWatch RUM web client collects certain data about user sessions by default. You can choose to 
enable cookies to have the web client also collect a user ID and session ID for each session. The user ID is 
randomly generated by RUM.
If these cookies are enabled, RUM is able to display the following types of data when you view the RUM 
dashboard for this app monitor.
•Aggregated data based on user IDs, such as number of unique users and the number of diﬀerent users 
who experienced an error.
•Aggregated data based on session IDs, such as number of sessions and the number of sessions that 
experienced an error.
•The user journey , which is the sequence of pages that each sampled user session includes.
Important
If you do not enable these cookies, the web client still records certain information about end 
user sessions such as browser type/version, operating system type/version, device type, and so 
on. These are collected to provide aggregated page-speciﬁc insights, such as web vitals, page 
views, and pages that experienced errors. For more information about the data recorded, see
Information collected by the CloudWatch RUM web client (p. 445).
Information collected by the CloudWatch RUM web 
client
This section documents the PutRumEvents schema, which deﬁnes the structure of the data that you can 
collect from user sessions using CloudWatch RUM.
A PutRumEvents request sends a data structure with the following ﬁelds to CloudWatch RUM.
•The ID of this batch of RUM events
•App monitor details, which includes the following:
•App monitor ID
•Monitored application version
•User details, which includes the following. This is collected only if the app monitor has cookies 
enabled.
•A user ID generated by the web client
•Session ID
•The array of RUM events (p. 445) in this batch.
RUM event schema
The structure of each RUM event includes the following ﬁelds.
•The ID of the event
•A timestamp
•The event type
•The user agent
•Metadata  (p. 446)
•RUM event details (p. 446)
445Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
RUM event metadata
The metadata includes page metadata, user agent metadata, geolocation metadata, and domain 
metadata.
Page metadata
The page metadata includes the following:
•Page ID
•Page title
•Parent page ID. – This is collected only if the app monitor has cookies enabled.
•Interaction depth – This is collected only if the app monitor has cookies enabled.
•Page tags – You can add tags to page events to group pages together. For more information, see Use 
page groups (p. 430).
User agent metadata
The user agent metadata includes the following:
•Browser language
•Browser name
•Browser version
•Operating system name
•Operating system version
•Device type
•Platform type
Geolocation metadata
The geolocation metadata includes the following:
•Country code
•Subdivision code
Domain metadata
The domain metadata includes the URL domain.
RUM event details
The details of an event follow one of the following type of schemas, depending on the event type.
Session start event
This event contains no ﬁelds. This is collected only if the app monitor has cookies enabled.
Page view schema
A Page view event contains the following properties. You can deactivate page view collection by 
conﬁguring the web client. For more information, see the  CloudWatch RUM web client documentation.
446Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
NameType Description
Page ID StringAn ID that uniquely represents this page within the 
application. By default, this is the URL path.
Parent page ID StringThe ID of the page that the user was on when they navigated 
to the current page. This is collected only if the app 
monitor has cookies enabled.
Interaction depthStringThis is collected only if the app monitor has cookies 
enabled.
JavaScript error schema
JavaScript error events generated by the agent contain the following properties. The web client collects 
these events only if you selected to collect the errors telemetry.
Name Type Description
Error type String The error's name, if one exists. For more information, see
Error.prototype.name.
Some browsers might not support error types.
Error message String The error's message. For more information, see
Error.prototype.message. If the error ﬁeld does not exist, this 
is the message of the error event. For more information, see
ErrorEvent.
Error messages might not be consistent across diﬀerent 
browsers.
Stack trace String The error's stack trace, if one exists, truncated to 150 
characters. For more information, see Error.prototype.stack.
Some browsers might not support stack traces.
DOM event schema
Document object model (DOM) events generated by the agent contain the following properties. These 
events are not collected by default. They are collected only if you activate the interactions telemetry. For 
more information, see the  CloudWatch RUM web client documentation.
Name Type Description
Event String The type of DOM event, such as click, scroll, or hover. For 
more information, see Event reference.
Element String The DOM element type
Element ID String If the element that generated the event has an ID, 
this property stores that ID. For more information, see
Element.id .
CSSLocator String The CSS locator used to identify the DOM element.
447Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
NameType Description
InteractionId StringA unique ID for the interaction between the user and the UI.
Navigation event schema
Navigation events are collected only if the app monitor has performance telemetry activated.
Navigation events use Navigation timing Level 1 and Navigation timing Level 2 APIs. Level 2 APIs are not 
supported on all browsers, so these newer ﬁelds are optional.
Note
Timestamp metrics are based on DOMHighResTimestamp. With Level 2 APIs, all timings are by 
default relative to the startTime . But for Level 1, the navigationStart  metric is subtracted 
from timestamp metrics to obtain relative values. All timestamp values are in milliseconds.
Navigation events contain the following properties.
Name Type Description Notes
initiatorType String Represents the type of resource that initiated the 
performance event.Value:
"navigation"
Level 1:
"navigation"
Level 2:
entryData.initiatorType
navigationTypeString Represents the type of navigation.
This attribute is not required.Value: The 
value must 
be one of the 
following:
•navigate  is 
a navigation 
started by 
choosing a 
link, entering 
a URL in a 
browser's 
address 
bar, form 
submission, 
or initializing 
through 
a script 
operation 
other than
reload  or
back_forward
.
•reload  is a 
navigation 
through the 
browser's 
reload 
448Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
NameType Description Notes
operation or
location.reload()
.
•back_forward
is a 
navigation 
through the 
browser's 
history 
traversal 
operation.
•prerender
is a 
navigation 
initiated by 
a prerender 
hint. For 
more 
information, 
see
Prerender.
startTime NumberIndicates when the event is triggered.Value: 0
Level 1:
entryData.navigationStart 
- 
entryData.navigationStart
Level 2:
entryData.startTime
449Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
NameType Description Notes
unloadEventStartNumberIndicates the time when the previous document 
in the window began to unload after the unload
event was thrown.Value: If there 
is no previous 
document or 
if the previous 
document 
or one of 
the needed 
redirects is not 
of the same 
origin, the 
value returned 
is 0.
Level 1:
entryData.unloadEventStart 
 > 0 
  ? 
 entryData.unloadEventStart 
 - 
 entryData.navigationStart 
  : 0
Level 2:
entryData.unloadEventStart
promptForUnloadNumberThe time taken to unload the document. In other 
words, the time between unloadEventStart
and unloadEventEnd . UnloadEventEnd
represents the moment in milliseconds when the 
unload event handler ﬁnishes.Value: If there 
is no previous 
document or 
if the previous 
document 
or one of 
the needed 
redirects is not 
of the same 
origin, the 
value returned 
is 0.
Level 1:
entryData.unloadEventEnd 
- 
entryData.unloadEventStart
Level 2:
entryData.unloadEventEnd 
- 
entryData.unloadEventStart
450Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
NameType Description Notes
redirectCountNumberA number representing the number of redirects 
since the last non-redirect navigation under the 
current browsing context.
This attribute is not required.Value: If there 
is no redirect 
or if there is 
any redirect 
that is not 
of the same 
origin as the 
destination 
document, the 
value returned 
is 0.
Level 1: Not 
available
Level 2:
entryData.redirectCount
redirectStart NumberThe time when the ﬁrst HTTP redirect starts.Value: If there 
is no redirect 
or if there is 
any redirect 
that is not 
of the same 
origin as the 
destination 
document, the 
value returned 
is 0.
Level 1:
entryData.redirectStart 
 > 0 
  ? 
 entryData.redirectStart 
 - 
 entryData.navigationStart 
  : 0
Level 2:
entryData.redirectStart
redirectTime NumberThe time taken for the HTTP redirect. This is 
the diﬀerence between redirectStart  and
redirectEnd .Level 1: : 
entryData.redirectEnd 
- 
entryData.redirectStart
Level 2: : 
entryData.redirectEnd 
- 
entryData.redirectStart
451Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
NameType Description Notes
workerStart NumberThis is a property of the
PerformanceResourceTiming  interface. It 
marks the beginning of worker thread operation.
This attribute is not required.Value: If 
a Service 
Worker thread 
is already 
running, or 
immediately 
before starting 
the Service 
Worker thread, 
this property 
returns 
the time 
immediately 
before 
dispatching
FetchEvent . 
It returns 0 if 
the resource is 
not intercepted 
by a Service 
Worker.
Level 1: Not 
available
Level 2:
entryData.workerStart
workerTime NumberIf the resource is intercepted by a Service Worker, 
this returns the time required for worker thread 
operation.
This attribute is not required.Level 1: Not 
available
Level 2:
entryData.workerStart 
 > 0 
   ? 
 entryData.fetchStart 
 - 
 entryData.workerStart 
   : 0
fetchStart NumberThe time when the browser is ready to fetch the 
document using an HTTP request. This is before 
checking any application cache.Level 1:
: 
 entryData.fetchStart 
 > 0 
  ? 
 entryData.fetchStart 
 - 
 entryData.navigationStart 
  : 0
Level 2:
entryData.fetchStart
452Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
NameType Description Notes
domainLookupStartNumberThe time when the domain lookup starts.Value: If a 
persistent 
connection is 
used or if the 
information 
is stored in a 
cache or local 
resource, the 
value will be 
the same as
fetchStart .
Level 1:
entryData.domainLookupStart 
 > 0 
  ? 
 entryData.domainLookupStart 
 - 
 entryData.navigationStart 
  : 0
Level 2:
entryData.domainLookupStart
dns NumberThe time required for domain lookup.Value: If the 
resources and 
DNS records 
are cached, the 
expected value 
is 0.
Level 1:
entryData.domainLookupEnd 
- 
entryData.domainLookupStart
Level 2:
entryData.domainLookupEnd 
- 
entryData.domainLookupStart
nextHopProtocolStringA string representing the network protocol used 
to fetch the resource.
This attribute is not required.Level 1: Not 
available
Level 2:
entryData.nextHopProtocol
453Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
NameType Description Notes
connectStart NumberThe time immediately before the user agent 
starts establishing the connection to the server to 
retrieve the document.Value: If an 
RFC2616 
persistent 
connection 
is used, or if 
the current 
document 
is retrieved 
from relevant 
application 
caches or local 
resources, 
this attribute 
returns the 
value of
domainLookupEnd .
Level 1:
entryData.connectStart 
 > 0 
  ? 
 entryData.connectStart 
 - 
 entryData.navigationStart 
  : 0
Level 2:
entryData.connectStart
connect NumberMeasures the time required to establish the 
transport connections or to perform SSL 
authentication. It also includes the blocked time 
that is taken when there are too many concurrent 
requests issued by the browser.Level 1:
entryData.connectEnd 
- 
entryData.connectStart
Level 2:
entryData.connectEnd 
- 
entryData.connectStart
secureConnectionStart NumberIf the URL scheme of the current page is "https", 
this attribute returns the time immediately before 
the user agent starts the handshake process 
to secure the current connection. It returns 0 if 
HTTPS is not used. For more information about 
URL schemes, see URL representation.Formula:
entryData.secureConnectionStart
454Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
NameType Description Notes
tlsTime NumberThe time taken to complete an SSL handshake.Level 1:
entryData.secureConnectionStart 
 > 0 
   ? 
 entryData.connectEnd 
 - 
 entryData.secureConnectionStart 
   : 0
Level 2:
entryData.secureConnectionStart 
 > 0 
   ? 
 entryData.connectEnd 
 - 
 entryData.secureConnectionStart 
   : 0
requestStart NumberThe time immediately before the user agent 
starts requesting the resource from the server, or 
from relevant application caches, or from local 
resources.Level 1:
: 
 entryData.requestStart 
 > 0 
  ? 
 entryData.requestStart 
 - 
 entryData.navigationStart 
  : 0
Level 2:
entryData.requestStart
timeToFirstByteNumberThe time taken to receive the ﬁrst byte of 
information after a request is made. This time is 
relative to the startTime .Level 1:
entryData.responseStart 
- 
entryData.requestStart
Level 2:
entryData.responseStart 
- 
entryData.requestStart
responseStartNumberThe time immediately after the user agent's HTTP 
parser receives the ﬁrst byte of the response from 
the relevant application caches, or from local 
resources, or from the server.Level 1:
entryData.responseStart 
 > 0 
   ? 
 entryData.responseStart 
 - 
 entryData.navigationStart 
   : 0
Level 2:
entryData.responseStart
455Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
NameType Description Notes
responseTime StringThe time taken to receive a complete response in 
the form of bytes from the relevant application 
caches, or from local resources, or from the server.Level 1:
entryData.responseStart 
 > 0 
  ? 
 entryData.responseEnd 
 - 
 entryData.responseStart 
  : 0
Level 2:
entryData.responseStart 
 > 0 
  ? 
 entryData.responseEnd 
 - 
 entryData.responseStart 
  : 0
domInteractiveNumber The time when the parser ﬁnished its 
work on the main document, and the 
HTML DOM is constructed. At this time, its
Document.readyState  changes to "interactive" 
and the corresponding readystatechange  event 
is thrown.Level 1:
entryData.domInteractive 
 > 0 
  ? 
 entryData.domInteractive 
 - 
 entryData.navigationStart 
  : 0
Level 2:
entryData.domInteractive
domContentLoadedEventStart NumberRepresents the time value equal to the time 
immediately before the user agent ﬁres the 
DOMContentLoaded event at the current 
document. TheDOMContentLoaded event ﬁres 
when the initial HTML document has been 
completely loaded and parsed. At this time, the 
main HTML document has ﬁnished parsing, the 
browser begins constructing the render tree, and 
subresources still have to be loaded. This does not 
wait for style sheets, images, and subframes to 
ﬁnish loading.Level 1:
entryData.domContentLoadedEventStart 
 > 0 
  ? 
 entryData.domContentLoadedEventStart 
 - 
 entryData.navigationStart 
  : 0
Level 2:
entryData.domContentLoadedEventStart
456Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
NameType Description Notes
domContentLoaded NumberThis start and end time of render 
tree construction is marked by the
domContentLoadedEventStart  and
domContentLoadedEventEnd . It lets 
CloudWatch RUM track execution. This 
property is the diﬀerence between
domContentLoadedStart  and
domContentLoadedEnd .
During this time, DOM and CSSOM are ready. 
This property waits on script execution, except 
for asynchronous and dynamically created 
scripts. If the scripts depend on style sheets,
domContentLoaded  waits on the style sheets, 
too. It does not wait on images.
Note
The actual values of
domContentLoadedStart  and
domContentLoadedEnd  approximate to
domContentLoaded  in Google Chrome's 
Network panel. It indicates HTML DOM 
+ CSSOM render tree construction 
time from the beginning of the page 
loading process. In the case of navigation 
metrics, the domContentLoaded  value 
represents the diﬀerence between 
start and end values, which is the time 
required for downloading subresources 
and render-tree construction only.Level 2:
entryData.domContentLoadedEventEnd 
- 
entryData.domContentLoadedEventStart
Level 2:
entryData.domContentLoadedEventEnd 
- 
entryData.domContentLoadedEventStart
domCompleteNumberThe time immediately before the browser sets 
the current document readiness of the current 
document to complete. At this point, the loading 
of subresources, such as images, is complete. 
This includes the time taken for downloading 
blocking content such as CSS and synchronous 
JavaScript. This approximates to loadTime  in 
Google Chrome’s Network panel.Level 1:
entryData.domComplete 
 > 0 
  ? 
 entryData.domComplete 
 - 
 entryData.navigationStart 
  : 0
Level 2:
entryData.domComplete
domProcessingTimeNumberThe total time between the response and the load 
event start.Level 1:
entryData.loadEventStart 
- 
entryData.responseEnd
Level 2:
entryData.loadEventStart 
- 
entryData.responseEnd
457Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
NameType Description Notes
loadEventStartNumberThe time immediately before the load event of 
the current document is ﬁred.Level 1:
entryData.loadEventStart 
 > 0 
  ? 
 entryData.loadEventStart 
 - 
 entryData.navigationStart 
  : 0
Level 2:
entryData.loadEventStart
loadEventTimeNumberThe diﬀerence between loadEventStart  and
loadEventEnd . Additional functions or logic 
waiting for this load event will be ﬁred during this 
time.Level 1:
entryData.loadEventEnd 
- 
entryData.loadEventStart
Level 2:
entryData.loadEventEnd 
- 
entryData.loadEventStart
duration StringDuration is the total page load time. It records 
the timing for downloading the main page and 
all of its synchronous subresources, and also 
for rendering the page. Asynchronous resources 
such as scripts continue to download later. This is 
the diﬀerence between the loadEventEnd  and
startTime  properties.Level 1:
entryData.loadEventEnd 
- 
entryData.navigationStart
Level 2:
entryData.duration
headerSize NumberReturns the diﬀerence between transferSize
and encodedBodySize .
This attribute is not required.Level 1: Not 
available
Level 2:
entryData.transferSize 
- 
entryData.encodedBodySize
Level 2:
entryData.transferSize 
- 
entryData.encodedBodySize
compressionRatioNumber The ratio of encodedBodySize  and
decodedBodySize . The value of
encodedBodySize  is the compressed size of the 
resource excluding the HTTP headers. The value 
of decodedBodySize  is the decompressed size of 
the resource excluding the HTTP headers.
This attribute is not required.Level 1: Not 
available.
Level 2:
entryData.encodedBodySize 
 > 0 
  ? 
 entryData.decodedBodySize / 
 entryData.encodedBodySize 
  : 0
458Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
NameType Description Notes
navigationTimingLevel NumberThe navigation timing API version.Value: 1 or 2
Resource event schema
Resource events are collected only if the app monitor has performance telemetry activated.
Timestamp metrics are based on The DOMHighResTimeStamp typedef. With Level 2 APIs, by default all 
timings are relative to the startTime . But for Level 1 APIs, the navigationStart  metric is subtracted 
from timestamp metrics to obtain relative values. All timestamp values are in milliseconds.
Resource events generated by the agent contain the following properties.
Name Type Description Notes
targetUrl String Returns the resource's URL. Formula:
entryData.name
initiatorType String Represents the type of resource that initiated the 
performance resource event.Value:
"resource"
Formula:
entryData.initiatorType
duration String Returns the diﬀerence between the responseEnd
and startTime  properties.
This attribute is not required.Formula:
entryData.duration
transferSize Number Returns the size (in octets) of the fetched 
resource, including the response header ﬁelds and 
the response payload body.
This attribute is not required.Formula:
entryData.transferSize
ﬁleType String Extensions derived from the target URL pattern.
Largest contentful paint event schema
Largest contentful paint events contain the following properties.
These events are collected only if the app monitor has performance telemetry activated.
Name Description
Value For more 
information, see
Web Vitals.
First input delay event
First input delay events contain the following properties.
These events are collected only if the app monitor has performance telemetry activated.
459Amazon CloudWatch User Guide
Information collected by the CloudWatch RUM web client
Name Description
ValueFor more 
information, see
Web Vitals.
Cumulative layout shift event
Cumulative layout shift events contain the following properties.
These events are collected only if the app monitor has performance telemetry activated.
Name Description
Value For more 
information, see
Web Vitals.
HTTP event
HTTP events can contain the following properties. It will contain either a Response  ﬁeld or an Error
ﬁeld, but not both.
These events are collected only if the app monitor has HTTP telemetry activated.
Name Description
Request The request ﬁeld includes the following:
•The Method ﬁeld, which can have values such 
as GET, POST, and so on.
•The URL
Response The response ﬁeld includes the following:
•Status, such as 2xx, 4xx, or 5xx
•Status text
Error The error ﬁeld includes the following:
•Type
•Message
•File name
•Line number
•Column number
•Stack trace
X-Ray trace event schema
These events are collected only if the app monitor has X-Ray tracing activated.
For information about X-Ray trace event schemas, see AWS X-Ray segment documents.
460Amazon CloudWatch User Guide
Manage your applications that use CloudWatch RUM
Route change timing for single-page applications
In a traditional multi-page application, when a user requests for new content to be loaded, the user 
is actually requesting a new HTML page from the server. As a result, the CloudWatch RUM web client 
captures the load times using the regular performance API metrics.
However, single-page web applications use JavaScript and Ajax to update the interface without loading a 
new page from the server. Single-page updates are not recorded by the browser timing API, but instead 
use route change timing.
CloudWatch RUM supports the monitoring of both full page loads from the server and single-page 
updates, with the following diﬀerences:
•For route change timing, there are no browser-provided metrics such as tlsTime , timeToFirstByte , 
and so on.
•For route change timing, the initiatorType  ﬁeld will be route_change .
The CloudWatch RUM web client listens to user interactions that may lead to a route change, and when 
such a user interaction is recorded, the web client records a timestamp. Then route change timing will 
begin if both of the following are true:
•A browser history API (except browser forward and back buttons) was used to perform the route 
change.
•The diﬀerence between the time of route change detection and latest user interaction timestamp is 
less than 1000 ms. This avoids data skew.
Then, once route change timing begins, that timing completes if there are no ongoing AJAX requests 
and DOM mutations. Then the timestamp of the latest completed activity will be used as the completion 
timestamp.
Route change timing will time out if there are ongoing AJAX requests or DOM mutations for more than 
10 seconds (by default). In this case, the CloudWatch RUM web client will no longer record timing for this 
route change.
As a result, the duration of a route change event is calculated as the following:
(time of latest completed activity) - (latest user interaction timestamp)
Manage your applications that use CloudWatch RUM
Use the steps in these sections to manage your applications' use of CloudWatch RUM.
How do I ﬁnd a code snippet that I've already generated?
To ﬁnd a CloudWatch RUM code snippet that you've already generated for an application, follow these 
steps.
To ﬁnd a code snippet that you've already generated
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , RUM .
3. Choose List view .
4. Next to the name of the app monitor, choose View JavaScript.
5. In the JavaScript Snippet pane, choose Copy to clipboard.
461Amazon CloudWatch User Guide
CloudWatch RUM quotas
Edit your application
To change an app monitor's settings, follow these steps. You can change any settings except the app 
monitor name.
To edit how your application uses CloudWatch RUM
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , RUM .
3. Choose List view .
4. Choose the button next to the name of the application, and then choose Actions, Edit.
5. Change any settings except the application name. For more information about the settings, see Step 
2: Create an app monitor (p. 424).
6. When ﬁnished, choose Save.
Changing the settings changes the code snippet. You must now paste the updated code snippet into 
your application.
7. After the JavaScript code snippet is created, choose Copy to clipboard or Download, and then 
choose Done .
To start monitoring with the new settings, you insert the code snippet into your application. Insert 
the code snippet inside the <head> element of your application, before the <body> element or any 
other <script>  tags.
Stop using CloudWatch RUM or delete an app monitor
To stop using CloudWatch RUM with an application, remove the code snippet that RUM generated from 
your application's code.
To delete a RUM app monitor, follow these steps.
To delete an app monitor
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Application monitoring , RUM .
3. Choose List view .
4. Choose the button next to the name of the application, and then choose Actions, Delete.
5. In the conﬁrmation box, enter Delete  and then choose Delete.
6. If you haven't done so already, delete the CloudWatch RUM code snippet from your application's 
code.
CloudWatch RUM quotas
CloudWatch RUM has the following quotas.
Resource Default quota
App monitors 20 per account
You can request a quota increase.
462Amazon CloudWatch User Guide
Troubleshooting
Resource Default quota
RUM ingestion rate 50 PutRumEvents requests per second (TPS).
You can request a quota increase.
Troubleshooting CloudWatch RUM
This section contains tips to help you troubleshoot CloudWatch RUM.
There is no data for my application
First, make sure that the code snippet has been correctly inserted into your application. For more 
information, see Step 4: Insert the code snippet into your application (p. 427).
If that is not the issue, then maybe there has been no traﬃc to your application yet. Generate some 
traﬃc by accessing your application the same way that a user would.
Data has stopped being recorded for my application
Your application might have been updated and now no longer contains a CloudWatch RUM code snippet. 
Check your application code.
Another possibility is that someone may have updated the code snippet but then didn't insert the 
updated snippet into the application. Find the current correct code snippet by following the directions in
How do I ﬁnd a code snippet that I've already generated? (p. 461) and compare it to the code snippet 
that is pasted into your application.
463Amazon CloudWatch User Guide
Using Container Insights
Insights and operational visibility
The topics in this section explain CloudWatch features that can help you gain operational visibility into 
your AWS resources.
Topics
•Using Container Insights  (p. 464)
•Using Lambda Insights  (p. 624)
•Using Contributor Insights to analyze high-cardinality data (p. 655)
•Amazon CloudWatch Application Insights (p. 668)
Using Container Insights
Use CloudWatch Container Insights to collect, aggregate, and summarize metrics and logs from your 
containerized applications and microservices. Container Insights is available for Amazon Elastic Container 
Service (Amazon ECS), Amazon Elastic Kubernetes Service (Amazon EKS), and Kubernetes platforms on 
Amazon EC2. Container Insights supports collecting metrics from clusters deployed on Fargate for both 
Amazon ECS and Amazon EKS.
CloudWatch automatically collects metrics for many resources, such as CPU, memory, disk, and network. 
Container Insights also provides diagnostic information, such as container restart failures, to help you 
isolate issues and resolve them quickly. You can also set CloudWatch alarms on metrics that Container 
Insights collects.
Container Insights collects data as performance log events using embedded metric format  (p. 985). 
These performance log events are entries that use a structured JSON schema that enables high-
cardinality data to be ingested and stored at scale. From this data, CloudWatch creates aggregated 
metrics at the cluster, node, pod, task, and service level as CloudWatch metrics. The metrics that 
Container Insights collects are available in CloudWatch automatic dashboards, and also viewable in the
Metrics  section of the CloudWatch console. Metrics are not visible until the container tasks have been 
running for some time.
When you deploy Container Insights, it automatically creates a log group for the performance log events. 
You don't need to create this log group yourself.
CloudWatch does not automatically create all possible metrics from the log data, to help you manage 
your Container Insights costs. However, you can view additional metrics and additional levels of 
granularity by using CloudWatch Logs Insights to analyze the raw performance log events.
Metrics collected by Container Insights are charged as custom metrics. For more information about 
CloudWatch pricing, see Amazon CloudWatch Pricing.
In Amazon EKS and Kubernetes, Container Insights uses a containerized version of the CloudWatch agent 
to discover all of the running containers in a cluster. It then collects performance data at every layer of 
the performance stack.
Container Insights supports encryption with the AWS AWS KMS key for the logs and metrics that it 
collects. To enable this encryption, you must manually enable AWS KMS encryption for the log group 
that receives Container Insights data. This causes Container Insights to encrypt this data using the 
provided AWS KMS key. Only symmetric keys are supported. Do not use asymmetric AWS KMS keys to 
encrypt your log groups.
464Amazon CloudWatch User Guide
Supported platforms
For more information, see Encrypt Log Data in CloudWatch Logs Using AWS KMS.
Supported platforms
Container Insights is available for Amazon Elastic Container Service, Amazon Elastic Kubernetes Service, 
and Kubernetes platforms on Amazon EC2 instances.
•For Amazon ECS, Container Insights collects metrics at the cluster, task and service levels on both 
Linux and Windows Server instances. It can collect metrics at the instance-level only on Linux 
instances.
For Amazon ECS, network metrics are available only for containers in bridge network mode and
awsvpc network mode. They are not available for containers in host network mode.
•For Amazon Elastic Kubernetes Service, and Kubernetes platforms on Amazon EC2 instances, Container 
Insights is supported only on Linux instances.
CloudWatch agent container image
Amazon provides a CloudWatch agent container image on Amazon Elastic Container Registry. For more 
information, see cloudwatch-agent  on Amazon ECR.
Supported Regions
Container Insights for Amazon ECS is supported in the following Regions:
•US East (N. Virginia)
•US East (Ohio)
•US West (N. California)
•US West (Oregon)
•Africa (Cape Town)
•Asia Paciﬁc (Hong Kong)
•Asia Paciﬁc (Hyderabad)
•Asia Paciﬁc (Jakarta)
•Asia Paciﬁc (Mumbai)
•Asia Paciﬁc (Osaka)
•Asia Paciﬁc (Seoul)
•Asia Paciﬁc (Singapore)
•Asia Paciﬁc (Tokyo)
•Asia Paciﬁc (Sydney)
•Canada (Central)
•Europe (Frankfurt)
•Europe (Ireland)
•Europe (London)
•Europe (Milan)
•Europe (Paris)
•Europe (Spain)
•Europe (Stockholm)
•Europe (Zurich)
465Amazon CloudWatch User Guide
Setting up Container Insights
•Middle East (Bahrain)
•Middle East (UAE)
•South America (São Paulo)
•AWS GovCloud (US-East)
•AWS GovCloud (US-West)
•China (Beijing)
•China (Ningxia)
Supported Regions for Amazon EKS and Kubernetes
Container Insights for Amazon EKS and Kubernetes is supported in the following Regions:
•US East (N. Virginia)
•US East (Ohio)
•US West (N. California)
•US West (Oregon)
•Asia Paciﬁc (Hong Kong)
•Asia Paciﬁc (Mumbai)
•Asia Paciﬁc (Seoul)
•Asia Paciﬁc (Singapore)
•Asia Paciﬁc (Sydney)
•Asia Paciﬁc (Tokyo)
•Canada (Central)
•China (Beijing)
•China (Ningxia)
•Europe (Frankfurt)
•Europe (Ireland)
•Europe (London)
•Europe (Paris)
•Europe (Stockholm)
•Middle East (Bahrain)
•South America (São Paulo)
•AWS GovCloud (US-East)
•AWS GovCloud (US-West)
Setting up Container Insights
The Container Insights setup process is diﬀerent for Amazon ECS and Amazon EKS and Kubernetes.
Topics
•Setting up Container Insights on Amazon ECS (p. 466)
•Setting up Container Insights on Amazon EKS and Kubernetes (p. 479)
Setting up Container Insights on Amazon ECS
You can use one or both of the following options to enable Container Insights on Amazon ECS clusters:
466Amazon CloudWatch User Guide
Setting up Container Insights
•Use the AWS Management Console or the AWS CLI to start collecting cluster-level, task-level, and 
service-level metrics.
•Deploy the CloudWatch agent as a daemon service to start collecting of instance-level metrics on 
clusters that are hosted on Amazon EC2 instances.
Topics
•Setting up Container Insights on Amazon ECS for cluster- and service-level metrics (p. 467)
•Setting up Container Insights on Amazon ECS using AWS Distro for OpenTelemetry (p. 468)
•Deploying the CloudWatch agent to collect EC2 instance-level metrics on Amazon ECS (p. 470)
•Deploying the AWS Distro for OpenTelemetry to collect EC2 instance-level metrics on Amazon ECS 
clusters  (p. 476)
•Set up FireLens to send logs to CloudWatch Logs (p. 478)
Setting up Container Insights on Amazon ECS for cluster- and service-level 
metrics
You can enable Container Insights on new and existing Amazon ECS clusters. Container Insights collects 
metrics at the cluster, task, and service levels. For existing clusters, you use the AWS CLI. For new 
clusters, use either the Amazon ECS console or the AWS CLI.
If you're using Amazon ECS on an Amazon EC2 instance, and you want to collect network and storage 
metrics from Container Insights, launch that instance using an AMI that includes Amazon ECS agent 
version 1.29. For information about updating your agent version, see Updating the Amazon ECS 
Container Agent
You can use the AWS CLI to set account-level permission to enable Container Insights for any new 
Amazon ECS clusters created in your account. To do so, enter the following command.
aws ecs put-account-setting --name "containerInsights" --value "enabled"
Setting up Container Insights on existing Amazon ECS clusters
To enable Container Insights on an existing Amazon ECS cluster, enter the following command. You must 
be running version 1.16.200 or later of the AWS CLI for the following command to work.
aws ecs update-cluster-settings --cluster myCICluster  --settings 
 name=containerInsights,value=enabled
Setting up Container Insights on new Amazon ECS clusters
There are two ways to enable Container Insights on new Amazon ECS clusters. You can conﬁgure Amazon 
ECS so that all new clusters are enabled for Container Insights by default. Otherwise, you can enable a 
new cluster when you create it.
Using the AWS Management Console
You can turn on Container Insights on all new clusters by default, or on an individual cluster as you 
create it.
To turn on Container Insights on all new clusters by default
1. Open the console at https://console.aws.amazon.com/ecs/v2.
2. In the navigation page, choose Account Settings.
467Amazon CloudWatch User Guide
Setting up Container Insights
3. Choose Update .
4. To use CloudWatch Container Insights by default for clusters, under CloudWatch Container Insights, 
select or clear CloudWatch Container Insights.
5. Choose Save changes.
If you haven't used the preceding procedure to enable Container Insights on all new clusters by default, 
use the following steps to create a cluster with Container Insights enabled.
To create a cluster with Container Insights turned on
1. Open the console at https://console.aws.amazon.com/ecs/v2.
2. In the navigation pane, choose Clusters .
3. On the Clusters  page, choose Create cluster .
4. Under Cluster conﬁguration, for Cluster name , enter a unique name.
The name can contain up to 255 letters (uppercase and lowercase), numbers, and hyphens.
5. To turn on Container Insights, expand Monitoring , and then turn on Use Container Insights .
You can now create task deﬁnitions, run tasks, and launch services in the cluster. For more information, 
see the following:
•Creating a task deﬁnition
•Running tasks
•Creating a service
Setting up Container Insights on new Amazon ECS clusters using the AWS CLI
To enable Container Insights on all new clusters by default, enter the following command.
aws ecs put-account-setting --name "containerInsights" --value "enabled"
If you didn't use the preceding command to enable Container Insights on all new clusters by default, 
enter the following command to create a new cluster with Container Insights enabled. You must be 
running version 1.16.200 or later of the AWS CLI for the following command to work.
aws ecs create-cluster --cluster-name myCICluster  --settings 
 "name=containerInsights,value=enabled"
Disabling Container Insights on Amazon ECS clusters
To disable Container Insights on an existing Amazon ECS cluster, enter the following command.
aws ecs update-cluster-settings --cluster myCICluster  --settings 
 name=containerInsights,value=disabled
Setting up Container Insights on Amazon ECS using AWS Distro for 
OpenTelemetry
Use this section if you want to use AWS Distro for OpenTelemetry to set up CloudWatch Container 
Insights on an Amazon ECS cluster. For more information about AWS Distro for Open Telemetry, see AWS 
Distro for OpenTelemetry.
468Amazon CloudWatch User Guide
Setting up Container Insights
These steps assume that you already have a cluster running Amazon ECS. For more information about 
using AWS Distro for Open Telemetry with Amazon ECS and setting up an Amazon ECS cluster for this 
purpose, see Setting up AWS Distro for OpenTelemetry Collector in Amazon Elastic Container Service.
Step 1: Create a task role
The ﬁrst step is creating a task role in the cluster that the AWS OpenTelemetry Collector will use.
To create a task role for AWS Distro for OpenTelemetry
1. Open the IAM console at https://console.aws.amazon.com/iam/.
2. In the navigation pane, choose Policies and then choose Create policy.
3. Choose the JSON tab and copy in the following policy:
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "logs:PutLogEvents", 
                "logs:CreateLogGroup", 
                "logs:CreateLogStream", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups", 
                "ssm:GetParameters" 
            ], 
            "Resource": "*" 
        } 
    ]
}
4. Choose Review policy.
5. For name, enter AWSDistroOpenTelemetryPolicy , and then choose Create policy.
6. In the left navigation pane, choose Roles and then choose Create role.
7. In the list of services, choose Elastic Container Service.
8. Lower on the page, choose Elastic Container Service Task and then choose Next: Permissions.
9. In the list of policies, search for AWSDistroOpenTelemetryPolicy.
10. Select the check box next to AWSDistroOpenTelemetryPolicy.
11. Choose Next: Tags and then choose Next: Review.
12. For Role name enter AWSOpenTelemetryTaskRole  and then choose Create role.
Step 2: Create a task execution role
The next step is creating a task execution role for the AWS OpenTelemetry Collector.
To create a task execution role for AWS Distro for OpenTelemetry
1. Open the IAM console at https://console.aws.amazon.com/iam/.
2. In the left navigation pane, choose Roles and then choose Create role.
3. In the list of services, choose Elastic Container Service.
4. Lower on the page, choose Elastic Container Service Task and then choose Next: Permissions.
5. In the list of policies, search for AmazonECSTaskExecutionRolePolicy and then select the check box 
next to AmazonECSTaskExecutionRolePolicy.
469Amazon CloudWatch User Guide
Setting up Container Insights
6. In the list of policies, search for CloudWatchLogsFullAccess and then select the check box next to
CloudWatchLogsFullAccess.
7. In the list of policies, search for AmazonSSMReadOnlyAccess and then select the check box next to
AmazonSSMReadOnlyAccess.
8. Choose Next: Tags and then choose Next: Review.
9. For Role name enter AWSOpenTelemetryTaskExecutionRole  and then choose Create role.
Step 3: Create a task deﬁnition
The next step is creating a task deﬁnition.
To create a task deﬁnition for AWS Distro for OpenTelemetry
1. Open the console at https://console.aws.amazon.com/ecs/v2.
2. In the navigation pane, choose Task deﬁnitions
3. Choose Create new task deﬁnition , Create new task deﬁnition .
4. For Task deﬁnition family, specify a unique name for the task deﬁnition.
5. Conﬁgure your containers, and then choose Next.
6. Under Metrics and logging, select Use metric collection.
7. Choose Next.
8. Choose Create .
For more information about using the AWS OpenTelemetry collector with Amazon ECS, see Setting up 
AWS Distro for OpenTelemetry Collector in Amazon Elastic Container Service.
Step 4: Run the task
The ﬁnal step is running the task that you've created.
To run the task for AWS Distro for OpenTelemetry
1. Open the console at https://console.aws.amazon.com/ecs/v2.
2. In the left navigation pane, choose Task Deﬁnitions and then select the task that you just created.
3. Choose Actions, Deploy, Run task .
4. Choose Deploy, Run task .
5. In the Compute options  section, from Existing cluster , choose the cluster.
6. Choose Create .
7. Next, you can check for the new metrics in the CloudWatch console.
8. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
9. In the left navigation pane, choose Metrics .
You should see a ECS/ContainerInsights namespace. Choose that namespace and you should see 
eight metrics.
Deploying the CloudWatch agent to collect EC2 instance-level metrics on 
Amazon ECS
To deploy the CloudWatch agent to collect instance-level metrics from Amazon ECS clusters that 
are hosted on EC2 instance, use a quick start setup with a default conﬁguration, or install the agent 
manually to be able to customize it.
470Amazon CloudWatch User Guide
Setting up Container Insights
Both methods require that you already have at least one Amazon ECS cluster deployed with an EC2 
launch type and that the CloudWatch agent continer has access to the Amazon EC2 Instance Metadata 
Service (IMDS). For more information about IMDS, see Instance metadata and user data.
These methods also assume that you have the AWS CLI installed. Additionally, to run the commands in 
the following procedures, you must be logged on to an account or role that has the IAMFullAccess and
AmazonECS_FullAccess policies.
Topics
•Quick setup using AWS CloudFormation (p. 471)
•Manual and custom setup  (p. 472)
Quick setup using AWS CloudFormation
To use the quick setup, enter the following command to use AWS CloudFormation to install the agent. 
Replace cluster-name  and cluster-region  with the name and Region of your Amazon ECS cluster.
This command creates the IAM roles CWAgentECSTaskRole and CWAgentECSExecutionRole. If these 
roles already exist in your account, use ParameterKey=CreateIAMRoles,ParameterValue=False
instead of ParameterKey=CreateIAMRoles,ParameterValue=True  when you enter the command. 
Otherwise, the command will fail.
Note
The following setup step pulls the container image from Docker Hub as an anonymous user by 
default. This pull may be subject to a rate limit. For more information, see CloudWatch agent 
container image (p. 465).
ClusterName= cluster-name
Region=cluster-region
aws cloudformation create-stack --stack-name CWAgentECS-${ClusterName}-${Region} \ 
    --template-body https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/ecs-task-definition-templates/deployment-mode/daemon-service/
cwagent-ecs-instance-metric/cloudformation-quickstart/cwagent-ecs-instance-metric-cfn.json 
 \ 
    --parameters ParameterKey=ClusterName,ParameterValue=${ClusterName} \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=True \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region ${Region}
(Alternative) Using your own IAM roles
If you want to use your own custom ECS task role and ECS task execution role instead of the
CWAgentECSTaskRole and CWAgentECSExecutionRole roles, ﬁrst make sure that the role to be 
used as the ECS task role has CloudWatchAgentServerPolicy attached. Also, make sure that the 
role to be used as the ECS task execution role has both the CloudWatchAgentServerPolicy and
AmazonECSTaskExecutionRolePolicy policies attached. Then enter the following command. In 
the command, replace task-role-arn  with the ARN of your custom ECS task role, and replace
execution-role-arn  with the ARN of your custom ECS task execution role.
ClusterName= cluster-name
Region=cluster-region
TaskRoleArn= task-role-arn
ExecutionRoleArn= execution-role-arn
aws cloudformation create-stack --stack-name CWAgentECS-${ClusterName}-${Region} \ 
    --template-body https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/ecs-task-definition-templates/deployment-mode/daemon-service/
cwagent-ecs-instance-metric/cloudformation-quickstart/cwagent-ecs-instance-metric-cfn.json 
 \ 
    --parameters ParameterKey=ClusterName,ParameterValue=${ClusterName} \ 
471Amazon CloudWatch User Guide
Setting up Container Insights
                 ParameterKey=TaskRoleArn,ParameterValue=${TaskRoleArn} \ 
                 ParameterKey=ExecutionRoleArn,ParameterValue=${ExecutionRoleArn} \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region ${Region}
Troubleshooting the quick setup
To check the status of the AWS CloudFormation stack, enter the following command.
ClusterName= cluster-name
Region=cluster-region
aws cloudformation describe-stacks --stack-name CWAgentECS-$ClusterName-$Region --region 
 $Region
If you see the StackStatus  is other than CREATE_COMPLETE  or CREATE_IN_PROGRESS , check the 
stack events to ﬁnd the error. Enter the following command.
ClusterName= cluster-name
Region=cluster-region
aws cloudformation describe-stack-events --stack-name CWAgentECS-$ClusterName-$Region --
region $Region
To check the status of the cwagent daemon service, enter the following command. In the output, you 
should see that the runningCount  is equal to the desiredCount  in the deployment  section. If it isn't 
equal, check the failures  section in the output.
ClusterName= cluster-name
Region=cluster-region
aws ecs describe-services --services cwagent-daemon-service --cluster $ClusterName --region 
 $Region
You can also use the CloudWatch Logs console to check the agent log. Look for the /ecs/ecs-cwagent-
daemon-service log group.
Deleting the AWS CloudFormation stack for the CloudWatch agent
If you need to delete the AWS CloudFormation stack, enter the following command.
ClusterName= cluster-name
Region=cluster-region
aws cloudformation delete-stack --stack-name CWAgentECS-${ClusterName}-${Region} --region 
 ${Region}
Manual and custom setup
Follow the steps in this section to manually deploy the CloudWatch agent to collect instance-level 
metrics from your Amazon ECS clusters that are hosted on EC2 instances.
Necessary IAM roles and policies
Two IAM roles are required. You must create them if they don't already exist. For more information about 
these roles, see IAM roles for Tasks and Amazon ECS Task Execution Role.
•An ECS task role, which is used by the CloudWatch agent to publish metrics. If this role already exists, 
you must make sure it has the CloudWatchAgentServerPolicy  policy attached.
•An ECS task execution role, which is used by Amazon ECS agent to launch the CloudWatch agent. If 
this role already exists, you must make sure it has the AmazonECSTaskExecutionRolePolicy  and
CloudWatchAgentServerPolicy  policies attached.
472Amazon CloudWatch User Guide
Setting up Container Insights
If you do not already have these roles, you can use the following commands to create them and attach 
the necessary policies. This ﬁrst command creates the ECS task role.
aws iam create-role --role-name CWAgentECSTaskRole \ 
    --assume-role-policy-document "{\"Version\": \"2012-10-17\",\"Statement\": [{\"Sid\": 
 \"\",\"Effect\": \"Allow\",\"Principal\": {\"Service\": \"ecs-tasks.amazonaws.com\"},
\"Action\": \"sts:AssumeRole\"}]}"
After you enter the previous command, note the value of Arn from the command output as 
"TaskRoleArn". You'll need to use it later when you create the task deﬁnition. Then enter the following 
command to attach the necessary policies.
aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy 
 \ 
    --role-name CWAgentECSTaskRole
This next command creates the ECS task execution role.
aws iam create-role --role-name CWAgentECSExecutionRole \ 
    --assume-role-policy-document "{\"Version\": \"2012-10-17\",\"Statement\": [{\"Sid\": 
 \"\",\"Effect\": \"Allow\",\"Principal\": {\"Service\": \"ecs-tasks.amazonaws.com\"},
\"Action\": \"sts:AssumeRole\"}]}"
After you enter the previous command, note the value of Arn from the command output as 
"ExecutionRoleArn". You'll need to use it later when you create the task deﬁnition. Then enter the 
following commands to attach the necessary policies.
aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy 
 \ 
    --role-name CWAgentECSExecutionRole 
           
aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/service-role/
AmazonECSTaskExecutionRolePolicy \ 
    --role-name CWAgentECSExecutionRole
Create the task deﬁnition and launch the daemon service
Create a task deﬁnition and use it to launch the CloudWatch agent as a daemon service. To create 
the task deﬁnition, enter the following command. In the ﬁrst lines, replace the placeholders with the 
actual values for your deployment. logs-region  is the Region where CloudWatch Logs is located, and
cluster-region  is the Region where your cluster is located. task-role-arn  is the Arn of the ECS 
task role that you are using, and execution-role-arn  is the Arn of the ECS task execution role.
TaskRoleArn= task-role-arn
ExecutionRoleArn= execution-role-arn
AWSLogsRegion= logs-region
Region=cluster-region
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/
latest/ecs-task-definition-templates/deployment-mode/daemon-service/cwagent-ecs-instance-
metric/cwagent-ecs-instance-metric.json \ 
    | sed "s|{{task-role-arn}}|${TaskRoleArn}|;s|{{execution-role-arn}}|
${ExecutionRoleArn}|;s|{{awslogs-region}}|${AWSLogsRegion}|" \ 
    | xargs -0 aws ecs register-task-definition --region ${Region} --cli-input-json
Then run the following command to launch the daemon service. Replace cluster-name  and cluster-
region with the name and Region of your Amazon ECS cluster.
473Amazon CloudWatch User Guide
Setting up Container Insights
ClusterName= cluster-name
Region=cluster-region
aws ecs create-service \ 
    --cluster ${ClusterName} \ 
    --service-name cwagent-daemon-service \ 
    --task-definition ecs-cwagent-daemon-service \ 
    --scheduling-strategy DAEMON \ 
    --region ${Region}
If you see this error message, An error occurred (InvalidParameterException) when 
calling the CreateService operation: Creation of service was not idempotent , 
you have already created a daemon service named cwagent-daemon-service . You must delete that 
service ﬁrst, using the following command as an example.
ClusterName= cluster-name
Region=cluster-region
aws ecs delete-service \ 
    --cluster ${ClusterName} \ 
    --service cwagent-daemon-service \ 
    --region ${Region} \ 
    --force
(Optional) Advanced conﬁguration
Optionally, you can use SSM to specify other conﬁguration options for the CloudWatch agent in your 
Amazon ECS clusters that are hosted on EC2 instances. These options are as follows:
•metrics_collection_interval  – How often in seconds that the CloudWatch agent collects 
metrics. The default is 60. The range is 1–172,000.
•endpoint_override  – (Optional) Speciﬁes a diﬀerent endpoint to send logs to. You might want to 
do this if you're publishing from a cluster in a VPC and you want the logs data to go to a VPC endpoint.
The value of endpoint_override  must be a string that is a URL.
•force_flush_interval  – Speciﬁes in seconds the maximum amount of time that logs remain in 
the memory buﬀer before being sent to the server. No matter the setting for this ﬁeld, if the size of 
the logs in the buﬀer reaches 1 MB, the logs are immediately sent to the server. The default value is 5 
seconds.
•region – By default, the agent publishes metrics to the same Region where the Amazon ECS container 
instance is located. To override this, you can specify a diﬀerent Region here. For example, "region" : 
"us-east-1"
The following is an example of a customized conﬁguration:
{ 
    "agent": { 
        "region": "us-east-1" 
    }, 
    "logs": { 
        "metrics_collected": { 
            "ecs": { 
                "metrics_collection_interval": 30 
            } 
        }, 
        "force_flush_interval": 5 
    }
}
474Amazon CloudWatch User Guide
Setting up Container Insights
To customize your CloudWatch agent conﬁguration in your Amazon ECS containers
1. Make sure that the AmazonSSMReadOnlyAccess policy is attached to your Amazon ECS Task 
Execution role. You can enter the following command to do so. This example assumes that your 
Amazon ECS Task Execution role is CWAgentECSExecutionRole. If you are using a diﬀerent role, 
substitute that role name in the following command.
aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess 
 \ 
        --role-name CWAgentECSExecutionRole
2. Create the customized conﬁguration ﬁle similar to the preceding example. Name this ﬁle /tmp/
ecs-cwagent-daemon-config.json .
3. Run the following command to put this conﬁguration into the Parameter Store. Replace cluster-
region with the Region of your Amazon ECS cluster. To run this command, you must be logged on 
to a user or role that has the AmazonSSMFullAccess policy.
Region=cluster-region
aws ssm put-parameter \ 
    --name "ecs-cwagent-daemon-service" \ 
    --type "String" \ 
    --value "`cat /tmp/ecs-cwagent-daemon-config.json`" \ 
    --region $Region
4. Download the task deﬁnition ﬁle to a local ﬁle, such as /tmp/cwagent-ecs-instance-
metric.json
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/ecs-task-definition-templates/deployment-mode/daemon-service/cwagent-
ecs-instance-metric/cwagent-ecs-instance-metric.json -o /tmp/cwagent-ecs-instance-
metric.json
5. Modify the task deﬁnition ﬁle. Remove the following section:
"environment": [ 
                { 
                    "name": "USE_DEFAULT_CONFIG", 
                    "value": "True" 
                } 
            ],
Replace that section with the following:
"secrets": [ 
                { 
                    "name": "CW_CONFIG_CONTENT", 
                    "valueFrom": "ecs-cwagent-daemon-service" 
                } 
            ],
6. Restart the agent as a daemon service by following these steps:
a. Run the following command.
TaskRoleArn= task-role-arn
ExecutionRoleArn= execution-role-arn
AWSLogsRegion= logs-region
Region=cluster-region
cat /tmp/cwagent-ecs-instance-metric.json \ 
475Amazon CloudWatch User Guide
Setting up Container Insights
    | sed "s|{{task-role-arn}}|${TaskRoleArn}|;s|{{execution-role-arn}}|
${ExecutionRoleArn}|;s|{{awslogs-region}}|${AWSLogsRegion}|" \ 
    | xargs -0 aws ecs register-task-definition --region ${Region} --cli-input-json
b. Run the following command to launch the daemon service. Replace cluster-name  and
cluster-region  with the name and Region of your Amazon ECS cluster.
ClusterName= cluster-name
Region=cluster-region
aws ecs create-service \ 
    --cluster ${ClusterName} \ 
    --service-name cwagent-daemon-service \ 
    --task-definition ecs-cwagent-daemon-service \ 
    --scheduling-strategy DAEMON \ 
    --region ${Region}
If you see this error message, An error occurred (InvalidParameterException) 
when calling the CreateService operation: Creation of service was not 
idempotent , you have already created a daemon service named cwagent-daemon-service . 
You must delete that service ﬁrst, using the following command as an example.
ClusterName= cluster-name
Region=Region
aws ecs delete-service \ 
    --cluster ${ClusterName} \ 
    --service cwagent-daemon-service \ 
    --region ${Region} \ 
    --force
Deploying the AWS Distro for OpenTelemetry to collect EC2 instance-level 
metrics on Amazon ECS clusters
Use the steps in this section to use AWS Distro for OpenTelemetry to collect EC2 instance-level metrics 
on an Amazon ECS cluster. For more information about the AWS Distro for OpenTelemetry, see AWS 
Distro for OpenTelemetry.
These steps assume that you already have a cluster running Amazon ECS. This cluster must be deployed 
with the EC2 launch type. For more information about using AWS Distro for Open Telemetry with 
Amazon ECS and setting up an Amazon ECS cluster for this purpose, see Setting up AWS Distro for 
OpenTelemetry Collector in Amazon Elastic Container Service for ECS EC2 instance level metrics.
Topics
•Quick setup using AWS CloudFormation (p. 476)
•Manual and custom setup  (p. 477)
Quick setup using AWS CloudFormation
Download the AWS CloudFormation template ﬁle for installing the AWS Distro for OpenTelemetry 
collector for Amazon ECS on EC2. Run the following curl command.
curl -O https://raw.githubusercontent.com/aws-observability/aws-otel-collector/main/
deployment-template/ecs/aws-otel-ec2-instance-metrics-daemon-deployment-cfn.yaml
After you download the template ﬁle, open it and replace PATH_TO_CloudFormation_TEMPLATE  with 
the path where you saved the template ﬁle. Then export the following parameters and run the AWS 
CloudFormation command, as shown in the following command.
476Amazon CloudWatch User Guide
Setting up Container Insights
•Cluster_Name – The Amazon ECS cluster name
•AWS_Region– The Region where the data will be sent
•PATH_TO_CloudFormation_TEMPLATE– The path where you saved the AWS CloudFormation 
template ﬁle.
•command– To enable the AWS Distro for OpenTelemetry collector to collect the instance-level 
metrics for Amazon ECS on Amazon EC2, you must specify --config=/etc/ecs/otel-instance-
metrics-config.yaml  for this parameter.
ClusterName= Cluster_Name
Region=AWS_Region
command=--config=/etc/ecs/otel-instance-metrics-config.yaml
aws cloudformation create-stack --stack-name AOCECS-${ClusterName}-${Region} \
--template-body file:// PATH_TO_CloudFormation_TEMPLATE  \
--parameters ParameterKey=ClusterName,ParameterValue=${ClusterName} \
ParameterKey=CreateIAMRoles,ParameterValue=True \
ParameterKey=command,ParameterValue=${command} \
--capabilities CAPABILITY_NAMED_IAM \
--region ${Region}
After running this command, use the Amazon ECS console to see if the task is running.
Troubleshooting the quick setup
To check the status of the AWS CloudFormation stack, enter the following command.
ClusterName= cluster-name
Region=cluster-region
aws cloudformation describe-stack --stack-name AOCECS-$ClusterName-$Region --region $Region
If the value of StackStatus  is anything other than CREATE_COMPLETE  or CREATE_IN_PROGRESS , 
check the stack events to ﬁnd the error. Enter the following command.
ClusterName= cluster-name
Region=cluster-region
aws cloudformation describe-stack-events --stack-name AOCECS-$ClusterName-$Region --region 
 $Region
To check the status of the AOCECS daemon service, enter the following command. In the output, you 
should see that runningCount  is equal to the desiredCount  in the deployment section. If it isn't 
equal, check the failures section in the output.
ClusterName= cluster-name
Region=cluster-region
aws ecs describe-services --services AOCECS-daemon-service --cluster $ClusterName --region 
 $Region
You can also use the CloudWatch Logs console to check the agent log. Look for the /aws/ecs/
containerinsights/{ClusterName}/performance log group.
Manual and custom setup
Follow the steps in this section to manually deploy the AWS Distro for OpenTelemetry to collect 
instance-level metrics from your Amazon ECS clusters that are hosted on Amazon EC2 instances.
Step 1: Necessary roles and policies
Two IAM roles are required. You must create them if they don't already exist. For more information about 
these roles, see Create IAM policy and Create IAM role.
477Amazon CloudWatch User Guide
Setting up Container Insights
Step 2: Create the task deﬁnition
Create a task deﬁnition and use it to launch the AWS Distro for OpenTelemetry as a daemon service.
To use the task deﬁnition template to create the task deﬁnition, follow the instructions in  Create ECS 
EC2 Task Deﬁnition for EC2 instance with AWS OTel Collector.
To use the Amazon ECS console to create the task deﬁnition, follow the instructions in  Install AWS OTel 
Collector by creating Task Deﬁnition through AWS console for Amazon ECS EC2 instance metrics.
Step 3: Launch the daemon service
To launch the AWS Distro for OpenTelemetry as a daemon service, follow the instructions in  Run your 
task on the Amazon Elastic Container Service (Amazon ECS) using daemon service.
(Optional) Advanced conﬁguration
Optionally, you can use SSM to specify other conﬁguration options for the AWS Distro for 
OpenTelemetry in your Amazon ECS clusters that are hosted on Amazon EC2 instances. For more 
information, about creating a conﬁguration ﬁle, see  Custom OpenTelemetry Conﬁguration. For more 
information about the options that you can use in the conﬁguration ﬁle, see AWS Container Insights 
Receiver.
Set up FireLens to send logs to CloudWatch Logs
FireLens for Amazon ECS enables you to use task deﬁnition parameters to route logs to Amazon 
CloudWatch Logs for log storage and analytics. FireLens works with Fluent Bit  and Fluentd . We provide 
an AWS for Fluent Bit image, or you can use your own Fluent Bit or Fluentd image. Creating Amazon 
ECS task deﬁnitions with a FireLens conﬁguration is supported using the AWS SDKs, AWS CLI, and AWS 
Management Console. For more information about CloudWatch Logs, see  What is CloudWatch Logs?.
There are key considerations when using FireLens for Amazon ECS. For more information, see 
Considerations .
To ﬁnd the AWS for Fluent Bit images, see  Using the AWS for Fluent Bit image.
To create a task deﬁnition that uses a FireLens conﬁguration, see  Creating a task deﬁnition that uses a 
FireLens conﬁguration.
Example
The following task deﬁnition example demonstrates how to specify a log conﬁguration that forwards 
logs to a CloudWatch Logs log group. For more information, see What Is Amazon CloudWatch Logs? in 
the Amazon CloudWatch Logs User Guide.
In the log conﬁguration options, specify the log group name and the Region it exists in. To have Fluent 
Bit create the log group on your behalf, specify "auto_create_group":"true" . You can also specify 
the task ID as the log stream preﬁx, which assists in ﬁltering. For more information, see Fluent Bit Plugin 
for CloudWatch Logs.
{ 
 "family": "firelens-example-cloudwatch", 
 "taskRoleArn": "arn:aws:iam:: 123456789012 :role/ecs_task_iam_role ", 
 "containerDefinitions": [ 
  { 
   "essential": true, 
   "image": "906394416424.dkr.ecr. us-west-2 .amazonaws.com/aws-for-fluent-bit:latest", 
   "name": "log_router", 
   "firelensConfiguration": { 
    "type": "fluentbit" 
478Amazon CloudWatch User Guide
Setting up Container Insights
   }, 
   "logConfiguration": { 
    "logDriver": "awslogs", 
    "options": { 
     "awslogs-group": "firelens-container", 
     "awslogs-region": " us-west-2 ", 
     "awslogs-create-group": "true", 
     "awslogs-stream-prefix": " firelens " 
    } 
   }, 
   "memoryReservation": 50
   }, 
   { 
    "essential": true, 
    "image": "nginx", 
    "name": "app", 
    "logConfiguration": { 
     "logDriver":"awsfirelens", 
     "options": { 
     "Name": "cloudwatch", 
     "region": " us-west-2 ", 
     "log_key": "log", 
                                 "log_group_name": "/aws/ecs/containerinsights/
$(ecs_cluster)/application", 
     "auto_create_group": "true", 
     "log_stream_name": "$(ecs_task_id)" 
    } 
   }, 
   "memoryReservation": 100
  } 
 ]
}
Setting up Container Insights on Amazon EKS and Kubernetes
Container Insights is supported on Amazon EKS versions 1.23 and later. The quick start method of 
installation is supported only on versions 1.24 and later.
The overall process for setting up Container Insights on Amazon EKS or Kubernetes is as follows:
1.Verify that you have the necessary prerequisites.
2.Set up the CloudWatch agent or the AWS Distro for OpenTelemetry as a DaemonSet on your cluster to 
send metrics to CloudWatch.
Set up Fluent Bit or Fluentd to send logs to CloudWatch Logs.
You can perform these steps at once as part of the quick start setup if you are using the CloudWatch 
agent, or do them separately.
3.(Optional) Set up Amazon EKS control plane logging.
4.(Optional) Set up the CloudWatch agent as a StatsD endpoint on the cluster to send StatsD metrics to 
CloudWatch.
5.(Optional) Enable App Mesh Envoy Access Logs.
Topics
•Verify prerequisites (p. 480)
•Using the CloudWatch agent (p. 481)
•Using AWS Distro for OpenTelemetry (p. 487)
•Send logs to CloudWatch Logs (p. 488)
479Amazon CloudWatch User Guide
Setting up Container Insights
•Updating or deleting Container Insights on Amazon EKS and Kubernetes (p. 501)
Verify prerequisites
Before you install Container Insights on Amazon EKS or Kubernetes, verify the following. These 
prerequisites apply whether you are using the CloudWatch agent or AWS Distro for OpenTelemetry to set 
up Container Insights on Amazon EKS clusters.
•You have a functional Amazon EKS or Kubernetes cluster with nodes attached in one of the Regions 
that supports the Container Insights for Amazon EKS and Kubernetes. For the list of supported 
Regions, see Using Container Insights  (p. 464).
•You have kubectl installed and running. For more information, see Installing kubectl  in the Amazon 
EKS User Guide .
•If you're using Kubernetes running on AWS instead of using Amazon EKS, the following prerequisites 
are also necessary:
•Be sure that your Kubernetes cluster has enabled role-based access control (RBAC). For more 
information, see Using RBAC Authorization in the Kubernetes Reference.
•Your kubelet has enabled Webhook authorization mode. For more information, see Kubelet 
authentication/authorization  in the Kubernetes Reference.
•Your container runtime is Docker.
You must also grant IAM permissions to enable your Amazon EKS worker nodes to send metrics and logs 
to CloudWatch. There are two ways to do this:
•Attach a policy to the IAM role of your worker nodes. This works for both Amazon EKS clusters and 
other Kubernetes clusters.
•Use an IAM role for service accounts for the cluster, and attach the policy to this role. This works only 
for Amazon EKS clusters.
The ﬁrst option grants permissions to CloudWatch for the entire node, while using an IAM role for the 
service account gives CloudWatch access to only the appropriate daemonset pods.
Attaching a policy to the IAM role of your worker nodes
Follow these steps to attach the policy to the IAM role of your worker nodes. This works for both Amazon 
EKS clusters and Kubernetes clusters outside of Amazon EKS.
To attach the necessary policy to the IAM role for your worker nodes
1. Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/.
2. Select one of the worker node instances and choose the IAM role in the description.
3. On the IAM role page, choose Attach policies.
4. In the list of policies, select the check box next to CloudWatchAgentServerPolicy. If necessary, use 
the search box to ﬁnd this policy.
5. Choose Attach policies.
If you're running a Kubernetes cluster outside Amazon EKS, you might not already have an IAM role 
attached to your worker nodes. If not, you must ﬁrst attach an IAM role to the instance and then add the 
policy as explained in the previous steps. For more information on attaching a role to an instance, see
Attaching an IAM Role to an Instance in the Amazon EC2 User Guide for Windows Instances.
If you're running a Kubernetes cluster outside Amazon EKS and you want to collect EBS volume IDs in the 
metrics, you must add another policy to the IAM role attached to the instance. Add the following as an 
480Amazon CloudWatch User Guide
Setting up Container Insights
inline policy. For more information, see Adding and Removing IAM Identity Permissions in the IAM User 
Guide .
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Action": [ 
                "ec2:DescribeVolumes" 
            ], 
            "Resource": "*", 
            "Effect": "Allow" 
        } 
    ]
}
Using an IAM service account role
This method works only on Amazon EKS clusters.
To grant permission to CloudWatch using an IAM service account role
1. If you haven't already, enable IAM roles for service accounts on your cluster. For more information, 
see Enabling IAM roles for service accounts on your cluster .
2. If you haven't already, conﬁgure the service account to use an IAM role. For more information, see
Conﬁguring a Kubernetes service account to assume an IAM role.
When you create the role, attach the CloudWatchAgentServerPolicy IAM policy to the role in 
addition to the policy that you create for the role. Also, the associated Kubernetes Service Account 
that is linked to this role should be created in the amazon-cloudwatch  namespace, where the 
CloudWatch and Fluent it daemonsets will be deployed in the upcoming steps
3. If you haven't already, associate the IAM role with a service account in your cluster. For more 
information, see Conﬁguring a Kubernetes service account to assume an IAM role.
Using the CloudWatch agent
Use the instructions in one of the following sections to set up Container Insights on an Amazon EKS 
cluster by using the CloudWatch agent. The quick start instructions are supported only on Amazon EKS 
versions 1.24 and later.
Topics
•Quick Start setup for Container Insights on Amazon EKS and Kubernetes (p. 481)
•Set up the CloudWatch agent to collect cluster metrics (p. 484)
Quick Start setup for Container Insights on Amazon EKS and Kubernetes
To complete the setup of Container Insights, you can follow the quick start instructions in this section.
Important
Before completing the steps in this section, you must have veriﬁed the prerequisites including 
IAM permissions. For more information, see Verify prerequisites (p. 480).
Alternatively, you can instead follow the instructions in the following two sections, Set up the 
CloudWatch agent to collect cluster metrics (p. 484) and Send logs to CloudWatch Logs (p. 488). 
Those sections provide more conﬁguration details on how the CloudWatch agent works with Amazon 
EKS and Kubernetes, but require you to perform more installation steps.
481Amazon CloudWatch User Guide
Setting up Container Insights
Note
Amazon has now launched Fluent Bit as the default log solution for Container Insights with 
signiﬁcant performance gains. We recommend that you use Fluent Bit instead of Fluentd.
Quick Start with the CloudWatch agent and Fluent Bit
There are two conﬁgurations for Fluent Bit: an optimized version and a version that provides an 
experience more similar to Fluentd. The Quick Start conﬁguration uses the optimized version. For more 
details about the Fluentd-compatible conﬁguration, see Set up Fluent Bit as a DaemonSet to send logs 
to CloudWatch Logs (p. 489).
To deploy Container Insights using the quick start, enter the following command.
Note
The following setup step pulls the container image from Docker Hub as an anonymous user by 
default. This pull may be subject to a rate limit. For more information, see CloudWatch agent 
container image (p. 465).
ClusterName=<my-cluster-name>
RegionName=<my-cluster-region>
FluentBitHttpPort='2020'
FluentBitReadFromHead='Off'
[[ ${FluentBitReadFromHead} = 'On' ]] && FluentBitReadFromTail='Off'|| 
 FluentBitReadFromTail='On'
[[ -z ${FluentBitHttpPort} ]] && FluentBitHttpServer='Off' || FluentBitHttpServer='On'
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-
mode/daemonset/container-insights-monitoring/quickstart/cwagent-fluent-
bit-quickstart.yaml | sed 's/{{cluster_name}}/'${ClusterName}'/;s/
{{region_name}}/'${RegionName}'/;s/{{http_server_toggle}}/"'${FluentBitHttpServer}'"/;s/
{{http_server_port}}/"'${FluentBitHttpPort}'"/;s/
{{read_from_head}}/"'${FluentBitReadFromHead}'"/;s/
{{read_from_tail}}/"'${FluentBitReadFromTail}'"/' | kubectl apply -f - 
In this command, my-cluster-name  is the name of your Amazon EKS or Kubernetes cluster, and my-
cluster-region  is the name of the Region where the logs are published. We recommend that you use 
the same Region where your cluster is deployed to reduce the AWS outbound data transfer costs.
For example, to deploy Container Insights on the cluster named MyCluster  and publish the logs and 
metrics to US West (Oregon), enter the following command.
ClusterName='MyCluster'
LogRegion='us-west-2'
FluentBitHttpPort='2020'
FluentBitReadFromHead='Off'
[[ ${FluentBitReadFromHead} = 'On' ]] && FluentBitReadFromTail='Off'|| 
 FluentBitReadFromTail='On'
[[ -z ${FluentBitHttpPort} ]] && FluentBitHttpServer='Off' || FluentBitHttpServer='On'
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-
mode/daemonset/container-insights-monitoring/quickstart/cwagent-fluent-
bit-quickstart.yaml | sed 's/{{cluster_name}}/'${ClusterName}'/;s/
{{region_name}}/'${LogRegion}'/;s/{{http_server_toggle}}/"'${FluentBitHttpServer}'"/;s/
{{http_server_port}}/"'${FluentBitHttpPort}'"/;s/
{{read_from_head}}/"'${FluentBitReadFromHead}'"/;s/
{{read_from_tail}}/"'${FluentBitReadFromTail}'"/' | kubectl apply -f - 
Migrating from Fluentd
If you already have Fluentd conﬁgured and want to move to Fluent Bit, you must delete the Fluentd pods 
after you install Fluent Bit. You can use the following command to delete Fluentd.
482Amazon CloudWatch User Guide
Setting up Container Insights
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/
latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-
monitoring/fluentd/fluentd.yaml | kubectl delete -f -
kubectl delete configmap cluster-info -n amazon-cloudwatch
Deleting Container Insights
If you want to remove Container Insights after using the quick start setup, enter the following command.
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-
mode/daemonset/container-insights-monitoring/quickstart/cwagent-fluent-
bit-quickstart.yaml | sed 's/{{cluster_name}}/'${ClusterName}'/;s/
{{region_name}}/'${LogRegion}'/;s/{{http_server_toggle}}/"'${FluentBitHttpServer}'"/;s/
{{http_server_port}}/"'${FluentBitHttpPort}'"/;s/
{{read_from_head}}/"'${FluentBitReadFromHead}'"/;s/
{{read_from_tail}}/"'${FluentBitReadFromTail}'"/' | kubectl delete -f -
Quick Start with the CloudWatch agent and Fluentd
If you are already using Fluentd in your Kubernetes cluster and want to extend it to be the log solution 
for Container Insights, we provide a Fluentd conﬁguration for you to do so.
Warning
Container Insights support for Fluentd is now in maintenance mode, which means that AWS 
will not provide any further updates for Fluentd and that we are planning to deprecate it in 
near future. Additionally, the current Fluentd conﬁguration for Container Insights is using an 
old version of the Fluentd Image fluent/fluentd-kubernetes-daemonset:v1.10.3-
debian-cloudwatch-1.0  which does not have the latest improvement and security patches. 
For the latest Fluentd image supported by the open source community, see ﬂuentd-kubernetes-
daemonset .
We strongly recommend that you migrate to use FluentBit with Container Insights whenever 
possible. Using FluentBit as the log forwarder for Container Insights provides signiﬁcant 
performance gains.
For more information, see Set up Fluent Bit as a DaemonSet to send logs to CloudWatch 
Logs  (p. 489) and  Diﬀerences if you're already using Fluentd (p. 489).
To deploy the CloudWatch agent and Fluentd using the quick start, use the following command. The 
following setup contains a community supported Fluentd container image which is supported on 
Amazon EKS versions 1.24 and later. You can replace the image with your own Fluentd image as long 
as it meets the Fluentd image requirements. For more information, see (Optional) Set up Fluentd as a 
DaemonSet to send logs to CloudWatch Logs (p. 494).
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/
latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-
monitoring/quickstart/cwagent-fluentd-quickstart.yaml | sed "s/{{cluster_name}}/ cluster-
name/;s/{{region_name}}/ cluster-region /" | kubectl apply -f -
In this command, cluster-name  is the name of your Amazon EKS or Kubernetes cluster, and cluster-
region is the name of the Region where the logs are published. We recommend that you use the same 
Region where your cluster is deployed to reduce the AWS outbound data transfer costs.
For example, to deploy Container Insights on the cluster named MyCluster  and publish the logs and 
metrics to US West (Oregon), enter the following command.
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/
latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-
monitoring/quickstart/cwagent-fluentd-quickstart.yaml | sed "s/{{cluster_name}}/
MyCluster/;s/{{region_name}}/us-west-2/" | kubectl apply -f -
483Amazon CloudWatch User Guide
Setting up Container Insights
Deleting Container Insights
If you want to remove Container Insights after using the quick start setup, enter the following command.
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/
latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-
monitoring/quickstart/cwagent-fluentd-quickstart.yaml | sed "s/{{cluster_name}}/ cluster-
name/;s/{{region_name}}/ cluster-region /" | kubectl delete -f -
Set up the CloudWatch agent to collect cluster metrics
To set up Container Insights to collect metrics, you can follow the steps in Quick Start setup for 
Container Insights on Amazon EKS and Kubernetes (p. 481) or you can follow the steps in this section. 
In the following steps, you set up the CloudWatch agent to be able to collect metrics from your clusters.
Step 1: Create a namespace for CloudWatch
Use the following step to create a Kubernetes namespace called amazon-cloudwatch  for CloudWatch. 
You can skip this step if you have already created this namespace.
To create a namespace for CloudWatch
• Enter the following command.
kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/
container-insights-monitoring/cloudwatch-namespace.yaml
Step 2: Create a service account in the cluster
Use the following step to create a service account for the CloudWatch agent, if you do not already have 
one.
To create a service account for the CloudWatch agent
• Enter the following command.
kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/
container-insights-monitoring/cwagent/cwagent-serviceaccount.yaml
If you didn't follow the previous steps, but you already have a service account for the CloudWatch agent 
that you want to use, you must ensure that it has the following rules. Additionally, in the rest of the 
steps in the Container Insights installation, you must use the name of that service account instead of
cloudwatch-agent .
rules: 
  - apiGroups: [""] 
    resources: ["pods", "nodes", "endpoints"] 
    verbs: ["watch", "list"] 
  - apiGroups: [""] 
    resources: ["nodes/proxy"] 
    verbs: ["get"] 
  - apiGroups: [""] 
    resources: ["nodes/stats", "configmaps", “events”] 
    verbs: ["create"] 
  - apiGroups: [""] 
484Amazon CloudWatch User Guide
Setting up Container Insights
    resources: ["configmaps"] 
    resourceNames: ["cwagent-clusterleader"] 
    verbs: ["get", "update"] 
  - nonResourceURLs: ["/metrics"] 
    verbs: ["get"]
Step 3: Create a ConﬁgMap for the CloudWatch agent
Use the following steps to create a ConﬁgMap for the CloudWatch agent.
To create a ConﬁgMap for the CloudWatch agent
1. Download the ConﬁgMap YAML to your kubectl client host by running the following command:
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-
insights-monitoring/cwagent/cwagent-configmap.yaml
2. Edit the downloaded YAML ﬁle, as follows:
•cluster_name  – In the kubernetes  section, replace {{cluster-name}}  with the name of your 
cluster. Remove the {{}} characters. Alternatively, if you're using an Amazon EKS cluster, you can 
delete the "cluster_name"  ﬁeld and value. If you do, the CloudWatch agent detects the cluster 
name from the Amazon EC2 tags.
3. (Optional) Make further changes to the ConﬁgMap based on your monitoring requirements, as 
follows:
•metrics_collection_interval – In the kubernetes  section, you can specify how often the agent 
collects metrics. The default is 60 seconds. The default cadvisor collection interval in kubelet is 15 
seconds, so don't set this value to less than 15 seconds.
•endpoint_override – In the logs section, you can specify the CloudWatch Logs endpoint if you 
want to override the default endpoint. You might want to do this if you're publishing from a 
cluster in a VPC and you want the data to go to a VPC endpoint.
•force_ﬂush_interval – In the logs section, you can specify the interval for batching log events 
before they are published to CloudWatch Logs. The default is 5 seconds.
•region  – By default, the agent published metrics to the Region where the worker node is located. 
To override this, you can add a region  ﬁeld in the agent section: for example, "region":"us-
west-2" .
•statsd  section – If you want the CloudWatch Logs agent to also run as a StatsD listener in each 
worker node of your cluster, you can add a statsd section to the metrics section, as in the 
following example. For information about other StatsD options for this section, see Retrieve 
custom metrics with StatsD  (p. 945).
"metrics": { 
  "metrics_collected": { 
    "statsd": { 
      "service_address":":8125" 
    } 
  }
}
A full example of the JSON section is as follows.
{ 
    "agent": { 
        "region": "us-east-1" 
    }, 
485Amazon CloudWatch User Guide
Setting up Container Insights
    "logs": { 
        "metrics_collected": { 
            "kubernetes": { 
                "cluster_name": "MyCluster", 
                "metrics_collection_interval": 60 
            } 
        }, 
        "force_flush_interval": 5, 
        "endpoint_override": "logs.us-east-1.amazonaws.com" 
    }, 
    "metrics": { 
        "metrics_collected": { 
            "statsd": { 
                "service_address": ":8125" 
            } 
        } 
    }
}
4. Create the ConﬁgMap in the cluster by running the following command.
kubectl apply -f cwagent-configmap.yaml
Step 4: Deploy the CloudWatch agent as a DaemonSet
To ﬁnish the installation of the CloudWatch agent and begin collecting container metrics, use the 
following steps.
To deploy the CloudWatch agent as a DaemonSet
1. • If you do not want to use StatsD on the cluster, enter the following command.
kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/
daemonset/container-insights-monitoring/cwagent/cwagent-daemonset.yaml
• If you do want to use StatsD, follow these steps:
a. Download the DaemonSet YAML to your kubectl client host by running the following 
command.
curl -O  https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/
daemonset/container-insights-monitoring/cwagent/cwagent-daemonset.yaml
b. Uncomment the port section in the cwagent-daemonset.yaml  ﬁle as in the following:
ports: 
  - containerPort: 8125 
    hostPort: 8125 
    protocol: UDP
c. Deploy the CloudWatch agent in your cluster by running the following command.
kubectl apply -f cwagent-daemonset.yaml
2. Validate that the agent is deployed by running the following command.
kubectl get pods -n amazon-cloudwatch
486Amazon CloudWatch User Guide
Setting up Container Insights
When complete, the CloudWatch agent creates a log group named /aws/
containerinsights/ Cluster_Name /performance  and sends the performance log events to this 
log group. If you also set up the agent as a StatsD listener, the agent also listens for StatsD metrics on 
port 8125 with the IP address of the node where the application pod is scheduled.
Troubleshooting
If the agent doesn't deploy correctly, try the following:
•Run the following command to get the list of pods.
kubectl get pods -n amazon-cloudwatch
•Run the following command and check the events at the bottom of the output.
kubectl describe pod pod-name  -n amazon-cloudwatch
•Run the following command to check the logs.
kubectl logs pod-name   -n amazon-cloudwatch
Using AWS Distro for OpenTelemetry
You can set up Container Insights to collect metrics from Amazon EKS clusters by using the AWS Distro 
for OpenTelemetry collector. For more information about the AWS Distro for OpenTelemetry, see AWS 
Distro for OpenTelemetry.
How you set up Container Insights depends on whether the cluster is hosted on Amazon EC2 instances or 
on AWS Fargate (Fargate).
Amazon EKS clusters hosted on Amazon EC2
If you have not already done so, make sure that you have fulﬁlled the prerequisites including the 
necessary IAM roles. For more information, see Verify prerequisites (p. 480).
Amazon provides a Helm chart that you can use to set up the monitoring of Amazon Elastic Kubernetes 
Service on Amazon EC2. This monitoring uses the AWS Distro for OpenTelemetry(ADOT) Collector for 
metrics and Fluent Bit for logs. Therefore, the Helm chart is useful for customers who use Amazon EKS 
on Amazon EC2 and want to collect metrics and logs to send to CloudWatch Container Insights. For more 
information about this Helm chart, see ADOT Helm chart for EKS on EC2 metrics and logs to Amazon 
CloudWatch Container Insights.
Alternatively, you can also use the instructions in the rest of this section.
First, deploy the AWS Distro for OpenTelemetry collector as a DaemonSet by entering the following 
command.
curl https://raw.githubusercontent.com/aws-observability/aws-otel-collector/main/
deployment-template/eks/otel-container-insights-infra.yaml |
kubectl apply -f -
To conﬁrm that the collector is running, enter the following command.
kubectl get pods -l name=aws-otel-eks-ci -n aws-otel-eks
487Amazon CloudWatch User Guide
Setting up Container Insights
If the output of this command includes multiple pods in the Running state, the collector is 
running and collecting metrics from the cluster. The collector creates a log group named aws/
containerinsights/ cluster-name /performance  and sends the performance log events to it.
For information about how to see your Container Insights metrics in CloudWatch, see Viewing Container 
Insights metrics  (p. 503).
AWS has also provided documentation on GitHub for this scenario. If you want to customize the metrics 
and logs published by Container Insights, see https://aws-otel.github.io/docs/getting-started/container-
insights/eks-infra .
Amazon EKS clusters hosted on Fargate
For instructions for how to conﬁgure and deploy an ADOT Collector to collect system metrics from 
workloads deployed to an Amazon EKS cluster on Fargate and send them to CloudWatch Container 
Insights, see Container Insights EKS Fargate in the AWS Distro for OpenTelemetry documentation.
Send logs to CloudWatch Logs
To send logs from your containers to Amazon CloudWatch Logs, you can use Fluent Bit or Fluentd. For 
more information, see Fluent Bit  and Fluentd .
If you are not already using Fluentd, we recommend that you use Fluent Bit for the following reasons:
•Fluent Bit has a smaller resource footprint and is more resource-eﬃcient with memory and CPU 
usage than Fluentd. For a more detailed comparison, see Fluent Bit and Fluentd performance 
comparison (p. 488).
•The Fluent Bit image is developed and maintained by AWS. This gives AWS the ability to adopt new 
Fluent Bit image features and respond to issues much quicker.
Topics
•Fluent Bit and Fluentd performance comparison (p. 488)
•Set up Fluent Bit as a DaemonSet to send logs to CloudWatch Logs (p. 489)
•(Optional) Set up Fluentd as a DaemonSet to send logs to CloudWatch Logs (p. 494)
•(Optional) Set up Amazon EKS control plane logging (p. 498)
•(Optional) Enable App Mesh Envoy access logs (p. 499)
•(Optional) Enable the Use_Kubelet feature for large clusters (p. 499)
Fluent Bit and Fluentd performance comparison
The following tables show the performance advantage that Fluent Bit has over Fluentd in memory 
and CPU usages. The following numbers are just for reference and might change depending on the 
environment.
Logs per second Fluentd CPU usage Fluent Bit CPU 
usage with Fluentd-
compatible 
conﬁgurationFluent Bit CPU usage 
with optimized 
conﬁguration
100 0.35 vCPU 0.02 vCPU 0.02 vCPU
1,000 0.32 vCPU 0.14 vCPU 0.11 vCPU
5,000 0.85 vCPU 0.48 vCPU 0.30 vCPU
10,000 0.94 vCPU 0.60 vCPU 0.39 vCPU
488Amazon CloudWatch User Guide
Setting up Container Insights
Logs per secondFluentd memory usageFluent Bit memory 
usage with Fluentd-
compatible 
conﬁgurationFluent Bit memory 
usage with optimized 
conﬁguration
100 153 MB 46 MB 37 MB
1,000 270 MB 45 MB 40 MB
5,000 320 MB 55 MB 45 MB
10,000 375 MB 92 MB 75 MB
Set up Fluent Bit as a DaemonSet to send logs to CloudWatch Logs
The following sections help you deploy Fluent Bit to send logs from containers to CloudWatch Logs.
Topics
•Diﬀerences if you're already using Fluentd (p. 489)
•Setting up Fluent Bit (p. 490)
•Multi-line log support (p. 492)
•(Optional) Reducing the log volume from Fluent Bit (p. 492)
•Troubleshooting (p. 493)
•Dashboard (p. 493)
Diﬀerences if you're already using Fluentd
If you are already using Fluentd to send logs from containers to CloudWatch Logs, read this section to 
see the diﬀerences between Fluentd and Fluent Bit. If you are not already using Fluentd with Container 
Insights, you can skip to  Setting up Fluent Bit (p. 490).
We provide two default conﬁgurations for Fluent Bit:
•Fluent Bit optimized conﬁguration — A conﬁguration aligned with Fluent Bit best practices.
•Fluentd-compatible conﬁguration — A conﬁguration that is aligned with Fluentd behavior as much as 
possible.
The following list explains the diﬀerences between Fluentd and each Fluent Bit conﬁguration in detail.
•Diﬀerences in log stream names — If you use the Fluent Bit optimized conﬁguration, the log stream 
names will be diﬀerent.
Under /aws/containerinsights/Cluster_Name/application
•Fluent Bit optimized conﬁguration sends logs to kubernetes-nodeName -
application.var.log.containers. kubernetes-podName _kubernetes-
namespace _kubernetes-container-name -kubernetes-containerID
•Fluentd sends logs to kubernetes-podName _kubernetes-namespace _kubernetes-
containerName _kubernetes-containerID
Under /aws/containerinsights/Cluster_Name/host
•Fluent Bit optimized conﬁguration sends logs to kubernetes-nodeName .host-log-file
•Fluentd sends logs to host-log-file -Kubernetes-NodePrivateIp
489Amazon CloudWatch User Guide
Setting up Container Insights
Under /aws/containerinsights/Cluster_Name/dataplane
•Fluent Bit optimized conﬁguration sends logs to kubernetes-nodeName .dataplaneServiceLog
•Fluentd sends logs to dataplaneServiceLog -Kubernetes-nodeName
•The kube-proxy  and aws-node  log ﬁles that Container Insights writes are in diﬀerent locations. In 
Fluentd conﬁguration, they are in /aws/containerinsights/Cluster_Name/application . In 
the Fluent Bit optimized conﬁguration, they are in /aws/containerinsights/Cluster_Name/
dataplane .
•Most metadata such as pod_name  and namespace_name  are the same in Fluent Bit and Fluentd, but 
the following are diﬀerent.
•The Fluent Bit optimized conﬁguration uses docker_id  and Fluentd use Docker.container_id .
•Both Fluent Bit conﬁgurations do not use the following metadata. They are present only in Fluentd:
container_image_id , master_url , namespace_id , and namespace_labels .
Setting up Fluent Bit
To set up Fluent Bit to collect logs from your containers, you can follow the steps in Quick Start setup for 
Container Insights on Amazon EKS and Kubernetes (p. 481) or you can follow the steps in this section.
With either method, the IAM role that is attached to the cluster nodes must have suﬃcient permissions. 
For more information about the permissions required to run an Amazon EKS cluster, see Amazon EKS 
IAM Policies, Roles, and Permissions in the Amazon EKS User Guide .
In the following steps, you set up Fluent Bit as a daemonSet to send logs to CloudWatch Logs. When you 
complete this step, Fluent Bit creates the following log groups if they don't already exist.
Important
If you already have FluentD conﬁgured in Container Insights and the FluentD DaemonSet 
is not running as expected (this can happen if you use the containerd  runtime), you must 
uninstall it before installing Fluent Bit to prevent Fluent Bit from processing the FluentD error 
log messages. Otherwise, you must uninstall FluentD immediately after you have successfully 
installed Fluent Bit. Uninstalling Fluentd after installing Fluent Bit ensures ontinuity in logging 
during this migration process. Only one of Fluent Bit or FluentD is needed to send logs to 
CloudWatch Logs.
Log group name Log source
/aws/containerinsights/ Cluster_Name /
applicationAll log ﬁles in /var/log/containers
/aws/containerinsights/ Cluster_Name /
hostLogs from /var/log/dmesg , /var/log/
secure , and /var/log/messages
/aws/containerinsights/ Cluster_Name /
dataplaneThe logs in /var/log/journal  for
kubelet.service , kubeproxy.service , and
docker.service .
To install Fluent Bit to send logs from containers to CloudWatch Logs
1. If you don't already have a namespace called amazon-cloudwatch , create one by entering the 
following command:
kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/
container-insights-monitoring/cloudwatch-namespace.yaml
490Amazon CloudWatch User Guide
Setting up Container Insights
2. Run the following command to create a ConﬁgMap named cluster-info  with the cluster name 
and the Region to send logs to. Replace cluster-name  and cluster-region  with your cluster's 
name and Region.
ClusterName= cluster-name
RegionName= cluster-region
FluentBitHttpPort='2020'
FluentBitReadFromHead='Off'
[[ ${FluentBitReadFromHead} = 'On' ]] && FluentBitReadFromTail='Off'|| 
 FluentBitReadFromTail='On'
[[ -z ${FluentBitHttpPort} ]] && FluentBitHttpServer='Off' || FluentBitHttpServer='On'
kubectl create configmap fluent-bit-cluster-info \
--from-literal=cluster.name=${ClusterName} \
--from-literal=http.server=${FluentBitHttpServer} \
--from-literal=http.port=${FluentBitHttpPort} \
--from-literal=read.head=${FluentBitReadFromHead} \
--from-literal=read.tail=${FluentBitReadFromTail} \
--from-literal=logs.region=${RegionName} -n amazon-cloudwatch
In this command, the FluentBitHttpServer  for monitoring plugin metrics is on by default. To 
turn it oﬀ, change the third line in the command to FluentBitHttpPort=''  (empty string) in the 
command.
Also by default, Fluent Bit reads log ﬁles from the tail, and will capture only new logs after it is 
deployed. If you want the opposite, set FluentBitReadFromHead='On'  and it will collect all logs 
in the ﬁle system.
3. Download and deploy the Fluent Bit daemonset to the cluster by running one of the following 
commands.
• If you want the Fluent Bit optimized conﬁguration, run this command.
kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/
daemonset/container-insights-monitoring/fluent-bit/fluent-bit.yaml
• If you want the Fluent Bit conﬁguration that is more similar to Fluentd, run this command.
kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/
daemonset/container-insights-monitoring/fluent-bit/fluent-bit-compatible.yaml
4. Validate the deployment by entering the following command. Each node should have one pod 
named ﬂuent-bit-*.
kubectl get pods -n amazon-cloudwatch
The above steps create the following resources in the cluster:
•A service account named Fluent-Bit  in the amazon-cloudwatch  namespace. This service account 
is used to run the Fluent Bit daemonSet. For more information, see Managing Service Accounts in the 
Kubernetes Reference.
•A cluster role named Fluent-Bit-role  in the amazon-cloudwatch  namespace. This cluster role 
grants get, list , and watch  permissions on pod logs to the Fluent-Bit  service account. For more 
information, see API Overview in the Kubernetes Reference.
•A ConﬁgMap named Fluent-Bit-config  in the amazon-cloudwatch  namespace. This ConﬁgMap 
contains the conﬁguration to be used by Fluent Bit. For more information, see Conﬁgure a Pod to Use 
a ConﬁgMap  in the Kubernetes Tasks documentation.
491Amazon CloudWatch User Guide
Setting up Container Insights
If you want to verify your Fluent Bit setup, follow these steps.
Verify the Fluent Bit setup
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Log groups .
3. Make sure that you're in the Region where you deployed Fluent Bit.
4. Check the list of log groups in the Region. You should see the following:
•/aws/containerinsights/ Cluster_Name /application
•/aws/containerinsights/ Cluster_Name /host
•/aws/containerinsights/ Cluster_Name /dataplane
5. Navigate to one of these log groups and check the Last Event Time for the log streams. If it is recent 
relative to when you deployed Fluent Bit, the setup is veriﬁed.
There might be a slight delay in creating the /dataplane  log group. This is normal as these log 
groups only get created when Fluent Bit starts sending logs for that log group.
Multi-line log support
For information on how to use Fluent Bit with multi-line logs, see the following sections of the Fluent Bit 
documentation:
•Multiline Parsing
•Multiline and Containers (v1.8)
•Multiline Core (v1.8)
•Always use multiline in the tail input
(Optional) Reducing the log volume from Fluent Bit
By default, we send Fluent Bit application logs and Kubernetes metadata to CloudWatch. If you want to 
reduce the volume of data being sent to CloudWatch, you can stop one or both of these data sources 
from being sent to CloudWatch.
To stop Fluent Bit application logs, remove the following section from the Fluent-Bit.yaml  ﬁle.
[INPUT] 
        Name                tail 
        Tag                 application.* 
        Path                /var/log/containers/fluent-bit* 
        Parser              docker 
        DB                  /fluent-bit/state/flb_log.db 
        Mem_Buf_Limit       5MB 
        Skip_Long_Lines     On 
        Refresh_Interval    10
To remove Kubernetes metadata from being appended to log events that are sent to CloudWatch, add 
the following ﬁlters to the application-log.conf  section in the Fluent-Bit.yaml  ﬁle.
application-log.conf: | 
    [FILTER] 
        Name                nest 
        Match               application.* 
        Operation           lift 
492Amazon CloudWatch User Guide
Setting up Container Insights
        Nested_under        kubernetes 
        Add_prefix          Kube. 
    [FILTER] 
        Name                modify 
        Match               application.* 
        Remove              Kube.<Metadata_1> 
        Remove              Kube.<Metadata_2> 
        Remove              Kube.<Metadata_3> 
     
    [FILTER] 
        Name                nest 
        Match               application.* 
        Operation           nest 
        Wildcard            Kube.* 
        Nested_under        kubernetes 
        Remove_prefix       Kube.
Troubleshooting
If you don't see these log groups and are looking in the correct Region, check the logs for the Fluent Bit 
daemonSet pods to look for the error.
Run the following command and make sure that the status is Running .
kubectl get pods -n amazon-cloudwatch
If the logs have errors related to IAM permissions, check the IAM role that is attached to the cluster 
nodes. For more information about the permissions required to run an Amazon EKS cluster, see Amazon 
EKS IAM Policies, Roles, and Permissions in the Amazon EKS User Guide .
If the pod status is CreateContainerConfigError , get the exact error by running the following 
command.
kubectl describe pod pod_name -n amazon-cloudwatch
Dashboard
You can create a dashboard to monitor metrics of each running plugin. You can see data for input and 
output bytes and for record processing rates as well as output errors and retry/failed rates. To view 
these metrics, you will need to install the CloudWatch agent with Prometheus metrics collection for 
Amazon EKS and Kubernetes clusters. For more information about how to set up the dashboard, see
Install the CloudWatch agent with Prometheus metrics collection on Amazon EKS and Kubernetes 
clusters  (p. 580).
Note
Before you can set up this dashboard, you must set up Container Insights for Prometheus 
metrics. For more information, see Container Insights Prometheus metrics monitoring (p. 541).
To create a dashboard for the Fluent Bit Prometheus metrics
1. Create environment variables, replacing the values on the right in the following lines to match your 
deployment.
DASHBOARD_NAME= your_cw_dashboard_name
REGION_NAME= your_metric_region_such_as_us-west-1
CLUSTER_NAME= your_kubernetes_cluster_name
493Amazon CloudWatch User Guide
Setting up Container Insights
2. Create the dashboard by running the following command.
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-
prometheus/sample_cloudwatch_dashboards/fluent-bit/cw_dashboard_fluent_bit.json \
| sed "s/{{YOUR_AWS_REGION}}/${REGION_NAME}/g" \
| sed "s/{{YOUR_CLUSTER_NAME}}/${CLUSTER_NAME}/g" \
| xargs -0 aws cloudwatch put-dashboard --dashboard-name ${DASHBOARD_NAME} --dashboard-
body
(Optional) Set up Fluentd as a DaemonSet to send logs to CloudWatch Logs
Warning
Container Insights support for Fluentd is now in maintenance mode, which means that AWS 
will not provide any further updates for Fluentd and that we are planning to deprecate it in 
near future. Additionally, the current Fluentd conﬁguration for Container Insights is using an 
old version of the Fluentd Image fluent/fluentd-kubernetes-daemonset:v1.10.3-
debian-cloudwatch-1.0  which does not have the latest improvement and security patches. 
For the latest Fluentd image supported by the open source community, see ﬂuentd-kubernetes-
daemonset .
We strongly recommend that you migrate to use FluentBit with Container Insights whenever 
possible. Using FluentBit as the log forwarder for Container Insights provides signiﬁcant 
performance gains.
For more information, see Set up Fluent Bit as a DaemonSet to send logs to CloudWatch 
Logs  (p. 489) and  Diﬀerences if you're already using Fluentd (p. 489).
To set up Fluentd to collect logs from your containers, you can follow the steps in Quick Start setup for 
Container Insights on Amazon EKS and Kubernetes (p. 481) or you can follow the steps in this section. 
In the following steps, you set up Fluentd as a DaemonSet to send logs to CloudWatch Logs. When you 
complete this step, Fluentd creates the following log groups if they don't already exist.
Log group name Log source
/aws/containerinsights/ Cluster_Name /
applicationAll log ﬁles in /var/log/containers
/aws/containerinsights/ Cluster_Name /
hostLogs from /var/log/dmesg , /var/log/
secure , and /var/log/messages
/aws/containerinsights/ Cluster_Name /
dataplaneThe logs in /var/log/journal  for
kubelet.service , kubeproxy.service , and
docker.service .
Step 1: Create a namespace for CloudWatch
Use the following step to create a Kubernetes namespace called amazon-cloudwatch  for CloudWatch. 
You can skip this step if you have already created this namespace.
To create a namespace for CloudWatch
• Enter the following command.
kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/
container-insights-monitoring/cloudwatch-namespace.yaml
494Amazon CloudWatch User Guide
Setting up Container Insights
Step 2: Install Fluentd
Start this process by downloading Fluentd. When you ﬁnish these steps, the deployment creates the 
following resources on the cluster:
•A service account named fluentd  in the amazon-cloudwatch  namespace. This service account is 
used to run the Fluentd DaemonSet. For more information, see Managing Service Accounts in the 
Kubernetes Reference.
•A cluster role named fluentd  in the amazon-cloudwatch  namespace. This cluster role grants get,
list , and watch  permissions on pod logs to the fluentd service account. For more information, see
API Overview in the Kubernetes Reference.
•A ConﬁgMap named fluentd-config  in the amazon-cloudwatch  namespace. This ConﬁgMap 
contains the conﬁguration to be used by Fluentd. For more information, see Conﬁgure a Pod to Use a 
ConﬁgMap  in the Kubernetes Tasks documentation.
To install Fluentd
1. Create a ConﬁgMap named cluster-info  with the cluster name and the AWS Region that the logs 
will be sent to. Run the following command, updating the placeholders with your cluster and Region 
names.
kubectl create configmap cluster-info \
--from-literal=cluster.name= cluster_name  \
--from-literal=logs.region= region_name  -n amazon-cloudwatch
2. Download and deploy the Fluentd DaemonSet to the cluster by running the following command. 
Make sure that you are using the container image with correct architecture. The example manifest 
only works on x86 instances and will enter CrashLoopBackOff  if you have Advanced RISC Machine 
(ARM) instances in your cluster. The Fluentd daemonSet does not have an oﬃcial multi-architecture 
Docker image that enables you to use one tag for multiple underlying images and let the container 
runtime pull the right one. The Fluentd ARM image uses a diﬀerent tag with an arm64  suﬃx.
kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/
container-insights-monitoring/fluentd/fluentd.yaml
Note
Because of a recent change to optimize the Fluentd conﬁguration and minimize the 
impact of Fluentd API requests on Kubernetes API endpoints, the "Watch" option for 
Kubernetes ﬁlters has been disabled by default. For more details, see ﬂuent-plugin-
kubernetes_metadata_ﬁlter .
3. Validate the deployment by running the following command. Each node should have one pod 
named fluentd-cloudwatch-* .
kubectl get pods -n amazon-cloudwatch
Step 3: Verify the Fluentd setup
To verify your Fluentd setup, use the following steps.
To verify the Fluentd setup for Container Insights
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Log groups . Make sure that you're in the Region where you deployed 
Fluentd to your containers.
495Amazon CloudWatch User Guide
Setting up Container Insights
In the list of log groups in the Region, you should see the following:
•/aws/containerinsights/ Cluster_Name /application
•/aws/containerinsights/ Cluster_Name /host
•/aws/containerinsights/ Cluster_Name /dataplane
If you see these log groups, the Fluentd setup is veriﬁed.
Multi-line log support
On August 19 2019, we added multi-line log support for the logs collected by Fluentd.
By default, the multi-line log entry starter is any character with no white space. This means that all log 
lines that start with a character that does not have white space are considered as a new multi-line log 
entry.
If your own application logs use a diﬀerent multi-line starter, you can support them by making two 
changes in the fluentd.yaml  ﬁle.
First, exclude them from the default multi-line support by adding the pathnames of your log ﬁles to an
exclude_path  ﬁeld in the containers  section of fluentd.yaml . The following is an example.
<source> 
  @type tail 
  @id in_tail_container_logs 
  @label @containers 
  path /var/log/containers/*.log 
  exclude_path [" full_pathname_of_log_file *", "full_pathname_of_log_file2 *"]
Next, add a block for your log ﬁles to the fluentd.yaml  ﬁle. The example below is used for the 
CloudWatch agent's log ﬁle, which uses a timestamp regular expression as the multi-line starter. You can 
copy this block and add it to fluentd.yaml . Change the indicated lines to reﬂect your application log 
ﬁle name and the multi-line starter that you want to use.
<source> 
  @type tail 
  @id in_tail_cwagent_logs
  @label @ cwagentlogs
  path /var/log/containers/cloudwatch-agent*
  pos_file /var/log/cloudwatch-agent.log.pos
  tag * 
  read_from_head true 
 <parse> 
    @type json 
    time_format %Y-%m-%dT%H:%M:%S.%NZ 
 </parse>
</source> 
<label @ cwagentlogs > 
  <filter **> 
    @type kubernetes_metadata 
    @id filter_kube_metadata_cwagent 
  </filter> 
496Amazon CloudWatch User Guide
Setting up Container Insights
  <filter **> 
    @type record_transformer 
    @id filter_cwagent_stream_transformer 
    <record> 
      stream_name ${tag_parts[3]} 
    </record> 
 </filter> 
  <filter **> 
    @type concat 
    key log 
    multiline_start_regexp /^\d{4}[-/]\d{1,2}[-/]\d{1,2}/
    separator "" 
    flush_interval 5 
    timeout_label @NORMAL 
 </filter> 
 <match **> 
    @type relabel 
    @label @NORMAL 
 </match>
</label>
(Optional) Reducing the log volume from Fluentd
By default, we send Fluentd application logs and Kubernetes metadata to CloudWatch. If you want to 
reduce the volume of data being sent to CloudWatch, you can stop one or both of these data sources 
from being sent to CloudWatch.
To stop Fluentd application logs, remove the following section from the fluentd.yaml  ﬁle.
<source> 
  @type tail 
  @id in_tail_fluentd_logs 
  @label @fluentdlogs 
  path /var/log/containers/fluentd* 
  pos_file /var/log/fluentd.log.pos 
  tag * 
  read_from_head true 
   <parse> 
   @type json 
   time_format %Y-%m-%dT%H:%M:%S.%NZ 
  </parse>
</source>   
<label @fluentdlogs> 
  <filter **> 
    @type kubernetes_metadata 
    @id filter_kube_metadata_fluentd 
  </filter> 
  <filter **> 
    @type record_transformer 
    @id filter_fluentd_stream_transformer 
    <record> 
      stream_name ${tag_parts[3]} 
    </record> 
   </filter> 
   <match **> 
     @type relabel 
     @label @NORMAL 
   </match>
497Amazon CloudWatch User Guide
Setting up Container Insights
</label>
To remove Kubernetes metadata from being appended to log events that are sent to CloudWatch, add 
one line to the record_transformer  section in the fluentd.yaml  ﬁle. In the log source where you 
want to remove this metadata, add the following line.
remove_keys $.kubernetes.pod_id, $.kubernetes.master_url, $.kubernetes.container_image_id, 
 $.kubernetes.namespace_id
For example:
<filter **> 
  @type record_transformer 
  @id filter_containers_stream_transformer 
  <record> 
    stream_name ${tag_parts[3]} 
  </record> 
  remove_keys $.kubernetes.pod_id, $.kubernetes.master_url, 
 $.kubernetes.container_image_id, $.kubernetes.namespace_id
</filter>
Troubleshooting
If you don't see these log groups and are looking in the correct Region, check the logs for the Fluentd 
DaemonSet pods to look for the error.
Run the following command and make sure that the status is Running .
kubectl get pods -n amazon-cloudwatch
In the results of the previous command, note the pod name that starts with fluentd-cloudwatch . Use 
this pod name in the following command.
kubectl logs pod_name  -n amazon-cloudwatch
If the logs have errors related to IAM permissions, check the IAM role attached to the cluster nodes. For 
more information about the permissions required to run an Amazon EKS cluster, see Amazon EKS IAM 
Policies, Roles, and Permissions in the Amazon EKS User Guide .
If the pod status is CreateContainerConfigError , get the exact error by running the following 
command.
kubectl describe pod pod_name  -n amazon-cloudwatch
If the pod status is CrashLoopBackOff , make sure that the architecture of the Fluentd container image 
is the same as the node when you installed Fluentd. If your cluster has both x86 and ARM64 nodes, you 
can use a kubernetes.io/arch label to place the images on the correct node. For more information, see
kuberntes.io/arch.
(Optional) Set up Amazon EKS control plane logging
If you're using Amazon EKS, you can optionally enable Amazon EKS control plane logging, to provide 
audit and diagnostic logs directly from the Amazon EKS control plane to CloudWatch Logs. For more 
information, see Amazon EKS Control Plane Logging.
498Amazon CloudWatch User Guide
Setting up Container Insights
(Optional) Enable App Mesh Envoy access logs
You can set up Container Insights Fluentd to send App Mesh Envoy access logs to CloudWatch Logs. For 
more information, see Logging .
To have Envoy access logs sent to CloudWatch Logs
1. Set up Fluentd in the cluster. For more information, see (Optional) Set up Fluentd as a DaemonSet to 
send logs to CloudWatch Logs (p. 494).
2. Conﬁgure Envoy access logs for your virtual nodes. For instructions, see Logging . Be sure to 
conﬁgure the log path to be /dev/stdout  in each virtual node.
When you have ﬁnished, the envoy access logs are sent to the /aws/
containerinsights/ Cluster_Name /application  log group.
(Optional) Enable the Use_Kubelet feature for large clusters
By default, the Use_Kubelet feature is disabled in the FluentBit Kubernetes plugin. Enabling this feature 
can reduce traﬃc to the API server and mitigate the issue of the API Server being a bottleneck. We 
recommend that you enable this feature for large clusters.
To enable Use_Kubelet, ﬁrst add the nodes and nodes/proxy permissions to the clusterRole conﬁg.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata: 
  name: fluent-bit-role
rules: 
  - nonResourceURLs: 
      - /metrics 
    verbs: 
      - get 
  - apiGroups: [""] 
    resources: 
      - namespaces 
      - pods 
      - pods/logs 
      - nodes 
      - nodes/proxy 
    verbs: ["get", "list", "watch"]
In the DaemonSet conﬁguration, this feature needs host network access. The image version for amazon/
aws-for-fluent-bit  should 2.12.0 or later, or the ﬂuent bit image version should be 1.7.2 or later.
apiVersion: apps/v1
kind: DaemonSet
metadata: 
  name: fluent-bit 
  namespace: amazon-cloudwatch 
  labels: 
    k8s-app: fluent-bit 
    version: v1 
    kubernetes.io/cluster-service: "true"
spec: 
  selector: 
    matchLabels: 
      k8s-app: fluent-bit 
  template: 
    metadata: 
      labels: 
499Amazon CloudWatch User Guide
Setting up Container Insights
        k8s-app: fluent-bit 
        version: v1 
        kubernetes.io/cluster-service: "true" 
    spec: 
      containers: 
      - name: fluent-bit 
        image: amazon/aws-for-fluent-bit:2.19.0 
        imagePullPolicy: Always 
        env: 
            - name: AWS_REGION 
              valueFrom: 
                configMapKeyRef: 
                  name: fluent-bit-cluster-info 
                  key: logs.region 
            - name: CLUSTER_NAME 
              valueFrom: 
                configMapKeyRef: 
                  name: fluent-bit-cluster-info 
                  key: cluster.name 
            - name: HTTP_SERVER 
              valueFrom: 
                configMapKeyRef: 
                  name: fluent-bit-cluster-info 
                  key: http.server 
            - name: HTTP_PORT 
              valueFrom: 
                configMapKeyRef: 
                  name: fluent-bit-cluster-info 
                  key: http.port 
            - name: READ_FROM_HEAD 
              valueFrom: 
                configMapKeyRef: 
                  name: fluent-bit-cluster-info 
                  key: read.head 
            - name: READ_FROM_TAIL 
              valueFrom: 
                configMapKeyRef: 
                  name: fluent-bit-cluster-info 
                  key: read.tail 
            - name: HOST_NAME 
              valueFrom: 
                fieldRef: 
                  fieldPath: spec.nodeName 
            - name: HOSTNAME 
              valueFrom: 
                fieldRef: 
                  apiVersion: v1 
                  fieldPath: metadata.name       
            - name: CI_VERSION 
              value: "k8s/1.3.8" 
        resources: 
            limits: 
              memory: 200Mi 
            requests: 
              cpu: 500m 
              memory: 100Mi 
        volumeMounts: 
        # Please don't change below read-only permissions 
        - name: fluentbitstate 
          mountPath: /var/fluent-bit/state 
        - name: varlog 
          mountPath: /var/log 
          readOnly: true 
        - name: varlibdockercontainers 
          mountPath: /var/lib/docker/containers 
          readOnly: true 
500Amazon CloudWatch User Guide
Setting up Container Insights
        - name: fluent-bit-config 
          mountPath: /fluent-bit/etc/ 
        - name: runlogjournal 
          mountPath: /run/log/journal 
          readOnly: true 
        - name: dmesg 
          mountPath: /var/log/dmesg 
          readOnly: true 
      terminationGracePeriodSeconds: 10 
      hostNetwork: true 
      dnsPolicy: ClusterFirstWithHostNet 
      volumes: 
      - name: fluentbitstate 
        hostPath: 
          path: /var/fluent-bit/state 
      - name: varlog 
        hostPath: 
          path: /var/log 
      - name: varlibdockercontainers 
        hostPath: 
          path: /var/lib/docker/containers 
      - name: fluent-bit-config 
        configMap: 
          name: fluent-bit-config 
      - name: runlogjournal 
        hostPath: 
          path: /run/log/journal 
      - name: dmesg 
        hostPath: 
          path: /var/log/dmesg 
      serviceAccountName: fluent-bit 
      tolerations: 
      - key: node-role.kubernetes.io/master 
        operator: Exists 
        effect: NoSchedule 
      - operator: "Exists" 
        effect: "NoExecute" 
      - operator: "Exists" 
        effect: "NoSchedule"
The Kubernetes Plugin conﬁguration should be similar to the following:
[FILTER] 
        Name                kubernetes 
        Match               application.* 
        Kube_URL            https://kubernetes.default.svc:443 
        Kube_Tag_Prefix     application.var.log.containers. 
        Merge_Log           On 
        Merge_Log_Key       log_processed 
        K8S-Logging.Parser  On 
        K8S-Logging.Exclude Off 
        Labels              Off 
        Annotations         Off 
        Use_Kubelet         On 
        Kubelet_Port        10250  
        Buffer_Size         0
Updating or deleting Container Insights on Amazon EKS and Kubernetes
Use the steps in these sections to update your CloudWatch agent container image, or to remove 
Container Insights from an Amazon EKS or Kubernetes cluster.
Topics
501Amazon CloudWatch User Guide
Setting up Container Insights
•Updating the CloudWatch agent container image (p. 502)
•Deleting the CloudWatch agent and Fluentd for Container Insights (p. 503)
Updating the CloudWatch agent container image
If you need to update your container image to the latest version, use the steps in this section.
To update your container image
1. Apply the latest cwagent-serviceaccount.yaml  ﬁle by entering the following command.
kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/
container-insights-monitoring/cwagent/cwagent-serviceaccount.yaml
2. This step is necessary only for customers who upgraded their containerized CloudWatch agent from 
a version earlier than 1.226589.0, which was released on August 20, 2019.
In the Conﬁgmap ﬁle cwagentconfig , change the keyword structuredlogs  to logs
a. First, open the existing cwagentconfig  in edit mode by entering the following command.
kubectl edit cm cwagentconfig -n amazon-cloudwatch
In the ﬁle, if you see the keyword structuredlogs , change it to logs
b. Enter wq to save the ﬁle and exit edit mode.
3. Apply the latest cwagent-daemonset.yaml  ﬁle by entering the following command.
kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/
container-insights-monitoring/cwagent/cwagent-daemonset.yaml
You can achieve rolling updates of the CloudWatch agent DaemonSet anytime that you change your 
conﬁguration in cwagent-configmap.yaml . To do so, you must make sure the .spec.template
section in the cwagent-daemonset.yaml  ﬁle has changes. Otherwise, Kubernetes treats the 
DaemonSet as unchanged. A common practice is to add the hash value of the ConﬁgMap into
.spec.template.metadata.annotations.configHash , as in the following example.
yq w -i cwagent-daemonset.yaml spec.template.metadata.annotations.configHash $(kubectl get 
 cm/cwagentconfig -n amazon-cloudwatch -o yaml | sha256sum)
This adds a hash value into the cwagent-daemonset.yaml  ﬁle, as in the following example.
spec: 
  selector: 
    matchLabels: 
      name: cloudwatch-agent 
  template: 
    metadata: 
      labels: 
        name: cloudwatch-agent 
      annotations: 
        configHash: 88915de4cf9c3551a8dc74c0137a3e83569d28c71044b0359c2578d2e0461825
Then if you run the following command, the new conﬁguration is picked up.
502Amazon CloudWatch User Guide
Viewing Container Insights metrics
kubectl apply -f cwagent-daemonset.yaml 
For more information about yq, see yq.
Deleting the CloudWatch agent and Fluentd for Container Insights
To delete all resources related to the CloudWatch agent and Fluentd, enter the following command. In 
this command, Cluster is the name of your Amazon EKS or Kubernetes cluster, and Region  is the name 
of the Region where the logs are published.
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/
container-insights-monitoring/quickstart/cwagent-fluentd-quickstart.yaml | sed "s/
{{cluster_name}}/ Cluster_Name /;s/{{region_name}}/ Region/" | kubectl delete -f -
Viewing Container Insights metrics
After you have Container Insights set up and it is collecting metrics, you can view those metrics in the 
CloudWatch console.
For Container Insights metrics to appear on your dashboard, you must complete the Container Insights 
setup. For more information, see Setting up Container Insights (p. 466).
This procedure explains how to view the metrics that Container Insights automatically generates from 
the collected log data. The rest of this section explains how to further dive into your data and use 
CloudWatch Logs Insights to see more metrics at more levels of granularity.
To view Container Insights metrics
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Insights , Container Insights .
3. In the drop-down box under Container Insights , choose Performance monitoring.
4. Use the drop-down boxes near the top to select the type of resource to view, as well as the speciﬁc 
resource.
You can set a CloudWatch alarm on any metric that Container Insights collects. For more information, see
Using Amazon CloudWatch alarms (p. 180)
Note
If you have already set up CloudWatch Application Insights to monitor your containerized 
applications, the Application Insights dashboard appears below the Container Insights 
dashboard. If you have not already enabled Application Insights, you can do so by choosing
Auto-conﬁgure Application Insights below the performance view in the Container Insights 
dashboard.
For more information about Application Insights and containerized applications, see Enable 
Application Insights for Amazon ECS and Amazon EKS resource monitoring (p. 688).
Viewing the top contributors
For some of the views in Container Insights performance monitoring, you can also see the top 
contributors by memory or CPU, or the most recently active resources. This is available when you select 
any of the following dashboards in the drop-down box near the top of the page:
•ECS Services
•ECS Tasks
503Amazon CloudWatch User Guide
Viewing Container Insights metrics
•EKS Namespaces
•EKS Services
•EKS Pods
When you are viewing one of these types of resources, the bottom of the page displays a table sorted 
initially by CPU usage. You can change it to sort by memory usage or recent activity. To see more about 
one of the rows in the table, you can select the checkbox next to that row and then choose Actions and 
choose one of the options in the Actions menu.
Using CloudWatch Logs Insights to view Container Insights data
Container Insights collects metrics by using performance log events with using embedded metric 
format  (p. 985). The logs are stored in CloudWatch Logs. CloudWatch generates several metrics 
automatically from the logs which you can view in the CloudWatch console. You can also do a deeper 
analysis of the performance data that is collected by using CloudWatch Logs Insights queries.
For more information about CloudWatch Logs Insights, see Analyze Log Data with CloudWatch Logs 
Insights . For more information about the log ﬁelds you can use in queries, see Container Insights 
performance log events for Amazon EKS and Kubernetes (p. 524).
To use CloudWatch Logs Insights to query your container metric data
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Insights .
Near the top of the screen is the query editor. When you ﬁrst open CloudWatch Logs Insights, this 
box contains a default query that returns the 20 most recent log events.
3. In the box above the query editor, select one of the Container Insights log groups to query. For the 
following example queries to work, the log group name must end with performance.
When you select a log group, CloudWatch Logs Insights automatically detects ﬁelds in the data in 
the log group and displays them in Discovered ﬁelds in the right pane. It also displays a bar graph 
of log events in this log group over time. This bar graph shows the distribution of events in the log 
group that matches your query and time range, not only the events displayed in the table.
4. In the query editor, replace the default query with the following query and choose Run query.
STATS avg(node_cpu_utilization) as avg_node_cpu_utilization by NodeName
| SORT avg_node_cpu_utilization DESC 
This query shows a list of nodes, sorted by average node CPU utilization.
5. To try another example, replace that query with another query and choose Run query. More sample 
queries are listed later on this page.
STATS avg(number_of_container_restarts) as avg_number_of_container_restarts by PodName
| SORT avg_number_of_container_restarts DESC
This query displays a list of your pods, sorted by average number of container restarts.
6. If you want to try another query, you can use include ﬁelds in the list at the right of the screen. For 
more information about query syntax, see CloudWatch Logs Insights Query Syntax.
To see lists of your resources
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Resources.
504Amazon CloudWatch User Guide
Viewing Container Insights metrics
3. The default view is a list of your resources being monitored by Container Insights, and alarms that 
you have set on these resources. To see a visual map of the resources, choose Map view .
4. From the map view, you can pause your pointer over any resource in the map to see basic metrics 
about that resource. You can choose any resource to see more detailed graphs about the resource.
Use case: Seeing task-level metrics in Amazon ECS containers
The following example illustrates how to use CloudWatch Logs Insights to dive deeper into your 
Container Insights logs. For more examples, see the blog  Introducing Amazon CloudWatch Container 
Insights for Amazon ECS.
Container Insights does not automatically generate metrics at the Task level of granularity. The following 
query displays task-level metrics for CPU and memory usage.
stats avg(CpuUtilized) as CPU, avg(MemoryUtilized) as Mem by TaskId, ContainerName
| sort Mem, CPU desc
Other sample queries for Container Insights
List of your pods, sorted by average number of container restarts
STATS avg(number_of_container_restarts) as avg_number_of_container_restarts by PodName
| SORT avg_number_of_container_restarts DESC
Pods requested vs. pods running
fields @timestamp, @message  
| sort @timestamp desc  
| filter Type="Pod"  
| stats min(pod_number_of_containers) as requested, min(pod_number_of_running_containers) 
 as running, ceil(avg(pod_number_of_containers-pod_number_of_running_containers)) as 
 pods_missing by kubernetes.pod_name  
| sort pods_missing desc
Count of cluster node failures
stats avg(cluster_failed_node_count) as CountOfNodeFailures  
| filter Type="Cluster"  
| sort @timestamp desc
Application log errors by container name
stats count() as countoferrors by kubernetes.container_name  
| filter stream="stderr"  
| sort countoferrors desc
Disk usage by container name
stats floor(avg(container_filesystem_usage/1024)) as container_filesystem_usage_avg_kb by 
 InstanceId, kubernetes.container_name, device  
| filter Type="ContainerFS"  
| sort container_filesystem_usage_avg_kb desc
CPU usage by container name
stats pct(container_cpu_usage_total, 50) as CPUPercMedian by kubernetes.container_name  
505Amazon CloudWatch User Guide
Metrics collected by Container Insights
| filter Type="Container"
Metrics collected by Container Insights
Container Insights collects one set of metrics for Amazon ECS and AWS Fargate on Amazon ECS, and a 
diﬀerent set for Amazon EKS, AWS Fargate on Amazon EKS, and Kubernetes.
Metrics are not visible until the container tasks have been running for some time.
Topics
•Amazon ECS Container Insights metrics (p. 506)
•Amazon EKS and Kubernetes Container Insights metrics (p. 512)
Amazon ECS Container Insights metrics
The following table lists the metrics and dimensions that Container Insights collects for Amazon ECS. 
These metrics are in the ECS/ContainerInsights  namespace. For more information, see Metrics  (p. 3).
If you do not see any Container Insights metrics in your console, be sure that you have completed the 
setup of Container Insights. Metrics do not appear before Container Insights has been set up completely. 
For more information, see Setting up Container Insights (p. 466).
When you use Container Insights to collect the following metrics, the metrics are charged as custom 
metrics. For more information about CloudWatch pricing, see Amazon CloudWatch Pricing. Amazon 
ECS also automatically sends several free metrics to CloudWatch. For more information, see  Available 
metrics and dimensions .
The following metrics are available when you complete the steps in Setting up Container Insights on 
Amazon ECS for cluster- and service-level metrics (p. 467)
Metric name Dimensions Description
ContainerInstanceCount ClusterName The number of EC2 
instances running the 
Amazon ECS agent that are 
registered with a cluster.
Unit: Count
CpuUtilized TaskDeﬁnitionFamily, 
ClusterName
ServiceName, ClusterName
ClusterNameThe CPU units used by 
tasks in the resource that is 
speciﬁed by the dimension 
set that you're using.
This metric is collected 
only for tasks that have a 
deﬁned CPU reservation in 
their task deﬁnition.
Unit: None
CpuReserved TaskDeﬁnitionFamily, 
ClusterName
ServiceName, ClusterName
ClusterNameThe CPU units reserved by 
tasks in the resource that is 
speciﬁed by the dimension 
set that you're using.
506Amazon CloudWatch User Guide
Metrics collected by Container Insights
Metric name Dimensions Description
This metric is collected 
only for tasks that have a 
deﬁned CPU reservation in 
their task deﬁnition.
Unit: None
DeploymentCount ServiceName, ClusterNameThe number of 
deployments in an Amazon 
ECS service.
Unit: Count
DesiredTaskCount ServiceName, ClusterNameThe desired number of 
tasks for an Amazon ECS 
service.
Unit: Count
EphemeralStorageReserved  1TaskDeﬁnitionFamily, 
ClusterName
ServiceName, ClusterName
ClusterNameThe number of bytes 
reserved from ephemeral 
storage in the resource 
that is speciﬁed by the 
dimensions that you're 
using. Ephemeral storage 
is used for the container 
root ﬁlesystem and any 
bind mount host volumes 
deﬁned in the container 
image and task deﬁnition. 
The amount of ephemeral 
storage can’t be changed in 
a running task.
This metric is only available 
for tasks that run on 
Fargate Linux platform 
version 1.4.0 or later.
Unit: Gibibytes (GiB)
507Amazon CloudWatch User Guide
Metrics collected by Container Insights
Metric name Dimensions Description
EphemeralStorageUtilized  1TaskDeﬁnitionFamily, 
ClusterName
ServiceName, ClusterName
ClusterNameThe number of bytes 
used from ephemeral 
storage in the resource 
that is speciﬁed by the 
dimensions that you're 
using. Ephemeral storage 
is used for the container 
root ﬁlesystem and any 
bind mount host volumes 
deﬁned in the container 
image and task deﬁnition. 
The amount of ephemeral 
storage can’t be changed in 
a running task.
This metric is only available 
for tasks that run on 
Fargate Linux platform 
version 1.4.0 or later.
Unit: Gibibytes (GiB)
MemoryUtilized TaskDeﬁnitionFamily, 
ClusterName
ServiceName, ClusterName
ClusterNameThe memory being used by 
tasks in the resource that is 
speciﬁed by the dimension 
set that you're using.
This metric is collected 
only for tasks that have 
a deﬁned memory 
reservation in their task 
deﬁnition.
Unit: Megabytes
MemoryReserved TaskDeﬁnitionFamily, 
ClusterName
ServiceName, ClusterName
ClusterNameThe memory that is 
reserved by tasks in the 
resource that is speciﬁed 
by the dimension set that 
you're using.
This metric is collected 
only for tasks that have 
a deﬁned memory 
reservation in their task 
deﬁnition.
Unit: Megabytes
508Amazon CloudWatch User Guide
Metrics collected by Container Insights
Metric name Dimensions Description
NetworkRxBytes TaskDeﬁnitionFamily, 
ClusterName
ServiceName, ClusterName
ClusterNameThe number of bytes 
received by the resource 
that is speciﬁed by the 
dimensions that you're 
using.
This metric is available only 
for containers in tasks using 
the awsvpc  or bridge
network modes.
Unit: Bytes/Second
NetworkTxBytes TaskDeﬁnitionFamily, 
ClusterName
ServiceName, ClusterName
ClusterNameThe number of bytes 
transmitted by the resource 
that is speciﬁed by the 
dimensions that you're 
using.
This metric is available only 
for containers in tasks using 
the awsvpc  or bridge
network modes.
Unit: Bytes/Second
PendingTaskCount ServiceName, ClusterNameThe number of tasks 
currently in the PENDING
state.
Unit: Count
RunningTaskCount ServiceName, ClusterNameThe number of tasks 
currently in the RUNNING
state.
Unit: Count
ServiceCount ClusterName The number of services in 
the cluster.
Unit: Count
StorageReadBytes TaskDeﬁnitionFamily, 
ClusterName
ServiceName, ClusterName
ClusterNameThe number of bytes 
read from storage in the 
resource that is speciﬁed by 
the dimensions that you're 
using.
Unit: Bytes
509Amazon CloudWatch User Guide
Metrics collected by Container Insights
Metric name Dimensions Description
StorageWriteBytes TaskDeﬁnitionFamily, 
ClusterName
ServiceName, ClusterName
ClusterNameThe number of bytes 
written to storage in the 
resource that is speciﬁed by 
the dimensions that you're 
using.
Unit: Bytes
TaskCount ClusterName The number of tasks 
running in the cluster.
Unit: Count
TaskSetCount ServiceName, ClusterNameThe number of task sets in 
the service.
Unit: Count
Note
The EphemeralStorageReserved  and EphemeralStorageUtilized  metrics are only 
available for tasks that run on Fargate Linux platform version 1.4.0 or later.
Fargate reserves space on disk. It is only used by Fargate. You aren't billed for it. It isn't shown in 
these metrics. However, you can see this additional storage in other tools such as df.
The following metrics are available when you complete the steps in Deploying the CloudWatch agent to 
collect EC2 instance-level metrics on Amazon ECS (p. 470)
Metric name Dimensions Description
instance_cpu_limit ClusterName The maximum number 
of CPU units that can 
be assigned to a single 
EC2 Instance in the 
cluster.
Unit: None
instance_cpu_reserved_capacity ClusterName
InstanceId, ContainerInstanceId,ClusterNameThe percentage of 
CPU currently being 
reserved on a single 
EC2 instance in the 
cluster.
Unit: Percent
instance_cpu_usage_total ClusterName The number of CPU 
units being used on a 
Single EC2 instance in 
the cluster.
Unit: None
instance_cpu_utilization ClusterName
InstanceId, ContainerInstanceId,ClusterNameThe total percentage of 
CPU units being used 
on a single EC2 instance 
in the cluster.
510Amazon CloudWatch User Guide
Metrics collected by Container Insights
Metric name Dimensions Description
Unit: Percent
instance_filesystem_utilization ClusterName
InstanceId, ContainerInstanceId,ClusterNameThe total percentage 
of ﬁle system capacity 
being used on a single 
EC2 instance in the 
cluster.
Unit: Percent
instance_memory_limit ClusterName The maximum amount 
of memory, in bytes, 
that can be assigned to 
a single EC2 Instance in 
this cluster.
Unit: Bytes
instance_memory_reserved_capacity ClusterName
InstanceId, ContainerInstanceId,ClusterNameThe percentage of 
Memory currently being 
reserved on a single 
EC2 Instance in the 
cluster.
Unit: Percent
instance_memory_utilization ClusterName
InstanceId, ContainerInstanceId,ClusterNameThe total percentage of 
memory being used on 
a single EC2 Instance in 
the cluster.
Unit: Percent
instance_memory_working_set ClusterName The amount of 
memory, in bytes, being 
used on a single EC2 
Instance in the cluster.
Unit: Bytes
instance_network_total_bytes ClusterName The total number 
of bytes per second 
transmitted and 
received over the 
network on a single EC2 
Instance in the cluster.
Unit: Bytes/second
instance_number_of_running_tasks ClusterName The number of running 
tasks on a single EC2 
Instance in the cluster.
Unit: Count
511Amazon CloudWatch User Guide
Metrics collected by Container Insights
Amazon EKS and Kubernetes Container Insights metrics
The following table lists the metrics and dimensions that Container Insights collects for Amazon EKS 
and Kubernetes. These metrics are in the ContainerInsights  namespace. For more information, see
Metrics  (p. 3).
If you do not see any Container Insights metrics in your console, be sure that you have completed the 
setup of Container Insights. Metrics do not appear before Container Insights has been set up completely. 
For more information, see Setting up Container Insights (p. 466).
When you use Container Insights to collect the following metrics, the metrics are charged as custom 
metrics. For more information about CloudWatch pricing, see Amazon CloudWatch Pricing.
Metric name Dimensions Description
cluster_failed_node_count ClusterName The number of failed 
worker nodes in the 
cluster. A node is 
considered failed if it 
is suﬀering from any
node conditions . For 
more information, 
see Conditions  in 
the Kubernetes 
documentation.
cluster_node_count ClusterName The total number of 
worker nodes in the 
cluster.
namespace_number_of_running_pods Namespace ClusterName
ClusterNameThe number of pods 
running per namespace 
in the resource that 
is speciﬁed by the 
dimensions that you're 
using.
node_cpu_limit ClusterName The maximum number 
of CPU units that can 
be assigned to a single 
node in this cluster.
node_cpu_reserved_capacity NodeName, ClusterName, InstanceId
ClusterNameThe percentage of CPU 
units that are reserved 
for node components, 
such as kubelet, kube-
proxy, and Docker.
Formula:
node_cpu_request / 
node_cpu_limit
Note
node_cpu_request
is not reported 
directly as a 
metric, but 
is a ﬁeld in 
512Amazon CloudWatch User Guide
Metrics collected by Container Insights
Metric name Dimensions Description
performance 
log events. 
For more 
information, 
see Relevant 
ﬁelds in 
performance 
log events 
for Amazon 
EKS and 
Kubernetes  (p. 535).
node_cpu_usage_total ClusterName The number of CPU 
units being used on the 
nodes in the cluster.
node_cpu_utilization NodeName, ClusterName, InstanceId
ClusterNameThe total percentage of 
CPU units being used 
on the nodes in the 
cluster.
Formula:
node_cpu_usage_total / 
node_cpu_limit
node_filesystem_utilization NodeName, ClusterName, InstanceId
ClusterNameThe total percentage 
of ﬁle system capacity 
being used on nodes in 
the cluster.
Formula:
node_filesystem_usage / 
node_filesystem_capacity
Note
node_filesystem_usage
and
node_filesystem_capacity
are not 
reported 
directly as 
metrics, but 
are ﬁelds in 
performance 
log events. 
For more 
information, 
see Relevant 
ﬁelds in 
performance 
log events 
for Amazon 
EKS and 
Kubernetes  (p. 535).
513Amazon CloudWatch User Guide
Metrics collected by Container Insights
Metric name Dimensions Description
node_memory_limit ClusterName The maximum amount 
of memory, in bytes, 
that can be assigned 
to a single node in this 
cluster.
node_memory_reserved_capacity NodeName, ClusterName, InstanceId
ClusterNameThe percentage of 
memory currently being 
used on the nodes in 
the cluster.
Formula:
node_memory_request / 
node_memory_limit
Note
node_memory_request
is not reported 
directly as a 
metric, but 
is a ﬁeld in 
performance 
log events. 
For more 
information, 
see Relevant 
ﬁelds in 
performance 
log events 
for Amazon 
EKS and 
Kubernetes  (p. 535).
node_memory_utilization NodeName, ClusterName, InstanceId
ClusterNameThe percentage of 
memory currently 
being used by the 
node or nodes. It is the 
percentage of node 
memory usage divided 
by the node memory 
limitation.
Formula:
node_memory_working_set / 
node_memory_limit .
node_memory_working_set ClusterName The amount of 
memory, in bytes, being 
used in the working 
set of the nodes in the 
cluster.
514Amazon CloudWatch User Guide
Metrics collected by Container Insights
Metric name Dimensions Description
node_network_total_bytes NodeName, ClusterName, InstanceId
ClusterNameThe total number 
of bytes per second 
transmitted and 
received over the 
network per node in a 
cluster.
Formula:
node_network_rx_bytes 
+ 
node_network_tx_bytes
Note
node_network_rx_bytes
and
node_network_tx_bytes
are not 
reported 
directly as 
metrics, but 
are ﬁelds in 
performance 
log events. 
For more 
information, 
see Relevant 
ﬁelds in 
performance 
log events 
for Amazon 
EKS and 
Kubernetes  (p. 535).
node_number_of_running_containers NodeName, ClusterName, InstanceId
ClusterNameThe number of running 
containers per node in a 
cluster.
node_number_of_running_pods NodeName, ClusterName, InstanceId
ClusterNameThe number of running 
pods per node in a 
cluster.
515Amazon CloudWatch User Guide
Metrics collected by Container Insights
Metric name Dimensions Description
pod_cpu_reserved_capacity PodName, Namespace, ClusterName
ClusterNameThe CPU capacity that 
is reserved per pod in a 
cluster.
Formula:
pod_cpu_request / 
node_cpu_limit
Note
pod_cpu_request
is not reported 
directly as a 
metric, but 
is a ﬁeld in 
performance 
log events. 
For more 
information, 
see Relevant 
ﬁelds in 
performance 
log events 
for Amazon 
EKS and 
Kubernetes  (p. 535).
pod_cpu_utilization PodName, Namespace, ClusterName
Namespace, ClusterName
Service, Namespace, ClusterName
ClusterNameThe percentage of CPU 
units being used by 
pods.
Formula:
pod_cpu_usage_total / 
node_cpu_limit
Note
pod_cpu_usage_total
is not reported 
directly as a 
metric, but 
is a ﬁeld in 
performance 
log events. 
For more 
information, 
see Relevant 
ﬁelds in 
performance 
log events 
for Amazon 
EKS and 
Kubernetes  (p. 535).
516Amazon CloudWatch User Guide
Metrics collected by Container Insights
Metric name Dimensions Description
pod_cpu_utilization_over_pod_limit PodName, Namespace, ClusterName
Namespace, ClusterName
Service, Namespace, ClusterName
ClusterNameThe percentage of CPU 
units being used by 
pods relative to the pod 
limit.
Formula:
pod_cpu_usage_total / 
pod_cpu_limit
Note
pod_cpu_usage_total
and
pod_cpu_limit
are not 
reported 
directly as 
metrics, but 
are ﬁelds in 
performance 
log events. 
For more 
information, 
see Relevant 
ﬁelds in 
performance 
log events 
for Amazon 
EKS and 
Kubernetes  (p. 535).
pod_memory_reserved_capacity PodName, Namespace, ClusterName
ClusterNameThe percentage 
of memory that is 
reserved for pods.
Formula:
pod_memory_request / 
node_memory_limit
Note
pod_memory_request
is not reported 
directly as a 
metric, but 
is a ﬁeld in 
performance 
log events. 
For more 
information, 
see Relevant 
ﬁelds in 
performance 
log events 
for Amazon 
EKS and 
Kubernetes  (p. 535).
517Amazon CloudWatch User Guide
Metrics collected by Container Insights
Metric name Dimensions Description
pod_memory_utilization PodName, Namespace, ClusterName
Namespace, ClusterName
Service, Namespace, ClusterName
ClusterNameThe percentage of 
memory currently being 
used by the pod or 
pods.
Formula:
pod_memory_working_set / 
node_memory_limit
Note
pod_memory_working_set
is not reported 
directly as a 
metric, but 
is a ﬁeld in 
performance 
log events. 
For more 
information, 
see Relevant 
ﬁelds in 
performance 
log events 
for Amazon 
EKS and 
Kubernetes  (p. 535).
518Amazon CloudWatch User Guide
Metrics collected by Container Insights
Metric name Dimensions Description
pod_memory_utilization_over_pod_limit PodName, Namespace, ClusterName
Namespace, ClusterName
Service, Namespace, ClusterName
ClusterNameThe percentage of 
memory that is being 
used by pods relative 
to the pod limit. If any 
containers in the pod 
don't have a memory 
limit deﬁned, this 
metric doesn't appear.
Formula:
pod_memory_working_set / 
pod_memory_limit
Note
pod_memory_working_set
is not reported 
directly as a 
metric, but 
is a ﬁeld in 
performance 
log events. 
For more 
information, 
see Relevant 
ﬁelds in 
performance 
log events 
for Amazon 
EKS and 
Kubernetes  (p. 535).
pod_network_rx_bytes PodName, Namespace, ClusterName
Namespace, ClusterName
Service, Namespace, ClusterName
ClusterNameThe number of bytes 
per second being 
received over the 
network by the pod.
Formula:
sum(pod_interface_network_rx_bytes)
Note
pod_interface_network_rx_bytes
is not reported 
directly as a 
metric, but 
is a ﬁeld in 
performance 
log events. 
For more 
information, 
see Relevant 
ﬁelds in 
performance 
log events 
for Amazon 
EKS and 
Kubernetes  (p. 535).
519Amazon CloudWatch User Guide
Performance log reference
Metric name Dimensions Description
pod_network_tx_bytes PodName, Namespace, ClusterName
Namespace, ClusterName
Service, Namespace, ClusterName
ClusterNameThe number of bytes 
per second being 
transmitted over the 
network by the pod.
Formula:
sum(pod_interface_network_tx_bytes)
Note
pod_interface_network_tx_bytes
is not reported 
directly as a 
metric, but 
is a ﬁeld in 
performance 
log events. 
For more 
information, 
see Relevant 
ﬁelds in 
performance 
log events 
for Amazon 
EKS and 
Kubernetes  (p. 535).
pod_number_of_container_restarts PodName, Namespace, ClusterName The total number of 
container restarts in a 
pod.
service_number_of_running_pods Service, Namespace, ClusterName
ClusterNameThe number of pods 
running the service or 
services in the cluster.
Container Insights performance log reference
This section includes reference information about how Container Insights uses performance log events 
to collect metrics. When you deploy Container Insights, it automatically creates a log group for the 
performance log events. You don't need to create this log group yourself.
Topics
•Container Insights performance log events for Amazon ECS (p. 520)
•Container Insights performance log events for Amazon EKS and Kubernetes (p. 524)
•Relevant ﬁelds in performance log events for Amazon EKS and Kubernetes (p. 535)
Container Insights performance log events for Amazon ECS
The following are examples of the performance log events that Container Insights collects from Amazon 
ECS.
These logs are in CloudWatch Logs, in a log group named /aws/ecs/
containerinsights/ CLUSTER_NAME /performance . Within that log group, each container instance 
will has a log stream named AgentTelemetry- CONTAINER_INSTANCE_ID .
520Amazon CloudWatch User Guide
Performance log reference
You can query these logs using queries such as { $.Type = "Container" }  to view all container log 
events.
Type: Container
{ 
 "Version":"0", 
 "Type":"Container", 
 "ContainerName":"sleep", 
 "TaskId":"7ac4dfba69214411b4783a3b8189c9ba", 
 "TaskDefinitionFamily":"sleep360", 
 "TaskDefinitionRevision":"1", 
 "ContainerInstanceId":"0d7650e6dec34c1a9200f72098071e8f", 
 "EC2InstanceId":"i-0c470579dbcdbd2f3", 
 "ClusterName":"MyCluster", 
 "Image":"busybox", 
 "ContainerKnownStatus":"RUNNING", 
 "Timestamp":1623963900000, 
 "CpuUtilized":0.0, 
 "CpuReserved":10.0, 
 "MemoryUtilized":0, 
 "MemoryReserved":10, 
 "StorageReadBytes":0, 
 "StorageWriteBytes":0, 
 "NetworkRxBytes":0, 
 "NetworkRxDropped":0, 
 "NetworkRxErrors":0, 
 "NetworkRxPackets":14, 
 "NetworkTxBytes":0, 
 "NetworkTxDropped":0, 
 "NetworkTxErrors":0, 
 "NetworkTxPackets":0
}
Type: Task
{ 
 "Version": "0", 
 "Type": "Task", 
 "TaskId": "7ac4dfba69214411b4783a3b8189c9ba", 
 "TaskDefinitionFamily": "sleep360", 
 "TaskDefinitionRevision": "1", 
 "ContainerInstanceId": "0d7650e6dec34c1a9200f72098071e8f", 
 "EC2InstanceId": "i-0c470579dbcdbd2f3", 
 "ClusterName": "MyCluster", 
 "AccountID": "637146863587", 
 "Region": "us-west-2", 
 "AvailabilityZone": "us-west-2b", 
 "KnownStatus": "RUNNING", 
 "LaunchType": "EC2", 
 "PullStartedAt": 1623963608201, 
 "PullStoppedAt": 1623963610065, 
 "CreatedAt": 1623963607094, 
 "StartedAt": 1623963610382, 
 "Timestamp": 1623963900000, 
 "CpuUtilized": 0.0, 
 "CpuReserved": 10.0, 
 "MemoryUtilized": 0, 
 "MemoryReserved": 10, 
 "StorageReadBytes": 0, 
 "StorageWriteBytes": 0, 
 "NetworkRxBytes": 0, 
 "NetworkRxDropped": 0, 
 "NetworkRxErrors": 0, 
521Amazon CloudWatch User Guide
Performance log reference
 "NetworkRxPackets": 14, 
 "NetworkTxBytes": 0, 
 "NetworkTxDropped": 0, 
 "NetworkTxErrors": 0, 
 "NetworkTxPackets": 0, 
 "CloudWatchMetrics": [{ 
  "Namespace": "ECS/ContainerInsights", 
  "Metrics": [{ 
    "Name": "CpuUtilized", 
    "Unit": "None" 
   }, 
   { 
    "Name": "CpuReserved", 
    "Unit": "None" 
   }, 
   { 
    "Name": "MemoryUtilized", 
    "Unit": "Megabytes" 
   }, 
   { 
    "Name": "MemoryReserved", 
    "Unit": "Megabytes" 
   }, 
   { 
    "Name": "StorageReadBytes", 
    "Unit": "Bytes/Second" 
   }, 
   { 
    "Name": "StorageWriteBytes", 
    "Unit": "Bytes/Second" 
   }, 
   { 
    "Name": "NetworkRxBytes", 
    "Unit": "Bytes/Second" 
   }, 
   { 
    "Name": "NetworkTxBytes", 
    "Unit": "Bytes/Second" 
   } 
  ], 
  "Dimensions": [ 
   [ 
    "ClusterName" 
   ], 
   [ 
    "ClusterName", 
    "TaskDefinitionFamily" 
   ] 
  ] 
 }]
}
Type: Service
{    
    "Version": "0", 
    "Type": "Service", 
    "ServiceName": "myCIService", 
    "ClusterName": "myCICluster", 
    "Timestamp": 1561586460000, 
    "DesiredTaskCount": 2, 
    "RunningTaskCount": 2, 
    "PendingTaskCount": 0, 
    "DeploymentCount": 1, 
    "TaskSetCount": 0, 
522Amazon CloudWatch User Guide
Performance log reference
    "CloudWatchMetrics": [ 
        { 
            "Namespace": "ECS/ContainerInsights", 
            "Metrics": [ 
                { 
                    "Name": "DesiredTaskCount", 
                    "Unit": "Count" 
                }, 
                { 
                    "Name": "RunningTaskCount", 
                    "Unit": "Count" 
                }, 
                { 
                    "Name": "PendingTaskCount", 
                    "Unit": "Count" 
                }, 
                { 
                    "Name": "DeploymentCount", 
                    "Unit": "Count" 
                }, 
                { 
                    "Name": "TaskSetCount", 
                    "Unit": "Count" 
                } 
            ], 
            "Dimensions": [ 
                [ 
                    "ServiceName", 
                    "ClusterName" 
                ] 
            ] 
        } 
    ]
}
Type: Cluster
{ 
    "Version": "0", 
    "Type": "Cluster", 
    "ClusterName": "myCICluster", 
    "Timestamp": 1561587300000, 
    "TaskCount": 5, 
    "ContainerInstanceCount": 5, 
    "ServiceCount": 2, 
    "CloudWatchMetrics": [ 
        { 
            "Namespace": "ECS/ContainerInsights", 
            "Metrics": [ 
                { 
                    "Name": "TaskCount", 
                    "Unit": "Count" 
                }, 
                { 
                    "Name": "ContainerInstanceCount", 
                    "Unit": "Count" 
                }, 
                { 
                    "Name": "ServiceCount", 
                    "Unit": "Count" 
                } 
            ], 
            "Dimensions": [ 
                [ 
                    "ClusterName" 
523Amazon CloudWatch User Guide
Performance log reference
                ] 
            ] 
        } 
    ]
}
Container Insights performance log events for Amazon EKS and 
Kubernetes
The following are examples of the performance log events that Container Insights collects from Amazon 
EKS and Kubernetes clusters.
Type: Node
{ 
  "AutoScalingGroupName": "eksctl-myCICluster-nodegroup-standard-workers-
NodeGroup-1174PV2WHZAYU", 
  "CloudWatchMetrics": [ 
    { 
      "Metrics": [ 
        { 
          "Unit": "Percent", 
          "Name": "node_cpu_utilization" 
        }, 
        { 
          "Unit": "Percent", 
          "Name": "node_memory_utilization" 
        }, 
        { 
          "Unit": "Bytes/Second", 
          "Name": "node_network_total_bytes" 
        }, 
        { 
          "Unit": "Percent", 
          "Name": "node_cpu_reserved_capacity" 
        }, 
        { 
          "Unit": "Percent", 
          "Name": "node_memory_reserved_capacity" 
        }, 
        { 
          "Unit": "Count", 
          "Name": "node_number_of_running_pods" 
        }, 
        { 
          "Unit": "Count", 
          "Name": "node_number_of_running_containers" 
        } 
      ], 
      "Dimensions": [ 
        [ 
          "NodeName", 
          "InstanceId", 
          "ClusterName" 
        ] 
      ], 
      "Namespace": "ContainerInsights" 
    }, 
    { 
      "Metrics": [ 
        { 
          "Unit": "Percent", 
          "Name": "node_cpu_utilization" 
524Amazon CloudWatch User Guide
Performance log reference
        }, 
        { 
          "Unit": "Percent", 
          "Name": "node_memory_utilization" 
        }, 
        { 
          "Unit": "Bytes/Second", 
          "Name": "node_network_total_bytes" 
        }, 
        { 
          "Unit": "Percent", 
          "Name": "node_cpu_reserved_capacity" 
        }, 
        { 
          "Unit": "Percent", 
          "Name": "node_memory_reserved_capacity" 
        }, 
        { 
          "Unit": "Count", 
          "Name": "node_number_of_running_pods" 
        }, 
        { 
          "Unit": "Count", 
          "Name": "node_number_of_running_containers" 
        }, 
        { 
          "Name": "node_cpu_usage_total" 
        }, 
        { 
          "Name": "node_cpu_limit" 
        }, 
        { 
          "Unit": "Bytes", 
          "Name": "node_memory_working_set" 
        }, 
        { 
          "Unit": "Bytes", 
          "Name": "node_memory_limit" 
        } 
      ], 
      "Dimensions": [ 
        [ 
          "ClusterName" 
        ] 
      ], 
      "Namespace": "ContainerInsights" 
    } 
  ], 
  "ClusterName": "myCICluster", 
  "InstanceId": "i-1234567890123456", 
  "InstanceType": "t3.xlarge", 
  "NodeName": "ip-192-0-2-0.us-west-2.compute.internal", 
  "Sources": [ 
    "cadvisor", 
    "/proc", 
    "pod", 
    "calculated" 
  ], 
  "Timestamp": "1567096682364", 
  "Type": "Node", 
  "Version": "0", 
  "kubernetes": { 
    "host": "ip-192-168-75-26.us-west-2.compute.internal" 
  }, 
  "node_cpu_limit": 4000, 
  "node_cpu_request": 1130, 
525Amazon CloudWatch User Guide
Performance log reference
  "node_cpu_reserved_capacity": 28.249999999999996, 
  "node_cpu_usage_system": 33.794636630852764, 
  "node_cpu_usage_total": 136.47852169244098, 
  "node_cpu_usage_user": 71.67075111567326, 
  "node_cpu_utilization": 3.4119630423110245, 
  "node_memory_cache": 3103297536, 
  "node_memory_failcnt": 0, 
  "node_memory_hierarchical_pgfault": 0, 
  "node_memory_hierarchical_pgmajfault": 0, 
  "node_memory_limit": 16624865280, 
  "node_memory_mapped_file": 406646784, 
  "node_memory_max_usage": 4230746112, 
  "node_memory_pgfault": 0, 
  "node_memory_pgmajfault": 0, 
  "node_memory_request": 1115684864, 
  "node_memory_reserved_capacity": 6.7109407818311055, 
  "node_memory_rss": 798146560, 
  "node_memory_swap": 0, 
  "node_memory_usage": 3901444096, 
  "node_memory_utilization": 6.601302600149552, 
  "node_memory_working_set": 1097457664, 
  "node_network_rx_bytes": 35918.392817386324, 
  "node_network_rx_dropped": 0, 
  "node_network_rx_errors": 0, 
  "node_network_rx_packets": 157.67565245448117, 
  "node_network_total_bytes": 68264.20276554905, 
  "node_network_tx_bytes": 32345.80994816272, 
  "node_network_tx_dropped": 0, 
  "node_network_tx_errors": 0, 
  "node_network_tx_packets": 154.21455923431654, 
  "node_number_of_running_containers": 16, 
  "node_number_of_running_pods": 13
}
Type: NodeFS
{ 
  "AutoScalingGroupName": "eksctl-myCICluster-nodegroup-standard-workers-
NodeGroup-1174PV2WHZAYU", 
  "CloudWatchMetrics": [ 
    { 
      "Metrics": [ 
        { 
          "Unit": "Percent", 
          "Name": "node_filesystem_utilization" 
        } 
      ], 
      "Dimensions": [ 
        [ 
          "NodeName", 
          "InstanceId", 
          "ClusterName" 
        ], 
        [ 
          "ClusterName" 
        ] 
      ], 
      "Namespace": "ContainerInsights" 
    } 
  ], 
  "ClusterName": "myCICluster", 
  "EBSVolumeId": "aws://us-west-2b/vol-0a53108976d4a2fda", 
  "InstanceId": "i-1234567890123456", 
  "InstanceType": "t3.xlarge", 
  "NodeName": "ip-192-0-2-0.us-west-2.compute.internal", 
526Amazon CloudWatch User Guide
Performance log reference
  "Sources": [ 
    "cadvisor", 
    "calculated" 
  ], 
  "Timestamp": "1567097939726", 
  "Type": "NodeFS", 
  "Version": "0", 
  "device": "/dev/nvme0n1p1", 
  "fstype": "vfs", 
  "kubernetes": { 
    "host": "ip-192-168-75-26.us-west-2.compute.internal" 
  }, 
  "node_filesystem_available": 17298395136, 
  "node_filesystem_capacity": 21462233088, 
  "node_filesystem_inodes": 10484720, 
  "node_filesystem_inodes_free": 10367158, 
  "node_filesystem_usage": 4163837952, 
  "node_filesystem_utilization": 19.400767547940255
}
Type: NodeDiskIO
{ 
  "AutoScalingGroupName": "eksctl-myCICluster-nodegroup-standard-workers-
NodeGroup-1174PV2WHZAYU", 
  "ClusterName": "myCICluster", 
  "EBSVolumeId": "aws://us-west-2b/vol-0a53108976d4a2fda", 
  "InstanceId": "i-1234567890123456", 
  "InstanceType": "t3.xlarge", 
  "NodeName": "ip-192-0-2-0.us-west-2.compute.internal", 
  "Sources": [ 
    "cadvisor" 
  ], 
  "Timestamp": "1567096928131", 
  "Type": "NodeDiskIO", 
  "Version": "0", 
  "device": "/dev/nvme0n1", 
  "kubernetes": { 
    "host": "ip-192-168-75-26.us-west-2.compute.internal" 
  }, 
  "node_diskio_io_service_bytes_async": 9750.505814277016, 
  "node_diskio_io_service_bytes_read": 0, 
  "node_diskio_io_service_bytes_sync": 230.6174506688036, 
  "node_diskio_io_service_bytes_total": 9981.123264945818, 
  "node_diskio_io_service_bytes_write": 9981.123264945818, 
  "node_diskio_io_serviced_async": 1.153087253344018, 
  "node_diskio_io_serviced_read": 0, 
  "node_diskio_io_serviced_sync": 0.03603397666700056, 
  "node_diskio_io_serviced_total": 1.1891212300110185, 
  "node_diskio_io_serviced_write": 1.1891212300110185
}
Type: NodeNet
{ 
  "AutoScalingGroupName": "eksctl-myCICluster-nodegroup-standard-workers-
NodeGroup-1174PV2WHZAYU", 
  "ClusterName": "myCICluster", 
  "InstanceId": "i-1234567890123456", 
  "InstanceType": "t3.xlarge", 
  "NodeName": "ip-192-0-2-0.us-west-2.compute.internal", 
  "Sources": [ 
    "cadvisor", 
527Amazon CloudWatch User Guide
Performance log reference
    "calculated" 
  ], 
  "Timestamp": "1567096928131", 
  "Type": "NodeNet", 
  "Version": "0", 
  "interface": "eni972f6bfa9a0", 
  "kubernetes": { 
    "host": "ip-192-168-75-26.us-west-2.compute.internal" 
  }, 
  "node_interface_network_rx_bytes": 3163.008420864309, 
  "node_interface_network_rx_dropped": 0, 
  "node_interface_network_rx_errors": 0, 
  "node_interface_network_rx_packets": 16.575629266820258, 
  "node_interface_network_total_bytes": 3518.3935157426017, 
  "node_interface_network_tx_bytes": 355.385094878293, 
  "node_interface_network_tx_dropped": 0, 
  "node_interface_network_tx_errors": 0, 
  "node_interface_network_tx_packets": 3.9997714100370625
}
Type: Pod
{ 
  "AutoScalingGroupName": "eksctl-myCICluster-nodegroup-standard-workers-
NodeGroup-1174PV2WHZAYU", 
  "CloudWatchMetrics": [ 
    { 
      "Metrics": [ 
        { 
          "Unit": "Percent", 
          "Name": "pod_cpu_utilization" 
        }, 
        { 
          "Unit": "Percent", 
          "Name": "pod_memory_utilization" 
        }, 
        { 
          "Unit": "Bytes/Second", 
          "Name": "pod_network_rx_bytes" 
        }, 
        { 
          "Unit": "Bytes/Second", 
          "Name": "pod_network_tx_bytes" 
        }, 
        { 
          "Unit": "Percent", 
          "Name": "pod_cpu_utilization_over_pod_limit" 
        }, 
        { 
          "Unit": "Percent", 
          "Name": "pod_memory_utilization_over_pod_limit" 
        } 
      ], 
      "Dimensions": [ 
        [ 
          "PodName", 
          "Namespace", 
          "ClusterName" 
        ], 
        [ 
          "Service", 
          "Namespace", 
          "ClusterName" 
        ], 
        [ 
528Amazon CloudWatch User Guide
Performance log reference
          "Namespace", 
          "ClusterName" 
        ], 
        [ 
          "ClusterName" 
        ] 
      ], 
      "Namespace": "ContainerInsights" 
    }, 
    { 
      "Metrics": [ 
        { 
          "Unit": "Percent", 
          "Name": "pod_cpu_reserved_capacity" 
        }, 
        { 
          "Unit": "Percent", 
          "Name": "pod_memory_reserved_capacity" 
        } 
      ], 
      "Dimensions": [ 
        [ 
          "PodName", 
          "Namespace", 
          "ClusterName" 
        ], 
        [ 
          "ClusterName" 
        ] 
      ], 
      "Namespace": "ContainerInsights" 
    }, 
    { 
      "Metrics": [ 
        { 
          "Unit": "Count", 
          "Name": "pod_number_of_container_restarts" 
        } 
      ], 
      "Dimensions": [ 
        [ 
          "PodName", 
          "Namespace", 
          "ClusterName" 
        ] 
      ], 
      "Namespace": "ContainerInsights" 
    } 
  ], 
  "ClusterName": "myCICluster", 
  "InstanceId": "i-1234567890123456", 
  "InstanceType": "t3.xlarge", 
  "Namespace": "amazon-cloudwatch", 
  "NodeName": "ip-192-0-2-0.us-west-2.compute.internal", 
  "PodName": "cloudwatch-agent-statsd", 
  "Service": "cloudwatch-agent-statsd", 
  "Sources": [ 
    "cadvisor", 
    "pod", 
    "calculated" 
  ], 
  "Timestamp": "1567097351092", 
  "Type": "Pod", 
  "Version": "0", 
  "kubernetes": { 
    "host": "ip-192-168-75-26.us-west-2.compute.internal", 
529Amazon CloudWatch User Guide
Performance log reference
    "labels": { 
      "app": "cloudwatch-agent-statsd", 
      "pod-template-hash": "df44f855f" 
    }, 
    "namespace_name": "amazon-cloudwatch", 
    "pod_id": "2f4ff5ac-c813-11e9-a31d-06e9dde32928", 
    "pod_name": "cloudwatch-agent-statsd-df44f855f-ts4q2", 
    "pod_owners": [ 
      { 
        "owner_kind": "Deployment", 
        "owner_name": "cloudwatch-agent-statsd" 
      } 
    ], 
    "service_name": "cloudwatch-agent-statsd" 
  }, 
  "pod_cpu_limit": 200, 
  "pod_cpu_request": 200, 
  "pod_cpu_reserved_capacity": 5, 
  "pod_cpu_usage_system": 1.4504841104992765, 
  "pod_cpu_usage_total": 5.817016867430125, 
  "pod_cpu_usage_user": 1.1281543081661038, 
  "pod_cpu_utilization": 0.14542542168575312, 
  "pod_cpu_utilization_over_pod_limit": 2.9085084337150624, 
  "pod_memory_cache": 8192, 
  "pod_memory_failcnt": 0, 
  "pod_memory_hierarchical_pgfault": 0, 
  "pod_memory_hierarchical_pgmajfault": 0, 
  "pod_memory_limit": 104857600, 
  "pod_memory_mapped_file": 0, 
  "pod_memory_max_usage": 25268224, 
  "pod_memory_pgfault": 0, 
  "pod_memory_pgmajfault": 0, 
  "pod_memory_request": 104857600, 
  "pod_memory_reserved_capacity": 0.6307275170893897, 
  "pod_memory_rss": 22777856, 
  "pod_memory_swap": 0, 
  "pod_memory_usage": 25141248, 
  "pod_memory_utilization": 0.10988455961791709, 
  "pod_memory_utilization_over_pod_limit": 17.421875, 
  "pod_memory_working_set": 18268160, 
  "pod_network_rx_bytes": 9880.697124714186, 
  "pod_network_rx_dropped": 0, 
  "pod_network_rx_errors": 0, 
  "pod_network_rx_packets": 107.80005532263283, 
  "pod_network_total_bytes": 10158.829201483635, 
  "pod_network_tx_bytes": 278.13207676944796, 
  "pod_network_tx_dropped": 0, 
  "pod_network_tx_errors": 0, 
  "pod_network_tx_packets": 1.146027574644318, 
  "pod_number_of_container_restarts": 0, 
  "pod_number_of_containers": 1, 
  "pod_number_of_running_containers": 1, 
  "pod_status": "Running"
}
Type: PodNet
{ 
  "AutoScalingGroupName": "eksctl-myCICluster-nodegroup-standard-workers-
NodeGroup-1174PV2WHZAYU", 
  "ClusterName": "myCICluster", 
  "InstanceId": "i-1234567890123456", 
  "InstanceType": "t3.xlarge", 
  "Namespace": "amazon-cloudwatch", 
  "NodeName": "ip-192-0-2-0.us-west-2.compute.internal", 
530Amazon CloudWatch User Guide
Performance log reference
  "PodName": "cloudwatch-agent-statsd", 
  "Service": "cloudwatch-agent-statsd", 
  "Sources": [ 
    "cadvisor", 
    "calculated" 
  ], 
  "Timestamp": "1567097351092", 
  "Type": "PodNet", 
  "Version": "0", 
  "interface": "eth0", 
  "kubernetes": { 
    "host": "ip-192-168-75-26.us-west-2.compute.internal", 
    "labels": { 
      "app": "cloudwatch-agent-statsd", 
      "pod-template-hash": "df44f855f" 
    }, 
    "namespace_name": "amazon-cloudwatch", 
    "pod_id": "2f4ff5ac-c813-11e9-a31d-06e9dde32928", 
    "pod_name": "cloudwatch-agent-statsd-df44f855f-ts4q2", 
    "pod_owners": [ 
      { 
        "owner_kind": "Deployment", 
        "owner_name": "cloudwatch-agent-statsd" 
      } 
    ], 
    "service_name": "cloudwatch-agent-statsd" 
  }, 
  "pod_interface_network_rx_bytes": 9880.697124714186, 
  "pod_interface_network_rx_dropped": 0, 
  "pod_interface_network_rx_errors": 0, 
  "pod_interface_network_rx_packets": 107.80005532263283, 
  "pod_interface_network_total_bytes": 10158.829201483635, 
  "pod_interface_network_tx_bytes": 278.13207676944796, 
  "pod_interface_network_tx_dropped": 0, 
  "pod_interface_network_tx_errors": 0, 
  "pod_interface_network_tx_packets": 1.146027574644318
}
Type: Container
{ 
  "AutoScalingGroupName": "eksctl-myCICluster-nodegroup-standard-workers-NodeGroup-sample", 
  "ClusterName": "myCICluster", 
  "InstanceId": "i-1234567890123456", 
  "InstanceType": "t3.xlarge", 
  "Namespace": "amazon-cloudwatch", 
  "NodeName": "ip-192-0-2-0.us-west-2.compute.internal", 
  "PodName": "cloudwatch-agent-statsd", 
  "Service": "cloudwatch-agent-statsd", 
  "Sources": [ 
    "cadvisor", 
    "pod", 
    "calculated" 
  ], 
  "Timestamp": "1567097399912", 
  "Type": "Container", 
  "Version": "0", 
  "container_cpu_limit": 200, 
  "container_cpu_request": 200, 
  "container_cpu_usage_system": 1.87958283771964, 
  "container_cpu_usage_total": 6.159993652997942, 
  "container_cpu_usage_user": 1.6707403001952357, 
  "container_cpu_utilization": 0.15399984132494854, 
  "container_memory_cache": 8192, 
  "container_memory_failcnt": 0, 
531Amazon CloudWatch User Guide
Performance log reference
  "container_memory_hierarchical_pgfault": 0, 
  "container_memory_hierarchical_pgmajfault": 0, 
  "container_memory_limit": 104857600, 
  "container_memory_mapped_file": 0, 
  "container_memory_max_usage": 24580096, 
  "container_memory_pgfault": 0, 
  "container_memory_pgmajfault": 0, 
  "container_memory_request": 104857600, 
  "container_memory_rss": 22736896, 
  "container_memory_swap": 0, 
  "container_memory_usage": 24453120, 
  "container_memory_utilization": 0.10574541028701798, 
  "container_memory_working_set": 17580032, 
  "container_status": "Running", 
  "kubernetes": { 
    "container_name": "cloudwatch-agent", 
    "docker": { 
      "container_id": "8967b6b37da239dfad197c9fdea3e5dfd35a8a759ec86e2e4c3f7b401e232706" 
    }, 
    "host": "ip-192-168-75-26.us-west-2.compute.internal", 
    "labels": { 
      "app": "cloudwatch-agent-statsd", 
      "pod-template-hash": "df44f855f" 
    }, 
    "namespace_name": "amazon-cloudwatch", 
    "pod_id": "2f4ff5ac-c813-11e9-a31d-06e9dde32928", 
    "pod_name": "cloudwatch-agent-statsd-df44f855f-ts4q2", 
    "pod_owners": [ 
      { 
        "owner_kind": "Deployment", 
        "owner_name": "cloudwatch-agent-statsd" 
      } 
    ], 
    "service_name": "cloudwatch-agent-statsd" 
  }, 
  "number_of_container_restarts": 0
}
Type: ContainerFS
{ 
  "AutoScalingGroupName": "eksctl-myCICluster-nodegroup-standard-workers-
NodeGroup-1174PV2WHZAYU", 
  "ClusterName": "myCICluster", 
  "EBSVolumeId": "aws://us-west-2b/vol-0a53108976d4a2fda", 
  "InstanceId": "i-1234567890123456", 
  "InstanceType": "t3.xlarge", 
  "Namespace": "amazon-cloudwatch", 
  "NodeName": "ip-192-0-2-0.us-west-2.compute.internal", 
  "PodName": "cloudwatch-agent-statsd", 
  "Service": "cloudwatch-agent-statsd", 
  "Sources": [ 
    "cadvisor", 
    "calculated" 
  ], 
  "Timestamp": "1567097399912", 
  "Type": "ContainerFS", 
  "Version": "0", 
  "container_filesystem_available": 0, 
  "container_filesystem_capacity": 21462233088, 
  "container_filesystem_usage": 24576, 
  "container_filesystem_utilization": 0.0001145081217748071, 
  "device": "/dev/nvme0n1p1", 
  "fstype": "vfs", 
  "kubernetes": { 
532Amazon CloudWatch User Guide
Performance log reference
    "container_name": "cloudwatch-agent", 
    "docker": { 
      "container_id": "8967b6b37da239dfad197c9fdea3e5dfd35a8a759ec86e2e4c3f7b401e232706" 
    }, 
    "host": "ip-192-168-75-26.us-west-2.compute.internal", 
    "labels": { 
      "app": "cloudwatch-agent-statsd", 
      "pod-template-hash": "df44f855f" 
    }, 
    "namespace_name": "amazon-cloudwatch", 
    "pod_id": "2f4ff5ac-c813-11e9-a31d-06e9dde32928", 
    "pod_name": "cloudwatch-agent-statsd-df44f855f-ts4q2", 
    "pod_owners": [ 
      { 
        "owner_kind": "Deployment", 
        "owner_name": "cloudwatch-agent-statsd" 
      } 
    ], 
    "service_name": "cloudwatch-agent-statsd" 
  }
}
Type: Cluster
{ 
  "CloudWatchMetrics": [ 
    { 
      "Metrics": [ 
        { 
          "Unit": "Count", 
          "Name": "cluster_node_count" 
        }, 
        { 
          "Unit": "Count", 
          "Name": "cluster_failed_node_count" 
        } 
      ], 
      "Dimensions": [ 
        [ 
          "ClusterName" 
        ] 
      ], 
      "Namespace": "ContainerInsights" 
    } 
  ], 
  "ClusterName": "myCICluster", 
  "Sources": [ 
    "apiserver" 
  ], 
  "Timestamp": "1567097534160", 
  "Type": "Cluster", 
  "Version": "0", 
  "cluster_failed_node_count": 0, 
  "cluster_node_count": 3
}
Type: ClusterService
{ 
  "CloudWatchMetrics": [ 
    { 
      "Metrics": [ 
        { 
          "Unit": "Count", 
533Amazon CloudWatch User Guide
Performance log reference
          "Name": "service_number_of_running_pods" 
        } 
      ], 
      "Dimensions": [ 
        [ 
          "Service", 
          "Namespace", 
          "ClusterName" 
        ], 
        [ 
          "ClusterName" 
        ] 
      ], 
      "Namespace": "ContainerInsights" 
    } 
  ], 
  "ClusterName": "myCICluster", 
  "Namespace": "amazon-cloudwatch", 
  "Service": "cloudwatch-agent-statsd", 
  "Sources": [ 
    "apiserver" 
  ], 
  "Timestamp": "1567097534160", 
  "Type": "ClusterService", 
  "Version": "0", 
  "kubernetes": { 
    "namespace_name": "amazon-cloudwatch", 
    "service_name": "cloudwatch-agent-statsd" 
  }, 
  "service_number_of_running_pods": 1
}
Type: ClusterNamespace
{ 
  "CloudWatchMetrics": [ 
    { 
      "Metrics": [ 
        { 
          "Unit": "Count", 
          "Name": "namespace_number_of_running_pods" 
        } 
      ], 
      "Dimensions": [ 
        [ 
          "Namespace", 
          "ClusterName" 
        ], 
        [ 
          "ClusterName" 
        ] 
      ], 
      "Namespace": "ContainerInsights" 
    } 
  ], 
  "ClusterName": "myCICluster", 
  "Namespace": "amazon-cloudwatch", 
  "Sources": [ 
    "apiserver" 
  ], 
  "Timestamp": "1567097594160", 
  "Type": "ClusterNamespace", 
  "Version": "0", 
  "kubernetes": { 
    "namespace_name": "amazon-cloudwatch" 
534Amazon CloudWatch User Guide
Performance log reference
  }, 
  "namespace_number_of_running_pods": 7
}
Relevant ﬁelds in performance log events for Amazon EKS and 
Kubernetes
For Amazon EKS and Kubernetes, the containerized CloudWatch agent emits data as performance log 
events. This enables CloudWatch to ingest and store high-cardinality data. CloudWatch uses the data 
in the performance log events to create aggregated CloudWatch metrics at the cluster, node, and pod 
levels without the need to lose granular details.
The following table lists the ﬁelds in these performance log events that are relevant to the collection of 
Container Insights metric data. You can use CloudWatch Logs Insights to query for any of these ﬁelds 
to collect data or investigate issues. For more information, see Analyze Log Data With CloudWatch Logs 
Insights .
Type Log ﬁeld Source Formula or 
notes
Pod pod_cpu_utilization Calculated Formula:
pod_cpu_usage_total / 
node_cpu_limit
Pod pod_cpu_usage_total
pod_cpu_usage_total  is reported in 
millicores.cadvisor
Pod pod_cpu_limit Calculated Formula:
sum(container_cpu_limit)
If any containers 
in the pod don't 
have a CPU limit 
deﬁned, this 
ﬁeld doesn't 
appear in the 
log event. This 
includes  init 
containers.
Pod pod_cpu_request Calculated Formula:
sum(container_cpu_request)
container_cpu_request
isn't guaranteed 
to be set. Only 
the ones that are 
set are included 
in the sum.
Pod pod_cpu_utilization_over_pod_limit Calculated Formula:
pod_cpu_usage_total / 
pod_cpu_limit
535Amazon CloudWatch User Guide
Performance log reference
TypeLog ﬁeld SourceFormula or 
notes
Pod pod_cpu_reserved_capacity CalculatedFormula:
pod_cpu_request / 
node_cpu_limit
Pod pod_memory_utilization CalculatedFormula:
pod_memory_working_set / 
node_memory_limit
It is the 
percentage of 
pod memory 
usage over the 
node memory 
limitation.
Pod pod_memory_working_set cadvisor
Pod pod_memory_limit CalculatedFormula:
sum(container_memory_limit)
If any containers 
in the pod don't 
have a memory 
limit deﬁned, 
this ﬁeld doesn't 
appear in the 
log event. This 
includes  init 
containers.
Pod pod_memory_request CalculatedFormula:
sum(container_memory_request)
container_memory_request
isn't guaranteed 
to be set. Only 
the ones that are 
set are included 
in the sum.
Pod pod_memory_utilization_over_pod_limit CalculatedFormula:
pod_memory_working_set / 
pod_memory_limit
If any containers 
in the pod don't 
have a memory 
limit deﬁned, 
this ﬁeld doesn't 
appear in the 
log event. This 
includes  init 
containers.
536Amazon CloudWatch User Guide
Performance log reference
TypeLog ﬁeld SourceFormula or 
notes
Pod pod_memory_reserved_capacity CalculatedFormula:
pod_memory_request / 
node_memory_limit
Pod pod_network_tx_bytes CalculatedFormula:
sum(pod_interface_network_tx_bytes)
This data is 
available for 
all the network 
interfaces 
per pod. The 
CloudWatch 
agent calculates 
the total and 
adds metric 
extraction rules.
Pod pod_network_rx_bytes CalculatedFormula:
sum(pod_interface_network_rx_bytes)
Pod pod_network_total_bytes CalculatedFormula:
pod_network_rx_bytes 
+ 
pod_network_tx_bytes
PodNet pod_interface_network_rx_bytes cadvisor This data is 
network rx bytes 
per second of 
a pod network 
interface.
PodNet pod_interface_network_tx_bytes cadvisor This data is 
network tx bytes 
per second of 
a pod network 
interface.
Container container_cpu_usage_total cadvisor
Container container_cpu_limit cadvisor Not guaranteed 
to be set. It's not 
emitted if it's 
not set.
Container container_cpu_request cadvisor Not guaranteed 
to be set. It's not 
emitted if it's 
not set.
Container container_memory_working_set cadvisor
Container container_memory_limit pod Not guaranteed 
to be set. It's not 
emitted if it's 
not set.
537Amazon CloudWatch User Guide
Performance log reference
TypeLog ﬁeld SourceFormula or 
notes
Container container_memory_request pod Not guaranteed 
to be set. It's not 
emitted if it's 
not set.
ContainerFS container_filesystem_capacity pod This data is 
available per 
disk device.
ContainerFS container_filesystem_usage pod This data is 
available per 
disk device.
ContainerFS container_filesystem_utilization CalculatedFormula:
container_filesystem_usage / 
container_filesystem_capacity
This data is 
available per 
device name.
Node node_cpu_utilization CalculatedFormula:
node_cpu_usage_total / 
node_cpu_limit
Node node_cpu_usage_total cadvisor
Node node_cpu_limit /proc
Node node_cpu_request CalculatedFormula:
sum(pod_cpu_request)
Node node_cpu_reserved_capacity CalculatedFormula:
node_cpu_request / 
node_cpu_limit
Node node_memory_utilization CalculatedFormula:
node_memory_working_set / 
node_memory_limit
Node node_memory_working_set cadvisor
Node node_memory_limit /proc
Node node_memory_request CalculatedFormula:
sum(pod_memory_request)
Node node_memory_reserved_capacity CalculatedFormula:
node_memory_request / 
node_memory_limit
Node node_network_rx_bytes CalculatedFormula:
sum(node_interface_network_rx_bytes)
Node node_network_tx_bytes CalculatedFormula:
sum(node_interface_network_tx_bytes)
538Amazon CloudWatch User Guide
Performance log reference
TypeLog ﬁeld SourceFormula or 
notes
Node node_network_total_bytes CalculatedFormula:
node_network_rx_bytes 
+ 
node_network_tx_bytes
Node node_number_of_running_pods Pod List
Node node_number_of_running_containers Pod List
NodeNet node_interface_network_rx_bytes cadvisor This data is 
network rx bytes 
per second 
of a worker 
node network 
interface.
NodeNet node_interface_network_tx_bytes cadvisor This data is 
network tx bytes 
per second 
of a worker 
node network 
interface.
NodeFS node_filesystem_capacity cadvisor
NodeFS node_filesystem_usage cadvisor
NodeFS node_filesystem_utilization CalculatedFormula:
node_filesystem_usage / 
node_filesystem_capacity
This data is 
available per 
device name.
Cluster cluster_failed_node_count API Server
Cluster cluster_node_count API Server
Service service_number_of_running_pods API Server
Namespacenamespace_number_of_running_pods API Server
Metrics calculation examples
This section includes examples that show how some of the values in the preceding table are calculated.
Suppose that you have a cluster in the following state.
Node1 
   node_cpu_limit = 4 
   node_cpu_usage_total = 3 
    
   Pod1 
     pod_cpu_usage_total = 2 
      
539Amazon CloudWatch User Guide
Performance log reference
     Container1 
        container_cpu_limit = 1 
        container_cpu_request = 1 
        container_cpu_usage_total = 0.8 
         
     Container2 
        container_cpu_limit = null 
        container_cpu_request = null 
        container_cpu_usage_total = 1.2 
         
   Pod2 
     pod_cpu_usage_total = 0.4 
      
     Container3 
        container_cpu_limit = 1 
        container_cpu_request = 0.5 
        container_cpu_usage_total = 0.4 
         
Node2 
   node_cpu_limit = 8 
   node_cpu_usage_total = 1.5 
    
   Pod3 
     pod_cpu_usage_total = 1 
      
     Container4 
        container_cpu_limit = 2 
        container_cpu_request = 2 
        container_cpu_usage_total = 1
The following table shows how pod CPU metrics are calculated using this data.
Metric Formula Pod1 Pod2 Pod3
pod_cpu_utilization pod_cpu_usage_total / 
node_cpu_limit2 / 4 = 50% 0.4 / 4 = 
10%1 / 8 = 
12.5%
pod_cpu_utilization_over_pod_limit pod_cpu_usage_total / 
sum(container_cpu_limit)N/A 
because 
CPU 
limit for
Container2
isn't 
deﬁned0.4 / 1 = 
40%1 / 2 = 50%
pod_cpu_reserved_capacity sum(container_cpu_request) / 
node_cpu_limit(1 + 0) / 4 = 
25%0.5 / 4 = 
12.5%2 / 8 = 25%
The following table shows how node CPU metrics are calculated using this data.
Metric Formula Node1 Node2
node_cpu_utilization node_cpu_usage_total / 
node_cpu_limit3 / 4 = 75% 1.5 / 8 = 
18.75%
node_cpu_reserved_capacity sum(pod_cpu_request) / 
node_cpu_limit1.5 / 4 = 
37.5%2 / 8 = 25%
540Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Container Insights Prometheus metrics monitoring
CloudWatch Container Insights monitoring for Prometheus automates the discovery of Prometheus 
metrics from containerized systems and workloads. Prometheus is an open-source systems monitoring 
and alerting toolkit. For more information, see  What is Prometheus? in the Prometheus documentation.
Discovering Prometheus metrics is supported for Amazon Elastic Container Service, Amazon Elastic 
Kubernetes Service and Kubernetes  clusters running on Amazon EC2 instances. The Prometheus counter, 
gauge, and summary metric types are collected. Support for histogram metrics is planned for an 
upcoming release.
For Amazon ECS and Amazon EKS clusters, both the EC2 and Fargate launch types are supported. 
Container Insights automatically collects metrics from several workloads, and you can conﬁgure it to 
collect metrics from any workload.
You can adopt Prometheus as an open-source and open-standard method to ingest custom metrics in 
CloudWatch. The CloudWatch agent with Prometheus support discovers and collects Prometheus metrics 
to monitor, troubleshoot, and alarm on application performance degradation and failures faster. This 
also reduces the number of monitoring tools required to improve observability.
Container Insights Prometheus support involves pay-per-use of metrics and logs, including collecting, 
storing, and analyzing. For more information, see Amazon CloudWatch Pricing.
Pre-built dashboards for some workloads
The Container Insights Prometheus solution includes pre-built dashboards for the popular workloads 
that are listed in this section. For sample conﬁgurations for these workloads, see (Optional) Set up 
sample containerized Amazon ECS workloads for Prometheus metric testing (p. 555) and (Optional) Set 
up sample containerized Amazon EKS workloads for Prometheus metric testing (p. 592).
You can also conﬁgure Container Insights to collect Prometheus metrics from other containerized 
services and applications by editing the agent conﬁguration ﬁle.
Workloads with pre-built dashboards for Amazon EKS clusters and Kubernetes clusters running on 
Amazon EC2 instances:
•AWS App Mesh
•NGINX
•Memcached
•Java/JMX
•HAProxy
Workloads with pre-built dashboards for Amazon ECS clusters:
•AWS App Mesh
•Java/JMX
•NGINX
•NGINX Plus
Set up and conﬁgure Prometheus metrics collection on Amazon 
ECS clusters
To collect Prometheus metrics from Amazon ECS clusters, you can use the CloudWatch agent as a 
collector or use the AWS Distro for OpenTelemetry collector. For information about using the AWS Distro 
541Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
for OpenTelemetry collector, see https://aws-otel.github.io/docs/getting-started/container-insights/ 
ecs-prometheus.
The following sections explain how to use the CloudWatch agent as the collector to retrieve Prometheus 
metrics. You install the CloudWatch agent with Prometheus monitoring on clusters running Amazon 
ECS, and you can optionally conﬁgure the agent to scrape additional targets. These sections also provide 
optional tutorials for setting up sample workloads to use for testing with Prometheus monitoring.
Container Insights on Amazon ECS supports the following launch type and network mode combinations 
for Prometheus metrics:
Amazon ECS launch type Network modes supported
EC2 (Linux) bridge, host, and awsvpc
Fargate awsvpc
VPC security group requirements
The ingress rules of the security groups for the Prometheus workloads must open the Prometheus ports 
to the CloudWatch agent for scraping the Prometheus metrics by the private IP.
The egress rules of the security group for the CloudWatch agent must allow the CloudWatch agent to 
connect to the Prometheus workloads' port by private IP.
Topics
•Install the CloudWatch agent with Prometheus metrics collection on Amazon ECS clusters (p. 542)
•Scraping additional Prometheus sources and importing those metrics (p. 546)
•(Optional) Set up sample containerized Amazon ECS workloads for Prometheus metric 
testing  (p. 555)
Install the CloudWatch agent with Prometheus metrics collection on Amazon 
ECS clusters
This section explains how to set up the CloudWatch agent with Prometheus monitoring in a cluster 
running Amazon ECS. After you do this, the agent automatically scrapes and imports metrics for the 
following workloads running in that cluster.
•AWS App Mesh
•Java/JMX
You can also conﬁgure the agent to scrape and import metrics from additional Prometheus workloads 
and sources.
Set up IAM roles
You need two IAM roles for the CloudWatch agent task deﬁnition. If you specify
CreateIAMRoles=True  in the AWS CloudFormation stack to have Container Insights create these roles 
for you, the roles will be created with the correct permissions. If you want to create them yourself or use 
existing roles, the following roles and permissions are required.
•CloudWatch agent ECS task role— The CloudWatch agent container uses this role. It must include the
CloudWatchAgentServerPolicy policy and a customer-managed policy which contains the following 
read-only permissions:
•ec2:DescribeInstances
542Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
•ecs:ListTasks
•ecs:ListServices
•ecs:DescribeContainerInstances
•ecs:DescribeServices
•ecs:DescribeTasks
•ecs:DescribeTaskDefinition
•CloudWatch agent ECS task execution role— This is the role that Amazon ECS requires to launch and 
execute your containers. Ensure that your task execution role has the AmazonSSMReadOnlyAccess,
AmazonECSTaskExecutionRolePolicy, and CloudWatchAgentServerPolicy policies attached. If you 
want to store more sensitive data for Amazon ECS to use, see  Specifying sensitive data.
Install the CloudWatch agent with Prometheus monitoring by using AWS CloudFormation
You use AWS CloudFormation to install the CloudWatch agent with Prometheus monitoring for Amazon 
ECS clusters. The following list shows the parameters you will use in the AWS CloudFormation template.
•ECSClusterName— Speciﬁes the target Amazon ECS cluster.
•CreateIAMRoles— Specify True to create new roles for the Amazon ECS task role and Amazon ECS 
task execution role. Specify False to reuse existing roles.
•TaskRoleName— If you speciﬁed True  for CreateIAMRoles, this speciﬁes the name to use for the new 
Amazon ECS task role. If you speciﬁed False  for CreateIAMRoles, this speciﬁes the existing role to use 
as the Amazon ECS task role.
•ExecutionRoleName— If you speciﬁed True  for CreateIAMRoles, this speciﬁes the name to use for 
the new Amazon ECS task execution role. If you speciﬁed False  for CreateIAMRoles, this speciﬁes the 
existing role to use as the Amazon ECS task execution role.
•ECSNetworkMode— If you are using EC2 launch type, specify the network mode here. It must be 
either bridge  or host .
•ECSLaunchType— Specify either fargate  or EC2.
•SecurityGroupID— If the ECSNetworkMode is awsvpc, specify the security group ID here.
•SubnetID — If the ECSNetworkMode is awsvpc, specify the subnet ID here.
Command samples
This section includes sample AWS CloudFormation commands to install Container Insights with 
Prometheus monitoring in various scenarios.
Note
The following setup step pulls the container image from Docker Hub as an anonymous user by 
default. This pull may be subject to a rate limit. For more information, see CloudWatch agent 
container image (p. 465).
Create AWS CloudFormation stack for an Amazon ECS cluster in bridge network mode
export AWS_PROFILE= your_aws_config_profile_eg_default
export AWS_DEFAULT_REGION= your_aws_region_eg_ap-southeast-1
export ECS_CLUSTER_NAME= your_ec2_ecs_cluster_name
export ECS_NETWORK_MODE=bridge
export CREATE_IAM_ROLES=True
export ECS_TASK_ROLE_NAME= your_selected_ecs_task_role_name
export ECS_EXECUTION_ROLE_NAME= your_selected_ecs_execution_role_name
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/
latest/ecs-task-definition-templates/deployment-mode/replica-service/cwagent-prometheus/
cloudformation-quickstart/cwagent-ecs-prometheus-metric-for-bridge-host.yaml
543Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
aws cloudformation create-stack --stack-name CWAgent-Prometheus-ECS-${ECS_CLUSTER_NAME}-
EC2-${ECS_NETWORK_MODE} \ 
    --template-body file://cwagent-ecs-prometheus-metric-for-bridge-host.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=${ECS_CLUSTER_NAME} \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=${CREATE_IAM_ROLES} \ 
                 ParameterKey=ECSNetworkMode,ParameterValue=${ECS_NETWORK_MODE} \ 
                 ParameterKey=TaskRoleName,ParameterValue=${ECS_TASK_ROLE_NAME} \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=${ECS_EXECUTION_ROLE_NAME} \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region ${AWS_DEFAULT_REGION} \ 
    --profile ${AWS_PROFILE}
Create AWS CloudFormation stack for an Amazon ECS cluster in host network mode
export AWS_PROFILE= your_aws_config_profile_eg_default
export AWS_DEFAULT_REGION= your_aws_region_eg_ap-southeast-1
export ECS_CLUSTER_NAME= your_ec2_ecs_cluster_name
export ECS_NETWORK_MODE=host
export CREATE_IAM_ROLES=True
export ECS_TASK_ROLE_NAME= your_selected_ecs_task_role_name
export ECS_EXECUTION_ROLE_NAME= your_selected_ecs_execution_role_name
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/
latest/ecs-task-definition-templates/deployment-mode/replica-service/cwagent-prometheus/
cloudformation-quickstart/cwagent-ecs-prometheus-metric-for-bridge-host.yaml
aws cloudformation create-stack --stack-name CWAgent-Prometheus-ECS-${ECS_CLUSTER_NAME}-
EC2-${ECS_NETWORK_MODE} \ 
    --template-body file://cwagent-ecs-prometheus-metric-for-bridge-host.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=${ECS_CLUSTER_NAME} \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=${CREATE_IAM_ROLES} \ 
                 ParameterKey=ECSNetworkMode,ParameterValue=${ECS_NETWORK_MODE} \ 
                 ParameterKey=TaskRoleName,ParameterValue=${ECS_TASK_ROLE_NAME} \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=${ECS_EXECUTION_ROLE_NAME} 
 \  
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region ${AWS_DEFAULT_REGION} \ 
    --profile ${AWS_PROFILE}
Create AWS CloudFormation stack for an Amazon ECS cluster in awsvpc network mode
export AWS_PROFILE= your_aws_config_profile_eg_default
export AWS_DEFAULT_REGION= your_aws_region_eg_ap-southeast-1
export ECS_CLUSTER_NAME= your_ec2_ecs_cluster_name
export ECS_LAUNCH_TYPE=EC2
export CREATE_IAM_ROLES=True
export ECS_CLUSTER_SECURITY_GROUP= your_security_group_eg_sg-xxxxxxxxxx
export ECS_CLUSTER_SUBNET= your_subnet_eg_subnet-xxxxxxxxxx
export ECS_TASK_ROLE_NAME= your_selected_ecs_task_role_name
export ECS_EXECUTION_ROLE_NAME= your_selected_ecs_execution_role_name
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/
latest/ecs-task-definition-templates/deployment-mode/replica-service/cwagent-prometheus/
cloudformation-quickstart/cwagent-ecs-prometheus-metric-for-awsvpc.yaml
aws cloudformation create-stack --stack-name CWAgent-Prometheus-ECS-${ECS_CLUSTER_NAME}-
${ECS_LAUNCH_TYPE}-awsvpc \ 
    --template-body file://cwagent-ecs-prometheus-metric-for-awsvpc.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=${ECS_CLUSTER_NAME} \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=${CREATE_IAM_ROLES} \ 
                 ParameterKey=ECSLaunchType,ParameterValue=${ECS_LAUNCH_TYPE} \ 
                 ParameterKey=SecurityGroupID,ParameterValue=${ECS_CLUSTER_SECURITY_GROUP} 
 \ 
544Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
                 ParameterKey=SubnetID,ParameterValue=${ECS_CLUSTER_SUBNET} \ 
                 ParameterKey=TaskRoleName,ParameterValue=${ECS_TASK_ROLE_NAME} \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=${ECS_EXECUTION_ROLE_NAME} \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region ${AWS_DEFAULT_REGION} \ 
    --profile ${AWS_PROFILE}
Create AWS CloudFormation stack for a Fargate cluster in awsvpc network mode
export AWS_PROFILE= your_aws_config_profile_eg_default
export AWS_DEFAULT_REGION= your_aws_region_eg_ap-southeast-1
export ECS_CLUSTER_NAME= your_ec2_ecs_cluster_name
export ECS_LAUNCH_TYPE=FARGATE
export CREATE_IAM_ROLES=True
export ECS_CLUSTER_SECURITY_GROUP= your_security_group_eg_sg-xxxxxxxxxx
export ECS_CLUSTER_SUBNET= your_subnet_eg_subnet-xxxxxxxxxx
export ECS_TASK_ROLE_NAME= your_selected_ecs_task_role_name
export ECS_EXECUTION_ROLE_NAME= your_selected_ecs_execution_role_name             
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/
latest/ecs-task-definition-templates/deployment-mode/replica-service/cwagent-prometheus/
cloudformation-quickstart/cwagent-ecs-prometheus-metric-for-awsvpc.yaml
aws cloudformation create-stack --stack-name CWAgent-Prometheus-ECS-${ECS_CLUSTER_NAME}-
${ECS_LAUNCH_TYPE}-awsvpc \ 
    --template-body file://cwagent-ecs-prometheus-metric-for-awsvpc.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=${ECS_CLUSTER_NAME} \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=${CREATE_IAM_ROLES} \ 
                 ParameterKey=ECSLaunchType,ParameterValue=${ECS_LAUNCH_TYPE} \ 
                 ParameterKey=SecurityGroupID,ParameterValue=${ECS_CLUSTER_SECURITY_GROUP} 
 \ 
                 ParameterKey=SubnetID,ParameterValue=${ECS_CLUSTER_SUBNET} \ 
                 ParameterKey=TaskRoleName,ParameterValue=${ECS_TASK_ROLE_NAME} \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=${ECS_EXECUTION_ROLE_NAME} \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region ${AWS_DEFAULT_REGION} \ 
    --profile ${AWS_PROFILE}
AWS resources created by the AWS CloudFormation stack
The following table lists the AWS resources that are created when you use AWS CloudFormation to set 
up Container Insights with Prometheus monitoring on an Amazon ECS cluster.
Resource 
typeResource name Comments
AWS::SSM::Parameter AmazonCloudWatch-CWAgentConﬁg-
$ECS_CLUSTER_NAME -
$ECS_LAUNCH_TYPE -
$ECS_NETWORK_MODEThis is the CloudWatch agent with 
the default App Mesh and Java/JMX 
embedded metric format deﬁnition.
AWS::SSM::Parameter AmazonCloudWatch-
PrometheusConﬁgName-
$ECS_CLUSTER_NAME -
$ECS_LAUNCH_TYPE -
$ECS_NETWORK_MODEThis is the Prometheus scraping 
conﬁguration.
AWS::IAM::Role$ECS_TASK_ROLE_NAME. The Amazon ECS task role. This is 
created only if you speciﬁed True  for
CREATE_IAM_ROLES .
545Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Resource 
typeResource name Comments
AWS::IAM::Role${ECS_EXECUTION_ROLE_NAME}The Amazon ECS task execution role. This 
is created only if you speciﬁed True  for
CREATE_IAM_ROLES .
AWS::ECS::TaskDeﬁnitioncwagent-prometheus-
$ECS_CLUSTER_NAME -
$ECS_LAUNCH_TYPE -
$ECS_NETWORK_MODE
AWS::ECS::Servicecwagent-prometheus-replica-
service-$ECS_LAUNCH_TYPE -
$ECS_NETWORK_MODE
Deleting the AWS CloudFormation stack for the CloudWatch agent with Prometheus monitoring
To delete the CloudWatch agent from an Amazon ECS cluster, enter these commands.
export AWS_PROFILE= your_aws_config_profile_eg_default
export AWS_DEFAULT_REGION= your_aws_region_eg_ap-southeast-1
export CLOUDFORMATION_STACK_NAME= your_cloudformation_stack_name
aws cloudformation delete-stack \
--stack-name ${CLOUDFORMATION_STACK_NAME} \
--region ${AWS_DEFAULT_REGION} \
--profile ${AWS_PROFILE}
Scraping additional Prometheus sources and importing those metrics
The CloudWatch agent with Prometheus monitoring needs two conﬁgurations to scrape the Prometheus 
metrics. One is for the standard Prometheus conﬁgurations as documented in <scrape_conﬁg> in the 
Prometheus documentation. The other is for the CloudWatch agent conﬁguration.
For Amazon ECS clusters, the conﬁgurations are integrated with the Parameter Store of AWS Systems 
Manager by the secrets in the Amazon ECS task deﬁnition:
•The secret PROMETHEUS_CONFIG_CONTENT  is for the Prometheus scrape conﬁguration.
•The secret CW_CONFIG_CONTENT  is for the CloudWatch agent conﬁguration.
To scrape additional Prometheus metrics sources and import those metrics to CloudWatch, you modify 
both the Prometheus scrape conﬁguration and the CloudWatch agent conﬁguration, and then re-deploy 
the agent with the updated conﬁguration.
VPC security group requirements
The ingress rules of the security groups for the Prometheus workloads must open the Prometheus ports 
to the CloudWatch agent for scraping the Prometheus metrics by the private IP.
The egress rules of the security group for the CloudWatch agent must allow the CloudWatch agent to 
connect to the Prometheus workloads' port by private IP.
Prometheus scrape conﬁguration
The CloudWatch agent supports the standard Prometheus scrape conﬁgurations as documented 
in <scrape_conﬁg> in the Prometheus documentation. You can edit this section to update the 
546Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
conﬁgurations that are already in this ﬁle, and add additional Prometheus scraping targets. By default, 
the sample conﬁguration ﬁle contains the following global conﬁguration lines:
global: 
  scrape_interval: 1m 
  scrape_timeout: 10s
•scrape_interval— Deﬁnes how frequently to scrape targets.
•scrape_timeout — Deﬁnes how long to wait before a scrape request times out.
You can also deﬁne diﬀerent values for these settings at the job level, to override the global 
conﬁgurations.
Prometheus scraping jobs
The CloudWatch agent YAML ﬁles already have some default scraping jobs conﬁgured. For example, 
in the YAML ﬁles for Amazon ECS such as cwagent-ecs-prometheus-metric-for-bridge-
host.yaml , the default scraping jobs are conﬁgured in the ecs_service_discovery  section.
"ecs_service_discovery": { 
                  "sd_frequency": "1m", 
                  "sd_result_file": "/tmp/cwagent_ecs_auto_sd.yaml", 
                  "docker_label": { 
                  }, 
                  "task_definition_list": [ 
                    { 
                      "sd_job_name": "ecs-appmesh-colors", 
                      "sd_metrics_ports": "9901", 
                      "sd_task_definition_arn_pattern": ".*:task-definition\/.*-
ColorTeller-(white):[0-9]+", 
                      "sd_metrics_path": "/stats/prometheus" 
                    }, 
                    { 
                      "sd_job_name": "ecs-appmesh-gateway", 
                      "sd_metrics_ports": "9901", 
                      "sd_task_definition_arn_pattern": ".*:task-definition/.*-
ColorGateway:[0-9]+", 
                      "sd_metrics_path": "/stats/prometheus" 
                    } 
                  ] 
                }
Each of these default targets are scraped, and the metrics are sent to CloudWatch in log events using 
embedded metric format. For more information, see Embedding metrics within logs  (p. 985).
Log events from Amazon ECS clusters are stored in the /aws/ecs/containerinsights/cluster_name /
prometheus  log group.
Each scraping job is contained in a diﬀerent log stream in this log group.
To add a new scraping target, you add a new entry in the task_definition_list  section under 
the ecs_service_discovery  section. of the YAML ﬁle, and restart the agent. For an example 
of this process, see Tutorial for adding a new Prometheus scrape target: Prometheus API Server 
metrics  (p. 588).
CloudWatch agent conﬁguration for Prometheus
The CloudWatch agent conﬁguration ﬁle has a prometheus  section under metrics_collected  for the 
Prometheus scraping conﬁguration. It includes the following conﬁguration options:
547Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
•cluster_name — speciﬁes the cluster name to be added as a label in the log event. This ﬁeld is 
optional. If you omit it, the agent can detect the Amazon ECS cluster name.
•log_group_name— speciﬁes the log group name for the scraped Prometheus metrics. This ﬁeld is 
optional. If you omit it, CloudWatch uses /aws/ecs/containerinsights/cluster_name /prometheus
for logs from Amazon ECS clusters.
•prometheus_conﬁg_path— speciﬁes the Prometheus scrape conﬁguration ﬁle path. If the value of 
this ﬁeld starts with env: the Prometheus scrape conﬁguration ﬁle contents will be retrieved from the 
container's environment variable. Do not change this ﬁeld.
•ecs_service_discovery— is the section to specify the conﬁgurations of the Amazon ECS Prometheus 
target auto-discovery functions. Two modes are supported to discover the Prometheus targets: 
discovery based on the container’s docker label or discovery based on the Amazon ECS task deﬁnition 
ARN regular expression. You can use the two modes together and the CloudWatch agent will de-
duplicate the discovered targets based on: {private_ip}:{port}/{metrics_path}.
The ecs_service_discovery  section can contain the following ﬁelds:
•sd_frequency  is the frequency to discover the Prometheus exporters. Specify a number and a unit 
suﬃx. For example, 1m for once per minute or 30s for once per 30 seconds. Valid unit suﬃxes are
ns, us, ms, s, m, and h.
This ﬁeld is optional. The default is 60 seconds (1 minute).
•sd_target_cluster  is the target Amazon ECS cluster name for auto-discovery. This ﬁeld is 
optional. The default is the name of the Amazon ECS cluster where the CloudWatch agent is 
installed.
•sd_cluster_region  is the target Amazon ECS cluster's Region. This ﬁeld is optional. The default is 
the Region of the Amazon ECS cluster where the CloudWatch agent is installed. .
•sd_result_file  is the path of the YAML ﬁle for the Prometheus target results. The Prometheus 
scrape conﬁguration will refer to this ﬁle.
•docker_label  is an optional section that you can use to specify the conﬁguration for docker label-
based service discovery. If you omit this section, docker label-based discovery is not used. This 
section can contain the following ﬁelds:
•sd_port_label  is the container's docker label name that speciﬁes the container port for 
Prometheus metrics. The default value is ECS_PROMETHEUS_EXPORTER_PORT . If the container 
does not have this docker label, the CloudWatch agent will skip it.
•sd_metrics_path_label  is the container's docker label name that speciﬁes the Prometheus 
metrics path. The default value is ECS_PROMETHEUS_METRICS_PATH . If the container does not 
have this docker label, the agent assumes the default path /metrics .
•sd_job_name_label  is the container's docker label name that speciﬁes the Prometheus 
scrape job name. The default value is job. If the container does not have this docker label, the 
CloudWatch agent uses the job name in the Prometheus scrape conﬁguration.
•task_definition_list  is an optional section that you can use to specify the conﬁguration of 
task deﬁnition-based service discovery. If you omit this section, task deﬁnition-based discovery is 
not used. This section can contain the following ﬁelds:
•sd_task_definition_arn_pattern  is the pattern to use to specify the Amazon ECS task 
deﬁnitions to discover. This is a regular expression.
•sd_metrics_ports  lists the containerPort for the Prometheus metrics. Separate the 
containerPorts with semicolons.
•sd_container_name_pattern  speciﬁes the Amazon ECS task container names. This is a regular 
expression.
•sd_metrics_path  speciﬁes the Prometheus metric path. If you omit this, the agent assumes the 
default path /metrics
•sd_job_name  speciﬁes the Prometheus scrape job name. If you omit this ﬁeld, the CloudWatch 
agent uses the job name in the Prometheus scrape conﬁguration.
548Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
•service_name_list_for_tasks  is an optional section that you can use to specify the 
conﬁguration of service name-based discovery. If you omit this section, service name-based 
discovery is not used. This section can contain the following ﬁelds:
•sd_service_name_pattern  is the pattern to use to specify the Amazon ECS service where tasks 
are to be discovered. This is a regular expression.
•sd_metrics_ports  Lists the containerPort  for the Prometheus metrics. Separate multiple
containerPorts  with semicolons.
•sd_container_name_pattern  speciﬁes the Amazon ECS task container names. This is a regular 
expression.
•sd_metrics_path  speciﬁes the Prometheus metrics path. If you omit this, the agent assumes 
that the default path /metrics .
•sd_job_name  speciﬁes the Prometheus scrape job name. If you omit this ﬁeld, the CloudWatch 
agent uses the job name in the Prometheus scrape conﬁguration.
•metric_declaration — are sections that specify the array of logs with embedded metric format 
to be generated. There are metric_declaration  sections for each Prometheus source that the 
CloudWatch agent imports from by default. These sections each include the following ﬁelds:
•label_matcher  is a regular expression that checks the value of the labels listed in
source_labels . The metrics that match are enabled for inclusion in the embedded metric format 
sent to CloudWatch.
If you have multiple labels speciﬁed in source_labels , we recommend that you do not use ^ or $
characters in the regular expression for label_matcher .
•source_labels  speciﬁes the value of the labels that are checked by the label_matcher  line.
•label_separator  speciﬁes the separator to be used in the  label_matcher  line if 
multiple source_labels  are speciﬁed. The default is ;. You can see this default used in the
label_matcher  line in the following example.
•metric_selectors  is a regular expression that speciﬁes the metrics to be collected and sent to 
CloudWatch.
•dimensions  is the list of labels to be used as CloudWatch dimensions for each selected metric.
See the following metric_declaration  example.
"metric_declaration": [ 
  { 
     "source_labels":[ "Service", "Namespace"], 
     "label_matcher":"(.*node-exporter.*|.*kube-dns.*);kube-system$", 
     "dimensions":[ 
        ["Service", "Namespace"] 
     ], 
     "metric_selectors":[ 
        "^coredns_dns_request_type_count_total$" 
     ] 
  }
]
This example conﬁgures an embedded metric format section to be sent as a log event if the following 
conditions are met:
•The value of Service contains either node-exporter  or kube-dns .
•The value of Namespace  is kube-system .
•The Prometheus metric coredns_dns_request_type_count_total  contains both Service  and
Namespace  labels.
549Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
The log event that is sent includes the following highlighted section:
{ 
   "CloudWatchMetrics":[ 
      { 
         "Metrics":[ 
            { 
               "Name":"coredns_dns_request_type_count_total" 
            } 
         ], 
         "Dimensions":[ 
            [ 
               "Namespace", 
               "Service" 
            ] 
         ], 
         "Namespace":"ContainerInsights/Prometheus" 
      } 
   ],
   "Namespace":"kube-system", 
   "Service":"kube-dns", 
   "coredns_dns_request_type_count_total":2562, 
   "eks_amazonaws_com_component":"kube-dns", 
   "instance":"192.168.61.254:9153", 
   "job":"kubernetes-service-endpoints", 
   ...
}
Detailed guide for autodiscovery on Amazon ECS clusters
Prometheus provides dozens of dynamic service-discovery mechanisms as described in <scrape_conﬁg>. 
However there is no built-in service discovery for Amazon ECS. The CloudWatch agent adds this 
mechanism.
When the Amazon ECS Prometheus service discovery is enabled, the CloudWatch agent periodically 
makes the following API calls to Amazon ECS and Amazon EC2 frontends to retrieve the metadata of the 
running ECS tasks in the target ECS cluster.
EC2:DescribeInstances
ECS:ListTasks
ECS:ListServices
ECS:DescribeContainerInstances
ECS:DescribeServices
ECS:DescribeTasks
ECS:DescribeTaskDefinition
The metadata is used by the CloudWatch agent to scan the Prometheus targets within the ECS cluster. 
The CloudWatch agent supports three service discovery modes:
•Container docker label-based service discovery
•ECS task deﬁnition ARN regular expression-based service discovery
•ECS service name regular expression-based service discovery
All modes can be used together. CloudWatch agent de-duplicates the discovered targets based on:
{private_ip}:{port}/{metrics_path} .
All discovered targets are written into a result ﬁle speciﬁed by the sd_result_file  conﬁguration ﬁeld 
within the CloudWatch agent container. The following is a sample result ﬁle:
- targets: 
550Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
  - 10.6.1.95:32785 
  labels: 
    __metrics_path__: /metrics 
    ECS_PROMETHEUS_EXPORTER_PORT: "9406" 
    ECS_PROMETHEUS_JOB_NAME: demo-jar-ec2-bridge-dynamic 
    ECS_PROMETHEUS_METRICS_PATH: /metrics 
    InstanceType: t3.medium 
    LaunchType: EC2 
    SubnetId: subnet-123456789012 
    TaskDefinitionFamily: demo-jar-ec2-bridge-dynamic-port 
    TaskGroup: family:demo-jar-ec2-bridge-dynamic-port 
    TaskRevision: "7" 
    VpcId: vpc-01234567890 
    container_name: demo-jar-ec2-bridge-dynamic-port 
    job: demo-jar-ec2-bridge-dynamic
- targets: 
  - 10.6.3.193:9404 
  labels: 
    __metrics_path__: /metrics 
    ECS_PROMETHEUS_EXPORTER_PORT_SUBSET_B: "9404" 
    ECS_PROMETHEUS_JOB_NAME: demo-tomcat-ec2-bridge-mapped-port 
    ECS_PROMETHEUS_METRICS_PATH: /metrics 
    InstanceType: t3.medium 
    LaunchType: EC2 
    SubnetId: subnet-123456789012 
    TaskDefinitionFamily: demo-tomcat-ec2-bridge-mapped-port 
    TaskGroup: family:demo-jar-tomcat-bridge-mapped-port 
    TaskRevision: "12" 
    VpcId: vpc-01234567890 
    container_name: demo-tomcat-ec2-bridge-mapped-port 
    job: demo-tomcat-ec2-bridge-mapped-port
You can directly integrate this result ﬁle with Prometheus ﬁle-based service discovery. For more 
information about Prometheus ﬁle-based service discovery, see <ﬁle_sd_conﬁg>.
Suppose the result ﬁle is written to /tmp/cwagent_ecs_auto_sd.yaml  The following Prometheus 
scrape conﬁguration will consume it.
global: 
  scrape_interval: 1m 
  scrape_timeout: 10s
scrape_configs: 
  - job_name: cwagent-ecs-file-sd-config 
    sample_limit: 10000 
    file_sd_configs: 
      - files: [ "/tmp/cwagent_ecs_auto_sd.yaml" ]
The CloudWatch agent also adds the following additional labels for the discovered targets.
•container_name
•TaskDefinitionFamily
•TaskRevision
•TaskGroup
•StartedBy
•LaunchType
•job
•__metrics_path__
•Docker labels
551Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
When the cluster has the EC2 launch type, the following three labels are added.
•InstanceType
•VpcId
•SubnetId
Note
Docker labels that don't match the regular expression [a-zA-Z_][a-zA-Z0-9_]*  are ﬁltered 
out. This matches the Prometheus conventions as listed in label_name  in Conﬁguration ﬁle  in 
the Prometheus documentation.
ECS service discovery conﬁguration examples
This section includes examples that demonstrate ECS service discovery.
Example 1
"ecs_service_discovery": { 
  "sd_frequency": "1m", 
  "sd_result_file": "/tmp/cwagent_ecs_auto_sd.yaml", 
  "docker_label": { 
  }
}
This example enables docker label-based service discovery. The CloudWatch agent will query 
the ECS tasks’ metadata once per minute and write the discovered targets into the /tmp/
cwagent_ecs_auto_sd.yaml  ﬁle within the CloudWatch agent container.
The default value of sd_port_label  in the docker_label  section is
ECS_PROMETHEUS_EXPORTER_PORT . If any running container in the ECS tasks has a
ECS_PROMETHEUS_EXPORTER_PORT  docker label, the CloudWatch agent uses its value as container 
port to scan all exposed ports of the container. If there is a match, the mapped host port plus the 
private IP of the container are used to construct the Prometheus exporter target in the following format:
private_ip:host_port .
The default value of sd_metrics_path_label  in the docker_label  section is
ECS_PROMETHEUS_METRICS_PATH . If the container has this docker label, its value will be used as the
__metrics_path__  . If the container does not have this label, the default value /metrics  is used.
The default value of sd_job_name_label  in the docker_label  section is job. If the container has 
this docker label, its value will be appended as one of the labels for the target to replace the default job 
name speciﬁed in the Prometheus conﬁguration. The value of this docker label is used as the log stream 
name in the CloudWatch Logs log group.
Example 2
"ecs_service_discovery": { 
  "sd_frequency": "15s", 
  "sd_result_file": "/tmp/cwagent_ecs_auto_sd.yaml", 
  "docker_label": { 
    "sd_port_label": "ECS_PROMETHEUS_EXPORTER_PORT_SUBSET_A", 
    "sd_job_name_label": "ECS_PROMETHEUS_JOB_NAME"   
  }
}
This example enables docker label-based service discovery. THe CloudWatch agent will query 
the ECS tasks’ metadata every 15 seconds and write the discovered targets into the /tmp/
552Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
cwagent_ecs_auto_sd.yaml  ﬁle within the CloudWatch agent container. The containers with a docker 
label of ECS_PROMETHEUS_EXPORTER_PORT_SUBSET_A  will be scanned. The value of the docker label
ECS_PROMETHEUS_JOB_NAME  is used as the job name.
Example 3
"ecs_service_discovery": { 
  "sd_frequency": "5m", 
  "sd_result_file": "/tmp/cwagent_ecs_auto_sd.yaml", 
  "task_definition_list": [ 
    { 
      "sd_job_name": "java-prometheus", 
      "sd_metrics_path": "/metrics", 
      "sd_metrics_ports": "9404; 9406", 
      "sd_task_definition_arn_pattern": ".*:task-definition/.*javajmx.*:[0-9]+" 
    }, 
    { 
      "sd_job_name": "envoy-prometheus", 
      "sd_metrics_path": "/stats/prometheus", 
      "sd_container_name_pattern": "^envoy$",  
      "sd_metrics_ports": "9901", 
      "sd_task_definition_arn_pattern": ".*:task-definition/.*appmesh.*:23" 
    } 
  ]
}
This example enables ECS task deﬁnition ARN regular expression-based service discovery. The 
CloudWatch agent will query the ECS tasks’ metadata every ﬁve minutes and write the discovered 
targets into the /tmp/cwagent_ecs_auto_sd.yaml  ﬁle within the CloudWatch agent container.
Two task deﬁnition ARN regular expresion sections are deﬁned:
•For the ﬁrst section, the ECS tasks with javajmx in their ECS task deﬁnition ARN are ﬁltered 
for the container port scan. If the containers within these ECS tasks expose the container 
port on 9404 or 9406, the mapped host port along with the private IP of the container 
are used to create the Prometheus exporter targets. The value of sd_metrics_path  sets
__metrics_path__  to /metrics . So the CloudWatch agent will scrape the Prometheus metrics 
from private_ip:host_port/metrics , the scraped metrics are sent to the java-prometheus
log stream in CloudWatch Logs in the log group /aws/ecs/containerinsights/cluster_name/
prometheus .
•For the second section, the ECS tasks with appmesh in their ECS task deﬁnition ARN and with version
of :23 are ﬁltered for the container port scan. For containers with a name of envoy  that expose the 
container port on 9901, the mapped host port along with the private IP of the container are used 
to create the Prometheus exporter targets. The value within these ECS tasks expose the container 
port on 9404 or 9406, the mapped host port along with the private IP of the container are used to 
create the Prometheus exporter targets. The value of sd_metrics_path  sets __metrics_path__
to /stats/prometheus . So the CloudWatch agent will scrape the Prometheus metrics from
private_ip:host_port/stats/prometheus , and send the scraped metrics to the envoy-
prometheus  log stream in CloudWatch Logs in the log group /aws/ecs/containerinsights/
cluster_name/prometheus .
Example 4
"ecs_service_discovery": { 
  "sd_frequency": "5m", 
  "sd_result_file": "/tmp/cwagent_ecs_auto_sd.yaml", 
  "service_name_list_for_tasks": [ 
    { 
553Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
      "sd_job_name": "nginx-prometheus", 
      "sd_metrics_path": "/metrics", 
      "sd_metrics_ports": "9113", 
      "sd_service_name_pattern": "^nginx-.*" 
    }, 
    { 
      "sd_job_name": "haproxy-prometheus", 
      "sd_metrics_path": "/stats/metrics", 
      "sd_container_name_pattern": "^haproxy$", 
      "sd_metrics_ports": "8404", 
      "sd_service_name_pattern": ".*haproxy-service.*" 
    } 
  ]
}
This example enables ECS service name regular expression-based service discovery. The CloudWatch 
agent will query the ECS services’ metadata every ﬁve minutes and write the discovered targets into the
/tmp/cwagent_ecs_auto_sd.yaml  ﬁle within the CloudWatch agent container.
Two service name regular expresion sections are deﬁned:
•For the ﬁrst section, the ECS tasks that are associated with ECS services that have names matching the 
regular expression ^nginx-.*  are ﬁltered for the container port scan. If the containers within these 
ECS tasks expose the container port on 9113, the mapped host port along with the private IP of the 
container are used to create the Prometheus exporter targets. The value of sd_metrics_path  sets
__metrics_path__  to /metrics . So the CloudWatch agent will scrape the Prometheus metrics from
private_ip:host_port/metrics , and the scraped metrics are sent to the nginx-prometheus
log stream in CloudWatch Logs in the log group /aws/ecs/containerinsights/cluster_name/
prometheus .
•or the second section, the ECS tasks that are associated with ECS services that have names matching 
the regular expression .*haproxy-service.*  are ﬁltered for the container port scan. For containers 
with a name of haproxy expose the container port on 8404, the mapped host port along with 
the private IP of the container are used to create the Prometheus exporter targets. The value of
sd_metrics_path  sets __metrics_path__  to /stats/metrics . So the CloudWatch agent will 
scrape the Prometheus metrics from private_ip:host_port/stats/metrics , and the scraped 
metrics are sent to the haproxy-prometheus  log stream in CloudWatch Logs in the log group /aws/
ecs/containerinsights/cluster_name/prometheus .
Example 5
"ecs_service_discovery": { 
  "sd_frequency": "1m30s", 
  "sd_result_file": "/tmp/cwagent_ecs_auto_sd.yaml", 
  "docker_label": { 
    "sd_port_label": "MY_PROMETHEUS_EXPORTER_PORT_LABEL", 
    "sd_metrics_path_label": "MY_PROMETHEUS_METRICS_PATH_LABEL", 
    "sd_job_name_label": "MY_PROMETHEUS_METRICS_NAME_LABEL"   
  } 
  "task_definition_list": [ 
    { 
      "sd_metrics_ports": "9150", 
      "sd_task_definition_arn_pattern": "*memcached.*" 
    } 
  ]
}
This example enables both ECS service discovery modes. The CloudWatch agent will query 
the ECS tasks’ metadata every 90 seconds and write the discovered targets into the /tmp/
cwagent_ecs_auto_sd.yaml  ﬁle within the CloudWatch agent container.
554Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
For the docker-based service discovery conﬁguration:
•The ECS tasks with docker label MY_PROMETHEUS_EXPORTER_PORT_LABEL  will be ﬁltered for 
Prometheus port scan. The target Prometheus container port is speciﬁed by the value of the label
MY_PROMETHEUS_EXPORTER_PORT_LABEL .
•The value of the docker label MY_PROMETHEUS_EXPORTER_PORT_LABEL  is used for
__metrics_path__ . If the container does not have this docker label, the default value /metrics  is 
used.
•The value of the docker label MY_PROMETHEUS_EXPORTER_PORT_LABEL  is used as the job label. If 
the container does not have this docker label, the job name deﬁned in the Prometheus conﬁguration is 
used.
For the ECS task deﬁnition ARN regular expression-based service discovery conﬁguration:
•The ECS tasks with memcached  in the ECS task deﬁnition ARN are ﬁltered for container port scan. The 
target Prometheus container port is 9150 as deﬁned by sd_metrics_ports . The default metrics 
path /metrics  is used. The job name deﬁned in the Prometheus conﬁguration is used.
(Optional) Set up sample containerized Amazon ECS workloads for Prometheus 
metric testing
To test the Prometheus metric support in CloudWatch Container Insights, you can set up one or more of 
the following containerized workloads. The CloudWatch agent with Prometheus support automatically 
collects metrics from each of these workloads. To see the metrics that are collected by default, see
Prometheus metrics collected by the CloudWatch agent (p. 606).
Topics
•Sample App Mesh workload for Amazon ECS clusters (p. 555)
•Sample Java/JMX workload for Amazon ECS clusters (p. 557)
•Sample NGINX workload for Amazon ECS clusters (p. 558)
•Sample NGINX Plus workload for Amazon ECS clusters (p. 563)
•Tutorial for adding a new Prometheus scrape target: Memcached on Amazon ECS (p. 569)
•Tutorial for scraping Redis Prometheus metrics on Amazon ECS Fargate (p. 574)
Sample App Mesh workload for Amazon ECS clusters
To collect metrics from a sample Prometheus workload for Amazon ECS, you must be running Container 
Insights in the cluster. For information about installing Container Insights, see Setting up Container 
Insights on Amazon ECS (p. 466).
First, follow this  walkthrough to deploy the sample color app on your Amazon ECS cluster. After you 
ﬁnish, you will have App Mesh Prometheus metrics exposed on port 9901.
Next, follow these steps to install the CloudWatch agent with Prometheus monitoring on the same 
Amazon ECS cluster where you installed the color app. The steps in this section install the CloudWatch 
agent in bridge network mode.
The environment variables ENVIRONMENT_NAME , AWS_PROFILE , and AWS_DEFAULT_REGION  that you 
set in the walkthrough will also be used in the following steps.
To install the CloudWatch agent with Prometheus monitoring for testing
1. Download the AWS CloudFormation template by entering the following command.
555Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/ecs-task-definition-templates/deployment-mode/replica-service/cwagent-
prometheus/cloudformation-quickstart/cwagent-ecs-prometheus-metric-for-bridge-host.yaml
2. Set the network mode by entering the following commands.
export ECS_CLUSTER_NAME=${ENVIRONMENT_NAME}
export ECS_NETWORK_MODE=bridge
3. Create the AWS CloudFormation stack by entering the following commands.
aws cloudformation create-stack --stack-name CWAgent-Prometheus-ECS-
${ECS_CLUSTER_NAME}-EC2-${ECS_NETWORK_MODE} \ 
    --template-body file://cwagent-ecs-prometheus-metric-for-bridge-host.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=${ECS_CLUSTER_NAME} \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=True \ 
                 ParameterKey=ECSNetworkMode,ParameterValue=${ECS_NETWORK_MODE} \ 
                 ParameterKey=TaskRoleName,ParameterValue=CWAgent-Prometheus-TaskRole-
${ECS_CLUSTER_NAME} \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=CWAgent-Prometheus-
ExecutionRole-${ECS_CLUSTER_NAME} \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region ${AWS_DEFAULT_REGION} \ 
    --profile ${AWS_PROFILE}
4. (Optional) When the AWS CloudFormation stack is created, you see a CREATE_COMPLETE  message. 
If you to check the status before you see that message, enter the following command.
aws cloudformation describe-stacks \
--stack-name CWAgent-Prometheus-ECS-${ECS_CLUSTER_NAME}-EC2-${ECS_NETWORK_MODE} \
--query 'Stacks[0].StackStatus' \
--region ${AWS_DEFAULT_REGION} \
--profile ${AWS_PROFILE}
Troubleshooting
The steps in the walkthrough use jq to parse the output result of the AWS CLI. For more information 
about installing jq, see  jq. Use the following command to set the default output format of your AWS CLI 
to JSON so jq can parse it correctly.
$ aws configure
When the response gets to Default output format , enter json .
Uninstall the CloudWatch agent with Prometheus monitoring
When you are ﬁnished testing, enter the following command to uninstall the CloudWatch agent by 
deleting the AWS CloudFormation stack.
aws cloudformation delete-stack \
--stack-name CWAgent-Prometheus-ECS-${ECS_CLUSTER_NAME}-EC2-${ECS_NETWORK_MODE} \
--region ${AWS_DEFAULT_REGION} \
--profile ${AWS_PROFILE}
556Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Sample Java/JMX workload for Amazon ECS clusters
JMX Exporter is an oﬃcial Prometheus exporter that can scrape and expose JMX mBeans as Prometheus 
metrics. For more information, see prometheus/jmx_exporter.
The CloudWatch agent with Prometheus support scrapes the Java/JMX Prometheus metrics based on the 
service discovery conﬁguration in the Amazon ECS cluster. You can conﬁgure the JMX Exporter to expose 
the metrics on a diﬀerent port or metrics_path. If you do change the port or path, update the default
ecs_service_discovery  section in the CloudWatch agent conﬁguration.
To collect metrics from a sample Prometheus workload for Amazon ECS, you must be running Container 
Insights in the cluster. For information about installing Container Insights, see Setting up Container 
Insights on Amazon ECS (p. 466).
To install the Java/JMX sample workload for Amazon ECS clusters
1. Follow the steps in these sections to create your Docker images.
•Example: Java Jar Application Docker image with Prometheus metrics (p. 600)
•Example: Apache Tomcat Docker image with Prometheus metrics (p. 598)
2. Specify the following two docker labels in the Amazon ECS task deﬁnition ﬁle. You can then run the 
task deﬁnition as an Amazon ECS service or Amazon ECS task in the cluster.
•Set ECS_PROMETHEUS_EXPORTER_PORT  to point to the containerPort where the Prometheus 
metrics are exposed.
•Set Java_EMF_Metrics  to true. The CloudWatch agent uses this ﬂag to generated the 
embedded metric format in the log event.
The following is an example:
{ 
  "family": "workload-java-ec2-bridge", 
  "taskRoleArn": "{{task-role-arn}}", 
  "executionRoleArn": "{{execution-role-arn}}", 
  "networkMode": "bridge", 
  "containerDefinitions": [ 
    { 
      "name": "tomcat-prometheus-workload-java-ec2-bridge-dynamic-port", 
      "image": "your_docker_image_tag_for_tomcat_with_prometheus_metrics", 
      "portMappings": [ 
        { 
          "hostPort": 0, 
          "protocol": "tcp", 
           "containerPort": 9404
        } 
      ], 
      "dockerLabels": { 
         "ECS_PROMETHEUS_EXPORTER_PORT": "9404", 
        "Java_EMF_Metrics": "true"
      } 
    } 
  ], 
  "requiresCompatibilities": [ 
    "EC2"  ], 
  "cpu": "256", 
  "memory": "512" 
  }
557Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
The default setting of the CloudWatch agent in the AWS CloudFormation template enables both 
docker label-based service discovery and task deﬁnition ARN-based service discovery. To view these 
default settings, see line 65 of the  CloudWatch agent YAML conﬁguration ﬁle. The containers with the
ECS_PROMETHEUS_EXPORTER_PORT  label will be auto-discovered based on the speciﬁed container port 
for Prometheus scraping.
The default setting of the CloudWatch agent also has the metric_declaration  setting for Java/JMX 
at line 112 of the same ﬁle. All docker labels of the target containers will be added as additional labels 
in the Prometheus metrics and sent to CloudWatch Logs. For the Java/JMX containers with docker label
Java_EMF_Metrics=“true” , the embedded metric format will be generated.
Sample NGINX workload for Amazon ECS clusters
The NGINX Prometheus exporter can scrape and expose NGINX data as Prometheus metrics. This 
example uses the exporter in tandem with the NGINX reverse proxy service for Amazon ECS.
For more information about the NGINX Prometheus exporter, see  nginx-prometheus-exporter on 
Github. For more information about the NGINX reverse proxy, see  ecs-nginx-reverse-proxy on Github.
The CloudWatch agent with Prometheus support scrapes the NGINX Prometheus metrics based on the 
service discovery conﬁguration in the Amazon ECS cluster. You can conﬁgure the NGINX Prometheus 
Exporter to expose the metrics on a diﬀerent port or path. If you change the port or path, update the
ecs_service_discovery  section in the CloudWatch agent conﬁguration ﬁle.
Install the NGINX reverse proxy sample workload for Amazon ECS clusters
Follow these steps to install the NGINX reverse proxy sample workload.
Create the Docker images
To create the Docker images for the NGINX reverse proxy sample workload
1. Download the following folder from the NGINX reverse proxy repo:  https://github.com/awslabs/
ecs-nginx-reverse-proxy/tree/master/reverse-proxy/.
2. Find the app directory and build an image from that directory:
docker build -t web-server-app ./ path-to-app-directory
3. Build a custom image for NGINX. First, create a directory with the following two ﬁles:
•A sample Dockerﬁle:
FROM nginx
COPY nginx.conf /etc/nginx/nginx.conf
•An nginx.conf  ﬁle, modiﬁed from  https://github.com/awslabs/ecs-nginx-reverse-proxy/tree/
master/reverse-proxy/:
events { 
  worker_connections 768;
}
http { 
  # Nginx will handle gzip compression of responses from the app server 
  gzip on; 
  gzip_proxied any; 
  gzip_types text/plain application/json; 
  gzip_min_length 1000; 
558Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
  server{ 
    listen 8080; 
    location /stub_status { 
        stub_status   on; 
    } 
  } 
  server { 
    listen 80; 
    # Nginx will reject anything not matching /api 
    location /api { 
      # Reject requests with unsupported HTTP method 
      if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) { 
        return 405; 
      } 
      # Only requests matching the whitelist expectations will 
      # get sent to the application server 
      proxy_pass http://app:3000; 
      proxy_http_version 1.1; 
      proxy_set_header Upgrade $http_upgrade; 
      proxy_set_header Connection 'upgrade'; 
      proxy_set_header Host $host; 
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
      proxy_cache_bypass $http_upgrade; 
    } 
  }
}
Note
stub_status  must be enabled on the same port that nginx-prometheus-
exporter  is conﬁgured to scrape metrics from. In our example task deﬁnition, nginx-
prometheus-exporter  is conﬁgured to scrape metrics from port 8080.
4. Build an image from ﬁles in your new directory:
docker build -t nginx-reverse-proxy ./ path-to-your-directory
5. Upload your new images to an image repository for later use.
Create the task deﬁnition to run NGINX and the web server app in Amazon ECS
Next, you set up the task deﬁnition.
This task deﬁnition enables the collection and export of NGINX Prometheus metrics. The NGINX 
container tracks input from the app, and exposes that data to port 8080, as set in nginx.conf . The 
NGINX prometheus exporter container scrapes these metrics, and posts them to port 9113, for use in 
CloudWatch.
To set up the task deﬁnition for the NGINX sample Amazon ECS workload
1. Create a task deﬁnition JSON ﬁle with the following content. Replace your-customized-nginx-
iamge with the image URI for your customized NGINX image, and replace your-web-server-app-
image with the image URI for your web server app image.
{ 
  "containerDefinitions": [ 
    { 
      "name": "nginx", 
559Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
      "image": " your-customized-nginx-image ", 
      "memory": 256, 
      "cpu": 256, 
      "essential": true, 
      "portMappings": [ 
        { 
          "containerPort": 80, 
          "protocol": "tcp" 
        } 
      ], 
      "links": [ 
        "app" 
      ] 
    }, 
    { 
      "name": "app", 
      "image": " your-web-server-app-image ", 
      "memory": 256, 
      "cpu": 256, 
      "essential": true 
    }, 
    { 
      "name": "nginx-prometheus-exporter", 
      "image": "docker.io/nginx/nginx-prometheus-exporter:0.8.0", 
      "memory": 256, 
      "cpu": 256, 
      "essential": true, 
      "command": [ 
        "-nginx.scrape-uri", 
        "http://nginx:8080/stub_status" 
    ], 
    "links":[ 
      "nginx" 
    ], 
      "portMappings":[ 
        { 
          "containerPort": 9113, 
          "protocol": "tcp" 
        } 
      ] 
    } 
  ], 
  "networkMode": "bridge", 
  "placementConstraints": [], 
  "family": "nginx-sample-stack"
}
2. Register the task deﬁnition by entering the following command.
aws ecs register-task-definition --cli-input-json file:// path-to-your-task-definition-
json
3. Create a service to run the task by entering the following command:
Be sure not to change the service name. We will be running a CloudWatch agent service using a 
conﬁguration that searches for tasks using the name patterns of the services that started them. For 
example, for the CloudWatch agent to ﬁnd the task launched by this command, you can specify the 
value of sd_service_name_pattern  to be ^nginx-service$ . The next section provides more 
details.
aws ecs create-service \ 
 --cluster your-cluster-name  \ 
 --service-name nginx-service \ 
 --task-definition nginx-sample-stack:1 \ 
560Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
 --desired-count 1
Conﬁgure the CloudWatch agent to scrape NGINX Prometheus metrics
The ﬁnal step is to conﬁgure the CloudWatch agent to scrape the NGINX metrics. In this example, 
the CloudWatch agent discovers the task via the service name pattern, and the port 9113, where the 
exporter exposes the prometheus metrics for NGINX. With the task discovered and the metrics available, 
the CloudWatch agent begins posting the collected metrics to the log stream nginx-prometheus-
exporter.
To conﬁgure the CloudWatch agent to scrape the NGINX metrics
1. Download the latest version of the necessary YAML ﬁle by entering the following command.
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/ecs-task-definition-templates/deployment-mode/replica-service/cwagent-
prometheus/cloudformation-quickstart/cwagent-ecs-prometheus-metric-for-bridge-host.yaml
2. Open the ﬁle with a text editor, and ﬁnd the full CloudWatch agent confguration in the value key 
in the resource:CWAgentConfigSSMParameter  section. Then, in the ecs_service_discovery
section, add the following service_name_list_for_tasks  section.
"service_name_list_for_tasks": [ 
  { 
    "sd_job_name": "nginx-prometheus-exporter", 
    "sd_metrics_path": "/metrics", 
    "sd_metrics_ports": "9113", 
    "sd_service_name_pattern": "^nginx-service$" 
   }
],
3. In the same ﬁle, add the following section in the metric_declaration  section to allow NGINX 
metrics. Be sure to follow the existing indentation pattern.
{ 
  "source_labels": ["job"], 
  "label_matcher": ".*nginx.*", 
  "dimensions": [["ClusterName", "TaskDefinitionFamily", "ServiceName"]], 
  "metric_selectors": [ 
    "^nginx_.*$" 
  ]
},
4. If you don't already have the CloudWatch agent deployed in this cluster, skip to step 8.
If you already have the CloudWatch agent deployed in the Amazon ECS cluster by using AWS 
CloudFormation, you can create a change set by entering the following commands:
ECS_CLUSTER_NAME= your_cluster_name
AWS_REGION= your_aws_region
ECS_NETWORK_MODE=bridge
CREATE_IAM_ROLES=True
ECS_TASK_ROLE_NAME= your_selected_ecs_task_role_name
ECS_EXECUTION_ROLE_NAME= your_selected_ecs_execution_role_name
aws cloudformation create-change-set --stack-name CWAgent-Prometheus-ECS-
${ECS_CLUSTER_NAME}-EC2-${ECS_NETWORK_MODE} \ 
    --template-body file://cwagent-ecs-prometheus-metric-for-bridge-host.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=$ECS_CLUSTER_NAME \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=$CREATE_IAM_ROLES \ 
561Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
                 ParameterKey=ECSNetworkMode,ParameterValue=$ECS_NETWORK_MODE \ 
                 ParameterKey=TaskRoleName,ParameterValue=$ECS_TASK_ROLE_NAME \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=$ECS_EXECUTION_ROLE_NAME 
 \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region $AWS_REGION \ 
    --change-set-name nginx-scraping-support
5. Open the AWS CloudFormation console at https://console.aws.amazon.com/cloudformation.
6. Revew the newly-created changeset nginx-scraping-support. You should see one change applied to 
the CWAgentConﬁgSSMParameter resource. Run the changeset and restart the CloudWatch agent 
task by entering the following command:
aws ecs update-service --cluster $ECS_CLUSTER_NAME \
--desired-count 0 \
--service cwagent-prometheus-replica-service-EC2-$ECS_NETWORK_MODE \
--region $AWS_REGION
7. Wait about 10 seconds, and then enter the following command.
aws ecs update-service --cluster $ECS_CLUSTER_NAME \
--desired-count 1 \
--service cwagent-prometheus-replica-service-EC2-$ECS_NETWORK_MODE \
--region $AWS_REGION
8. If you are installing the CloudWatch agent with Prometheus metric collecting on the cluster for the 
ﬁrst time, enter the following commands.
ECS_CLUSTER_NAME= your_cluster_name
AWS_REGION= your_aws_region
ECS_NETWORK_MODE=bridge
CREATE_IAM_ROLES=True
ECS_TASK_ROLE_NAME= your_selected_ecs_task_role_name
ECS_EXECUTION_ROLE_NAME= your_selected_ecs_execution_role_name
aws cloudformation create-stack --stack-name CWAgent-Prometheus-ECS-
${ECS_CLUSTER_NAME}-EC2-${ECS_NETWORK_MODE} \ 
    --template-body file://cwagent-ecs-prometheus-metric-for-bridge-host.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=$ECS_CLUSTER_NAME \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=$CREATE_IAM_ROLES \ 
                 ParameterKey=ECSNetworkMode,ParameterValue=$ECS_NETWORK_MODE \ 
                 ParameterKey=TaskRoleName,ParameterValue=$ECS_TASK_ROLE_NAME \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=$ECS_EXECUTION_ROLE_NAME 
 \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region $AWS_REGION
Viewing your NGINX metrics and logs
You can now view the NGINX metrics being collected.
To view the metrics for your sample NGINX workload
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the Region where your cluster is running, choose Metrics  in the left navigation pane. Find the
ContainerInsights/Prometheus  namespace to see the metrics.
3. To see the CloudWatch Logs events, choose Log groups  in the navigation pane. The events are in the 
log group /aws/containerinsights/your_cluster_name /prometheus , in the log stream nginx-
prometheus-exporter .
562Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Sample NGINX Plus workload for Amazon ECS clusters
NGINX Plus is the commerical version of NGINX. You must have a licence to use it. For more information, 
see  NGINX Plus
The NGINX Prometheus exporter can scrape and expose NGINX data as Prometheus metrics. This 
example uses the exporter in tandem with the NGINX Plus reverse proxy service for Amazon ECS.
For more information about the NGINX Prometheus exporter, see  nginx-prometheus-exporter on 
Github. For more information about the NGINX reverse proxy, see  ecs-nginx-reverse-proxy on Github.
The CloudWatch agent with Prometheus support scrapes the NGINX Plus Prometheus metrics based on 
the service discovery conﬁguration in the Amazon ECS cluster. You can conﬁgure the NGINX Prometheus 
Exporter to expose the metrics on a diﬀerent port or path. If you change the port or path, update the
ecs_service_discovery  section in the CloudWatch agent conﬁguration ﬁle.
Install the NGINX Plus reverse proxy sample workload for Amazon ECS clusters
Follow these steps to install the NGINX reverse proxy sample workload.
Create the Docker images
To create the Docker images for the NGINX Plus reverse proxy sample workload
1. Download the following folder from the NGINX reverse proxy repo:  https://github.com/awslabs/
ecs-nginx-reverse-proxy/tree/master/reverse-proxy/.
2. Find the app directory and build an image from that directory:
docker build -t web-server-app ./ path-to-app-directory
3. Build a custom image for NGINX Plus. Before you can build the image for NGINX Plus, you need to 
obtain the key named nginx-repo.key  and the SSL certiﬁcate nginx-repo.crt  for your licensed 
NGINX Plus. Create a directory and store in it your nginx-repo.key  and nginx-repo.crt  ﬁles.
In the directory that you just created, create the following two ﬁles:
•A sample Dockerﬁle with the following content. This docker ﬁle is adopted from a sample ﬁle 
provided at https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-docker/ 
#docker_plus_image. The important change that we make is that we load a separate ﬁle, called
nginx.conf , which will be created in the next step.
FROM debian:buster-slim
LABEL maintainer="NGINX Docker Maintainers <docker-maint@nginx.com>“
# Define NGINX versions for NGINX Plus and NGINX Plus modules
# Uncomment this block and the versioned nginxPackages block in the main RUN
# instruction to install a specific release
# ENV NGINX_VERSION 21
# ENV NJS_VERSION 0.3.9
# ENV PKG_RELEASE 1~buster
# Download certificate and key from the customer portal (https://cs.nginx.com 
 (https://cs.nginx.com/))
# and copy to the build context
COPY nginx-repo.crt /etc/ssl/nginx/
COPY nginx-repo.key /etc/ssl/nginx/
# COPY nginx.conf /etc/ssl/nginx/nginx.conf
RUN set -x \
# Create nginx user/group first, to be consistent throughout Docker variants
563Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
&& addgroup --system --gid 101 nginx \
&& adduser --system --disabled-login --ingroup nginx --no-create-home --home /
nonexistent --gecos "nginx user" --shell /bin/false --uid 101 nginx \
&& apt-get update \
&& apt-get install --no-install-recommends --no-install-suggests -y ca-certificates 
 gnupg1 \
&& \
NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \
found=''; \
for server in \
ha.pool.sks-keyservers.net (http://ha.pool.sks-keyservers.net/) \
hkp://keyserver.ubuntu.com:80 \
hkp://p80.pool.sks-keyservers.net:80 \
pgp.mit.edu (http://pgp.mit.edu/) \
; do \
echo "Fetching GPG key $NGINX_GPGKEY from $server"; \
apt-key adv --keyserver "$server" --keyserver-options timeout=10 --recv-keys 
 "$NGINX_GPGKEY" && found=yes && break; \
done; \
test -z "$found" && echo >&2 "error: failed to fetch GPG key $NGINX_GPGKEY" && exit 
 1; \
apt-get remove --purge --auto-remove -y gnupg1 && rm -rf /var/lib/apt/lists/* \
# Install the latest release of NGINX Plus and/or NGINX Plus modules
# Uncomment individual modules if necessary
# Use versioned packages over defaults to specify a release
&& nginxPackages=" \
nginx-plus \
# nginx-plus=${NGINX_VERSION}-${PKG_RELEASE} \
# nginx-plus-module-xslt \
# nginx-plus-module-xslt=${NGINX_VERSION}-${PKG_RELEASE} \
# nginx-plus-module-geoip \
# nginx-plus-module-geoip=${NGINX_VERSION}-${PKG_RELEASE} \
# nginx-plus-module-image-filter \
# nginx-plus-module-image-filter=${NGINX_VERSION}-${PKG_RELEASE} \
# nginx-plus-module-perl \
# nginx-plus-module-perl=${NGINX_VERSION}-${PKG_RELEASE} \
# nginx-plus-module-njs \
# nginx-plus-module-njs=${NGINX_VERSION}+${NJS_VERSION}-${PKG_RELEASE} \
" \
&& echo "Acquire::https::plus-pkgs.nginx.com::Verify-Peer \"true\";" >> /etc/apt/
apt.conf.d/90nginx \
&& echo "Acquire::https::plus-pkgs.nginx.com::Verify-Host \"true\";" >> /etc/apt/
apt.conf.d/90nginx \
&& echo "Acquire::https::plus-pkgs.nginx.com::SslCert \"/etc/ssl/nginx/nginx-repo.crt
\";" >> /etc/apt/apt.conf.d/90nginx \
&& echo "Acquire::https::plus-pkgs.nginx.com::SslKey \"/etc/ssl/nginx/nginx-repo.key
\";" >> /etc/apt/apt.conf.d/90nginx \
&& printf "deb https://plus-pkgs.nginx.com/debian buster nginx-plus\n" > /etc/apt/
sources.list.d/nginx-plus.list \
&& apt-get update \
&& apt-get install --no-install-recommends --no-install-suggests -y \
$nginxPackages \
gettext-base \
curl \
&& apt-get remove --purge --auto-remove -y && rm -rf /var/lib/apt/lists/* /etc/apt/
sources.list.d/nginx-plus.list \
&& rm -rf /etc/apt/apt.conf.d/90nginx /etc/ssl/nginx
# Forward request logs to Docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log \
&& ln -sf /dev/stderr /var/log/nginx/error.log
COPY nginx.conf /etc/nginx/nginx.conf
EXPOSE 80
564Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
STOPSIGNAL SIGTERM
CMD ["nginx", "-g", "daemon off;"]
•An nginx.conf  ﬁle, modiﬁed from  https://github.com/awslabs/ecs-nginx-reverse-proxy/tree/
master/reverse-proxy/nginx.
events { 
  worker_connections 768;
}
http { 
  # Nginx will handle gzip compression of responses from the app server 
  gzip on; 
  gzip_proxied any; 
  gzip_types text/plain application/json; 
  gzip_min_length 1000; 
  upstream backend { 
    zone name 10m; 
    server app:3000    weight=2; 
    server app2:3000    weight=1; 
  } 
  server{ 
    listen 8080; 
    location /api { 
      api write=on; 
    } 
  } 
  match server_ok { 
    status 100-599; 
  } 
  server { 
    listen 80; 
    status_zone zone; 
    # Nginx will reject anything not matching /api 
    location /api { 
      # Reject requests with unsupported HTTP method 
      if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) { 
        return 405; 
      } 
      # Only requests matching the whitelist expectations will 
      # get sent to the application server 
      proxy_pass http://backend; 
      health_check uri=/lorem-ipsum match=server_ok; 
      proxy_http_version 1.1; 
      proxy_set_header Upgrade $http_upgrade; 
      proxy_set_header Connection 'upgrade'; 
      proxy_set_header Host $host; 
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
      proxy_cache_bypass $http_upgrade; 
    } 
  }
}
4. Build an image from ﬁles in your new directory:
docker build -t nginx-plus-reverse-proxy ./ path-to-your-directory
5. Upload your new images to an image repository for later use.
565Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Create the task deﬁnition to run NGINX Plus and the web server app in Amazon ECS
Next, you set up the task deﬁnition.
This task deﬁnition enables the collection and export of NGINX Plus Prometheus metrics. The NGINX 
container tracks input from the app, and exposes that data to port 8080, as set in nginx.conf . The 
NGINX prometheus exporter container scrapes these metrics, and posts them to port 9113, for use in 
CloudWatch.
To set up the task deﬁnition for the NGINX sample Amazon ECS workload
1. Create a task deﬁnition JSON ﬁle with the following content. Replace your-customized-nginx-
plus-image  with the image URI for your customized NGINX Plus image, and replace your-web-
server-app-image  with the image URI for your web server app image.
{ 
  "containerDefinitions": [ 
    { 
      "name": "nginx", 
      "image": " your-customized-nginx-plus-image ", 
      "memory": 256, 
      "cpu": 256, 
      "essential": true, 
      "portMappings": [ 
        { 
          "containerPort": 80, 
          "protocol": "tcp" 
        } 
      ], 
      "links": [ 
        "app", 
        "app2" 
      ] 
    }, 
    { 
      "name": "app", 
      "image": " your-web-server-app-image ", 
      "memory": 256, 
      "cpu": 128, 
      "essential": true 
    }, 
    { 
      "name": "app2", 
      "image": " your-web-server-app-image ", 
      "memory": 256, 
      "cpu": 128, 
      "essential": true 
    }, 
    { 
      "name": "nginx-prometheus-exporter", 
      "image": "docker.io/nginx/nginx-prometheus-exporter:0.8.0", 
      "memory": 256, 
      "cpu": 256, 
      "essential": true, 
      "command": [ 
        "-nginx.plus", 
        "-nginx.scrape-uri", 
         "http://nginx:8080/api" 
    ], 
    "links":[ 
      "nginx" 
    ], 
      "portMappings":[ 
        { 
566Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
          "containerPort": 9113, 
          "protocol": "tcp" 
        } 
      ] 
    } 
  ], 
  "networkMode": "bridge", 
  "placementConstraints": [], 
  "family": "nginx-plus-sample-stack"
}
2. Register the task deﬁnition:
aws ecs register-task-definition --cli-input-json file:// path-to-your-task-definition-
json
3. Create a service to run the task by entering the following command:
aws ecs create-service \ 
 --cluster your-cluster-name  \ 
 --service-name nginx-plus-service \ 
 --task-definition nginx-plus-sample-stack:1 \ 
 --desired-count 1
Be sure not to change the service name. We will be running a CloudWatch agent service using a 
conﬁguration that searches for tasks using the name patterns of the services that started them. For 
example, for the CloudWatch agent to ﬁnd the task launched by this command, you can specify the 
value of sd_service_name_pattern  to be ^nginx-plus-service$ . The next section provides 
more details.
Conﬁgure the CloudWatch agent to scrape NGINX Plus Prometheus metrics
The ﬁnal step is to conﬁgure the CloudWatch agent to scrape the NGINX metrics. In this example, 
the CloudWatch agent discovers the task via the service name pattern, and the port 9113, where the 
exporter exposes the prometheus metrics for NGINX. With the task discovered and the metrics available, 
the CloudWatch agent begins posting the collected metrics to the log stream nginx-prometheus-
exporter.
To conﬁgure the CloudWatch agent to scrape the NGINX metrics
1. Download the latest version of the necessary YAML ﬁle by entering the following command.
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/ecs-task-definition-templates/deployment-mode/replica-service/cwagent-
prometheus/cloudformation-quickstart/cwagent-ecs-prometheus-metric-for-bridge-host.yaml
2. Open the ﬁle with a text editor, and ﬁnd the full CloudWatch agent confguration in the value key 
in the resource:CWAgentConfigSSMParameter  section. Then, in the ecs_service_discovery
section, add the following service_name_list_for_tasks  section.
"service_name_list_for_tasks": [ 
  { 
    "sd_job_name": "nginx-plus-prometheus-exporter", 
    "sd_metrics_path": "/metrics", 
    "sd_metrics_ports": "9113", 
    "sd_service_name_pattern": "^nginx-plus.*" 
   }
],
567Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
3. In the same ﬁle, add the following section in the metric_declaration  section to allow NGINX 
Plus metrics. Be sure to follow the existing indentation pattern.
{ 
  "source_labels": ["job"], 
  "label_matcher": "^nginx-plus.*", 
  "dimensions": [["ClusterName", "TaskDefinitionFamily", "ServiceName"]], 
  "metric_selectors": [ 
    "^nginxplus_connections_accepted$", 
    "^nginxplus_connections_active$", 
    "^nginxplus_connections_dropped$", 
    "^nginxplus_connections_idle$", 
    "^nginxplus_http_requests_total$", 
    "^nginxplus_ssl_handshakes$", 
    "^nginxplus_ssl_handshakes_failed$", 
    "^nginxplus_up$", 
    "^nginxplus_upstream_server_health_checks_fails$" 
  ]
},
{ 
  "source_labels": ["job"], 
  "label_matcher": "^nginx-plus.*", 
  "dimensions": [["ClusterName", "TaskDefinitionFamily", "ServiceName", "upstream"]], 
  "metric_selectors": [ 
    "^nginxplus_upstream_server_response_time$" 
  ]
},
{ 
  "source_labels": ["job"], 
  "label_matcher": "^nginx-plus.*", 
  "dimensions": [["ClusterName", "TaskDefinitionFamily", "ServiceName", "code"]], 
  "metric_selectors": [ 
    "^nginxplus_upstream_server_responses$", 
    "^nginxplus_server_zone_responses$" 
  ]
},
4. If you don't already have the CloudWatch agent deployed in this cluster, skip to step 8.
If you already have the CloudWatch agent deployed in the Amazon ECS cluster by using AWS 
CloudFormation, you can create a change set by entering the following commands:
ECS_CLUSTER_NAME= your_cluster_name
AWS_REGION= your_aws_region
ECS_NETWORK_MODE=bridge
CREATE_IAM_ROLES=True
ECS_TASK_ROLE_NAME= your_selected_ecs_task_role_name
ECS_EXECUTION_ROLE_NAME= your_selected_ecs_execution_role_name
aws cloudformation create-change-set --stack-name CWAgent-Prometheus-ECS-
${ECS_CLUSTER_NAME}-EC2-${ECS_NETWORK_MODE} \ 
    --template-body file://cwagent-ecs-prometheus-metric-for-bridge-host.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=$ECS_CLUSTER_NAME \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=$CREATE_IAM_ROLES \ 
                 ParameterKey=ECSNetworkMode,ParameterValue=$ECS_NETWORK_MODE \ 
                 ParameterKey=TaskRoleName,ParameterValue=$ECS_TASK_ROLE_NAME \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=$ECS_EXECUTION_ROLE_NAME 
 \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region $AWS_REGION \ 
    --change-set-name nginx-plus-scraping-support
5. Open the AWS CloudFormation console at https://console.aws.amazon.com/cloudformation.
568Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
6. Revew the newly-created changeset nginx-plus-scraping-support. You should see one change 
applied to the CWAgentConﬁgSSMParameter resource. Run the changeset and restrt the 
CloudWatch agent task by entering the following command:
aws ecs update-service --cluster $ECS_CLUSTER_NAME \
--desired-count 0 \
--service cwagent-prometheus-replica-service-EC2-$ECS_NETWORK_MODE \
--region $AWS_REGION
7. Wait about 10 seconds, and then enter the following command.
aws ecs update-service --cluster $ECS_CLUSTER_NAME \
--desired-count 1 \
--service cwagent-prometheus-replica-service-EC2-$ECS_NETWORK_MODE \
--region $AWS_REGION
8. If you are installing the CloudWatch agent with Prometheus metric collecting on the cluster for the 
ﬁrst time, enter the following commands.
ECS_CLUSTER_NAME= your_cluster_name
AWS_REGION= your_aws_region
ECS_NETWORK_MODE=bridge
CREATE_IAM_ROLES=True
ECS_TASK_ROLE_NAME= your_selected_ecs_task_role_name
ECS_EXECUTION_ROLE_NAME= your_selected_ecs_execution_role_name
aws cloudformation create-stack --stack-name CWAgent-Prometheus-ECS-
${ECS_CLUSTER_NAME}-EC2-${ECS_NETWORK_MODE} \ 
    --template-body file://cwagent-ecs-prometheus-metric-for-bridge-host.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=$ECS_CLUSTER_NAME \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=$CREATE_IAM_ROLES \ 
                 ParameterKey=ECSNetworkMode,ParameterValue=$ECS_NETWORK_MODE \ 
                 ParameterKey=TaskRoleName,ParameterValue=$ECS_TASK_ROLE_NAME \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=$ECS_EXECUTION_ROLE_NAME 
 \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region $AWS_REGION
Viewing your NGINX Plus metrics and logs
You can now view the NGINX Plus metrics being collected.
To view the metrics for your sample NGINX workload
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the Region where your cluster is running, choose Metrics  in the left navigation pane. Find the
ContainerInsights/Prometheus  namespace to see the metrics.
3. To see the CloudWatch Logs events, choose Log groups  in the navigation pane. The events are in the 
log group /aws/containerinsights/your_cluster_name /prometheus , in the log stream nginx-
plus-prometheus-exporter .
Tutorial for adding a new Prometheus scrape target: Memcached on Amazon ECS
This tutorial provides a hands-on introduction to scrape the Prometheus metrics of a sample Memcached 
application on an Amazon Amazon ECS cluster with the EC2 launch type. The Memcached Prometheus 
exporter target will be auto-discovered by the CloudWatch agent by ECS task deﬁnition-based service 
discovery.
569Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Memcached is a general-purpose distributed memory caching system. It is often used to speed up 
dynamic database-driven websites by caching data and objects in RAM to reduce the number of times 
an external data source (such as a database or API) must be read. For more infromation, see  What is 
Memcached?
The  memchached_exporter (Apache License 2.0) is one of the Prometheus oﬃcial exporters. By default 
the memcache_exporter serves on port 0.0.0.0:9150 at /metrics.
The Docker images in the following two Docker Hub repositories are used in this tutorial:
•Memcached
•prom/memcached-exporter
Prerequisite
To collect metrics from a sample Prometheus workload for Amazon ECS, you must be running Container 
Insights in the cluster. For information about installing Container Insights, see Setting up Container 
Insights on Amazon ECS (p. 466).
Topics
•Set the Amazon ECS EC2 cluster environment variables (p. 570)
•Install the sample Memcached workload (p. 571)
•Conﬁgure the CloudWatch agent to scrape Memcached Prometheus metrics (p. 572)
•Viewing your Memcached metrics (p. 573)
Set the Amazon ECS EC2 cluster environment variables
To set the Amazon ECS EC2 cluster environment variables
1. Install the Amazon ECS CLI if you haven't already done so. For more information, see  Installing the 
Amazon ECS CLI.
2. Set the new Amazon ECS cluster name and Region. For example:
ECS_CLUSTER_NAME=ecs-ec2-memcached-tutorial
AWS_DEFAULT_REGION=ca-central-1
3. (Optional) If you don't already have an Amazon ECS cluster with the EC2 launch type where you 
want to install the sample Memcached workload and CloudWatch agent, you can create one by 
entering the following command.
ecs-cli up --capability-iam --size 1 \
--instance-type t3.medium \
--cluster $ECS_CLUSTER_NAME \
--region $AWS_REGION
The expected result of this command is as follows:
WARN[0000] You will not be able to SSH into your EC2 instances without a key pair.  
INFO[0000] Using recommended Amazon Linux 2 AMI with ECS Agent 1.44.4 and Docker 
 version 19.03.6-ce  
INFO[0001] Created cluster                               cluster=ecs-ec2-memcached-
tutorial region=ca-central-1
INFO[0002] Waiting for your cluster resources to be created...  
INFO[0002] Cloudformation stack status                   stackStatus=CREATE_IN_PROGRESS
INFO[0063] Cloudformation stack status                   stackStatus=CREATE_IN_PROGRESS
570Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
INFO[0124] Cloudformation stack status                   stackStatus=CREATE_IN_PROGRESS
VPC created: vpc-xxxxxxxxxxxxxxxxx
Security Group created: sg-xxxxxxxxxxxxxxxxx
Subnet created: subnet-xxxxxxxxxxxxxxxxx
Subnet created: subnet-xxxxxxxxxxxxxxxxx
Cluster creation succeeded.
Install the sample Memcached workload
To install the sample Memcached workload which exposes the Prometheus metrics
1. Download the Memcached AWS CloudFormation template by entering the following command.
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/ecs-task-definition-templates/deployment-mode/replica-service/cwagent-
prometheus/sample_traffic/memcached/memcached-traffic-sample.yaml
2. Set the IAM role names to be created for Memcached by entering the following commands.
MEMCACHED_ECS_TASK_ROLE_NAME=memcached-prometheus-demo-ecs-task-role-name
MEMCACHED_ECS_EXECUTION_ROLE_NAME=memcached-prometheus-demo-ecs-execution-role-name
3. Install the sample Memcached workload by entering the following command. This sample installs 
the workload in host network mode.
MEMCACHED_ECS_NETWORK_MODE=host
aws cloudformation create-stack --stack-name Memcached-Prometheus-Demo-ECS-
$ECS_CLUSTER_NAME-EC2-$MEMCACHED_ECS_NETWORK_MODE \ 
    --template-body file://memcached-traffic-sample.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=$ECS_CLUSTER_NAME \ 
                 ParameterKey=ECSNetworkMode,ParameterValue=$MEMCACHED_ECS_NETWORK_MODE 
 \ 
                 ParameterKey=TaskRoleName,ParameterValue=$MEMCACHED_ECS_TASK_ROLE_NAME 
 \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=
$MEMCACHED_ECS_EXECUTION_ROLE_NAME \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region $AWS_REGION
The AWS CloudFormation stack creates four resources:
•One ECS task role
•One ECS task execution role
•One Memcached task deﬁnition
•One Memcached service
In the Memcached task deﬁnition, two containers are deﬁned:
•The primary container runs a simple Memcached application and opens port 11211 for access.
•The other container runs the Redis exporter process to expose the Prometheus metrics on port 9150. 
This is the container to be discovered and scraped by the CloudWatch agent.
571Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Conﬁgure the CloudWatch agent to scrape Memcached Prometheus metrics
To conﬁgure the CloudWatch agent to scrape Memcached Prometheus metrics
1. Download the latest version of cwagent-ecs-prometheus-metric-for-awsvpc.yaml  by 
entering the following command.
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/ecs-task-definition-templates/deployment-mode/replica-service/cwagent-
prometheus/cloudformation-quickstart/cwagent-ecs-prometheus-metric-for-awsvpc.yaml
2. Open the ﬁle with a text editor, and ﬁnd the full CloudWatch agent conﬁguration behind the value
key in the resource:CWAgentConfigSSMParameter  section.
Then, in the ecs_service_discovery  section, add the following conﬁguration into the
task_definition_list  section.
{ 
    "sd_job_name": "ecs-memcached", 
    "sd_metrics_ports": "9150", 
    "sd_task_definition_arn_pattern": ".*:task-definition/memcached-prometheus-demo.*:
[0-9]+"
},
For the metric_declaration  section, the default setting does not allow any Memcached metrics. 
Add the following section to allow Memcached metrics. Be sure to follow the existing indentation 
pattern.
{ 
  "source_labels": ["container_name"], 
  "label_matcher": "memcached-exporter-.*", 
  "dimensions": [["ClusterName", "TaskDefinitionFamily"]], 
  "metric_selectors": [ 
    "^memcached_current_(bytes|items|connections)$", 
    "^memcached_items_(reclaimed|evicted)_total$", 
    "^memcached_(written|read)_bytes_total$", 
    "^memcached_limit_bytes$", 
    "^memcached_commands_total$" 
  ]
},
{ 
  "source_labels": ["container_name"], 
  "label_matcher": "memcached-exporter-.*", 
  "dimensions": [["ClusterName", "TaskDefinitionFamily","status","command"], 
 ["ClusterName", "TaskDefinitionFamily","command"]], 
  "metric_selectors": [ 
    "^memcached_commands_total$" 
  ]
},
3. If you already have the CloudWatch agent deployed in the Amazon ECS cluster by AWS 
CloudFormation, you can create a change set by entering the following commands.
ECS_NETWORK_MODE=bridge
CREATE_IAM_ROLES=True
ECS_TASK_ROLE_NAME= your_selected_ecs_task_role_name
ECS_EXECUTION_ROLE_NAME= your_selected_ecs_execution_role_name
aws cloudformation create-change-set --stack-name CWAgent-Prometheus-ECS-
${ECS_CLUSTER_NAME}-EC2-${ECS_NETWORK_MODE} \ 
    --template-body file://cwagent-ecs-prometheus-metric-for-bridge-host.yaml \ 
572Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
    --parameters ParameterKey=ECSClusterName,ParameterValue=$ECS_CLUSTER_NAME \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=$CREATE_IAM_ROLES \ 
                 ParameterKey=ECSNetworkMode,ParameterValue=$ECS_NETWORK_MODE \ 
                 ParameterKey=TaskRoleName,ParameterValue=$ECS_TASK_ROLE_NAME \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=$ECS_EXECUTION_ROLE_NAME 
 \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region $AWS_REGION \ 
    --change-set-name memcached-scraping-support
4. Open the AWS CloudFormation console at https://console.aws.amazon.com/cloudformation.
5. Review the newly created changeset memcached-scraping-support . You should see one change 
applied to the CWAgentConfigSSMParameter  resource. Execute the changeset and restart the 
CloudWatch agent task by entering the following commands.
aws ecs update-service --cluster $ECS_CLUSTER_NAME \
--desired-count 0 \
--service cwagent-prometheus-replica-service-EC2-$ECS_NETWORK_MODE \
--region $AWS_REGION
6. Wait about 10 seconds, and then enter the following command.
aws ecs update-service --cluster $ECS_CLUSTER_NAME \
--desired-count 1 \
--service cwagent-prometheus-replica-service-EC2-$ECS_NETWORK_MODE \
--region $AWS_REGION
7. If you are installing the CloudWatch agent with Prometheus metric collecting for the cluster for the 
ﬁrst time, please enter the following commands:
ECS_NETWORK_MODEE=bridge
CREATE_IAM_ROLES=True
ECS_TASK_ROLE_NAME= your_selected_ecs_task_role_name
ECS_EXECUTION_ROLE_NAME= your_selected_ecs_execution_role_name
aws cloudformation create-stack --stack-name CWAgent-Prometheus-ECS-
${ECS_CLUSTER_NAME}-EC2-${ECS_NETWORK_MODE} \ 
    --template-body file://cwagent-ecs-prometheus-metric-for-bridge-host.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=$ECS_CLUSTER_NAME \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=$CREATE_IAM_ROLES \ 
                 ParameterKey=ECSNetworkMode,ParameterValue=$ECS_NETWORK_MODE \ 
                 ParameterKey=TaskRoleName,ParameterValue=$ECS_TASK_ROLE_NAME \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=$ECS_EXECUTION_ROLE_NAME 
 \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region $AWS_REGION 
Viewing your Memcached metrics
This tutorial sends the following metrics to the ECS/ContainerInsights/Prometheus namespace in 
CloudWatch. You can use the CloudWatch console to see the metrics in that namespace.
Metric name Dimensions
memcached_current_items ClusterName, TaskDeﬁnitionFamily
memcached_current_connections ClusterName, TaskDeﬁnitionFamily
memcached_limit_bytes ClusterName, TaskDeﬁnitionFamily
573Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Metric name Dimensions
memcached_current_bytes ClusterName, TaskDeﬁnitionFamily
memcached_written_bytes_total ClusterName, TaskDeﬁnitionFamily
memcached_read_bytes_total ClusterName, TaskDeﬁnitionFamily
memcached_items_evicted_total ClusterName, TaskDeﬁnitionFamily
memcached_items_reclaimed_total ClusterName, TaskDeﬁnitionFamily
memcached_commands_total ClusterName, TaskDeﬁnitionFamily
ClusterName, TaskDeﬁnitionFamily, command
ClusterName, TaskDeﬁnitionFamily, status, 
command
Note
The value of the command dimension can be: delete , get, cas, set, decr , touch , incr , or
flush .
The value of the status  dimension can be hit, miss , or badval .
You can also create a CloudWatch dashboard for your Memcached Prometheus metrics.
To create a dashboard for Memcached Prometheus metrics
1. Create environment variables, replacing the values below to match your deployment.
DASHBOARD_NAME= your_memcached_cw_dashboard_name
ECS_TASK_DEF_FAMILY=memcached-prometheus-demo-$ECS_CLUSTER_NAME-EC2-
$MEMCACHED_ECS_NETWORK_MOD
2. Enter the following command to create the dashboard.
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/ecs-task-definition-templates/deployment-mode/replica-service/cwagent-
prometheus/sample_cloudwatch_dashboards/memcached/cw_dashboard_memcached.json \
| sed "s/{{YOUR_AWS_REGION}}/$AWS_REGION/g" \
| sed "s/{{YOUR_CLUSTER_NAME}}/$ECS_CLUSTER_NAME/g" \
| sed "s/{{YOUR_TASK_DEF_FAMILY}}/$ECS_TASK_DEF_FAMILY/g" \
| xargs -0 aws cloudwatch put-dashboard --dashboard-name ${DASHBOARD_NAME} --region 
 $AWS_REGION --dashboard-body
Tutorial for scraping Redis Prometheus metrics on Amazon ECS Fargate
This tutorial provides a hands-on introduction to scrape the Prometheus metrics of a sample Redis 
application in an Amazon ECS Fargate cluster. The Redis Prometheus exporter target will be auto-
discovered by the CloudWatch agent with Prometheus metric support based on the container’s docker 
labels.
Redis (https://redis.io/) is an open source (BSD licensed), in-memory data structure store, used as a 
database, cache and message broker. For more information, see  redis.
redis_exporter (MIT License licensed) is used to expose the Redis prometheus metrics on the speciﬁed 
port (default: 0.0.0.0:9121). For more information, see  redis_exporter.
The Docker images in the following two Docker Hub repositories are used in this tutorial:
574Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
•redis
•redis_exporter
Prerequisite
To collect metrics from a sample Prometheus workload for Amazon ECS, you must be running Container 
Insights in the cluster. For information about installing Container Insights, see Setting up Container 
Insights on Amazon ECS (p. 466).
Topics
•Set the Amazon ECS Fargate cluster environment variable (p. 575)
•Set the network environment variables for the Amazon ECS Fargate cluster (p. 575)
•Install the sample Redis workload (p. 576)
•Conﬁgure the CloudWatch agent to scrape Redis Prometheus metrics (p. 577)
•Viewing your Redis metrics (p. 579)
Set the Amazon ECS Fargate cluster environment variable
To set the Amazon ECS Fargate cluster environment variable
1. Install the Amazon ECS CLI if you haven't already done so. For more information, see  Installing the 
Amazon ECS CLI.
2. Set the new Amazon ECS cluster name and Region. For example:
ECS_CLUSTER_NAME=ecs-fargate-redis-tutorial
AWS_DEFAULT_REGION=ca-central-1
3. (Optional) If you don't already have an Amazon ECS Fargate cluster where you want to install 
the sample Redis workload and CloudWatch agent, you can create one by entering the following 
command.
ecs-cli up --capability-iam \
--cluster $ECS_CLUSTER_NAME \
--launch-type FARGATE \
--region $AWS_DEFAULT_REGION
The expected result of this command is as follows:
INFO[0000] Created cluster   cluster=ecs-fargate-redis-tutorial region=ca-central-1
INFO[0001] Waiting for your cluster resources to be created...
INFO[0001] Cloudformation stack status   stackStatus=CREATE_IN_PROGRESS
VPC created: vpc-xxxxxxxxxxxxxxxxx
Subnet created: subnet-xxxxxxxxxxxxxxxxx
Subnet created: subnet-xxxxxxxxxxxxxxxxx
Cluster creation succeeded.
Set the network environment variables for the Amazon ECS Fargate cluster
To set the network environment variables for the Amazon ECS Fargate cluster
1. Set your VPC and subnet ID of the Amazon ECS cluster. If you created a new cluster in the previous 
procedure, you'll see these values in the result of the ﬁnal command. Otherwise, use the IDs of the 
existing cluster that you are going to use with Redis.
575Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
ECS_CLUSTER_VPC= vpc-xxxxxxxxxxxxxxxxx
ECS_CLUSTER_SUBNET_1= subnet-xxxxxxxxxxxxxxxxx
ECS_CLUSTER_SUBNET_2= subnet-xxxxxxxxxxxxxxxxx
2. In this tutorial, we are going to install the Redis application and the CloudWatch agent in the default 
security group of the Amazon ECS cluster’s VPC. The default security group allows all network 
connection within the same security group so the CloudWatch agent can scrape the Prometheus 
metrics exposed on the Redis containers. In a real production environment, you might want to create 
dedicated security groups for the Redis application and CloudWatch agent and set customized 
permissions for them.
Enter the following command to get the default security group ID.
aws ec2 describe-security-groups \
--filters Name=vpc-id,Values=$ECS_CLUSTER_VPC  \
--region $AWS_DEFAULT_REGION
Then set the Fargate cluster deafult security group variable by entering the following command, 
replacing my-default-security-group  with the value you found from the previous command.
ECS_CLUSTER_SECURITY_GROUP= my-default-security-group
Install the sample Redis workload
To install the sample Redis workload which exposes the Prometheus metrics
1. Download the Redis AWS CloudFormation template by entering the following command.
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/ecs-task-definition-templates/deployment-mode/replica-service/cwagent-
prometheus/sample_traffic/redis/redis-traffic-sample.yaml
2. Set the IAM role names to be created for Redis by entering the following commands.
REDIS_ECS_TASK_ROLE_NAME=redis-prometheus-demo-ecs-task-role-name
REDIS_ECS_EXECUTION_ROLE_NAME=redis-prometheus-demo-ecs-execution-role-name
3. Install the sample Redis workload by entering the following command.
aws cloudformation create-stack --stack-name Redis-Prometheus-Demo-ECS-
$ECS_CLUSTER_NAME-fargate-awsvpc \ 
    --template-body file://redis-traffic-sample.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=$ECS_CLUSTER_NAME \ 
                 ParameterKey=SecurityGroupID,ParameterValue=
$ECS_CLUSTER_SECURITY_GROUP \ 
                 ParameterKey=SubnetID,ParameterValue=$ECS_CLUSTER_SUBNET_1 \ 
                 ParameterKey=TaskRoleName,ParameterValue=$REDIS_ECS_TASK_ROLE_NAME \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=
$REDIS_ECS_EXECUTION_ROLE_NAME \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region $AWS_DEFAULT_REGION
The AWS CloudFormation stack creates four resources:
•One ECS task role
576Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
•One ECS task execution role
•One Redis task deﬁnition
•One Redis service
In the Redis task deﬁnition, two containers are deﬁned:
•The primary container runs a simple Redis application and opens port 6379 for access.
•The other container runs the Redis exporter process to expose the Prometheus metrics on port 9121. 
This is the container to be discovered and scraped by the CloudWatch agent. The following docker 
label is deﬁned so that the CloudWatch agent can discover this container based on it.
ECS_PROMETHEUS_EXPORTER_PORT: 9121
Conﬁgure the CloudWatch agent to scrape Redis Prometheus metrics
To conﬁgure the CloudWatch agent to scrape Redis Prometheus metrics
1. Download the latest version of cwagent-ecs-prometheus-metric-for-awsvpc.yaml  by 
entering the following command.
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/ecs-task-definition-templates/deployment-mode/replica-service/cwagent-
prometheus/cloudformation-quickstart/cwagent-ecs-prometheus-metric-for-awsvpc.yaml
2. Open the ﬁle with a text editor, and ﬁnd the full CloudWatch agent conﬁguration behind the value
key in the resource:CWAgentConfigSSMParameter  section.
Then, in the ecs_service_discovery  section shown here, the docker_label -
based service discovery is enabled with the default settings which are based on
ECS_PROMETHEUS_EXPORTER_PORT , which matches the docker label we deﬁned in the Redis ECS 
task deﬁnition. So we do not need to make any changes in this section:
ecs_service_discovery": { 
  "sd_frequency": "1m", 
  "sd_result_file": "/tmp/cwagent_ecs_auto_sd.yaml",
*  "docker_label": { 
  },* 
  ...
For the metric_declaration  section, the default setting does not allow any Redis metrics. Add 
the following section to allow Redis metrics. Be sure to follow the existing indentation pattern.
{ 
  "source_labels": ["container_name"], 
  "label_matcher": "^redis-exporter-.*$", 
  "dimensions": [["ClusterName","TaskDefinitionFamily"]], 
  "metric_selectors": [ 
    "^redis_net_(in|out)put_bytes_total$", 
    "^redis_(expired|evicted)_keys_total$", 
    "^redis_keyspace_(hits|misses)_total$", 
    "^redis_memory_used_bytes$", 
    "^redis_connected_clients$" 
  ]
},
{ 
  "source_labels": ["container_name"], 
577Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
  "label_matcher": "^redis-exporter-.*$", 
  "dimensions": [["ClusterName","TaskDefinitionFamily","cmd"]], 
  "metric_selectors": [ 
    "^redis_commands_total$" 
  ]
},
{ 
  "source_labels": ["container_name"], 
  "label_matcher": "^redis-exporter-.*$", 
  "dimensions": [["ClusterName","TaskDefinitionFamily","db"]], 
  "metric_selectors": [ 
    "^redis_db_keys$" 
  ]
},
3. If you already have the CloudWatch agent deployed in the Amazon ECS cluster by AWS 
CloudFormation, you can create a change set by entering the following commands.
ECS_LAUNCH_TYPE=FARGATE
CREATE_IAM_ROLES=True
ECS_CLUSTER_SUBNET=$ECS_CLUSTER_SUBNET_1
ECS_TASK_ROLE_NAME= your_selected_ecs_task_role_name
ECS_EXECUTION_ROLE_NAME= your_selected_ecs_execution_role_name
aws cloudformation create-change-set --stack-name CWAgent-Prometheus-ECS-
$ECS_CLUSTER_NAME-$ECS_LAUNCH_TYPE-awsvpc \ 
    --template-body file://cwagent-ecs-prometheus-metric-for-awsvpc.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=$ECS_CLUSTER_NAME \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=$CREATE_IAM_ROLES \ 
                 ParameterKey=ECSLaunchType,ParameterValue=$ECS_LAUNCH_TYPE \ 
                 ParameterKey=SecurityGroupID,ParameterValue=
$ECS_CLUSTER_SECURITY_GROUP \ 
                 ParameterKey=SubnetID,ParameterValue=$ECS_CLUSTER_SUBNET \ 
                 ParameterKey=TaskRoleName,ParameterValue=$ECS_TASK_ROLE_NAME \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=$ECS_EXECUTION_ROLE_NAME 
 \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region ${AWS_DEFAULT_REGION} \ 
    --change-set-name redis-scraping-support
4. Open the AWS CloudFormation console at https://console.aws.amazon.com/cloudformation.
5. Review the newly created changeset redis-scraping-support . You should see one change 
applied to the CWAgentConfigSSMParameter  resource. Execute the changeset and restart the 
CloudWatch agent task by entering the following commands.
aws ecs update-service --cluster $ECS_CLUSTER_NAME \
--desired-count 0 \
--service cwagent-prometheus-replica-service-$ECS_LAUNCH_TYPE-awsvpc \
--region ${AWS_DEFAULT_REGION}
6. Wait about 10 seconds, and then enter the following command.
aws ecs update-service --cluster $ECS_CLUSTER_NAME \
--desired-count 1 \
--service cwagent-prometheus-replica-service-$ECS_LAUNCH_TYPE-awsvpc \
--region ${AWS_DEFAULT_REGION}
7. If you are installing the CloudWatch agent with Prometheus metric collecting for the cluster for the 
ﬁrst time, please enter the following commands:
ECS_LAUNCH_TYPE=FARGATE
CREATE_IAM_ROLES=True
578Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
ECS_CLUSTER_SUBNET=$ECS_CLUSTER_SUBNET_1
ECS_TASK_ROLE_NAME= your_selected_ecs_task_role_name
ECS_EXECUTION_ROLE_NAME= your_selected_ecs_execution_role_name
aws cloudformation create-stack --stack-name CWAgent-Prometheus-ECS-$ECS_CLUSTER_NAME-
$ECS_LAUNCH_TYPE-awsvpc \ 
    --template-body file://cwagent-ecs-prometheus-metric-for-awsvpc.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=$ECS_CLUSTER_NAME \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=$CREATE_IAM_ROLES \ 
                 ParameterKey=ECSLaunchType,ParameterValue=$ECS_LAUNCH_TYPE \ 
                 ParameterKey=SecurityGroupID,ParameterValue=
$ECS_CLUSTER_SECURITY_GROUP \ 
                 ParameterKey=SubnetID,ParameterValue=$ECS_CLUSTER_SUBNET \ 
                 ParameterKey=TaskRoleName,ParameterValue=$ECS_TASK_ROLE_NAME \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=$ECS_EXECUTION_ROLE_NAME 
 \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region ${AWS_DEFAULT_REGION}
Viewing your Redis metrics
This tutorial sends the following metrics to the ECS/ContainerInsights/Prometheus namespace in 
CloudWatch. You can use the CloudWatch console to see the metrics in that namespace.
Metric Name Dimensions
redis_net_input_bytes_total ClusterName, TaskDeﬁnitionFamily
redis_net_output_bytes_total ClusterName, TaskDeﬁnitionFamily
redis_expired_keys_total ClusterName, TaskDeﬁnitionFamily
redis_evicted_keys_total ClusterName, TaskDeﬁnitionFamily
redis_keyspace_hits_total ClusterName, TaskDeﬁnitionFamily
redis_keyspace_misses_total ClusterName, TaskDeﬁnitionFamily
redis_memory_used_bytes ClusterName, TaskDeﬁnitionFamily
redis_connected_clients ClusterName, TaskDeﬁnitionFamily
redis_commands_total ClusterName, TaskDeﬁnitionFamily, cmd
redis_db_keys ClusterName, TaskDeﬁnitionFamily, db
Note
The value of the cmd  dimension can be: append , client , command , config , dbsize ,
flushall , get, incr , info , latency , or slowlog .
The value of the db dimension can be db0 to db15 .
You can also create a CloudWatch dashboard for your Redis Prometheus metrics.
To create a dashboard for Redis Prometheus metrics
1. Create environment variables, replacing the values below to match your deployment.
DASHBOARD_NAME= your_cw_dashboard_name
ECS_TASK_DEF_FAMILY=redis-prometheus-demo-$ECS_CLUSTER_NAME-fargate-awsvpc
579Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
2. Enter the following command to create the dashboard.
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-
prometheus/sample_cloudwatch_dashboards/redis/cw_dashboard_redis.json \
| sed "s/{{YOUR_AWS_REGION}}/${REGION_NAME}/g" \
| sed "s/{{YOUR_CLUSTER_NAME}}/${CLUSTER_NAME}/g" \
| sed "s/{{YOUR_NAMESPACE}}/${NAMESPACE}/g" \
Set up and conﬁgure Prometheus metrics collection on Amazon 
EKS and Kubernetes clusters
To collect Prometheus metrics from clusters running Amazon EKS or Kubernetes, you can use the 
CloudWatch agent as a collector or use the AWS Distro for OpenTelemetry collector. For information 
about using the AWS Distro for OpenTelemetry collector, see https://aws-otel.github.io/docs/getting-
started/container-insights/eks-prometheus.
The following sections explain how to collect Prometheus metrics using the CloudWatch agent. They 
explain how to install the CloudWatch agent with Prometheus monitoring on clusters running Amazon 
EKS or Kubernetes, and how to conﬁgure the agent to scrape additional targets. They also provide 
optional tutorials for setting up sample workloads to use for testing with Prometheus monitoring.
Topics
•Install the CloudWatch agent with Prometheus metrics collection on Amazon EKS and Kubernetes 
clusters  (p. 580)
•Prometheus metric type conversion by the CloudWatch Agent (p. 605)
•Prometheus metrics collected by the CloudWatch agent (p. 606)
•Viewing your Prometheus metrics  (p. 613)
•Prometheus metrics troubleshooting (p. 614)
Install the CloudWatch agent with Prometheus metrics collection on Amazon 
EKS and Kubernetes clusters
This section explains how to set up the CloudWatch agent with Prometheus monitoring in a cluster 
running Amazon EKS or Kubernetes. After you do this, the agent automatically scrapes and imports 
metrics for the following workloads running in that cluster.
•AWS App Mesh
•NGINX
•Memcached
•Java/JMX
•HAProxy
•Fluent Bit
You can also conﬁgure the agent to scrape and import additional Prometheus workloads and sources.
Before following these steps to install the CloudWatch agent for Prometheus metric collection, you must 
have a cluster running on Amazon EKS or a Kubernetes cluster running on an Amazon EC2 instance.
VPC security group requirements
The ingress rules of the security groups for the Prometheus workloads must open the Prometheus ports 
to the CloudWatch agent for scraping the Prometheus metrics by the private IP.
580Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
The egress rules of the security group for the CloudWatch agent must allow the CloudWatch agent to 
connect to the Prometheus workloads' port by private IP.
Topics
•Install the CloudWatch agent with Prometheus metrics collection on Amazon EKS and Kubernetes 
clusters  (p. 581)
•Scraping additional Prometheus sources and importing those metrics (p. 584)
•(Optional) Set up sample containerized Amazon EKS workloads for Prometheus metric 
testing  (p. 592)
Install the CloudWatch agent with Prometheus metrics collection on Amazon EKS and 
Kubernetes clusters
This section explains how to set up the CloudWatch agent with Prometheus monitoring in a cluster 
running Amazon EKS or Kubernetes. After you do this, the agent automatically scrapes and imports 
metrics for the following workloads running in that cluster.
•AWS App Mesh
•NGINX
•Memcached
•Java/JMX
•HAProxy
•Fluent Bit
You can also conﬁgure the agent to scrape and import additional Prometheus workloads and sources.
Before following these steps to install the CloudWatch agent for Prometheus metric collection, you must 
have a cluster running on Amazon EKS or a Kubernetes cluster running on an Amazon EC2 instance.
VPC security group requirements
The ingress rules of the security groups for the Prometheus workloads must open the Prometheus ports 
to the CloudWatch agent for scraping the Prometheus metrics by the private IP.
The egress rules of the security group for the CloudWatch agent must allow the CloudWatch agent to 
connect to the Prometheus workloads' port by private IP.
Topics
•Setting up IAM roles (p. 581)
•Installing the CloudWatch agent to collect Prometheus metrics (p. 582)
Setting up IAM roles
The ﬁrst step is to set up the necessary IAM role in the cluster. There are two methods:
•Set up an IAM role for a service account, also known as a service role. This method works for both the 
EC2 launch type and the Fargate launch type.
•Add an IAM policy to the IAM role used for the cluster. This works only for the EC2 launch type.
Set up a service role (EC2 launch type and Fargate launch type)
To set up a service role, enter the following command. Replace MyCluster  with the name of the cluster.
eksctl create iamserviceaccount \ 
581Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
 --name cwagent-prometheus \
--namespace amazon-cloudwatch \ 
 --cluster MyCluster  \
--attach-policy-arn arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy \
--approve \
--override-existing-serviceaccounts
Add a policy to the cluster's IAM role (EC2 launch type only)
To set up the IAM policy in a cluster for Prometheus support
1. Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/.
2. In the navigation pane, choose Instances.
3. You need to ﬁnd the preﬁx of the IAM role name for the cluster. To do this, select the check box next 
to the name of an instance that is in the cluster, and choose Actions, Instance Settings, Attach/
Replace IAM Role. Then copy the preﬁx of the IAM role, such as eksctl-dev303-workshop-
nodegroup .
4. Open the IAM console at https://console.aws.amazon.com/iam/.
5. In the navigation pane, choose Roles.
6. Use the search box to ﬁnd the preﬁx that you copied earlier in this procedure, and choose that role.
7. Choose Attach policies.
8. Use the search box to ﬁnd CloudWatchAgentServerPolicy. Select the check box next to
CloudWatchAgentServerPolicy, and choose Attach policy.
Installing the CloudWatch agent to collect Prometheus metrics
You must install the CloudWatch agent in the cluster to collect the metrics. How to install the agent 
diﬀers for Amazon EKS clusters and Kubernetes clusters.
Delete previous versions of the CloudWatch agent with Prometheus support
If you have already installed a version of the CloudWatch agent with Prometheus support in your cluster, 
you must delete that version by entering the following command. This is necessary only for previous 
versions of the agent with Prometheus support. You do not need to delete the CloudWatch agent that 
enables Container Insights without Prometheus support.
kubectl delete deployment cwagent-prometheus -n amazon-cloudwatch
Installing the CloudWatch agent on Amazon EKS clusters with the EC2 launch type
To install the CloudWatch agent with Prometheus support on an Amazon EKS cluster, follow these steps.
To install the CloudWatch agent with Prometheus support on an Amazon EKS cluster
1. Enter the following command to check whether the amazon-cloudwatch  namespace has already 
been created:
kubectl get namespace
2. If amazon-cloudwatch  is not displayed in the results, create it by entering the following command:
kubectl create namespace amazon-cloudwatch
3. To deploy the agent with the default conﬁguration and have it send data to the AWS Region that it 
is installed in, enter the following command:
582Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Note
The following setup step pulls the container image from Docker Hub as an anonymous user 
by default. This pull may be subject to a rate limit. For more information, see CloudWatch 
agent container image (p. 465).
kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-
container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/service/
cwagent-prometheus/prometheus-eks.yaml
To have the agent send data to a diﬀerent Region instead, follow these steps:
a. Download the YAML ﬁle for the agent by entering the following command:
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-
prometheus/prometheus-eks.yaml
b. Open the ﬁle with a text editor, and search for the cwagentconfig.json  block of the ﬁle.
c. Add the highlighted lines, specifying the Region that you want:
cwagentconfig.json: | 
    { 
       "agent": { 
        "region": "us-east-2" 
      },
      "logs": { ...
d. Save the ﬁle and deploy the agent using your updated ﬁle.
kubectl apply -f prometheus-eks.yaml
Installing the CloudWatch agent on Amazon EKS clusters with the Fargate launch type
To install the CloudWatch agent with Prometheus support on an Amazon EKS cluster with the Fargate 
launch type, follow these steps.
To install the CloudWatch agent with Prometheus support on an Amazon EKS cluster with 
the Fargate launch type
1. Enter the following command to create a Fargate proﬁle for the CloudWatch agent so that it can run 
inside the cluster. Replace MyCluster  with the name of the cluster.
eksctl create fargateprofile --cluster MyCluster  \
--name amazon-cloudwatch \
--namespace amazon-cloudwatch
2. To install the CloudWatch agent, enter the following command. Replace MyCluster  with the name 
of the cluster. This name is used in the log group name that stores the log events collected by the 
agent, and is also used as a dimension for the metrics collected by the agent.
Replace region with the name of the Region where you want the metrics to be sent. For example,
us-west-1 .
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-
prometheus/prometheus-eks-fargate.yaml |  
583Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
sed "s/{{cluster_name}}/ MyCluster /;s/{{region_name}}/ region/" |  
kubectl apply -f -
Installing the CloudWatch agent on a Kubernetes cluster
To install the CloudWatch agent with Prometheus support on a cluster running Kubernetes, enter the 
following command:
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/
latest/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-prometheus/
prometheus-k8s.yaml |  
sed "s/{{cluster_name}}/MyCluster/;s/{{region_name}}/region/" |  
kubectl apply -f -
Replace MyCluster  with the name of the cluster. This name is used in the log group name that stores 
the log events collected by the agent, and is also used as a dimension for the metrics collected by the 
agent.
Replace region with the name of the AWS Region where you want the metrics to be sent. For example,
us-west-1 .
Verify that the agent is running
On both Amazon EKS and Kubernetes clusters, you can enter the following command to conﬁrm that the 
agent is running.
kubectl get pod -l "app=cwagent-prometheus" -n amazon-cloudwatch
If the results include a single CloudWatch agent pod in the Running  state, the agent is running and 
collecting Prometheus metrics. By default the CloudWatch agent collects metrics for App Mesh, NGINX, 
Memcached, Java/JMX, and HAProxy every minute. For more information about those metrics, see
Prometheus metrics collected by the CloudWatch agent (p. 606). For instructions on how to see your 
Prometheus metrics in CloudWatch, see Viewing your Prometheus metrics  (p. 613)
You can also conﬁgure the CloudWatch agent to collect metrics from other Prometheus exporters. For 
more information, see Scraping additional Prometheus sources and importing those metrics (p. 584).
Scraping additional Prometheus sources and importing those metrics
The CloudWatch agent with Prometheus monitoring needs two conﬁgurations to scrape the Prometheus 
metrics. One is for the standard Prometheus conﬁgurations as documented in <scrape_conﬁg> in the 
Prometheus documentation. The other is for the CloudWatch agent conﬁguration.
For Amazon EKS clusters, the conﬁgurations are deﬁned in prometheus-eks.yaml  (for the EC2 launch 
type) or prometheus-eks-fargate.yaml  (for the Fargate launch type) as two conﬁg maps:
•The name: prometheus-config  section contains the settings for Prometheus scraping.
•The name: prometheus-cwagentconfig  section contains the conﬁguration for the CloudWatch 
agent. You can use this section to conﬁgure how the Prometheus metrics are collected by CloudWatch. 
For example, you specify which metrics are to be imported into CloudWatch, and deﬁne their 
dimensions.
For Kubernetes clusters running on Amazon EC2 instances, the conﬁgurations are deﬁned in the
prometheus-k8s.yaml  YAML ﬁle as two conﬁg maps:
•The name: prometheus-config  section contains the settings for Prometheus scraping.
584Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
•The name: prometheus-cwagentconfig  section contains the conﬁguration for the CloudWatch 
agent.
To scrape additional Prometheus metrics sources and import those metrics to CloudWatch, you modify 
both the Prometheus scrape conﬁguration and the CloudWatch agent conﬁguration, and then re-deploy 
the agent with the updated conﬁguration.
VPC security group requirements
The ingress rules of the security groups for the Prometheus workloads must open the Prometheus ports 
to the CloudWatch agent for scraping the Prometheus metrics by the private IP.
The egress rules of the security group for the CloudWatch agent must allow the CloudWatch agent to 
connect to the Prometheus workloads' port by private IP.
Prometheus scrape conﬁguration
The CloudWatch agent supports the standard Prometheus scrape conﬁgurations as documented 
in <scrape_conﬁg> in the Prometheus documentation. You can edit this section to update the 
conﬁgurations that are already in this ﬁle, and add additional Prometheus scraping targets. By default, 
the sample conﬁguration ﬁle contains the following global conﬁguration lines:
global: 
  scrape_interval: 1m 
  scrape_timeout: 10s
•scrape_interval— Deﬁnes how frequently to scrape targets.
•scrape_timeout — Deﬁnes how long to wait before a scrape request times out.
You can also deﬁne diﬀerent values for these settings at the job level, to override the global 
conﬁgurations.
Prometheus scraping jobs
The CloudWatch agent YAML ﬁles already have some default scraping jobs conﬁgured. For example, 
in prometheus-eks.yaml , the default scraping jobs are conﬁgured in the job_name  lines in the
scrape_configs  section. In this ﬁle, the following default kubernetes-pod-jmx  section scrapes JMX 
exporter metrics.
   - job_name: 'kubernetes-pod-jmx' 
      sample_limit: 10000 
      metrics_path: /metrics 
      kubernetes_sd_configs: 
      - role: pod 
      relabel_configs: 
      - source_labels: [__address__] 
        action: keep 
        regex: '.*:9404$' 
      - action: labelmap 
        regex: __meta_kubernetes_pod_label_(.+) 
      - action: replace 
        source_labels: 
        - __meta_kubernetes_namespace 
        target_label: Namespace 
      - source_labels: [__meta_kubernetes_pod_name] 
        action: replace 
        target_label: pod_name 
      - action: replace 
585Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
        source_labels: 
        - __meta_kubernetes_pod_container_name 
        target_label: container_name 
      - action: replace 
        source_labels: 
        - __meta_kubernetes_pod_controller_name 
        target_label: pod_controller_name 
      - action: replace 
        source_labels: 
        - __meta_kubernetes_pod_controller_kind 
        target_label: pod_controller_kind 
      - action: replace 
        source_labels: 
        - __meta_kubernetes_pod_phase 
        target_label: pod_phase
Each of these default targets are scraped, and the metrics are sent to CloudWatch in log events using 
embedded metric format. For more information, see Embedding metrics within logs  (p. 985).
Log events from Amazon EKS and Kubernetes clusters are stored in the /aws/
containerinsights/cluster_name /prometheus  log group in CloudWatch Logs. Log events from 
Amazon ECS clusters are stored in the /aws/ecs/containerinsights/cluster_name /prometheus  log 
group.
Each scraping job is contained in a diﬀerent log stream in this log group. For example, the Prometheus 
scraping job kubernetes-pod-appmesh-envoy  is deﬁned for App Mesh. All App Mesh Prometheus 
metrics from Amazon EKS and Kubernetes clusters are sent to the log stream named /aws/
containerinsights/cluster_name >prometheus/kubernetes-pod-appmesh-envoy/.
To add a new scraping target, you add a new job_name  section to the scrape_configs  section of 
the YAML ﬁle, and restart the agent. For an example of this process, see Tutorial for adding a new 
Prometheus scrape target: Prometheus API Server metrics (p. 588).
CloudWatch agent conﬁguration for Prometheus
The CloudWatch agent conﬁguration ﬁle has a prometheus  section under metrics_collected  for the 
Prometheus scraping conﬁguration. It includes the following conﬁguration options:
•cluster_name — speciﬁes the cluster name to be added as a label in the log event. This ﬁeld is 
optional. If you omit it, the agent can detect the Amazon EKS or Kubernetes cluster name.
•log_group_name— speciﬁes the log group name for the scraped Prometheus metrics. This ﬁeld is 
optional. If you omit it, CloudWatch uses /aws/containerinsights/cluster_name /prometheus  for 
logs from Amazon EKS and Kubernetes clusters.
•prometheus_conﬁg_path— speciﬁes the Prometheus scrape conﬁguration ﬁle path. If the value of 
this ﬁeld starts with env: the Prometheus scrape conﬁguration ﬁle contents will be retrieved from the 
container's environment variable. Do not change this ﬁeld.
•ecs_service_discovery— is the section to specify the conﬁguration for Amazon ECS Prometheus 
service discovery. For more information, see Detailed guide for autodiscovery on Amazon ECS 
clusters  (p. 550).
The ecs_service_discovery  section can contain the following ﬁelds:
•sd_frequency  is the frequency to discover the Prometheus exporters. Specify a number and a unit 
suﬃx. For example, 1m for once per minute or 30s for once per 30 seconds. Valid unit suﬃxes are
ns, us, ms, s, m, and h.
This ﬁeld is optional. The default is 60 seconds (1 minute).
•sd_target_cluster  is the target Amazon ECS cluster name for auto-discovery. This ﬁeld is 
optional. The default is the name of the Amazon ECS cluster where the CloudWatch agent is 
installed.
586Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
•sd_cluster_region  is the target Amazon ECS cluster's Region. This ﬁeld is optional. The default is 
the Region of the Amazon ECS cluster where the CloudWatch agent is installed. .
•sd_result_file  is the path of the YAML ﬁle for the Prometheus target results. The Prometheus 
scrape conﬁguration will refer to this ﬁle.
•docker_label  is an optional section that you can use to specify the conﬁguration for docker label-
based service discovery. If you omit this section, docker label-based discovery is not used. This 
section can contain the following ﬁelds:
•sd_port_label  is the container's docker label name that speciﬁes the container port for 
Prometheus metrics. The default value is ECS_PROMETHEUS_EXPORTER_PORT . If the container 
does not have this docker label, the CloudWatch agent will skip it.
•sd_metrics_path_label  is the container's docker label name that speciﬁes the Prometheus 
metrics path. The default value is ECS_PROMETHEUS_METRICS_PATH . If the container does not 
have this docker label, the agent assumes the default path /metrics .
•sd_job_name_label  is the container's docker label name that speciﬁes the Prometheus 
scrape job name. The default value is job. If the container does not have this docker label, the 
CloudWatch agent uses the job name in the Prometheus scrape conﬁguration.
•task_definition_list  is an optional section that you can use to specify the conﬁguration of 
task deﬁnition-based service discovery. If you omit this section, task deﬁnition-based discovery is 
not used. This section can contain the following ﬁelds:
•sd_task_definition_arn_pattern  is the pattern to use to specify the Amazon ECS task 
deﬁnitions to discover. This is a regular expression.
•sd_metrics_ports  lists the containerPort for the Prometheus metrics. Separate the 
containerPorts with semicolons.
•sd_container_name_pattern  speciﬁes the Amazon ECS task container names. This is a regular 
expression.
•sd_metrics_path  speciﬁes the Prometheus metric path. If you omit this, the agent assumes the 
default path /metrics
•sd_job_name  speciﬁes the Prometheus scrape job name. If you omit this ﬁeld, the CloudWatch 
agent uses the job name in the Prometheus scrape conﬁguration.
•metric_declaration — are sections that specify the array of logs with embedded metric format 
to be generated. There are metric_declaration  sections for each Prometheus source that the 
CloudWatch agent imports from by default. These sections each include the following ﬁelds:
•label_matcher  is a regular expression that checks the value of the labels listed in
source_labels . The metrics that match are enabled for inclusion in the embedded metric format 
sent to CloudWatch.
If you have multiple labels speciﬁed in source_labels , we recommend that you do not use ^ or $
characters in the regular expression for label_matcher .
•source_labels  speciﬁes the value of the labels that are checked by the label_matcher  line.
•label_separator  speciﬁes the separator to be used in the  label_matcher  line if 
multiple source_labels  are speciﬁed. The default is ;. You can see this default used in the
label_matcher  line in the following example.
•metric_selectors  is a regular expression that speciﬁes the metrics to be collected and sent to 
CloudWatch.
•dimensions  is the list of labels to be used as CloudWatch dimensions for each selected metric.
See the following metric_declaration  example.
"metric_declaration": [ 
  { 
     "source_labels":[ "Service", "Namespace"], 
     "label_matcher":"(.*node-exporter.*|.*kube-dns.*);kube-system", 
587Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
     "dimensions":[ 
        ["Service", "Namespace"] 
     ], 
     "metric_selectors":[ 
        "^coredns_dns_request_type_count_total$" 
     ] 
  }
]
This example conﬁgures an embedded metric format section to be sent as a log event if the following 
conditions are met:
•The value of Service contains either node-exporter  or kube-dns .
•The value of Namespace  is kube-system .
•The Prometheus metric coredns_dns_request_type_count_total  contains both Service  and
Namespace  labels.
The log event that is sent includes the following highlighted section:
{ 
   "CloudWatchMetrics":[ 
      { 
         "Metrics":[ 
            { 
               "Name":"coredns_dns_request_type_count_total" 
            } 
         ], 
         "Dimensions":[ 
            [ 
               "Namespace", 
               "Service" 
            ] 
         ], 
         "Namespace":"ContainerInsights/Prometheus" 
      } 
   ],
   "Namespace":"kube-system", 
   "Service":"kube-dns", 
   "coredns_dns_request_type_count_total":2562, 
   "eks_amazonaws_com_component":"kube-dns", 
   "instance":"192.168.61.254:9153", 
   "job":"kubernetes-service-endpoints", 
   ...
}
Tutorial for adding a new Prometheus scrape target: Prometheus API Server metrics
The Kubernetes API Server exposes Prometheus metrics on endpoints by default. The oﬃcial example for 
the Kubernetes API Server scraping conﬁguration is available on Github .
The following tutorial shows how to do the following steps to begin importing Kubernetes API Server 
metrics into CloudWatch:
•Adding the Prometheus scraping conﬁguration for Kubernetes API Server to the CloudWatch agent 
YAML ﬁle.
•Conﬁguring the embedded metric format metrics deﬁnitions in the CloudWatch agent YAML ﬁle.
•(Optional) Creating a CloudWatch dashboard for the Kubernetes API Server metrics.
588Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Note
The Kubernetes API Server exposes gauge, counter, histogram, and summary metrics. In this 
release of Prometheus metrics support, CloudWatch imports only the metrics with gauge, 
counter, and summary types.
To start collecting Kubernetes API Server Prometheus metrics in CloudWatch
1. Download the latest version of the prometheus-eks.yaml , prometheus-eks-fargate.yaml , or
prometheus-k8s.yaml  ﬁle by entering one of the following commands.
For an Amazon EKS cluster with the EC2 launch type, enter the following command:
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-
prometheus/prometheus-eks.yaml
For an Amazon EKS cluster with the Fargate launch type, enter the following command:
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-
prometheus/prometheus-eks-fargate.yaml
For a Kubernetes cluster running on an Amazon EC2 instance, enter the following command:
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-
prometheus/prometheus-k8s.yaml
2. Open the ﬁle with a text editor, ﬁnd the prometheus-config  section, and add the following 
section inside of that section. Then save the changes:
    # Scrape config for API servers 
    - job_name: 'kubernetes-apiservers' 
      kubernetes_sd_configs: 
        - role: endpoints 
          namespaces: 
            names: 
              - default 
      scheme: https 
      tls_config: 
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt 
        insecure_skip_verify: true 
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token 
      relabel_configs: 
      - source_labels: [__meta_kubernetes_service_name, 
 __meta_kubernetes_endpoint_port_name] 
        action: keep 
        regex: kubernetes;https 
      - action: replace 
        source_labels: 
        - __meta_kubernetes_namespace 
        target_label: Namespace 
      - action: replace 
        source_labels: 
        - __meta_kubernetes_service_name 
        target_label: Service
3. While you still have the YAML ﬁle open in the text editor, ﬁnd the cwagentconfig.json  section. 
Add the following subsection and save the changes. This section puts the API server metrics onto the 
CloudWatch agent allow list. Three types of API Server metrics are added to the allow list:
589Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
•etcd object counts
•API Server registration controller metrics
•API Server request metrics
{"source_labels": ["job", "resource"], 
  "label_matcher": "^kubernetes-apiservers;(services|daemonsets.apps|deployments.apps|
configmaps|endpoints|secrets|serviceaccounts|replicasets.apps)", 
  "dimensions": [["ClusterName","Service","resource"]], 
  "metric_selectors": [ 
  "^etcd_object_counts$" 
  ]
},
{"source_labels": ["job", "name"], 
   "label_matcher": "^kubernetes-apiservers;APIServiceRegistrationController$", 
   "dimensions": [["ClusterName","Service","name"]], 
   "metric_selectors": [ 
   "^workqueue_depth$", 
   "^workqueue_adds_total$", 
   "^workqueue_retries_total$" 
  ]
},
{"source_labels": ["job","code"], 
  "label_matcher": "^kubernetes-apiservers;2[0-9]{2}$", 
  "dimensions": [["ClusterName","Service","code"]], 
  "metric_selectors": [ 
   "^apiserver_request_total$" 
  ]
},
{"source_labels": ["job"], 
  "label_matcher": "^kubernetes-apiservers", 
  "dimensions": [["ClusterName","Service"]], 
  "metric_selectors": [ 
  "^apiserver_request_total$" 
  ]
},
4. If you already have the CloudWatch agent with Prometheus support deployed in the cluster, you 
must delete it by entering the following command:
kubectl delete deployment cwagent-prometheus -n amazon-cloudwatch
5. Deploy the CloudWatch agent with your updated conﬁguration by entering one of the following 
commands. For an Amazon EKS cluster with the EC2 launch type, enter:
kubectl apply -f prometheus-eks.yaml
For an Amazon EKS cluster with the Fargate launch type, enter the following command. Replace
MyCluster  and region with values to match your deployment.
cat prometheus-eks-fargate.yaml \
| sed "s/{{cluster_name}}/ MyCluster /;s/{{region_name}}/ region/" \
| kubectl apply -f -
For a Kubernetes cluster, enter the following command. Replace MyCluster  and region  with 
values to match your deployment.
cat prometheus-k8s.yaml \
590Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
| sed "s/{{cluster_name}}/ MyCluster /;s/{{region_name}}/ region/" \
| kubectl apply -f -
Once you have done this, you should see a new log stream named  kubernetes-apiservers  in the /aws/
containerinsights/cluster_name /prometheus  log group. This log stream should include log events 
with an embedded metric format deﬁnition like the following:
{ 
   "CloudWatchMetrics":[ 
      { 
         "Metrics":[ 
            { 
               "Name":"apiserver_request_total" 
            } 
         ], 
         "Dimensions":[ 
            [ 
               "ClusterName", 
               "Service" 
            ] 
         ], 
         "Namespace":"ContainerInsights/Prometheus" 
      } 
   ], 
   "ClusterName":"my-cluster-name", 
   "Namespace":"default", 
   "Service":"kubernetes", 
   "Timestamp":"1592267020339", 
   "Version":"0", 
   "apiserver_request_count":0, 
   "apiserver_request_total":0, 
   "code":"0", 
   "component":"apiserver", 
   "contentType":"application/json", 
   "instance":"192.0.2.0:443", 
   "job":"kubernetes-apiservers", 
   "prom_metric_type":"counter", 
   "resource":"pods", 
   "scope":"namespace", 
   "verb":"WATCH", 
   "version":"v1"
}
You can view your metrics in the CloudWatch console in the ContainerInsights/Prometheus  namespace. 
You can also optionally create a CloudWatch dashboard for your Prometheus Kubernetes API Server 
metrics.
(Optional) Creating a dashboard for Kubernetes API Server metrics
To see Kubernetes API Server metrics in your dashboard, you must have ﬁrst completed the steps in the 
previous sections to start collecting these metrics in CloudWatch.
To create a dashboard for Kubernetes API Server metrics
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. Make sure you have the correct AWS Region selected.
3. In the navigation pane, choose Dashboards .
4. Choose Create Dashboard . Enter a name for the new dashboard, and choose Create dashboard .
5. In Add to this dashboard , choose Cancel.
6. Choose Actions, View/edit source.
591Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
7. Download the following JSON ﬁle: Kubernetes API Dashboard source.
8. Open the JSON ﬁle that you downloaded with a text editor, and make the following changes:
•Replace all the {{YOUR_CLUSTER_NAME}}  strings with the exact name of your cluster. Make sure 
not to add whitespaces before or after the text.
•Replace all the {{YOUR_AWS_REGION}}  strings with the name of the Region where the metrics 
are collected. For example us-west-2 . Be sure not to add whitespaces before or after the text.
9. Copy the entire JSON blob and paste it into the text box in the CloudWatch console, replacing what 
is already in the box.
10. Choose Update , Save dashboard.
(Optional) Set up sample containerized Amazon EKS workloads for Prometheus metric testing
To test the Prometheus metric support in CloudWatch Container Insights, you can set up one or more of 
the following containerized workloads. The CloudWatch agent with Prometheus support automatically 
collects metrics from each of these workloads. To see the metrics that are collected by default, see
Prometheus metrics collected by the CloudWatch agent (p. 606).
Before you can install any of these workloads, you must install Helm 3.x by entering the following 
commands:
brew install helm
For more information, see Helm .
Topics
•Set up AWS App Mesh sample workload for Amazon EKS and Kubernetes (p. 592)
•Set up NGINX with sample traﬃc on Amazon EKS and Kubernetes (p. 595)
•Set up memcached with a metric exporter on Amazon EKS and Kubernetes (p. 596)
•Set up Java/JMX sample workload on Amazon EKS and Kubernetes (p. 597)
•Set up HAProxy with a metric exporter on Amazon EKS and Kubernetes (p. 601)
•Tutorial for adding a new Prometheus scrape target: Redis on Amazon EKS and Kubernetes 
clusters  (p. 602)
Set up AWS App Mesh sample workload for Amazon EKS and Kubernetes
Prometheus support in CloudWatch Container Insights supports AWS App Mesh. The following sections 
explain how to set up App Mesh.
CloudWatch Container Insights can also collect App Mesh Envoy Access Logs. For more information, see
(Optional) Enable App Mesh Envoy access logs (p. 499).
Topics
•Set up AWS App Mesh sample workload on an Amazon EKS cluster with the EC2 launch type or a 
Kubernetes cluster  (p. 592)
•Set up AWS App Mesh sample workload on an Amazon EKS cluster with the Fargate launch 
type (p. 594)
Set up AWS App Mesh sample workload on an Amazon EKS cluster with the EC2 launch type or a 
Kubernetes cluster
Use these instructions if you are setting up App Mesh on a cluster running Amazon EKS with the EC2 
launch type, or a Kubernetes cluster.
592Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Conﬁgure IAM permissions
You must add the AWSAppMeshFullAccess policy to the IAM role for your Amazon EKS or Kubernetes 
node group. On Amazon EKS, this node group name looks similar to eksctl-integ-test-
eks-prometheus-NodeInstanceRole-ABCDEFHIJKL . On Kubernetes, it might look similar to
nodes.integ-test-kops-prometheus.k8s.local .
Install App Mesh
To install the App Mesh Kubernetes controller, follow the instructions in App Mesh Controller.
Install a sample application
aws-app-mesh-examples contains several Kubernetes App Mesh walkthroughs. For this tutorial, you 
install a sample color application that shows how http routes can use headers for matching incoming 
requests.
To use a sample App Mesh application to test Container Insights
1. Install the application using these instructions: https://github.com/aws/aws-app-mesh-examples/ 
tree/main/walkthroughs/howto-k8s-http-headers.
2. Launch a curler pod to generate traﬃc:
kubectl -n default run -it curler --image=tutum/curl /bin/bash
3. Curl diﬀerent endpoints by changing HTTP headers. Run the curl command multiple times, as 
shown:
curl -H "color_header: blue" front.howto-k8s-http-headers.svc.cluster.local:8080/; 
 echo;
curl -H "color_header: red" front.howto-k8s-http-headers.svc.cluster.local:8080/; echo;
curl -H "color_header: yellow" front.howto-k8s-http-headers.svc.cluster.local:8080/; 
 echo;
4. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
5. In the AWS Region where your cluster is running, choose Metrics  in the navigation pane. The metric 
are in the ContainerInsights/Prometheus  namespace.
6. To see the CloudWatch Logs events, choose Log groups  in the navigation pane. The events are in the 
log group  /aws/containerinsights/ your_cluster_name /prometheus  in the log stream
kubernetes-pod-appmesh-envoy .
Deleting the App Mesh test environment
When you have ﬁnished using App Mesh and the sample application, use the following commands to 
delete the unnecessary resources. Delete the sample application by entering the following command:
cd aws-app-mesh-examples/walkthroughs/howto-k8s-http-headers/
kubectl delete -f _output/manifest.yaml
Delete the App Mesh controller by entering the following command:
helm delete appmesh-controller -n appmesh-system
593Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Set up AWS App Mesh sample workload on an Amazon EKS cluster with the Fargate launch type
Use these instructions if you are setting up App Mesh on a cluster running Amazon EKS with the Fargate 
launch type.
Conﬁgure IAM permissions
To set up IAM permissions, enter the following command. Replace MyCluster  with the name of your 
cluster.
eksctl create iamserviceaccount --cluster MyCluster  \ 
 --namespace howto-k8s-fargate \ 
 --name appmesh-pod \ 
 --attach-policy-arn arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess \ 
 --attach-policy-arn arn:aws:iam::aws:policy/AWSCloudMapDiscoverInstanceAccess \ 
 --attach-policy-arn arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess \ 
 --attach-policy-arn arn:aws:iam::aws:policy/CloudWatchLogsFullAccess \ 
 --attach-policy-arn arn:aws:iam::aws:policy/AWSAppMeshFullAccess \ 
 --attach-policy-arn arn:aws:iam::aws:policy/AWSCloudMapFullAccess \ 
 --override-existing-serviceaccounts \ 
 --approve
Install App Mesh
To install the App Mesh Kubernetes controller, follow the instructions in App Mesh Controller. Be sure to 
follow the instructions for Amazon EKS with the Fargate launch type.
Install a sample application
aws-app-mesh-examples contains several Kubernetes App Mesh walkthroughs. For this tutorial, you 
install a sample color application that works for Amazon EKS clusters with the Fargate launch type.
To use a sample App Mesh application to test Container Insights
1. Install the application using these instructions: https://github.com/aws/aws-app-mesh-examples/ 
tree/main/walkthroughs/howto-k8s-fargate.
Those instructions assume that you are creating a new cluster with the correct Fargate proﬁle. If you 
want to use an Amazon EKS cluster that you've already set up, you can use the following commands 
to set up that cluster for this demonstration. Replace MyCluster  with the name of your cluster.
eksctl create iamserviceaccount --cluster MyCluster  \ 
 --namespace howto-k8s-fargate \ 
 --name appmesh-pod \ 
 --attach-policy-arn arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess \ 
 --attach-policy-arn arn:aws:iam::aws:policy/AWSCloudMapDiscoverInstanceAccess \ 
 --attach-policy-arn arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess \ 
 --attach-policy-arn arn:aws:iam::aws:policy/CloudWatchLogsFullAccess \ 
 --attach-policy-arn arn:aws:iam::aws:policy/AWSAppMeshFullAccess \ 
 --attach-policy-arn arn:aws:iam::aws:policy/AWSCloudMapFullAccess \ 
 --override-existing-serviceaccounts \ 
 --approve
eksctl create fargateprofile --cluster MyCluster \
--namespace howto-k8s-fargate --name howto-k8s-fargate
2. Port forward the front application deployment:
kubectl -n howto-k8s-fargate port-forward deployment/front 8080:8080
594Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
3. Curl the front app:
while true; do  curl -s http://localhost:8080/color; sleep 0.1; echo ; done
4. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
5. In the AWS Region where your cluster is running, choose Metrics  in the navigation pane. The metric 
are in the ContainerInsights/Prometheus  namespace.
6. To see the CloudWatch Logs events, choose Log groups  in the navigation pane. The events are in the 
log group  /aws/containerinsights/ your_cluster_name /prometheus  in the log stream
kubernetes-pod-appmesh-envoy .
Deleting the App Mesh test environment
When you have ﬁnished using App Mesh and the sample application, use the following commands to 
delete the unnecessary resources. Delete the sample application by entering the following command:
cd aws-app-mesh-examples/walkthroughs/howto-k8s-fargate/
kubectl delete -f _output/manifest.yaml
Delete the App Mesh controller by entering the following command:
helm delete appmesh-controller -n appmesh-system
Set up NGINX with sample traﬃc on Amazon EKS and Kubernetes
NGINX is a web server that can also be used as a load balancer and reverse proxy. For more information 
about how Kubernetes uses NGINX for ingress , see kubernetes/ingress-nginx.
To install Ingress-NGINX with a sample traﬃc service to test Container Insights Prometheus 
support
1. Enter the following command to add the Helm ingress-nginx repo:
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
2. Enter the following commands:
kubectl create namespace nginx-ingress-sample
helm install my-nginx ingress-nginx/ingress-nginx \
--namespace nginx-ingress-sample \
--set controller.metrics.enabled=true \
--set-string controller.metrics.service.annotations."prometheus\.io/port"="10254" \
--set-string controller.metrics.service.annotations."prometheus\.io/scrape"="true"
3. Check whether the services started correctly by entering the following command:
kubectl get service -n nginx-ingress-sample
The output of this command should display several columns, including an EXTERNAL-IP  column.
4. Set an EXTERNAL-IP  variable to the value of the EXTERNAL-IP  column in the row of the NGINX 
ingress controller.
EXTERNAL_IP= your-nginx-controller-external-ip
5. Start some sample NGINX traﬃc by entering the following command.
595Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
SAMPLE_TRAFFIC_NAMESPACE=nginx-sample-traffic
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-
prometheus/sample_traffic/nginx-traffic/nginx-traffic-sample.yaml |  
sed "s/{{external_ip}}/$EXTERNAL_IP/g" |  
sed "s/{{namespace}}/$SAMPLE_TRAFFIC_NAMESPACE/g" |  
kubectl apply -f -
6. Enter the following command to conﬁrm that all three pods are in the Running  status.
kubectl get pod -n $SAMPLE_TRAFFIC_NAMESPACE
If they are running, you should soon see metrics in the ContainerInsights/Prometheus  namespace.
To uninstall NGINX and the sample traﬃc application
1. Delete the sample traﬃc service by entering the following command:
kubectl delete namespace $SAMPLE_TRAFFIC_NAMESPACE
2. Delete the NGINX egress by the Helm release name.
helm uninstall my-nginx --namespace nginx-ingress-sample
kubectl delete namespace nginx-ingress-sample 
Set up memcached with a metric exporter on Amazon EKS and Kubernetes
memcached is an open-source memory object caching system. For more information, see What is 
Memcached? .
If you are running memcached on a cluster with the Fargate launch type, you need to set up a Fargate 
proﬁle before doing the steps in this procedure. To set up the proﬁle, enter the following command. 
Replace MyCluster  with the name of your cluster.
eksctl create fargateprofile --cluster MyCluster  \
--namespace memcached-sample --name memcached-sample
To install memcached with a metric exporter to test Container Insights Prometheus support
1. Enter the following command to add the repo:
helm repo add bitnami https://charts.bitnami.com/bitnami 
             
2. Enter the following command to create a new namespace:
kubectl create namespace memcached-sample
3. Enter the following command to install Memcached
helm install my-memcached bitnami/memcached --namespace memcached-sample \
--set metrics.enabled=true \
--set-string serviceAnnotations.prometheus\\.io/port="9150" \
--set-string serviceAnnotations.prometheus\\.io/scrape="true"
596Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
4. Enter the following command to conﬁrm the annotation of the running service:
kubectl describe service my-memcached-metrics -n memcached-sample
You should see the following two annotations:
Annotations:   prometheus.io/port: 9150 
               prometheus.io/scrape: true
To uninstall memcached
• Enter the following commands:
helm uninstall my-memcached --namespace memcached-sample
kubectl delete namespace memcached-sample
Set up Java/JMX sample workload on Amazon EKS and Kubernetes
JMX Exporter is an oﬃcial Prometheus exporter that can scrape and expose JMX mBeans as Prometheus 
metrics. For more information, see prometheus/jmx_exporter.
Container Insights can collect predeﬁned Prometheus metrics from Java Virtual Machine (JVM), Java, and 
Tomcat (Catalina) using the JMX Exporter.
Default Prometheus scrape conﬁguration
By default, the CloudWatch agent with Prometheus support scrapes the Java/JMX Prometheus metrics 
from http://CLUSTER_IP:9404/metrics  on each pod in an Amazon EKS or Kubernetes cluster. This 
is done by role: pod  discovery of Prometheus kubernetes_sd_config . 9404 is the default port 
allocated for JMX Exporter by Prometheus. For more information about role: pod  discovery, see  pod . 
You can conﬁgure the JMX Exporter to expose the metrics on a diﬀerent port or metrics_path. If you do 
change the port or path, update the default jmx scrape_conﬁg in the CloudWatch agent conﬁg map. Run 
the following command to get the current CloudWatch agent Prometheus conﬁguration:
kubectl describe cm prometheus-config -n amazon-cloudwatch
The ﬁelds to change are the /metrics  and regex: '.*:9404$'  ﬁelds, as highlighted in the following 
example.
job_name: 'kubernetes-jmx-pod'
sample_limit: 10000
metrics_path: /metrics
kubernetes_sd_configs:
- role: pod
relabel_configs:
- source_labels: [__address__] 
  action: keep 
   regex: '.*:9404$'
- action: replace 
  regex: (.+) 
  source_labels:
Other Prometheus scrape conﬁguration
If you expose your application running on a set of pods with Java/JMX Prometheus exporters by 
a Kubernetes Service, you can also switch to use role: service  discovery or role: endpoint
597Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
discovery of Prometheus kubernetes_sd_config . For more information about these discovery 
methods, see  service,  endpoints , and  <kubernetes_sd_conﬁg>..
More meta labels are provided by these two service discovery modes which could be 
useful for you to build the CloudWatch metrics dimensions. For example, you can relabel
__meta_kubernetes_service_name  to Service and include it into your metrics’ dimension. For 
more informatio about customizing your CloudWatch metrics and their dimensions, see  CloudWatch 
agent conﬁguration for Prometheus (p. 547).
Docker image with JMX Exporter
Next, build a Docker image. The following sections provide two example Dockerﬁles.
When you have built the image, load it into Amazon EKS or Kubernetes, and then run the 
following command to verify that Prometheus metrics are exposed by JMX_EXPORTER  on 
port 9404. Replace $JAR_SAMPLE_TRAFFIC_POD  with the running pod name and replace
$JAR_SAMPLE_TRAFFIC_NAMESPACE  with your application namespace.
If you are running JMX Exporter on a cluster with the Fargate launch type, you also need to set up 
a Fargate proﬁle before doing the steps in this procedure. To set up the proﬁle, enter the following 
command. Replace MyCluster  with the name of your cluster.
eksctl create fargateprofile --cluster MyCluster  \
--namespace $JAR_SAMPLE_TRAFFIC_NAMESPACE\ 
 --name $JAR_SAMPLE_TRAFFIC_NAMESPACE
kubectl exec $JAR_SAMPLE_TRAFFIC_POD -n $JARCAT_SAMPLE_TRAFFIC_NAMESPACE -- curl http://
localhost:9404
Example: Apache Tomcat Docker image with Prometheus metrics
Apache Tomcat server exposes JMX mBeans by default. You can integrate JMX Exporter with Tomcat to 
expose JMX mBeans as Prometheus metrics. The following example Dockerﬁle shows the steps to build a 
testing image:
# From Tomcat 9.0 JDK8 OpenJDK  
FROM tomcat:9.0-jdk8-openjdk  
RUN mkdir -p /opt/jmx_exporter
COPY ./jmx_prometheus_javaagent-0.12.0.jar /opt/jmx_exporter
COPY ./config.yaml /opt/jmx_exporter
COPY ./setenv.sh /usr/local/tomcat/bin  
COPY your web application.war  /usr/local/tomcat/webapps/
RUN chmod  o+x /usr/local/tomcat/bin/setenv.sh
ENTRYPOINT ["catalina.sh", "run"]
The following list explains the four COPY lines in this Dockerﬁle.
•Download the latest JMX Exporter jar ﬁle from https://github.com/prometheus/jmx_exporter.
•config.yaml  is the JMX Exporter conﬁguration ﬁle. For more information, see https://github.com/
prometheus/jmx_exporter#Conﬁguration.
Here is a sample conﬁguration ﬁle for Java and Tomcat:
lowercaseOutputName: true
598Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
lowercaseOutputLabelNames: true
rules:
- pattern: 'java.lang<type=OperatingSystem><>(FreePhysicalMemorySize|
TotalPhysicalMemorySize|FreeSwapSpaceSize|TotalSwapSpaceSize|SystemCpuLoad|
ProcessCpuLoad|OpenFileDescriptorCount|AvailableProcessors)' 
  name: java_lang_OperatingSystem_$1 
  type: GAUGE
- pattern: 'java.lang<type=Threading><>(TotalStartedThreadCount|ThreadCount)' 
  name: java_lang_threading_$1 
  type: GAUGE
- pattern: 'Catalina<type=GlobalRequestProcessor, name=\"(\w+-\w+)-(\d+)\"><>(\w+)' 
  name: catalina_globalrequestprocessor_$3_total 
  labels: 
    port: "$2" 
    protocol: "$1" 
  help: Catalina global $3 
  type: COUNTER
- pattern: 'Catalina<j2eeType=Servlet, WebModule=//([-a-zA-Z0-9+&@#/%?=~_|!:.,;]*[-
a-zA-Z0-9+&@#/%=~_|]), name=([-a-zA-Z0-9+/$%~_-|!.]*), J2EEApplication=none, 
 J2EEServer=none><>(requestCount|maxTime|processingTime|errorCount)' 
  name: catalina_servlet_$3_total 
  labels: 
    module: "$1" 
    servlet: "$2" 
  help: Catalina servlet $3 total 
  type: COUNTER
- pattern: 'Catalina<type=ThreadPool, name="(\w+-\w+)-(\d+)"><>(currentThreadCount|
currentThreadsBusy|keepAliveCount|pollerThreadCount|connectionCount)' 
  name: catalina_threadpool_$3 
  labels: 
    port: "$2" 
    protocol: "$1" 
  help: Catalina threadpool $3 
  type: GAUGE
- pattern: 'Catalina<type=Manager, host=([-a-zA-Z0-9+&@#/%?=~_|!:.,;]*[-a-zA-
Z0-9+&@#/%=~_|]), context=([-a-zA-Z0-9+/$%~_-|!.]*)><>(processingTime|sessionCounter|
rejectedSessions|expiredSessions)' 
  name: catalina_session_$3_total 
  labels: 
    context: "$2" 
    host: "$1" 
  help: Catalina session $3 total 
  type: COUNTER
- pattern: ".*"
•setenv.sh  is a Tomcat startup script to start the JMX exporter along with Tomcat and expose 
Prometheus metrics on port 9404 of the localhost. It also provides the JMX Exporter with the
config.yaml  ﬁle path.
$ cat setenv.sh  
export JAVA_OPTS="-javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent-0.12.0.jar=9404:/
opt/jmx_exporter/config.yaml $JAVA_OPTS"
•your web application.war is your web application war ﬁle to be loaded by Tomcat.
Build a Docker image with this conﬁguration and upload it to an image repository.
599Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Example: Java Jar Application Docker image with Prometheus metrics
The following example Dockerﬁle shows the steps to build a testing image:
# Alpine Linux with OpenJDK JRE
FROM openjdk:8-jre-alpine
RUN mkdir -p /opt/jmx_exporter
COPY ./jmx_prometheus_javaagent-0.12.0.jar /opt/jmx_exporter
COPY ./SampleJavaApplication-1.0-SNAPSHOT.jar /opt/jmx_exporter
COPY ./start_exporter_example.sh /opt/jmx_exporter
COPY ./config.yaml /opt/jmx_exporter
RUN chmod -R o+x /opt/jmx_exporter
RUN apk add curl
ENTRYPOINT exec /opt/jmx_exporter/start_exporter_example.sh
The following list explains the four COPY lines in this Dockerﬁle.
•Download the latest JMX Exporter jar ﬁle from https://github.com/prometheus/jmx_exporter.
•config.yaml  is the JMX Exporter conﬁguration ﬁle. For more information, see https://github.com/
prometheus/jmx_exporter#Conﬁguration.
Here is a sample conﬁguration ﬁle for Java and Tomcat:
lowercaseOutputName: true
lowercaseOutputLabelNames: true
rules:
- pattern: 'java.lang<type=OperatingSystem><>(FreePhysicalMemorySize|
TotalPhysicalMemorySize|FreeSwapSpaceSize|TotalSwapSpaceSize|SystemCpuLoad|
ProcessCpuLoad|OpenFileDescriptorCount|AvailableProcessors)' 
  name: java_lang_OperatingSystem_$1 
  type: GAUGE
- pattern: 'java.lang<type=Threading><>(TotalStartedThreadCount|ThreadCount)' 
  name: java_lang_threading_$1 
  type: GAUGE
- pattern: 'Catalina<type=GlobalRequestProcessor, name=\"(\w+-\w+)-(\d+)\"><>(\w+)' 
  name: catalina_globalrequestprocessor_$3_total 
  labels: 
    port: "$2" 
    protocol: "$1" 
  help: Catalina global $3 
  type: COUNTER
- pattern: 'Catalina<j2eeType=Servlet, WebModule=//([-a-zA-Z0-9+&@#/%?=~_|!:.,;]*[-
a-zA-Z0-9+&@#/%=~_|]), name=([-a-zA-Z0-9+/$%~_-|!.]*), J2EEApplication=none, 
 J2EEServer=none><>(requestCount|maxTime|processingTime|errorCount)' 
  name: catalina_servlet_$3_total 
  labels: 
    module: "$1" 
    servlet: "$2" 
  help: Catalina servlet $3 total 
  type: COUNTER
- pattern: 'Catalina<type=ThreadPool, name="(\w+-\w+)-(\d+)"><>(currentThreadCount|
currentThreadsBusy|keepAliveCount|pollerThreadCount|connectionCount)' 
  name: catalina_threadpool_$3 
  labels: 
600Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
    port: "$2" 
    protocol: "$1" 
  help: Catalina threadpool $3 
  type: GAUGE
- pattern: 'Catalina<type=Manager, host=([-a-zA-Z0-9+&@#/%?=~_|!:.,;]*[-a-zA-
Z0-9+&@#/%=~_|]), context=([-a-zA-Z0-9+/$%~_-|!.]*)><>(processingTime|sessionCounter|
rejectedSessions|expiredSessions)' 
  name: catalina_session_$3_total 
  labels: 
    context: "$2" 
    host: "$1" 
  help: Catalina session $3 total 
  type: COUNTER
- pattern: ".*"
•start_exporter_example.sh  is the script to start the JAR application with the Prometheus metrics 
exported. It also provides the JMX Exporter with the config.yaml  ﬁle path.
$ cat start_exporter_example.sh  
java -javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent-0.12.0.jar=9404:/opt/
jmx_exporter/config.yaml -cp  /opt/jmx_exporter/SampleJavaApplication-1.0-SNAPSHOT.jar 
 com.gubupt.sample.app.App
•SampleJavaApplication-1.0-SNAPSHOT.jar is the sample Java application jar ﬁle. Replace it with the 
Java application that you want to monitor.
Build a Docker image with this conﬁguration and upload it to an image repository.
Set up HAProxy with a metric exporter on Amazon EKS and Kubernetes
HAProxy is an open-source proxy application. For more information, see HAProxy.
If you are running HAProxy on a cluster with the Fargate launch type, you need to set up a Fargate 
proﬁle before doing the steps in this procedure. To set up the proﬁle, enter the following command. 
Replace MyCluster  with the name of your cluster.
eksctl create fargateprofile --cluster MyCluster  \
--namespace haproxy-ingress-sample --name haproxy-ingress-sample
To install HAProxy with a metric exporter to test Container Insights Prometheus support
1. Enter the following command to add the Helm incubator repo:
helm repo add haproxy-ingress https://haproxy-ingress.github.io/charts
2. Enter the following command to create a new namespace:
kubectl create namespace haproxy-ingress-sample
3. Enter the following commands to install HAProxy:
helm install haproxy haproxy-ingress/haproxy-ingress \
--namespace haproxy-ingress-sample \
--set defaultBackend.enabled=true \
--set controller.stats.enabled=true \
--set controller.metrics.enabled=true \
--set-string controller.metrics.service.annotations."prometheus\.io/port"="9101" \
601Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
--set-string controller.metrics.service.annotations."prometheus\.io/scrape"="true"
4. Enter the following command to conﬁrm the annotation of the service:
kubectl describe service haproxy-haproxy-ingress-metrics -n haproxy-ingress-sample
You should see the following annotations.
Annotations:   prometheus.io/port: 9101 
               prometheus.io/scrape: true
To uninstall HAProxy
• Enter the following commands:
helm uninstall haproxy --namespace haproxy-ingress-sample
kubectl delete namespace haproxy-ingress-sample
Tutorial for adding a new Prometheus scrape target: Redis on Amazon EKS and Kubernetes 
clusters
This tutorial provides a hands-on introduction to scrape the Prometheus metrics of a sample Redis 
application on Amazon EKS and Kubernetes. Redis (https://redis.io/) is an open source (BSD licensed), in-
memory data structure store, used as a database, cache and message broker. For more information, see 
redis.
redis_exporter (MIT License licensed) is used to expose the Redis prometheus metrics on the speciﬁed 
port (default: 0.0.0.0:9121). For more information, see  redis_exporter.
The Docker images in the following two Docker Hub repositories are used in this tutorial:
•redis
•redis_exporter
To install a sample Redis workload which exposes Prometheus metrics
1. Set the namespace for the sample Redis workload.
REDIS_NAMESPACE=redis-sample
2. If you are running Redis on a cluster with the Fargate launch type, you need to set up a Fargate 
proﬁle. To set up the proﬁle, enter the following command. Replace MyCluster  with the name of 
your cluster.
eksctl create fargateprofile --cluster MyCluster  \
--namespace $REDIS_NAMESPACE --name $REDIS_NAMESPACE
3. Enter the following command to install the sample Redis workload.
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-
prometheus/sample_traffic/redis/redis-traffic-sample.yaml \
| sed "s/{{namespace}}/$REDIS_NAMESPACE/g" \
| kubectl apply -f -
602Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
4. The installation includes a service named my-redis-metrics  which exposes the Redis Prometheus 
metric on port 9121 Enter the following command to get the details of the service:
kubectl describe service/my-redis-metrics  -n $REDIS_NAMESPACE
In the Annotations  section of the results, you'll see two annotations which match the Prometheus 
scrape conﬁguration of the CloudWatch agent, so that it can auto-discover the workloads:
prometheus.io/port: 9121
prometheus.io/scrape: true
The related Prometheus scrape conﬁguration can be found in the - job_name: kubernetes-
service-endpoints  section of kubernetes-eks.yaml  or kubernetes-k8s.yaml .
To start collecting Redis Prometheus metrics in CloudWatch
1. Download the latest version of the of kubernetes-eks.yaml  or kubernetes-k8s.yaml  ﬁle 
by entering one of the following commands. For an Amazon EKS cluster with the EC2 launch type, 
enter this command.
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-
prometheus/prometheus-eks.yaml
For an Amazon EKS cluster with the Fargate launch type, enter this command.
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-
prometheus/prometheus-eks-fargate.yaml
For a Kubernetes cluster running on an Amazon EC2 instance, enter this command.
curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-
prometheus/prometheus-k8s.yaml
2. Open the ﬁle with a text editor, and ﬁnd the cwagentconfig.json  section. Add the following 
subsection and save the changes. Be sure that the indentation follows the existing pattern.
{ 
  "source_labels": ["pod_name"], 
  "label_matcher": "^redis-instance$", 
  "dimensions": [["Namespace","ClusterName"]], 
  "metric_selectors": [ 
    "^redis_net_(in|out)put_bytes_total$", 
    "^redis_(expired|evicted)_keys_total$", 
    "^redis_keyspace_(hits|misses)_total$", 
    "^redis_memory_used_bytes$", 
    "^redis_connected_clients$" 
  ]
},
{ 
  "source_labels": ["pod_name"], 
  "label_matcher": "^redis-instance$", 
  "dimensions": [["Namespace","ClusterName","cmd"]], 
  "metric_selectors": [ 
    "^redis_commands_total$" 
603Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
  ]
},
{ 
  "source_labels": ["pod_name"], 
  "label_matcher": "^redis-instance$", 
  "dimensions": [["Namespace","ClusterName","db"]], 
  "metric_selectors": [ 
    "^redis_db_keys$" 
  ]
},
The section you added puts the Redis metrics onto the CloudWatch agent allow list. For a list of 
these metrics, see the following section.
3. If you already have the CloudWatch agent with Prometheus support deployed in this cluster, you 
must delete it by entering the following command.
kubectl delete deployment cwagent-prometheus -n amazon-cloudwatch
4. Deploy the CloudWatch agent with your updated conﬁguration by entering one of the following 
commands. Replace MyCluster  and region to match your settings.
For an Amazon EKS cluster with the EC2 launch type, enter this command.
kubectl apply -f prometheus-eks.yaml
For an Amazon EKS cluster with the Fargate launch type, enter this command.
cat prometheus-eks-fargate.yaml \
| sed "s/{{cluster_name}}/ MyCluster /;s/{{region_name}}/ region/" \
| kubectl apply -f -
For a Kubernetes cluster, enter this command.
cat prometheus-k8s.yaml \
| sed "s/{{cluster_name}}/ MyCluster /;s/{{region_name}}/ region/" \
| kubectl apply -f -
Viewing your Redis Prometheus metrics
This tutorial sends the following metrics to the ContainerInsights/Prometheus  namespace in 
CloudWatch. You can use the CloudWatch console to see the metrics in that namespace.
Metric name Dimensions
redis_net_input_bytes_total ClusterName, Namespace
redis_net_output_bytes_total ClusterName, Namespace
redis_expired_keys_total ClusterName, Namespace
redis_evicted_keys_total ClusterName, Namespace
redis_keyspace_hits_total ClusterName, Namespace
redis_keyspace_misses_total ClusterName, Namespace
604Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Metric name Dimensions
redis_memory_used_bytes ClusterName, Namespace
redis_connected_clients ClusterName, Namespace
redis_commands_total ClusterName, Namespace, cmd
redis_db_keys ClusterName, Namespace, db
Note
The value of the cmd  dimension can be: append , client , command , config , dbsize ,
flushall , get, incr , info , latency , or slowlog .
The value of the db dimension can be db0 to db15 .
You can also create a CloudWatch dashboard for your Redis Prometheus metrics.
To create a dashboard for Redis Prometheus metrics
1. Create environment variables, replacing the values below to match your deployment.
DASHBOARD_NAME= your_cw_dashboard_name
REGION_NAME= your_metric_region_such_as_us-east-1
CLUSTER_NAME= your_k8s_cluster_name_here
NAMESPACE= your_redis_service_namespace_here
2. Enter the following command to create the dashboard.
curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-
insights/latest/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-
prometheus/sample_cloudwatch_dashboards/redis/cw_dashboard_redis.json \
| sed "s/{{YOUR_AWS_REGION}}/${REGION_NAME}/g" \
| sed "s/{{YOUR_CLUSTER_NAME}}/${CLUSTER_NAME}/g" \
| sed "s/{{YOUR_NAMESPACE}}/${NAMESPACE}/g" \
Prometheus metric type conversion by the CloudWatch Agent
The Prometheus client libraries oﬀer four core metric types:
•Counter
•Gauge
•Summary
•Histogram
The CloudWatch agent supports the counter, gauge, and summary metric types. Support for histogram 
metrics is planned for an upcoming release.
The Prometheus metrics with the unsupported histogram metric type are dropped by the CloudWatch 
agent. For more information, see Logging dropped Prometheus metrics (p. 618).
Gauge metrics
A Prometheus gauge metric is a metric that represents a single numerical value that can arbitrarily go up 
and down. The CloudWatch agent scrapes gauge metrics and send these values out directly.
Counter metrics
605Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
A Prometheus counter metric is a cumulative metric that represents a single monotonically increasing 
counter whose value can only increase or be reset to zero. The CloudWatch agent calculates a delta from 
the previous scrape and sends the delta value as the metric value in the log event. So the CloudWatch 
agent will start to produce one log event from the second scrape and continue with subsequent scrapes, 
if any.
Summary metrics
A Prometheus summary metric is a complex metric type which is represented by multiple data points. 
It provides a total count of observations and a sum of all observed values. It calculates conﬁgurable 
quantiles over a sliding time window.
The sum and count of a summary metric are cumulative, but the quantiles are not. The following 
example shows the variance of quantiles.
# TYPE go_gc_duration_seconds summary
go_gc_duration_seconds{quantile="0"} 7.123e-06
go_gc_duration_seconds{quantile="0.25"} 9.204e-06
go_gc_duration_seconds{quantile="0.5"} 1.1065e-05
go_gc_duration_seconds{quantile="0.75"} 2.8731e-05
go_gc_duration_seconds{quantile="1"} 0.003841496
go_gc_duration_seconds_sum 0.37630427
go_gc_duration_seconds_count 9774
The CloudWatch agent handles the sum and count of a summary metric in the same way as it handles 
counter metrics, as described in the previous section. The CloudWatch agent preserves the quantile 
values as they are originally reported.
Prometheus metrics collected by the CloudWatch agent
The CloudWatch agent with Prometheus support automatically collects metrics from several services 
and workloads. The metrics that are collected by default are listed in the following sections. You can 
also conﬁgure the agent to collect more metrics from these services, and to collect Prometheus metrics 
from other applications and services. For more information about collecting additional metrics, see 
CloudWatch agent conﬁguration for Prometheus (p. 547).
Prometheus metrics collected from Amazon EKS and Kubernetes clusters are in the ContainerInsights/
Prometheus  namespace. Prometheus metrics collected from Amazon ECS clusters are in the ECS/
ContainerInsights/Prometheus  namespace.
Topics
•Prometheus metrics for App Mesh (p. 606)
•Prometheus metrics for NGINX (p. 609)
•Prometheus metrics for Memcached (p. 609)
•Prometheus metrics for Java/JMX (p. 610)
•Prometheus metrics for HAProxy (p. 612)
Prometheus metrics for App Mesh
The following metrics are automatically collected from App Mesh .
CloudWatch Container Insights can also collect App Mesh Envoy Access Logs. For more information, see
(Optional) Enable App Mesh Envoy access logs (p. 499).
Prometheus metrics for App Mesh on Amazon EKS and Kubernetes clusters
606Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Metric name Dimensions
envoy_http_downstream_rq_total ClusterName, Namespace
envoy_http_downstream_rq_xx ClusterName, Namespace
ClusterName, Namespace, 
envoy_http_conn_manager_preﬁx, 
envoy_response_code_class
envoy_cluster_upstream_cx_rx_bytes_total ClusterName, Namespace
envoy_cluster_upstream_cx_tx_bytes_total ClusterName, Namespace
envoy_cluster_membership_healthy ClusterName, Namespace
envoy_cluster_membership_total ClusterName, Namespace
envoy_server_memory_heap_size ClusterName, Namespace
envoy_server_memory_allocated ClusterName, Namespace
envoy_cluster_upstream_cx_connect_timeout ClusterName, Namespace
envoy_cluster_upstream_rq_pending_failure_eject ClusterName, Namespace
envoy_cluster_upstream_rq_pending_overflow ClusterName, Namespace
envoy_cluster_upstream_rq_timeout ClusterName, Namespace
envoy_cluster_upstream_rq_try_per_timeout ClusterName, Namespace
envoy_cluster_upstream_rq_rx_reset ClusterName, Namespace
envoy_cluster_upstream_cx_destroy_local_with_active_rq ClusterName, Namespace
envoy_cluster_upstream_cx_destroy_remote_active_rq ClusterName, Namespace
envoy_cluster_upstream_rq_maintenance_mode ClusterName, Namespace
envoy_cluster_upstream_flow_control_paused_reading_total ClusterName, Namespace
envoy_cluster_upstream_flow_control_resumed_reading_total ClusterName, Namespace
envoy_cluster_upstream_flow_control_backed_up_total ClusterName, Namespace
envoy_cluster_upstream_flow_control_drained_total ClusterName, Namespace
envoy_cluster_upstream_rq_retry ClusterName, Namespace
envoy_cluster_upstream_rq_retry_success ClusterName, Namespace
envoy_cluster_upstream_rq_retry_overflow ClusterName, Namespace
envoy_server_live ClusterName, Namespace
envoy_server_uptime ClusterName, Namespace
Prometheus metrics for App Mesh on Amazon ECS clusters
607Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Metric name Dimensions
envoy_http_downstream_rq_total ClusterName, TaskDeﬁnitionFamily
envoy_http_downstream_rq_xx ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_cx_rx_bytes_total ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_cx_tx_bytes_total ClusterName, TaskDeﬁnitionFamily
envoy_cluster_membership_healthy ClusterName, TaskDeﬁnitionFamily
envoy_cluster_membership_total ClusterName, TaskDeﬁnitionFamily
envoy_server_memory_heap_size ClusterName, TaskDeﬁnitionFamily
envoy_server_memory_allocated ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_cx_connect_timeout ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_rq_pending_failure_eject ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_rq_pending_overflow ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_rq_timeout ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_rq_try_per_timeout ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_rq_rx_reset ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_cx_destroy_local_with_active_rq ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_cx_destroy_remote_active_rq ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_rq_maintenance_mode ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_flow_control_paused_reading_total ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_flow_control_resumed_reading_total ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_flow_control_backed_up_total ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_flow_control_drained_total ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_rq_retry ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_rq_retry_success ClusterName, TaskDeﬁnitionFamily
envoy_cluster_upstream_rq_retry_overflow ClusterName, TaskDeﬁnitionFamily
envoy_server_live ClusterName, TaskDeﬁnitionFamily
envoy_server_uptime ClusterName, TaskDeﬁnitionFamily
envoy_http_downstream_rq_xx ClusterName, TaskDeﬁnitionFamily, 
envoy_http_conn_manager_preﬁx, 
envoy_response_code_class
ClusterName, TaskDeﬁnitionFamily, 
envoy_response_code_class
608Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Note
TaskDefinitionFamily  is the Kubernetes namespace of the mesh.
The value of envoy_http_conn_manager_prefix  can be ingress , egress , or admin .
The value of envoy_response_code_class  can be 1 (stands for 1xx), 2 stands for 2xx), 3
stands for 3xx), 4 stands for 4xx), or 5 stands for 5xx).
Prometheus metrics for NGINX
The following metrics are automatically collected from NGINX on Amazon EKS and Kubernetes clusters.
Metric name Dimensions
nginx_ingress_controller_nginx_process_cpu_seconds_total ClusterName, Namespace, Service
nginx_ingress_controller_success ClusterName, Namespace, Service
nginx_ingress_controller_requests ClusterName, Namespace, Service
nginx_ingress_controller_nginx_process_connections ClusterName, Namespace, Service
nginx_ingress_controller_nginx_process_connections_total ClusterName, Namespace, Service
nginx_ingress_controller_nginx_process_resident_memory_bytes ClusterName, Namespace, Service
nginx_ingress_controller_config_last_reload_successful ClusterName, Namespace, Service
nginx_ingress_controller_requests ClusterName, Namespace, Service, status
Prometheus metrics for Memcached
The following metrics are automatically collected from Memcached on Amazon EKS and Kubernetes 
clusters.
Metric name Dimensions
memcached_current_items ClusterName, Namespace, Service
memcached_current_connections ClusterName, Namespace, Service
memcached_limit_bytes ClusterName, Namespace, Service
memcached_current_bytes ClusterName, Namespace, Service
memcached_written_bytes_total ClusterName, Namespace, Service
memcached_read_bytes_total ClusterName, Namespace, Service
memcached_items_evicted_total ClusterName, Namespace, Service
memcached_items_reclaimed_total ClusterName, Namespace, Service
memcached_commands_total ClusterName, Namespace, Service
ClusterName, Namespace, Service, command
ClusterName, Namespace, Service, status, 
command
609Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Prometheus metrics for Java/JMX
Metrics collected on Amazon EKS and Kubernetes clusters
On Amazon EKS and Kubernetes clusters, Container Insights can collect the following predeﬁned 
Prometheus metrics from the Java Virtual Machine (JVM), Java, and Tomcat (Catalina) using the JMX 
Exporter. For more information, see  prometheus/jmx_exporter on Github.
Java/JMX on Amazon EKS and Kubernetes clusters
Metric name Dimensions
jvm_classes_loaded ClusterName, Namespace
jvm_threads_current ClusterName, Namespace
jvm_threads_daemon ClusterName, Namespace
java_lang_operatingsystem_totalswapspacesize ClusterName, Namespace
java_lang_operatingsystem_systemcpuload ClusterName, Namespace
java_lang_operatingsystem_processcpuload ClusterName, Namespace
java_lang_operatingsystem_freeswapspacesize ClusterName, Namespace
java_lang_operatingsystem_totalphysicalmemorysize ClusterName, Namespace
java_lang_operatingsystem_freephysicalmemorysize ClusterName, Namespace
java_lang_operatingsystem_openfiledescriptorcount ClusterName, Namespace
java_lang_operatingsystem_availableprocessors ClusterName, Namespace
jvm_memory_bytes_used ClusterName, Namespace, area
jvm_memory_pool_bytes_used ClusterName, Namespace, pool
Note
The values of the area  dimension can be heap  or nonheap .
The values of the pool  dimension can be Tenured Gen , Compress Class Space , Survivor 
Space , Eden Space , Code Cache , or Metaspace .
Tomcat/JMX on Amazon EKS and Kubernetes clusters
In addition to the Java/JMX metrics in the previous table, the following metrics are also collected for the 
Tomcat workload.
Metric name Dimensions
catalina_manager_activesessions ClusterName, Namespace
catalina_manager_rejectedsessions ClusterName, Namespace
catalina_globalrequestprocessor_bytesreceived ClusterName, Namespace
catalina_globalrequestprocessor_bytessent ClusterName, Namespace
catalina_globalrequestprocessor_requestcount ClusterName, Namespace
610Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Metric name Dimensions
catalina_globalrequestprocessor_errorcount ClusterName, Namespace
catalina_globalrequestprocessor_processingtime ClusterName, Namespace
Java/JMX on Amazon ECS clusters
Metric name Dimensions
jvm_classes_loaded ClusterName, TaskDeﬁnitionFamily
jvm_threads_current ClusterName, TaskDeﬁnitionFamily
jvm_threads_daemon ClusterName, TaskDeﬁnitionFamily
java_lang_operatingsystem_totalswapspacesize ClusterName, TaskDeﬁnitionFamily
java_lang_operatingsystem_systemcpuload ClusterName, TaskDeﬁnitionFamily
java_lang_operatingsystem_processcpuload ClusterName, TaskDeﬁnitionFamily
java_lang_operatingsystem_freeswapspacesize ClusterName, TaskDeﬁnitionFamily
java_lang_operatingsystem_totalphysicalmemorysize ClusterName, TaskDeﬁnitionFamily
java_lang_operatingsystem_freephysicalmemorysize ClusterName, TaskDeﬁnitionFamily
java_lang_operatingsystem_openfiledescriptorcount ClusterName, TaskDeﬁnitionFamily
java_lang_operatingsystem_availableprocessors ClusterName, TaskDeﬁnitionFamily
jvm_memory_bytes_used ClusterName, TaskDeﬁnitionFamily, area
jvm_memory_pool_bytes_used ClusterName, TaskDeﬁnitionFamily, pool
Note
The values of the area  dimension can be heap  or nonheap .
The values of the pool  dimension can be Tenured Gen , Compress Class Space , Survivor 
Space , Eden Space , Code Cache , or Metaspace .
Tomcat/JMX on Amazon ECS clusters
In addition to the Java/JMX metrics in the previous table, the following metrics are also collected for the 
Tomcat workload on Amazon ECS clusters.
Metric name Dimensions
catalina_manager_activesessions ClusterName, TaskDeﬁnitionFamily
catalina_manager_rejectedsessions ClusterName, TaskDeﬁnitionFamily
catalina_globalrequestprocessor_bytesreceived ClusterName, TaskDeﬁnitionFamily
catalina_globalrequestprocessor_bytessent ClusterName, TaskDeﬁnitionFamily
catalina_globalrequestprocessor_requestcount ClusterName, TaskDeﬁnitionFamily
611Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Metric name Dimensions
catalina_globalrequestprocessor_errorcount ClusterName, TaskDeﬁnitionFamily
catalina_globalrequestprocessor_processingtime ClusterName, TaskDeﬁnitionFamily
Prometheus metrics for HAProxy
The following metrics are automatically collected from HAProxy on Amazon EKS and Kubernetes 
clusters.
The metrics collected depend on which version of HAProxy Ingress that you are using. For more 
information about HAProxy Ingress and its versions, see  haproxy-ingress.
Metric name Dimensions Availability
haproxy_backend_bytes_in_total ClusterName, Namespace, Service All versions of HAProxy 
Ingress
haproxy_backend_bytes_out_total ClusterName, Namespace, Service All versions of HAProxy 
Ingress
haproxy_backend_connection_errors_total ClusterName, Namespace, Service All versions of HAProxy 
Ingress
haproxy_backend_connections_total ClusterName, Namespace, Service All versions of HAProxy 
Ingress
haproxy_backend_current_sessions ClusterName, Namespace, Service All versions of HAProxy 
Ingress
haproxy_backend_http_responses_total ClusterName, Namespace, Service, code, backend All versions of HAProxy 
Ingress
haproxy_backend_status ClusterName, Namespace, Service Only in versions 0.10 or 
later of HAProxy Ingress
haproxy_backend_up ClusterName, Namespace, Service Only in versions of 
HAProxy Ingress earlier 
than 0.10
haproxy_frontend_bytes_in_total ClusterName, Namespace, Service All versions of HAProxy 
Ingress
haproxy_frontend_bytes_out_total ClusterName, Namespace, Service All versions of HAProxy 
Ingress
haproxy_frontend_connections_total ClusterName, Namespace, Service All versions of HAProxy 
Ingress
haproxy_frontend_current_sessions ClusterName, Namespace, Service All versions of HAProxy 
Ingress
haproxy_frontend_http_requests_total ClusterName, Namespace, Service All versions of HAProxy 
Ingress
haproxy_frontend_http_responses_total ClusterName, Namespace, Service, code, frontendAll versions of HAProxy 
Ingress
612Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
Metric name Dimensions Availability
haproxy_frontend_request_errors_total ClusterName, Namespace, ServiceAll versions of HAProxy 
Ingress
haproxy_frontend_requests_denied_total ClusterName, Namespace, ServiceAll versions of HAProxy 
Ingress
Note
The values of the code  dimension can be 1xx, 2xx, 3xx, 4xx, 5xx, or other .
The values of the backend  dimension can be:
•http-default-backend , http-shared-backend , or httpsback-shared-backend  for 
HAProxy Ingress version 0.0.27 or earlier.
•_default_backend  for HAProxy Ingress versions later than 0.0.27.
The values of the frontend  dimension can be:
•httpfront-default-backend , httpfront-shared-frontend , or httpfronts  for 
HAProxy Ingress version 0.0.27 or earlier.
•_front_http  or _front_https  for HAProxy Ingress versions later than 0.0.27.
Viewing your Prometheus metrics
You can monitor and alarm on all your Prometheus metrics including the curated pre-aggregated metrics 
from App Mesh, NGINX, Java/JMX, Memcached, and HAProxy, and any other manually conﬁgured 
Prometheus exporter you may have added. For more information about collecting metrics from other 
Prometheus exporters, see Tutorial for adding a new Prometheus scrape target: Prometheus API Server 
metrics  (p. 588).
In the CloudWatch console, Container Insights provides the following pre-built reports:
•For Amazon EKS and Kubernetes clusters, there are pre-built reports for App Mesh, NGINX, HAPROXY, 
Memcached, and Java/JMX.
•For Amazon ECS clusters, there are pre-built reports for App Mesh and Java/JMX.
Container Insights also provides custom dashboards for each of the workloads that Container Insights 
collects curated metrics from. You can download these dashboards from GitHub
To see all your Prometheus metrics
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. In the list of namespaces, choose ContainerInsights/Prometheus  or ECS/ContainerInsights/
Prometheus .
4. Choose one of the sets of dimensions in the following list. Then select the checkbox next to the 
metrics that you want to see.
To see pre-built reports on your Prometheus metrics
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Performance Monitoring.
613Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
3. In the drop-down box near the top of the page, choose any of the Prometheus options.
In the other drop-down box, choose a cluster to view
We have also provided custom dashboards for NGINX, App Mesh, Memcached, HAProxy, and Java/JMX.
To use a custom dashboard that Amazon has provided
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Dashboards .
3. Choose Create Dashboard . Enter a name for the new dashboard, and choose Create dashboard .
4. In Add to this dashboard , choose Cancel.
5. Choose Actions, View/edit source.
6. Download one of the following JSON ﬁles:
•NGINX custom dashboard source on Github.
•App Mesh custom dashboard source on Github.
•Memcached custom dashboard source on Github
•HAProxy-Ingress custom dashboard source on Github
•Java/JMX custom dashboard source on Github.
7. Open the JSON ﬁle that you downloaded with a text editor, and make the following changes:
•Replace all the {{YOUR_CLUSTER_NAME}}  strings with the exact name of your cluster. Make sure 
not to add whitespaces before or after the text.
•Replace all the {{YOUR_REGION}}  strings with the AWS Region where your cluster is running. For 
example, us-west-1  Make sure not to add whitespaces before or after the text.
•Replace all the {{YOUR_NAMESPACE}}  strings with the exact namespace of your workload.
•Replace all the {{YOUR_SERVICE_NAME}}  strings with the exact service name of your workload. 
For example, haproxy-haproxy-ingress-controller-metrics
8. Copy the entire JSON blob and paste it into the text box in the CloudWatch console, replacing what 
is already in the box.
9. Choose Update , Save dashboard.
Prometheus metrics troubleshooting
This section provides help for troubleshooting your Prometheus metrics setup.
Topics
•Prometheus metrics troubleshooting on Amazon ECS (p. 614)
•Prometheus metrics troubleshooting on Amazon EKS and Kubernetes clusters (p. 617)
Prometheus metrics troubleshooting on Amazon ECS
This section provides help for troubleshooting your Prometheus metrics setup on Amazon ECS clusters.
I don't see Prometheus metrics sent to CloudWatch Logs
The Prometheus metrics should be ingested as log events in the log group /aws/ecs/containerinsights/
cluster-name/Prometheus . If the log group is not created or the Prometheus metrics are not sent to the 
log group, you will need to ﬁrst check whether the Prometheus targets have been successfully discovered 
614Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
by the CloudWatch agent. And next check the security group and permission settings of the CloudWatch 
agent. The following steps guide you to do the debugging.
Step 1: Enable the CloudWatch agent debugging mode
First, change the CloudWatch agent to debug mode by adding the following bold lines to your AWS 
CloudFormation template ﬁle, cwagent-ecs-prometheus-metric-for-bridge-host.yaml  or
cwagent-ecs-prometheus-metric-for-awsvpc.yaml . Then save the ﬁle.
cwagentconfig.json: | 
     { 
      "agent": { 
        "debug": true 
      },
      "logs": { 
        "metrics_collected": {
Create a new AWS CloudFormation changeset against the existing stack. Set other parameters in the 
changeset to the same values as in your existing AWS CloudFormation stack. The following example is 
for a CloudWatch agent installed in an Amazon ECS cluster using the EC2 launch type and the bridge 
network mode.
ECS_NETWORK_MODE=bridge 
 CREATE_IAM_ROLES=True
ECS_TASK_ROLE_NAME= your_selected_ecs_task_role_name
ECS_EXECUTION_ROLE_NAME= your_selected_ecs_execution_role_name
NEW_CHANGESET_NAME= your_selected_ecs_execution_role_name
aws cloudformation create-change-set --stack-name CWAgent-Prometheus-ECS-
${ECS_CLUSTER_NAME}-EC2-${ECS_NETWORK_MODE} \ 
    --template-body file://cwagent-ecs-prometheus-metric-for-bridge-host.yaml \ 
    --parameters ParameterKey=ECSClusterName,ParameterValue=$ECS_CLUSTER_NAME \ 
                 ParameterKey=CreateIAMRoles,ParameterValue=$CREATE_IAM_ROLES \ 
                 ParameterKey=ECSNetworkMode,ParameterValue=$ECS_NETWORK_MODE \ 
                 ParameterKey=TaskRoleName,ParameterValue=$ECS_TASK_ROLE_NAME \ 
                 ParameterKey=ExecutionRoleName,ParameterValue=$ECS_EXECUTION_ROLE_NAME \ 
    --capabilities CAPABILITY_NAMED_IAM \ 
    --region $AWS_REGION \ 
    --change-set-name $NEW_CHANGESET_NAME
Go to the AWS CloudFormation console to review the new changeset, $NEW_CHANGESET_NAME . There 
should be one change applied to the CWAgentConﬁgSSMParameter resource. Execute the changeset 
and restart the CloudWatch agent task by entering the following commands.
aws ecs update-service --cluster $ECS_CLUSTER_NAME \
--desired-count 0 \
--service your_service_name_here  \
--region $AWS_REGION
Wait about 10 seconds and then enter the following command.
aws ecs update-service --cluster $ECS_CLUSTER_NAME \
--desired-count 1 \
--service your_service_name_here  \
--region $AWS_REGION
Step 2: Check the ECS service discovery logs
The ECS task deﬁnition of the CloudWatch agent enables the logs by default in the section below. The 
logs are sent to CloudWatch Logs in the log group /ecs/ecs-cwagent-prometheus.
615Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
LogConfiguration: 
  LogDriver: awslogs 
    Options: 
      awslogs-create-group: 'True' 
      awslogs-group: "/ecs/ecs-cwagent-prometheus" 
      awslogs-region: !Ref AWS::Region 
      awslogs-stream-prefix: !Sub 'ecs-${ECSLaunchType}-awsvpc'
Filter the logs by the string ECS_SD_Stats  to get the metrics related to the ECS service discovery, as 
shown in the following example.
2020-09-1T01:53:14Z D! ECS_SD_Stats: AWSCLI_DescribeContainerInstances: 1
2020-09-1T01:53:14Z D! ECS_SD_Stats: AWSCLI_DescribeInstancesRequest: 1
2020-09-1T01:53:14Z D! ECS_SD_Stats: AWSCLI_DescribeTaskDefinition: 2
2020-09-1T01:53:14Z D! ECS_SD_Stats: AWSCLI_DescribeTasks: 1
2020-09-1T01:53:14Z D! ECS_SD_Stats: AWSCLI_ListTasks: 1
2020-09-1T01:53:14Z D! ECS_SD_Stats: Exporter_DiscoveredTargetCount: 1
2020-09-1T01:53:14Z D! ECS_SD_Stats: LRUCache_Get_EC2MetaData: 1
2020-09-1T01:53:14Z D! ECS_SD_Stats: LRUCache_Get_TaskDefinition: 2
2020-09-1T01:53:14Z D! ECS_SD_Stats: LRUCache_Size_ContainerInstance: 1
2020-09-1T01:53:14Z D! ECS_SD_Stats: LRUCache_Size_TaskDefinition: 2
2020-09-1T01:53:14Z D! ECS_SD_Stats: Latency: 43.399783ms
The meaning of each metric for a particular ECS service discovery cycle is as follows:
•AWSCLI_DescribeContainerInstances – the number of ECS::DescribeContainerInstances  API 
calls made.
•AWSCLI_DescribeInstancesRequest – the number of ECS::DescribeInstancesRequest  API calls 
made.
•AWSCLI_DescribeTaskDeﬁnition – the number of ECS::DescribeTaskDefinition  API calls made.
•AWSCLI_DescribeTasks – the number of ECS::DescribeTasks  API calls made.
•AWSCLI_ListTasks – the number of ECS::ListTasks  API calls made.
•ExporterDiscoveredTargetCount – the number of Prometheus targets that were discovered and 
successfully exported into the target result ﬁle within the container.
•LRUCache_Get_EC2MetaData – the number of times that container instances metadata was retrieved 
from the cache.
•LRUCache_Get_TaskDeﬁnition – the number of times that ECS task deﬁnition metadata was retrieved 
from the cache.
•LRUCache_Size_ContainerInstance – the number of unique container instance's metadata cached in 
memory.
•LRUCache_Size_TaskDeﬁnition – the number of unique ECS task deﬁnitions cached in memory.
•Latency – how long the service discovery cycle takes.
Check the value of ExporterDiscoveredTargetCount  to see whether the discovered Prometheus 
targets match your expectations. If not, the possible reasons are as follows:
•The conﬁguration of ECS service discovery might not match your application's setting. For the 
docker label-based service discovery, your target containers may not have the necessary docker label 
conﬁgured in the CloudWatch agent to auto discover them. For the ECS task deﬁnition ARN regular 
expression-based service discovery, the regex setting in the CloudWatch agent may not match your 
application’s task deﬁnition.
•The CloudWatch agent’s ECS task role might not have permission to retrieve the metadata of ECS 
tasks. Check that the CloudWatch agent has been granted the following read-only permissions:
•ec2:DescribeInstances
616Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
•ecs:ListTasks
•ecs:DescribeContainerInstances
•ecs:DescribeTasks
•ecs:DescribeTaskDefinition
Step 3: Check the network connection and the ECS task role policy
If there are still no log events sent to the target CloudWatch Logs log group even though the value of
Exporter_DiscoveredTargetCount  indicates that there are discovered Prometheus targets, this 
could be caused by one of the following:
•The CloudWatch agent might not be able to connect to the Prometheus target ports. Check the 
security group setting behind the CloudWatch agent. The private IP should alow the CloudWatch agent 
to connect to the Prometheus exporter ports.
•The CloudWatch agent’s ECS task role might not have the CloudWatchAgentServerPolicy managed 
policy. The CloudWatch agent’s ECS task role needs to have this policy to be able to send the 
Prometheus metrics as log events. If you used the sample AWS CloudFormation template to create the 
IAM roles automatically, both the ECS task role and the ECS execution role are granted with the least 
privilege to perform the Prometheus monitoring.
Prometheus metrics troubleshooting on Amazon EKS and Kubernetes clusters
This section provides help for troubleshooting your Prometheus metrics setup on Amazon EKS and 
Kubernetes clusters.
General troubleshooting steps on Amazon EKS
To conﬁrm that the CloudWatch agent is running, enter the following command.
kubectl get pod -n amazon-cloudwatch
The output should include a row with cwagent-prometheus- id in the NAME column and Running  in 
the STATUS column.
To display details about the running pod, enter the following command. Replace pod-name  with the 
complete name of your pod that has a name that starts with cw-agent-prometheus .
kubectl describe pod pod-name  -n amazon-cloudwatch
If you have CloudWatch Container Insights installed, you can use CloudWatch Logs Insights to query the 
logs from the CloudWatch agent collecting the Prometheus metrics.
To query the application logs
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose CloudWatch Logs Insights.
3. Select the log group for the application logs, /aws/containerinsights/cluster-name /application
4. Replace the search query expression with the following query, and choose Run query
fields ispresent( kubernetes.pod_name ) as haskubernetes_pod_name, stream, 
 kubernetes.pod_name, log |  
filter haskubernetes_pod_name and kubernetes.pod_name  like /cwagent-prometheus
617Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
You can also conﬁrm that Prometheus metrics and metadata are being ingested as CloudWatch Logs 
events.
To conﬁrm that Prometheus data is being ingested
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose CloudWatch Logs Insights.
3. Select the /aws/containerinsights/cluster-name /prometheus
4. Replace the search query expression with the following query, and choose Run query
fields @timestamp, @message | sort @timestamp desc | limit 20
Logging dropped Prometheus metrics
This release does not collect Prometheus metrics of the histogram type. You can use the CloudWatch 
agent to check whether any Prometheus metrics are being dropped because they are histogram metrics. 
You can also log a list of the ﬁrst 500 Prometheus metrics that are dropped and not sent to CloudWatch 
because they are histogram metrics.
To see whether any metrics are being dropped, enter the following command:
kubectl logs -l "app=cwagent-prometheus" -n amazon-cloudwatch --tail=-1
If any metrics are being dropped, you will see the following lines in the /opt/aws/amazon-
cloudwatch-agent/logs/amazon-cloudwatch-agent.log  ﬁle.
I! Drop Prometheus metrics with unsupported types. Only Gauge, Counter and Summary are 
 supported.
I! Please enable CWAgent debug mode to view the first 500 dropped metrics 
If you see those lines and want to know what metrics are being dropped, use the following steps.
To log a list of dropped Prometheus metrics
1. Change the CloudWatch agent to debug mode by adding the following bold lines to your
prometheus-eks.yaml  or prometheus-k8s.yaml ﬁle, and save the ﬁle.
{ 
      "agent": { 
        "debug": true 
      },
This section of the ﬁle should then look like this:
cwagentconfig.json: | 
    { 
       "agent": { 
        "debug": true 
      },
      "logs": { 
        "metrics_collected": {
2. Reinstall the CloudWatch agent to enable debug mode by entering the following commands:
kubectl delete deployment cwagent-prometheus -n amazon-cloudwatch
618Amazon CloudWatch User Guide
Container Insights Prometheus metrics monitoring
kubectl apply -f prometheus.yaml
The dropped metrics are logged in the CloudWatch agent pod.
3. To retrieve the logs from the CloudWatch agent pod, enter the following command:
kubectl logs -l "app=cwagent-prometheus" -n amazon-cloudwatch --tail=-1
Or, if you have Container Insights Fluentd logging installed, the logs are also saved in the 
CloudWatch Logs log group /aws/containerinsights/cluster_name /application .
To query these logs, you can follow the steps for querying the application logs in General 
troubleshooting steps on Amazon EKS (p. 617).
Where are the Prometheus metrics ingested as CloudWatch Logs log events?
The CloudWatch agent creates a log stream for each Prometheus scrape job conﬁguration. For example, 
in the prometheus-eks.yaml  and prometheus-k8s.yaml  ﬁles, the line job_name: 'kubernetes-
pod-appmesh-envoy'  scrapes App Mesh metrics. The Prometheus target is deﬁned as kubernetes-
pod-appmesh-envoy . So all App Mesh Prometheus metrics are ingested as CloudWatch Logs events in 
the log stream kubernetes-pod-appmesh-envoy under the log group named /aws/containerinsights/
cluster-name/Prometheus .
I don't see Amazon EKS or Kubernetes Prometheus metrics in CloudWatch metrics
First, make sure that the Prometheus metrics are ingested as log events in the log group /aws/
containerinsights/cluster-name/Prometheus. Use the information in Where are the Prometheus 
metrics ingested as CloudWatch Logs log events? (p. 619) to help you check the target log stream. If 
the log stream is not created or there are no new log events in the log stream, check the following:
•Check that the Prometheus metrics exporter endpoints are set up correctly
•Check that the Prometheus scraping conﬁgurations in the config map: cwagent-prometheus
section of the CloudWatch agent YAML ﬁle is correct. The conﬁguration should be the same as it would 
be in a Prometheus conﬁguration ﬁle. For more information, see <scrape_conﬁg> in the Prometheus 
documentation.
If the Prometheus metrics are ingested as log events correctly, check that the embedded metric format 
settings are added into the log events to generate the CloudWatch metrics.
"CloudWatchMetrics":[ 
   { 
      "Metrics":[ 
         { 
            "Name":"envoy_http_downstream_cx_destroy_remote_active_rq" 
         } 
      ], 
      "Dimensions":[ 
         [ 
            "ClusterName", 
            "Namespace" 
         ] 
      ], 
      "Namespace":"ContainerInsights/Prometheus" 
   }
], 
For more information about embedded metric format, see Speciﬁcation: Embedded metric format
 (p. 986).
619Amazon CloudWatch User Guide
Integration with Application Insights
If there is no embedded metric format in the log events, check that the metric_declaration  section 
is conﬁgured correctly in the config map: prometheus-cwagentconfig  section of the CloudWatch 
agent installation YAML ﬁle. For more information, see Tutorial for adding a new Prometheus scrape 
target: Prometheus API Server metrics (p. 588).
Integration with Application Insights
Amazon CloudWatch Application Insights helps you monitor your applications and identiﬁes and sets 
up key metrics, logs, and alarms across your application resources and technology stack. For more 
information, see Amazon CloudWatch Application Insights (p. 668).
You can enable Application Insights to gather additional data from your containerized applications 
and microservices. If you haven't done this already, you can enable it by choosing Auto-conﬁgure 
Application Insights  below the performance view in the Container Insights dashboard.
If you have already set up CloudWatch Application Insights to monitor your containerized applications, 
the Application Insights dashboard appears below the Container Insights dashboard.
For more information about Application Insights and containerized applications, see Enable Application 
Insights for Amazon ECS and Amazon EKS resource monitoring (p. 688).
See Amazon ECS lifecycle events within Container 
Insights
You can view Amazon ECS lifecycle events within the Container Insights console. This helps you correlate 
your container metrics, logs, and events in a single view to give you a more complete operational 
visibility.
The events include container instance state change events, task state change events, and service action 
events. They are automatically sent by Amazon ECS to Amazon EventBridge and are also collected in 
CloudWatch in event log format. For more information about these events, see Amazon ECS events.
Lifecycle events don't incur extra costs. Standard Container Insights pricing applies. For more 
information, see Amazon CloudWatch Pricing.
To conﬁgure the table of lifecycle events and create rules for a cluster, you must have the
events:PutRule , events:PutTargets , and logs:CreateLogGroup  permissions.
To view the table of lifecycle events, you must have the events:DescribeRule ,
events:ListTargetsByRule , and logs:DescribeLogGroups  permissions.
To view Amazon ECS lifecycle events in the CloudWatch Container Insights console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. Choose Insights , Container Insights .
3. In the drop-down box near the top of the page, choose Performance monitoring.
4. In the next drop-down, choose either ECS Clusters, ECS Services, or ECS Tasks.
5. If you chose ECS Services or ECS Tasks in the previous step, choose the Lifecycle events tab.
6. At the bottom of the page, if you see Conﬁgure lifecycle events, choose it to create EventBridge 
rules for your cluster.
The events are displayed below the container insights panes and above the Application Insights 
section. To run extra analytics and create additional visualizations on these events, choose View in 
Logs Insights  in the Lifecycle Events table.
620Amazon CloudWatch User Guide
Troubleshooting Container Insights
Troubleshooting Container Insights
The following sections can help if you're having trouble issues with Container Insights.
Failed deployment on Amazon EKS or Kubernetes
If the agent doesn't deploy correctly on a Kubernetes cluster, try the following:
•Run the following command to get the list of pods.
kubectl get pods -n amazon-cloudwatch
•Run the following command and check the events at the bottom of the output.
kubectl describe pod pod-name  -n amazon-cloudwatch
•Run the following command to check the logs.
kubectl logs pod-name  -n amazon-cloudwatch
Unauthorized panic: Cannot retrieve cadvisor data from kubelet
If your deployment fails with the error Unauthorized panic: Cannot retrieve cadvisor data 
from kubelet , your kubelet might not have Webhook authorization mode enabled. This mode is 
required for Container Insights. For more information, see Verify prerequisites (p. 480).
Deploying Container Insights on a deleted and re-created cluster 
on Amazon ECS
If you delete an existing Amazon ECS cluster that does not have Container Insights enabled, and you re-
create it with the same name, you can't enable Container Insights on this new cluster at the time you re-
create it. You can enable it by re-creating it, and then entering the following command:
aws ecs update-cluster-settings --cluster myCICluster  --settings 
 name=containerInsights,value=enabled
Invalid endpoint error
If you see an error message similar to the following, check to make sure that you replaced all the 
placeholders such as cluster-name  and region-name  in the commands that you are using with the 
correct information for your deployment.
"log": "2020-04-02T08:36:16Z E! cloudwatchlogs: code: InvalidEndpointURL, message: 
 invalid endpoint uri, original error: &url.Error{Op:\"parse\", URL:\"https://logs.
{{region_name}}.amazonaws.com/\", Err:\"{\"}, &awserr.baseError{code:\"InvalidEndpointURL
\", message:\"invalid endpoint uri\", errs:[]error{(*url.Error)(0xc0008723c0)}}\n",
Metrics don't appear in the console
If you don't see any Container Insights metrics in the AWS Management Console, be sure that you have 
completed the setup of Container Insights. Metrics don't appear before Container Insights has been set 
up completely. For more information, see Setting up Container Insights (p. 466).
621Amazon CloudWatch User Guide
Troubleshooting Container Insights
Pod metrics missing on Amazon EKS or Kubernetes after 
upgrading cluster
This section might be useful if all or some pod metrics are missing after you deploy the CloudWatch 
agent as a daemonset on a new or upgraded cluster, or you see an error log with the message W! No 
pod metric collected .
These errors can be caused by changes in the container runtime, such as containerd or the docker 
systemd cgroup driver. You can usually solve this by updating your deployment manifest so that the 
containerd socket from the host is mounted into the container. See the following example:
# For full example see https://github.com/aws-samples/amazon-cloudwatch-container-insights/
blob/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-
monitoring/cwagent/cwagent-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata: 
  name: cloudwatch-agent 
  namespace: amazon-cloudwatch
spec: 
  template: 
    spec: 
      containers: 
        - name: cloudwatch-agent
# ... 
          # Don't change the mountPath 
          volumeMounts:
# ... 
            - name: dockersock 
              mountPath: /var/run/docker.sock 
              readOnly: true 
            - name: varlibdocker 
              mountPath: /var/lib/docker 
              readOnly: true 
            - name: containerdsock # NEW mount 
              mountPath: /run/containerd/containerd.sock 
              readOnly: true
# ... 
      volumes:
# ... 
        - name: dockersock 
          hostPath: 
            path: /var/run/docker.sock 
        - name: varlibdocker 
          hostPath: 
            path: /var/lib/docker 
        - name: containerdsock # NEW volume 
          hostPath: 
            path: /run/containerd/containerd.sock
No pod metrics when using Bottlerocket for Amazon EKS
Bottlerocket is a Linux-based open source operating system that is purpose-built by AWS for running 
containers.
Bottlerocket uses a diﬀerent containerd  path on the host, so you need to change the volumes to its 
location. If you don't, you see an error in the logs that includes W! No pod metric collected . See 
the following example.
volumes: 
622Amazon CloudWatch User Guide
Building your own CloudWatch agent Docker image
  # ...  
    - name: containerdsock 
      hostPath: 
        # path: /run/containerd/containerd.sock 
        # bottlerocket does not mount containerd sock at normal place 
        # https://github.com/bottlerocket-os/bottlerocket/
commit/91810c85b83ff4c3660b496e243ef8b55df0973b 
        path: /run/dockershim.sock
No container ﬁlesystem metrics when using the containerd 
runtime for Amazon EKS or Kubernetes
This is a known issue and is being worked on by community contributors. For more information, see Disk 
usage metric for containerd and container ﬁle system metrics is not supported by cadvisor for containerd
on GitHub.
Unexpected log volume increase from CloudWatch agent when 
collecting Prometheus metrics
This was a regression introduced in version 1.247347.6b250880 of the CloudWatch agent. This 
regression has already been ﬁxed in more recent versions of the agent. It's impact was limited to 
scenarios where customers collected the logs of the CloudWatch agent itself and were also using 
Prometheus. For more information, see [prometheus] agent is printing all the scraped metrics in log on 
GitHub.
Latest docker image mentioned in release notes not found from 
Dockerhub
We update the release note and tag on Github before we start the actual release internally. It usually 
takes 1-2 weeks to see the latest docker image on registries after we bump the version number on 
Github. There is no nightly release for the CloudWatch agent container image. You can build the image 
directly from source at the following location: https://github.com/aws/amazon-cloudwatch-agent/tree/ 
main/amazon-cloudwatch-container-insights/cloudwatch-agent-dockerﬁle
CrashLoopBackoﬀ error on the CloudWatch agent
If you see a CrashLoopBackOff  error for the CloudWatch agent, make sure that your IAM permissions 
are set correctly. For more information, see Verify prerequisites (p. 480).
CloudWatch agent or Fluentd pod stuck in pending
If you have a CloudWatch agent or Fluentd pod stuck in Pending  or with a FailedScheduling  error, 
determine if your nodes have enough compute resources based on the number of cores and amount of 
RAM required by the agents. Enter the following command to describe the pod:
kubectl describe pod cloudwatch-agent-85ppg -n amazon-cloudwatch
Building your own CloudWatch agent Docker image
You can build your own CloudWatch agent Docker image by referring to the Dockerﬁle located at 
https://github.com/aws-samples/amazon-cloudwatch-container-insights/blob/latest/cloudwatch-
agent-dockerﬁle/Dockerﬁle.
The Dockerﬁle supports building multi-architecture images directly using docker buildx .
623Amazon CloudWatch User Guide
Deploying other CloudWatch 
agent features in your containers
Deploying other CloudWatch agent features in your 
containers
You can deploy additional monitoring features in your containers using the CloudWatch agent. These 
features include the following:
•Embedded Metric Format— For more information, see Embedding metrics within logs  (p. 985).
•StatsD — For more information, see Retrieve custom metrics with StatsD  (p. 945).
Instructions and necessary ﬁles are located on GitHub at the following locations:
•For Amazon ECS containers, see  Example Amazon ECS task deﬁnitions based on deployment modes.
•For Amazon EKS and Kubernetes containers, see  Example Kubernetes YAML ﬁles based on deployment 
modes .
Using Lambda Insights
CloudWatch Lambda Insights is a monitoring and troubleshooting solution for serverless applications 
running on AWS Lambda. The solution collects, aggregates, and summarizes system-level metrics 
including CPU time, memory, disk, and network. It also collects, aggregates, and summarizes diagnostic 
information such as cold starts and Lambda worker shutdowns to help you isolate issues with your 
Lambda functions and resolve them quickly.
Lambda Insights uses a new CloudWatch Lambda extension, which is provided as a Lambda layer. When 
you install this extension on a Lambda function, it collects system-level metrics and emits a single 
performance log event for every invocation of that Lambda function. CloudWatch uses embedded metric 
formatting to extract metrics from the log events.
For more information about Lambda extensions, see  Using AWS Lambda extensions. For more 
information about embedded metric format, see Embedding metrics within logs  (p. 985).
You can use Lambda Insights with any Lambda function that uses a Lambda runtime that supports 
Lambda extensions. For a list of these runtimes, see  Lambda Extensions API.
Pricing
For each Lambda function enabled for Lambda Insights, you only pay for what you use for metrics and 
logs. For a pricing example, see Amazon CloudWatch Pricing.
You are charged for the execution time consumed by the Lambda extension, in 1ms increments. For more 
information about Lambda pricing, see AWS Lambda Pricing.
Getting started with Lambda Insights
To enable Lambda Insights on a Lambda function, you can use a one-click toggle in the Lambda console. 
Alternatively, you can use the AWS CLI, AWS CloudFormation, the AWS Serverless Application Model CLI, 
or the AWS Cloud Development Kit (AWS CDK).
The following sections provide detailed instructions for completing these steps.
Topics
•Available versions of the Lambda Insights extension (p. 625)
•Using the console to enable Lambda Insights on an existing Lambda function (p. 641)
624Amazon CloudWatch User Guide
Getting started with Lambda Insights
•Using the AWS CLI to enable Lambda Insights on an existing Lambda function (p. 641)
•Using the AWS SAM CLI to enable Lambda Insights on an existing Lambda function (p. 642)
•Using AWS CloudFormation to enable Lambda Insights on an existing Lambda function (p. 643)
•Using the AWS CDK to enable Lambda Insights on an existing Lambda function (p. 644)
•Using Serverless Framework to enable Lambda Insights on an existing Lambda function (p. 645)
•Enabling Lambda Insights on a Lambda container image deployment (p. 646)
Available versions of the Lambda Insights extension
This section lists the versions of the Lambda Insights extension, and the ARNs to use for these extensions 
in each AWS Region.
Topics
•x86-64 platforms (p. 625)
•ARM64 platforms (p. 637)
x86-64 platforms
This section lists the versions of the Lambda Insights extension for x84-64 platforms, and the ARNs to 
use for these extensions in each AWS Region.
1.0.229.0
Version 1.0.229.0 includes important bug ﬁxes for all compatible runtimes.
ARNs for version 1.0.229.0
The following table lists the ARNs to use for this version of the extension in each AWS Region where it is 
available.
Region ARN
US East (N. Virginia)arn:aws:lambda:us-
east-1:580247275435:layer:LambdaInsightsExtension:38
US East (Ohio) arn:aws:lambda:us-
east-2:580247275435:layer:LambdaInsightsExtension:38
US West (N. California)arn:aws:lambda:us-
west-1:580247275435:layer:LambdaInsightsExtension:38
US West (Oregon)arn:aws:lambda:us-
west-2:580247275435:layer:LambdaInsightsExtension:38
Africa (Cape Town)arn:aws:lambda:af-
south-1:012438385374:layer:LambdaInsightsExtension:28
Asia Paciﬁc (Hong 
Kong)arn:aws:lambda:ap-
east-1:519774774795:layer:LambdaInsightsExtension:28
Asia Paciﬁc (Hyderabad)arn:aws:lambda:ap-
south-2:891564319516:layer:LambdaInsightsExtension:10
Asia Paciﬁc (Jakarta)arn:aws:lambda:ap-
southeast-3:439286490199:layer:LambdaInsightsExtension:14
625Amazon CloudWatch User Guide
Getting started with Lambda Insights
Region ARN
Asia Paciﬁc (Mumbai)arn:aws:lambda:ap-
south-1:580247275435:layer:LambdaInsightsExtension:36
Asia Paciﬁc (Osaka)arn:aws:lambda:ap-
northeast-3:194566237122:layer:LambdaInsightsExtension:19
Asia Paciﬁc (Seoul)arn:aws:lambda:ap-
northeast-2:580247275435:layer:LambdaInsightsExtension:37
Asia Paciﬁc (Singapore)arn:aws:lambda:ap-
southeast-1:580247275435:layer:LambdaInsightsExtension:38
Asia Paciﬁc (Sydney)arn:aws:lambda:ap-
southeast-2:580247275435:layer:LambdaInsightsExtension:38
Asia Paciﬁc (Tokyo)arn:aws:lambda:ap-
northeast-1:580247275435:layer:LambdaInsightsExtension:60
Canada (Central) arn:aws:lambda:ca-
central-1:580247275435:layer:LambdaInsightsExtension:37
China (Beijing) arn:aws-cn:lambda:cn-
north-1:488211338238:layer:LambdaInsightsExtension:29
China (Ningxia); arn:aws-cn:lambda:cn-
northwest-1:488211338238:layer:LambdaInsightsExtension:29
Europe (Frankfurt)arn:aws:lambda:eu-
central-1:580247275435:layer:LambdaInsightsExtension:38
Europe (Ireland) arn:aws:lambda:eu-
west-1:580247275435:layer:LambdaInsightsExtension:38
Europe (London) arn:aws:lambda:eu-
west-2:580247275435:layer:LambdaInsightsExtension:38
Europe (Milan) arn:aws:lambda:eu-
south-1:339249233099:layer:LambdaInsightsExtension:28
Europe (Paris) arn:aws:lambda:eu-
west-3:580247275435:layer:LambdaInsightsExtension:37
Europe (Spain) arn:aws:lambda:eu-
south-2:352183217350:layer:LambdaInsightsExtension:12
Europe (Stockholm)arn:aws:lambda:eu-
north-1:580247275435:layer:LambdaInsightsExtension:35
Europe (Zurich) arn:aws:lambda:eu-
central-2:033019950311:layer:LambdaInsightsExtension:11
Middle East (Bahrain) arn:aws:lambda:me-
south-1:285320876703:layer:LambdaInsightsExtension:28
Middle East (UAE)arn:aws:lambda:me-
central-1:732604637566:layer:LambdaInsightsExtension:11
626Amazon CloudWatch User Guide
Getting started with Lambda Insights
Region ARN
South America (São 
Paulo)arn:aws:lambda:sa-
east-1:580247275435:layer:LambdaInsightsExtension:37
1.0.178.0
Version 1.0.178.0 adds support for the following AWS Regions.
•Asia Paciﬁc (Hyderabad)
•Asia Paciﬁc (Jakarta)
•Europe (Spain)
•Europe (Zurich)
•Middle East (UAE)
ARNs for version 1.0.178.0
The following table lists the ARNs to use for this version of the extension in each AWS Region where it is 
available.
Region ARN
US East (N. Virginia)arn:aws:lambda:us-
east-1:580247275435:layer:LambdaInsightsExtension:35
US East (Ohio) arn:aws:lambda:us-
east-2:580247275435:layer:LambdaInsightsExtension:33
US West (N. California)arn:aws:lambda:us-
west-1:580247275435:layer:LambdaInsightsExtension:33
US West (Oregon)arn:aws:lambda:us-
west-2:580247275435:layer:LambdaInsightsExtension:33
Africa (Cape Town)arn:aws:lambda:af-
south-1:012438385374:layer:LambdaInsightsExtension:25
Asia Paciﬁc (Hong 
Kong)arn:aws:lambda:ap-
east-1:519774774795:layer:LambdaInsightsExtension:25
Asia Paciﬁc (Hyderabad)arn:aws:lambda:ap-
south-2:891564319516:layer:LambdaInsightsExtension:8
Asia Paciﬁc (Jakarta)arn:aws:lambda:ap-
southeast-3:439286490199:layer:LambdaInsightsExtension:11
Asia Paciﬁc (Mumbai)arn:aws:lambda:ap-
south-1:580247275435:layer:LambdaInsightsExtension:31
Asia Paciﬁc (Osaka)arn:aws:lambda:ap-
northeast-3:194566237122:layer:LambdaInsightsExtension:2
Asia Paciﬁc (Seoul)arn:aws:lambda:ap-
northeast-2:580247275435:layer:LambdaInsightsExtension:32
627Amazon CloudWatch User Guide
Getting started with Lambda Insights
Region ARN
Asia Paciﬁc (Singapore)arn:aws:lambda:ap-
southeast-1:580247275435:layer:LambdaInsightsExtension:33
Asia Paciﬁc (Sydney)arn:aws:lambda:ap-
southeast-2:580247275435:layer:LambdaInsightsExtension:33
Asia Paciﬁc (Tokyo)arn:aws:lambda:ap-
northeast-1:580247275435:layer:LambdaInsightsExtension:50
Canada (Central) arn:aws:lambda:ca-
central-1:580247275435:layer:LambdaInsightsExtension:32
China (Beijing) arn:aws-cn:lambda:cn-
north-1:488211338238:layer:LambdaInsightsExtension:26
China (Ningxia); arn:aws-cn:lambda:cn-
northwest-1:488211338238:layer:LambdaInsightsExtension:26
Europe (Frankfurt)arn:aws:lambda:eu-
central-1:580247275435:layer:LambdaInsightsExtension:35
Europe (Ireland) arn:aws:lambda:eu-
west-1:580247275435:layer:LambdaInsightsExtension:33
Europe (London) arn:aws:lambda:eu-
west-2:580247275435:layer:LambdaInsightsExtension:33
Europe (Milan) arn:aws:lambda:eu-
south-1:339249233099:layer:LambdaInsightsExtension:25
Europe (Paris) arn:aws:lambda:eu-
west-3:580247275435:layer:LambdaInsightsExtension:32
Europe (Spain) arn:aws:lambda:eu-
south-2:352183217350:layer:LambdaInsightsExtension:10
Europe (Stockholm)arn:aws:lambda:eu-
north-1:580247275435:layer:LambdaInsightsExtension:30
Europe (Zurich) arn:aws:lambda:eu-
central-2:033019950311:layer:LambdaInsightsExtension:7
Middle East (Bahrain) arn:aws:lambda:me-
south-1:285320876703:layer:LambdaInsightsExtension:25
Middle East (UAE)arn:aws:lambda:me-
central-1:732604637566:layer:LambdaInsightsExtension:9
South America (São 
Paulo)arn:aws:lambda:sa-
east-1:580247275435:layer:LambdaInsightsExtension:32
1.0.143.0
Version 1.0.143.0 includes bug ﬁxes in compatibility with Python 3.7 and Go 1.x. The Python 3.6 Lambda 
runtime is being deprecated. For more information, see Lambda runtimes .
ARNs for version 1.0.143.0
628Amazon CloudWatch User Guide
Getting started with Lambda Insights
The following table lists the ARNs to use for this version of the extension in each AWS Region where it is 
available.
Region ARN
US East (N. Virginia)arn:aws:lambda:us-
east-1:580247275435:layer:LambdaInsightsExtension:21
US East (Ohio) arn:aws:lambda:us-
east-2:580247275435:layer:LambdaInsightsExtension:21
US West (N. California)arn:aws:lambda:us-
west-1:580247275435:layer:LambdaInsightsExtension:20
US West (Oregon)arn:aws:lambda:us-
west-2:580247275435:layer:LambdaInsightsExtension:21
Africa (Cape Town)arn:aws:lambda:af-
south-1:012438385374:layer:LambdaInsightsExtension:13
Asia Paciﬁc (Hong 
Kong)arn:aws:lambda:ap-
east-1:519774774795:layer:LambdaInsightsExtension:13
Asia Paciﬁc (Mumbai)arn:aws:lambda:ap-
south-1:580247275435:layer:LambdaInsightsExtension:21
Asia Paciﬁc (Osaka)arn:aws:lambda:ap-
northeast-3:194566237122:layer:LambdaInsightsExtension:2
Asia Paciﬁc (Seoul)arn:aws:lambda:ap-
northeast-2:580247275435:layer:LambdaInsightsExtension:20
Asia Paciﬁc (Singapore)arn:aws:lambda:ap-
southeast-1:580247275435:layer:LambdaInsightsExtension:21
Asia Paciﬁc (Sydney)arn:aws:lambda:ap-
southeast-2:580247275435:layer:LambdaInsightsExtension:21
Asia Paciﬁc (Tokyo)arn:aws:lambda:ap-
northeast-1:580247275435:layer:LambdaInsightsExtension:32
Canada (Central) arn:aws:lambda:ca-
central-1:580247275435:layer:LambdaInsightsExtension:20
China (Beijing) arn:aws-cn:lambda:cn-
north-1:488211338238:layer:LambdaInsightsExtension:14
China (Ningxia); arn:aws-cn:lambda:cn-
northwest-1:488211338238:layer:LambdaInsightsExtension:14
Europe (Frankfurt)arn:aws:lambda:eu-
central-1:580247275435:layer:LambdaInsightsExtension:21
Europe (Ireland) arn:aws:lambda:eu-
west-1:580247275435:layer:LambdaInsightsExtension:21
Europe (London) arn:aws:lambda:eu-
west-2:580247275435:layer:LambdaInsightsExtension:21
629Amazon CloudWatch User Guide
Getting started with Lambda Insights
Region ARN
Europe (Milan) arn:aws:lambda:eu-
south-1:339249233099:layer:LambdaInsightsExtension:13
Europe (Paris) arn:aws:lambda:eu-
west-3:580247275435:layer:LambdaInsightsExtension:20
Europe (Stockholm)arn:aws:lambda:eu-
north-1:580247275435:layer:LambdaInsightsExtension:20
Middle East (Bahrain) arn:aws:lambda:me-
south-1:285320876703:layer:LambdaInsightsExtension:13
South America (São 
Paulo)arn:aws:lambda:sa-
east-1:580247275435:layer:LambdaInsightsExtension:20
1.0.135.0
Version 1.0.135.0 includes bug ﬁxes for how Lambda Insights collects and reports disk and ﬁle descriptor 
usage. In previous versions of the extension, the tmp_free  metric reported the maximum free space in 
the /tmp directory while a function runs. This version changes the metric to report the minimum value 
instead, making it more useful when assessing disk usage. For more information about tmp directory 
storage quotas, see Lambda quotas .
Version 1.0.135.0 also now reports ﬁle descriptor usage (fd_use  and fd_max ) as the maximum value 
across processes rather than reporting the operating system level.
ARNs for version 1.0.135.0
The following table lists the ARNs to use for this version of the extension in each AWS Region where it is 
available.
Region ARN
US East (N. Virginia)arn:aws:lambda:us-
east-1:580247275435:layer:LambdaInsightsExtension:18
US East (Ohio) arn:aws:lambda:us-
east-2:580247275435:layer:LambdaInsightsExtension:18
US West (N. California)arn:aws:lambda:us-
west-1:580247275435:layer:LambdaInsightsExtension:18
US West (Oregon)arn:aws:lambda:us-
west-2:580247275435:layer:LambdaInsightsExtension:18
Africa (Cape Town)arn:aws:lambda:af-
south-1:012438385374:layer:LambdaInsightsExtension:11
Asia Paciﬁc (Hong 
Kong)arn:aws:lambda:ap-
east-1:519774774795:layer:LambdaInsightsExtension:11
Asia Paciﬁc (Mumbai)arn:aws:lambda:ap-
south-1:580247275435:layer:LambdaInsightsExtension:18
Asia Paciﬁc (Osaka)arn:aws:lambda:ap-
northeast-3:194566237122:layer:LambdaInsightsExtension:1
630Amazon CloudWatch User Guide
Getting started with Lambda Insights
Region ARN
Asia Paciﬁc (Seoul)arn:aws:lambda:ap-
northeast-2:580247275435:layer:LambdaInsightsExtension:18
Asia Paciﬁc (Singapore)arn:aws:lambda:ap-
southeast-1:580247275435:layer:LambdaInsightsExtension:18
Asia Paciﬁc (Sydney)arn:aws:lambda:ap-
southeast-2:580247275435:layer:LambdaInsightsExtension:18
Asia Paciﬁc (Tokyo)arn:aws:lambda:ap-
northeast-1:580247275435:layer:LambdaInsightsExtension:25
Canada (Central) arn:aws:lambda:ca-
central-1:580247275435:layer:LambdaInsightsExtension:18
China (Beijing) arn:aws-cn:lambda:cn-
north-1:488211338238:layer:LambdaInsightsExtension:11
China (Ningxia); arn:aws-cn:lambda:cn-
northwest-1:488211338238:layer:LambdaInsightsExtension:11
Europe (Frankfurt)arn:aws:lambda:eu-
central-1:580247275435:layer:LambdaInsightsExtension:18
Europe (Ireland) arn:aws:lambda:eu-
west-1:580247275435:layer:LambdaInsightsExtension:18
Europe (London) arn:aws:lambda:eu-
west-2:580247275435:layer:LambdaInsightsExtension:18
Europe (Milan) arn:aws:lambda:eu-
south-1:339249233099:layer:LambdaInsightsExtension:11
Europe (Paris) arn:aws:lambda:eu-
west-3:580247275435:layer:LambdaInsightsExtension:18
Europe (Stockholm)arn:aws:lambda:eu-
north-1:580247275435:layer:LambdaInsightsExtension:18
Middle East (Bahrain) arn:aws:lambda:me-
south-1:285320876703:layer:LambdaInsightsExtension:11
South America (São 
Paulo)arn:aws:lambda:sa-
east-1:580247275435:layer:LambdaInsightsExtension:18
1.0.119.0
ARNs for version 1.0.119.0
The following table lists the ARNs to use for this version of the extension in each AWS Region where it is 
available.
Region ARN
US East (N. Virginia)arn:aws:lambda:us-
east-1:580247275435:layer:LambdaInsightsExtension:16
631Amazon CloudWatch User Guide
Getting started with Lambda Insights
Region ARN
US East (Ohio) arn:aws:lambda:us-
east-2:580247275435:layer:LambdaInsightsExtension:16
US West (N. California)arn:aws:lambda:us-
west-1:580247275435:layer:LambdaInsightsExtension:16
US West (Oregon)arn:aws:lambda:us-
west-2:580247275435:layer:LambdaInsightsExtension:16
Africa (Cape Town)arn:aws:lambda:af-
south-1:012438385374:layer:LambdaInsightsExtension:9
Asia Paciﬁc (Hong 
Kong)arn:aws:lambda:ap-
east-1:519774774795:layer:LambdaInsightsExtension:9
Asia Paciﬁc (Mumbai)arn:aws:lambda:ap-
south-1:580247275435:layer:LambdaInsightsExtension:16
Asia Paciﬁc (Seoul)arn:aws:lambda:ap-
northeast-2:580247275435:layer:LambdaInsightsExtension:16
Asia Paciﬁc (Singapore)arn:aws:lambda:ap-
southeast-1:580247275435:layer:LambdaInsightsExtension:16
Asia Paciﬁc (Sydney)arn:aws:lambda:ap-
southeast-2:580247275435:layer:LambdaInsightsExtension:16
Asia Paciﬁc (Tokyo)arn:aws:lambda:ap-
northeast-1:580247275435:layer:LambdaInsightsExtension:23
Canada (Central) arn:aws:lambda:ca-
central-1:580247275435:layer:LambdaInsightsExtension:16
China (Beijing) arn:aws-cn:lambda:cn-
north-1:488211338238:layer:LambdaInsightsExtension:9
China (Ningxia); arn:aws-cn:lambda:cn-
northwest-1:488211338238:layer:LambdaInsightsExtension:9
Europe (Frankfurt)arn:aws:lambda:eu-
central-1:580247275435:layer:LambdaInsightsExtension:16
Europe (Ireland) arn:aws:lambda:eu-
west-1:580247275435:layer:LambdaInsightsExtension:16
Europe (London) arn:aws:lambda:eu-
west-2:580247275435:layer:LambdaInsightsExtension:16
Europe (Milan) arn:aws:lambda:eu-
south-1:339249233099:layer:LambdaInsightsExtension:9
Europe (Paris) arn:aws:lambda:eu-
west-3:580247275435:layer:LambdaInsightsExtension:16
Europe (Stockholm)arn:aws:lambda:eu-
north-1:580247275435:layer:LambdaInsightsExtension:16
632Amazon CloudWatch User Guide
Getting started with Lambda Insights
Region ARN
Middle East (Bahrain) arn:aws:lambda:me-
south-1:285320876703:layer:LambdaInsightsExtension:9
South America (São 
Paulo)arn:aws:lambda:sa-
east-1:580247275435:layer:LambdaInsightsExtension:16
1.0.98.0
This version removes unnecessary logging and also addresses an issue with the AWS Serverless 
Application Model CLI local invokes. For more information about this issue, see  Adding 
LambdaInsightsExtension results in timeout with 'sam local invoke'.
ARNs for version 1.0.98.0
The following table lists the ARNs to use for this version of the extension in each AWS Region where it is 
available.
Region ARN
US East (N. Virginia)arn:aws:lambda:us-
east-1:580247275435:layer:LambdaInsightsExtension:14
US East (Ohio) arn:aws:lambda:us-
east-2:580247275435:layer:LambdaInsightsExtension:14
US West (N. California)arn:aws:lambda:us-
west-1:580247275435:layer:LambdaInsightsExtension:14
US West (Oregon)arn:aws:lambda:us-
west-2:580247275435:layer:LambdaInsightsExtension:14
Africa (Cape Town)arn:aws:lambda:af-
south-1:012438385374:layer:LambdaInsightsExtension:8
Asia Paciﬁc (Hong 
Kong)arn:aws:lambda:ap-
east-1:519774774795:layer:LambdaInsightsExtension:8
Asia Paciﬁc (Mumbai)arn:aws:lambda:ap-
south-1:580247275435:layer:LambdaInsightsExtension:14
Asia Paciﬁc (Seoul)arn:aws:lambda:ap-
northeast-2:580247275435:layer:LambdaInsightsExtension:14
Asia Paciﬁc (Singapore)arn:aws:lambda:ap-
southeast-1:580247275435:layer:LambdaInsightsExtension:14
Asia Paciﬁc (Sydney)arn:aws:lambda:ap-
southeast-2:580247275435:layer:LambdaInsightsExtension:14
Asia Paciﬁc (Tokyo)arn:aws:lambda:ap-
northeast-1:580247275435:layer:LambdaInsightsExtension:14
Canada (Central) arn:aws:lambda:ca-
central-1:580247275435:layer:LambdaInsightsExtension:14
China (Beijing) arn:aws-cn:lambda:cn-
north-1:488211338238:layer:LambdaInsightsExtension:8
633Amazon CloudWatch User Guide
Getting started with Lambda Insights
Region ARN
China (Ningxia); arn:aws-cn:lambda:cn-
northwest-1:488211338238:layer:LambdaInsightsExtension:8
Europe (Frankfurt)arn:aws:lambda:eu-
central-1:580247275435:layer:LambdaInsightsExtension:14
Europe (Ireland) arn:aws:lambda:eu-
west-1:580247275435:layer:LambdaInsightsExtension:14
Europe (London) arn:aws:lambda:eu-
west-2:580247275435:layer:LambdaInsightsExtension:14
Europe (Milan) arn:aws:lambda:eu-
south-1:339249233099:layer:LambdaInsightsExtension:8
Europe (Paris) arn:aws:lambda:eu-
west-3:580247275435:layer:LambdaInsightsExtension:14
Europe (Stockholm)arn:aws:lambda:eu-
north-1:580247275435:layer:LambdaInsightsExtension:14
Middle East (Bahrain) arn:aws:lambda:me-
south-1:285320876703:layer:LambdaInsightsExtension:8
South America (São 
Paulo)arn:aws:lambda:sa-
east-1:580247275435:layer:LambdaInsightsExtension:14
1.0.89.0
This version corrects the performance event timestamp to always represent the start of the invocation of 
the function.
ARNs for version 1.0.89.0
The following table lists the ARNs to use for this version of the extension in each AWS Region where it is 
available.
Region ARN
US East (N. Virginia)arn:aws:lambda:us-
east-1:580247275435:layer:LambdaInsightsExtension:12
US East (Ohio) arn:aws:lambda:us-
east-2:580247275435:layer:LambdaInsightsExtension:12
US West (N. California)arn:aws:lambda:us-
west-1:580247275435:layer:LambdaInsightsExtension:12
US West (Oregon)arn:aws:lambda:us-
west-2:580247275435:layer:LambdaInsightsExtension:12
Asia Paciﬁc (Mumbai)arn:aws:lambda:ap-
south-1:580247275435:layer:LambdaInsightsExtension:12
Asia Paciﬁc (Seoul)arn:aws:lambda:ap-
northeast-2:580247275435:layer:LambdaInsightsExtension:12
634Amazon CloudWatch User Guide
Getting started with Lambda Insights
Region ARN
Asia Paciﬁc (Singapore)arn:aws:lambda:ap-
southeast-1:580247275435:layer:LambdaInsightsExtension:12
Asia Paciﬁc (Sydney)arn:aws:lambda:ap-
southeast-2:580247275435:layer:LambdaInsightsExtension:12
Asia Paciﬁc (Tokyo)arn:aws:lambda:ap-
northeast-1:580247275435:layer:LambdaInsightsExtension:12
Canada (Central) arn:aws:lambda:ca-
central-1:580247275435:layer:LambdaInsightsExtension:12
Europe (Frankfurt)arn:aws:lambda:eu-
central-1:580247275435:layer:LambdaInsightsExtension:12
Europe (Ireland) arn:aws:lambda:eu-
west-1:580247275435:layer:LambdaInsightsExtension:12
Europe (London) arn:aws:lambda:eu-
west-2:580247275435:layer:LambdaInsightsExtension:12
Europe (Paris) arn:aws:lambda:eu-
west-3:580247275435:layer:LambdaInsightsExtension:12
Europe (Stockholm)arn:aws:lambda:eu-
north-1:580247275435:layer:LambdaInsightsExtension:12
South America (São 
Paulo)arn:aws:lambda:sa-
east-1:580247275435:layer:LambdaInsightsExtension:12
1.0.86.0
With version 1.0.54.0 of the extension, memory metrics were sometimes reported incorrectly and 
sometimes were higher than 100%. Version 1.0.86.0 corrects the memory measurement issue by using 
the same event data as Lambda platform metrics. This means that you may see a dramatic change in 
the recorded memory metric values. This is achieved by using the new Lambda Logs API. This provides 
a more accurate measurement of Lambda sandbox memory usage. However, something to be aware of 
is that the Lambda Logs API can't deliver platform report events if a function sandbox times out and is 
subsequently spun down. In this case. Lambda Insights is unable to record the invocation metrics. For 
more information about Lambda Logs API, see AWS Lambda Logs API.
New features in version 1.0.86.0
•Uses the Lambda Logs API to correct the memory metric. This solves the previous issue where memory 
statistics were greater than 100%.
•Introduces Init Duration  as a new CloudWatch metric.
•Uses the invocation ARN to add a version dimension for aliases and invoked versions. If you are using 
Lambda aliases or versions to achieve incremental deployments (such as blue-green deployments), you 
can view your metrics based on the invoked alias. The version dimension is not applied if the function 
doesn't use an alias or version. For more information, see  Lambda function aliases.
•Adds a billed_mb_ms field  to the performance events to display the cost per invoke. This does not 
consider any cost associated with provisioned concurrency.
•Adds billed_duration  and duration  ﬁelds to the performance events.
635Amazon CloudWatch User Guide
Getting started with Lambda Insights
ARNs for version 1.0.86.0
The following table lists the ARNs to use for this version of the extension in each AWS Region where it is 
available.
Region ARN
US East (N. Virginia)arn:aws:lambda:us-
east-1:580247275435:layer:LambdaInsightsExtension:11
US East (Ohio) arn:aws:lambda:us-
east-2:580247275435:layer:LambdaInsightsExtension:11
US West (N. California)arn:aws:lambda:us-
west-1:580247275435:layer:LambdaInsightsExtension:11
US West (Oregon)arn:aws:lambda:us-
west-2:580247275435:layer:LambdaInsightsExtension:11
Asia Paciﬁc (Mumbai)arn:aws:lambda:ap-
south-1:580247275435:layer:LambdaInsightsExtension:11
Asia Paciﬁc (Seoul)arn:aws:lambda:ap-
northeast-2:580247275435:layer:LambdaInsightsExtension:11
Asia Paciﬁc (Singapore)arn:aws:lambda:ap-
southeast-1:580247275435:layer:LambdaInsightsExtension:11
Asia Paciﬁc (Sydney)arn:aws:lambda:ap-
southeast-2:580247275435:layer:LambdaInsightsExtension:11
Asia Paciﬁc (Tokyo)arn:aws:lambda:ap-
northeast-1:580247275435:layer:LambdaInsightsExtension:11
Canada (Central) arn:aws:lambda:ca-
central-1:580247275435:layer:LambdaInsightsExtension:11
Europe (Frankfurt)arn:aws:lambda:eu-
central-1:580247275435:layer:LambdaInsightsExtension:11
Europe (Ireland) arn:aws:lambda:eu-
west-1:580247275435:layer:LambdaInsightsExtension:11
Europe (London) arn:aws:lambda:eu-
west-2:580247275435:layer:LambdaInsightsExtension:11
Europe (Paris) arn:aws:lambda:eu-
west-3:580247275435:layer:LambdaInsightsExtension:11
Europe (Stockholm)arn:aws:lambda:eu-
north-1:580247275435:layer:LambdaInsightsExtension:11
South America (São 
Paulo)arn:aws:lambda:sa-
east-1:580247275435:layer:LambdaInsightsExtension:11
1.0.54.0
Version 1.0.54.0 was the initial release of the Lambda Insights extension.
636Amazon CloudWatch User Guide
Getting started with Lambda Insights
ARNs for version 1.0.54.0
The following table lists the ARNs to use for this version of the extension in each AWS Region where it is 
available.
Region ARN
US East (N. Virginia)arn:aws:lambda:us-
east-1:580247275435:layer:LambdaInsightsExtension:2
US East (Ohio) arn:aws:lambda:us-
east-2:580247275435:layer:LambdaInsightsExtension:2
US West (N. California)arn:aws:lambda:us-
west-1:580247275435:layer:LambdaInsightsExtension:2
US West (Oregon)arn:aws:lambda:us-
west-2:580247275435:layer:LambdaInsightsExtension:2
Asia Paciﬁc (Mumbai)arn:aws:lambda:ap-
south-1:580247275435:layer:LambdaInsightsExtension:2
Asia Paciﬁc (Seoul)arn:aws:lambda:ap-
northeast-2:580247275435:layer:LambdaInsightsExtension:2
Asia Paciﬁc (Singapore)arn:aws:lambda:ap-
southeast-1:580247275435:layer:LambdaInsightsExtension:2
Asia Paciﬁc (Sydney)arn:aws:lambda:ap-
southeast-2:580247275435:layer:LambdaInsightsExtension:2
Asia Paciﬁc (Tokyo)arn:aws:lambda:ap-
northeast-1:580247275435:layer:LambdaInsightsExtension:2
Canada (Central) arn:aws:lambda:ca-
central-1:580247275435:layer:LambdaInsightsExtension:2
Europe (Frankfurt)arn:aws:lambda:eu-
central-1:580247275435:layer:LambdaInsightsExtension:2
Europe (Ireland) arn:aws:lambda:eu-
west-1:580247275435:layer:LambdaInsightsExtension:2
Europe (London) arn:aws:lambda:eu-
west-2:580247275435:layer:LambdaInsightsExtension:2
Europe (Paris) arn:aws:lambda:eu-
west-3:580247275435:layer:LambdaInsightsExtension:2
Europe (Stockholm)arn:aws:lambda:eu-
north-1:580247275435:layer:LambdaInsightsExtension:2
South America (São 
Paulo)arn:aws:lambda:sa-
east-1:580247275435:layer:LambdaInsightsExtension:2
ARM64 platforms
This section lists the versions of the Lambda Insights extension for ARM64 platforms, and the ARNs to 
use for these extensions in each AWS Region.
637Amazon CloudWatch User Guide
Getting started with Lambda Insights
1.0.229.0
Version 1.0.229.0 includes bug ﬁxes for all compatible runtimes. It also adds support for the following 
Regions:
•US West (N. California)
•Africa (Cape Town)
•Asia Paciﬁc (Hong Kong)
•Asia Paciﬁc (Jakarta)
•Asia Paciﬁc (Osaka)
•Asia Paciﬁc (Seoul)
•Canada (Central)
•Europe (Milan)
•Europe (Paris)
•Europe (Stockholm)
•Middle East (Bahrain)
•South America (São Paulo)
Region ARN
US East (N. Virginia)arn:aws:lambda:us-
east-1:580247275435:layer:LambdaInsightsExtension-Arm64:5
US East (Ohio) arn:aws:lambda:us-
east-2:580247275435:layer:LambdaInsightsExtension-Arm64:7
US West (N. California)arn:aws:lambda:us-
west-1:580247275435:layer:LambdaInsightsExtension-Arm64:3
US West (Oregon)arn:aws:lambda:us-
west-2:580247275435:layer:LambdaInsightsExtension-Arm64:5
Africa (Cape Town)arn:aws:lambda:af-
south-1:012438385374:layer:LambdaInsightsExtension-
Arm64:2
Asia Paciﬁc (Hong 
Kong)arn:aws:lambda:ap-
east-1:519774774795:layer:LambdaInsightsExtension-Arm64:2
Asia Paciﬁc (Jakarta)arn:aws:lambda:ap-
southeast-3:439286490199:layer:LambdaInsightsExtension-
Arm64:2
Asia Paciﬁc (Mumbai)arn:aws:lambda:ap-
south-1:580247275435:layer:LambdaInsightsExtension-
Arm64:7
Asia Paciﬁc (Osaka)arn:aws:lambda:ap-
northeast-3:194566237122:layer:LambdaInsightsExtension-
Arm64:2
Asia Paciﬁc (Seoul)arn:aws:lambda:ap-
northeast-2:580247275435:layer:LambdaInsightsExtension-
Arm64:4
638Amazon CloudWatch User Guide
Getting started with Lambda Insights
Region ARN
Asia Paciﬁc (Singapore)arn:aws:lambda:ap-
southeast-1:580247275435:layer:LambdaInsightsExtension-
Arm64:5
Asia Paciﬁc (Sydney)arn:aws:lambda:ap-
southeast-2:580247275435:layer:LambdaInsightsExtension-
Arm64:5
Asia Paciﬁc (Tokyo)arn:aws:lambda:ap-
northeast-1:580247275435:layer:LambdaInsightsExtension-
Arm64:11
Canada (Central) arn:aws:lambda:ca-
central-1:580247275435:layer:LambdaInsightsExtension-
Arm64:3
Europe (Frankfurt)arn:aws:lambda:eu-
central-1:580247275435:layer:LambdaInsightsExtension-
Arm64:5
Europe (Ireland) arn:aws:lambda:eu-
west-1:580247275435:layer:LambdaInsightsExtension-Arm64:5
Europe (London) arn:aws:lambda:eu-
west-2:580247275435:layer:LambdaInsightsExtension-Arm64:5
Europe (Spain) arn:aws:lambda:eu-
south-1:339249233099:layer:LambdaInsightsExtension-
Arm64:2
Europe (Paris) arn:aws:lambda:eu-
west-3:580247275435:layer:LambdaInsightsExtension-Arm64:3
Europe (Stockholm)arn:aws:lambda:eu-
north-1:580247275435:layer:LambdaInsightsExtension-
Arm64:3
Middle East (Bahrain) arn:aws:lambda:me-
south-1:285320876703:layer:LambdaInsightsExtension-
Arm64:2
South America (São 
Paulo)arn:aws:lambda:sa-
east-1:580247275435:layer:LambdaInsightsExtension-Arm64:3
1.0.135.0
Version 1.0.135.0 includes bug ﬁxes for how Lambda Insights collects and reports disk and ﬁle descriptor 
usage. In previous versions of the extension, the tmp_free  metric reported the maximum free space in 
the /tmp directory while a function runs. This version changes the metric to report the minimum value 
instead, making it more useful when assessing disk usage. For more information about tmp directory 
storage quotas, see Lambda quotas .
Version 1.0.135.0 also now reports ﬁle descriptor usage (fd_use  and fd_max ) as the maximum value 
across processes rather than reporting the operating system level.
639Amazon CloudWatch User Guide
Getting started with Lambda Insights
Region ARN
US East (N. Virginia)arn:aws:lambda:us-
east-1:580247275435:layer:LambdaInsightsExtension-Arm64:2
US East (Ohio) arn:aws:lambda:us-
east-2:580247275435:layer:LambdaInsightsExtension-Arm64:2
US West (Oregon)arn:aws:lambda:us-
west-2:580247275435:layer:LambdaInsightsExtension-Arm64:2
Asia Paciﬁc (Mumbai)arn:aws:lambda:ap-
south-1:580247275435:layer:LambdaInsightsExtension-
Arm64:2
Asia Paciﬁc (Singapore)arn:aws:lambda:ap-
southeast-1:580247275435:layer:LambdaInsightsExtension-
Arm64:2
Asia Paciﬁc (Sydney)arn:aws:lambda:ap-
southeast-2:580247275435:layer:LambdaInsightsExtension-
Arm64:2
Asia Paciﬁc (Tokyo)arn:aws:lambda:ap-
northeast-1:580247275435:layer:LambdaInsightsExtension-
Arm64:2
Europe (Frankfurt)arn:aws:lambda:eu-
central-1:580247275435:layer:LambdaInsightsExtension-
Arm64:2
Europe (Ireland) arn:aws:lambda:eu-
west-1:580247275435:layer:LambdaInsightsExtension-Arm64:2
Europe (London) arn:aws:lambda:eu-
west-2:580247275435:layer:LambdaInsightsExtension-Arm64:2
1.0.119.0
Region ARN
US East (N. Virginia)arn:aws:lambda:us-
east-1:580247275435:layer:LambdaInsightsExtension-Arm64:1
US East (Ohio) arn:aws:lambda:us-
east-2:580247275435:layer:LambdaInsightsExtension-Arm64:1
US West (Oregon)arn:aws:lambda:us-
west-2:580247275435:layer:LambdaInsightsExtension-Arm64:1
Asia Paciﬁc (Mumbai)arn:aws:lambda:ap-
south-1:580247275435:layer:LambdaInsightsExtension-
Arm64:1
Asia Paciﬁc (Singapore)arn:aws:lambda:ap-
southeast-1:580247275435:layer:LambdaInsightsExtension-
Arm64:1
640Amazon CloudWatch User Guide
Getting started with Lambda Insights
Region ARN
Asia Paciﬁc (Sydney)arn:aws:lambda:ap-
southeast-2:580247275435:layer:LambdaInsightsExtension-
Arm64:1
Asia Paciﬁc (Tokyo)arn:aws:lambda:ap-
northeast-1:580247275435:layer:LambdaInsightsExtension-
Arm64:1
Europe (Frankfurt)arn:aws:lambda:eu-
central-1:580247275435:layer:LambdaInsightsExtension-
Arm64:1
Europe (Ireland) arn:aws:lambda:eu-
west-1:580247275435:layer:LambdaInsightsExtension-Arm64:1
Europe (London) arn:aws:lambda:eu-
west-2:580247275435:layer:LambdaInsightsExtension-Arm64:1
Using the console to enable Lambda Insights on an existing 
Lambda function
Use the following steps in the Lambda Console to enable Lambda Insights on an existing Lambda 
function.
To enable Lambda Insights on a Lambda function
1. Open the AWS Lambda console at https://console.aws.amazon.com/lambda/.
2. Choose the name of a function, and then select the Conﬁguration  tab on the following screen.
After you choose the name of a function, you're directed to a screen that contains an overview of the 
function.
3. Under the Conﬁguration  tab, choose Monitoring tools  in the left navigation menu, and then choose
Edit.
You're directed to a screen where you can edit monitoring tools.
4. Under the section CloudWatch Lambda Insights, enable Enhanced monitoring, and then choose
Save.
Using the AWS CLI to enable Lambda Insights on an existing 
Lambda function
Follow these steps to use the AWS CLI to enable Lambda Insights on an existing Lambda function.
Step 1: Update function permissions
To update the function's permissions
• Attach the CloudWatchLambdaInsightsExecutionRolePolicy managed IAM policy to the function's 
execution role by entering the following command.
aws iam attach-role-policy \
--role-name function-execution-role  \
641Amazon CloudWatch User Guide
Getting started with Lambda Insights
--policy-arn "arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy"
Step 2: Install the Lambda extension
Install the Lambda extension by entering the following command. Replace the ARN value for the layers
parameter with the ARN matching your Region and the extension version that you want to use. For more 
information, see Available versions of the Lambda Insights extension (p. 625).
aws lambda update-function-configuration \ 
   --function-name function-name  \ 
   --layers "arn:aws:lambda:us-west-1:580247275435:layer:LambdaInsightsExtension:14"
Step 3: Enable the CloudWatch Logs VPC endpoint
This step is necessary only for functions running in a private subnet with no internet access, and if you 
have not already conﬁgured a CloudWatch Logs virtual private cloud (VPC) endpoint.
If you need to do this step, enter the following command, replacing the placeholders with information 
for your VPC.
For more information, see  Using CloudWatch Logs with Interface VPC Endpoints.
aws ec2 create-vpc-endpoint \
--vpc-id vpcId \
--vpc-endpoint-type Interface \
--service-name com.amazonaws. region.logs \
--subnet-id subnetId  
--security-group-id securitygroupId
Using the AWS SAM CLI to enable Lambda Insights on an 
existing Lambda function
Follow these steps to use the AWS SAM AWS CLI to enable Lambda Insights on an existing Lambda 
function.
If you don't already have the latest version of the AWS SAM CLI installed, you must ﬁrst install or 
upgrade it. For more information, see  Installing the AWS SAM CLI.
Step 1: Install the layer
To make the Lambda Insights extension available to all of your Lambda functions, add a Layers
property to the Globals section of your SAM template with the ARN of the Lambda Insights layer. The 
example below uses the layer for the initial release of Lambda Insights. For the latest release version of 
the Lambda Insights extension layer, see Available versions of the Lambda Insights extension (p. 625).
Globals: 
  Function: 
    Layers: 
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
To enable this layer for only a single function, add the Layers property to the function as shown in this 
example.
Resources: 
  MyFunction: 
    Type: AWS::Serverless::Function 
    Properties: 
642Amazon CloudWatch User Guide
Getting started with Lambda Insights
      Layers: 
        - !Sub "arn:aws:lambda:
${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
Step 2: Add the managed policy
For each function, add the CloudWatchLambdaInsightsExecutionRolePolicy IAM policy.
AWS SAM doesn't support global policies, so you must enable those on each function individually, as 
shown in this example. For more information about globals, see  Globals Section.
Resources: 
  MyFunction: 
    Type: AWS::Serverless::Function 
    Properties: 
      Policies: 
        - CloudWatchLambdaInsightsExecutionRolePolicy
Invoking locally
The AWS SAM CLI supports Lambda extensions. However, every locally executed invocation resets the 
runtime environment. Lambda Insights data won’t be available from local invocations because the 
runtime is restarted without a shutdown event. For more information, see  Release 1.6.0 - Add support 
for local testing of AWS Lambda extensions.
Troubleshooting
To troubleshoot your Lambda Insights installation, add the following environment variable to your 
Lambda function to enable debug logging.
Resources: 
  MyFunction: 
    Type: AWS::Serverless::Function 
    Properties: 
      Environment: 
        Variables: 
          LAMBDA_INSIGHTS_LOG_LEVEL: info
Using AWS CloudFormation to enable Lambda Insights on an 
existing Lambda function
Follow these steps to use AWS CloudFormation to enable Lambda Insights on an existing Lambda 
function.
Step 1: Install the layer
Add the Lambda Insights layer to the Layers property within the Lambda Insights layer ARN. The 
example below uses the layer for the initial release of Lambda Insights. For the latest release version of 
the Lambda Insights extension layer, see Available versions of the Lambda Insights extension (p. 625).
Resources: 
  MyFunction: 
    Type: AWS::Lambda::Function 
    Properties: 
      Layers: 
        - !Sub "arn:aws:lambda:
${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
Step 2: Add the managed policy
643Amazon CloudWatch User Guide
Getting started with Lambda Insights
Add the CloudWatchLambdaInsightsExecutionRolePolicy IAM policy to your function execution role.
Resources: 
  MyFunctionExecutionRole: 
    Type: 'AWS::IAM::Role' 
    Properties: 
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'
Step 3: (Optional) Add VPC endpoint
This step is necessary only for functions running in a private subnet with no internet access, and if 
you have not already conﬁgured a CloudWatch Logs virtual private cloud (VPC) endpoint. For more 
information, see  Using CloudWatch Logs with Interface VPC Endpoints.
Resources: 
  CloudWatchLogsVpcPrivateEndpoint: 
    Type: AWS::EC2::VPCEndpoint 
    Properties: 
      PrivateDnsEnabled: 'true' 
      VpcEndpointType: Interface 
      VpcId: !Ref: VPC 
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs 
      SecurityGroupIds: 
        - !Ref InterfaceVpcEndpointSecurityGroup 
      SubnetIds: 
        - !Ref PublicSubnet01 
        - !Ref PublicSubnet02 
        - !Ref PublicSubnet03
Using the AWS CDK to enable Lambda Insights on an existing 
Lambda function
Follow these steps to use the AWS CDK to enable Lambda Insights on an existing Lambda function. To 
use these steps, you must already be using the AWS CDK to manage your resources.
The commands in this section are in TypeScript.
First, update the function permissions.
executionRole.addManagedPolicy( 
 ManagedPolicy.fromAwsManagedPolicyName('CloudWatchLambdaInsightsExecutionRolePolicy')
);
Next, install the extension on the Lambda function. Replace the ARN value for the layerArn  parameter 
with the ARN matching your Region and the extension version that you want to use. For more 
information, see Available versions of the Lambda Insights extension (p. 625).
import lambda = require('@aws-cdk/aws-lambda');
const layerArn = 'arn:aws:lambda:us-west-1:580247275435:layer:LambdaInsightsExtension:14';
const layer = lambda.LayerVersion.fromLayerVersionArn(this, 'LayerFromArn', layerArn);
If necessary, enable the virtual private cloud (VPC) endpoint for CloudWatch Logs. This step is necessary 
only for functions running in a private subnet with no internet access, and if you have not already 
conﬁgured a CloudWatch Logs VPC endpoint.
const cloudWatchLogsEndpoint = vpc.addInterfaceEndpoint('cwl-gateway', { 
644Amazon CloudWatch User Guide
Getting started with Lambda Insights
  service: InterfaceVpcEndpointAwsService.CLOUDWATCH_LOGS,
});
cloudWatchLogsEndpoint.connections.allowDefaultPortFromAnyIpv4();
Using Serverless Framework to enable Lambda Insights on an 
existing Lambda function
Follow these steps to use Serverless Framework to enable Lambda Insights on an existing Lambda 
function. For more information about Serverless Framework, see serverless.com.
This is done through a Lambda Insights plugin for Serverless. For more information, see serverless-
plugin-lambda-insights .
If you don't already have the latest version of the Serverless command-line interface installed, you must 
ﬁrst install or upgrade it. For more information, see Get started with Serverless Framework Open Source 
& AWS.
To use Serverless Framework to enable Lambda Insights on a Lambda function
1. Install the Serverless plugin for Lambda Insights by running the following command in your 
Serverless directory:
npm install --save-dev serverless-plugin-lambda-insights
2. In your serverless.yml  ﬁle, add the plugin in the plugins section as shown:
provider: 
  name: aws
plugins: 
  - serverless-plugin-lambda-insights
3. Enable Lambda Insights.
• You can enable Lambda Insights individually per function by adding the following property to 
the serverless.yml ﬁle
functions: 
   myLambdaFunction : 
    handler: src/app/index.handler 
    lambdaInsights: true #enables Lambda Insights for this function
• You can enable Lambda Insights for all functions within the serverless.yml  ﬁle by adding 
the following custom section:
custom: 
  lambdaInsights: 
    defaultLambdaInsights: true #enables Lambda Insights for all functions
4. Re-deploy the Serverless service by entering the following command:
serverless deploy
This re-deploys all functions and enables Lambda Insights for those functions that 
you have speciﬁed. It enables Lambda Insights by adding the Lambda Insights layer 
and attaching the necessary permissions using the arn:aws:iam::aws:policy/
CloudWatchLambdaInsightsExecutionRolePolicy  IAM policy.
645Amazon CloudWatch User Guide
Getting started with Lambda Insights
Enabling Lambda Insights on a Lambda container image 
deployment
To enable Lambda Insights on a Lambda function that is deployed as a container image, add lines in your 
Dockerﬁle. These lines install the Lambda Insights agent as an extension in your container image. The 
lines to add are diﬀerent for x86-64 containers and ARM64 containers.
Note
The Lambda Insights agent is supported only on Lambda runtimes that use Amazon Linux 2.
Topics
•x86-64 container image deployment (p. 646)
•ARM64 container image deployment (p. 648)
x86-64 container image deployment
To enable Lambda Insights on a Lambda function that is deployed as a container image running on an 
x86-64 container, add the following lines in your Dockerﬁle. These lines install the Lambda Insights 
agent as an extension in your container image.
RUN curl -O https://lambda-insights-extension.s3-ap-northeast-1.amazonaws.com/amazon_linux/
lambda-insights-extension.rpm && \ 
    rpm -U lambda-insights-extension.rpm && \ 
    rm -f lambda-insights-extension.rpm
After you create your Lambda function, assign the CloudWatchLambdaInsightsExecutionRolePolicy
IAM policy to the function's execution role, and Lambda Insights is enabled on the container image-
based Lambda function.
Note
To use an older version of the Lambda Insights extension, replace the URL in the 
previous commands with this URL: https://lambda-insights-extension.s3-
ap-northeast-1.amazonaws.com/amazon_linux/lambda-insights-
extension.1.0.111.0.rpm . Currently, only Lambda Insights versions 1.0.111.0 and 
later are available. For more information, see Available versions of the Lambda Insights 
extension (p. 625).
To verify the signature of the Lambda Insights agent package on a Linux server
1. Enter the following command to download the public key.
shell$ wget https://lambda-insights-extension.s3-ap-northeast-1.amazonaws.com/lambda-
insights-extension.gpg
2. Enter the following command to import the public key into your keyring.
shell$ gpg --import lambda-insights-extension.gpg
The output will be similar to the following. Make a note of the key value, you will need it in the next 
step. In this example output, the key value is 848ABDC8 .
gpg: key 848ABDC8: public key "Amazon Lambda Insights Extension" imported
gpg: Total number processed: 1
gpg: imported: 1  (RSA: 1)
646Amazon CloudWatch User Guide
Getting started with Lambda Insights
3. Verify the ﬁngerprint by entering the following command. Replace key-value  with the value of the 
key from the preceding step.
shell$  gpg --fingerprint key-value
The ﬁngerprint string in the output of this command should be E0AF FA11 FFF3 5BD7 349E 
E222 479C 97A1 848A BDC8 . If the string doesn't match, don't install the agent and contact AWS.
4. After you have veriﬁed the ﬁngerprint, you can use it to verify the Lambda Insights agent package. 
Download the package signature ﬁle by entering the following command.
shell$  wget https://lambda-insights-extension.s3-ap-northeast-1.amazonaws.com/
amazon_linux/lambda-insights-extension.rpm.sig
5. Verify the signature by entering the following command.
shell$ gpg --verify lambda-insights-extension.rpm.sig lambda-insights-extension.rpm
The output should look like the following:
gpg: Signature made Thu 08 Apr 2021 06:41:00 PM UTC using RSA key ID 848ABDC8
gpg: Good signature from "Amazon Lambda Insights Extension"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: E0AF FA11 FFF3 5BD7 349E  E222 479C 97A1 848A BDC8
In the expected output, there might be a warning about a trusted signature. A key is trusted only 
if you or someone who you trust has signed it. This doesn't mean that the signature is invalid, only 
that you have not veriﬁed the public key.
If the output contains BAD signature , check whether you performed the steps correctly. If you 
continue to get a BAD signature  response, contact AWS and avoid using the downloaded ﬁle.
x86-64 Example
This section includes an example of enabling Lambda Insights on a container image-based Python 
Lambda function.
An example of enabling Lambda Insights on a Lambda container image
1. Create a Dockerﬁle that is similar to the following:
FROM public.ecr.aws/lambda/python:3.8
// extra lines to install the agent here
RUN curl -O https://lambda-insights-extension.s3-ap-northeast-1.amazonaws.com/
amazon_linux/lambda-insights-extension.rpm && \ 
    rpm -U lambda-insights-extension.rpm && \ 
    rm -f lambda-insights-extension.rpm 
   
COPY index.py ${LAMBDA_TASK_ROOT}
CMD [ "index.handler" ]
2. Create a Python ﬁle named index.py  that is similar to the following:
def handler(event, context): 
  return { 
    'message': 'Hello World!' 
647Amazon CloudWatch User Guide
Getting started with Lambda Insights
  }
3. Put the Dockerﬁle and index.py  in the same directory. Then, in that directory, run the following 
steps to build the docker image and upload it to Amazon ECR.
// create an ECR repository
aws ecr create-repository --repository-name test-repository
// build the docker image
docker build -t test-image .
// sign in to AWS
aws ecr get-login-password | docker login --username AWS --password-stdin 
 "${ACCOUNT_ID }".dkr.ecr."${ REGION}".amazonaws.com
// tag the image
docker tag test-image:latest "${ ACCOUNT_ID }".dkr.ecr."${ REGION}".amazonaws.com/test-
repository:latest
// push the image to ECR
docker push "${ ACCOUNT_ID }".dkr.ecr."${ REGION}".amazonaws.com/test-repository:latest
4. Use that Amazon ECR image that you just created to create the Lambda function.
5. Assign the CloudWatchLambdaInsightsExecutionRolePolicy IAM policy to the function's execution 
role.
ARM64 container image deployment
To enable Lambda Insights on a Lambda function that is deployed as a container image running on an 
AL2_aarch64 container (which uses ARM64 architecture), add the following lines in your Dockerﬁle. 
These lines install the Lambda Insights agent as an extension in your container image.
RUN curl -O https://lambda-insights-extension-arm64.s3-ap-northeast-1.amazonaws.com/
amazon_linux/lambda-insights-extension-arm64.rpm && \ 
    rpm -U lambda-insights-extension-arm64.rpm && \ 
    rm -f lambda-insights-extension-arm64.rpm
After you create your Lambda function, assign the CloudWatchLambdaInsightsExecutionRolePolicy
IAM policy to the function's execution role, and Lambda Insights is enabled on the container image-
based Lambda function.
Note
To use an older version of the Lambda Insights extension, replace the URL in the previous 
commands with this URL: https://lambda-insights-extension-arm64.s3-ap-
northeast-1.amazonaws.com/amazon_linux/lambda-insights-extension-
arm64.1.0.229.0.rpm . Currently, only Lambda Insights versions 1.0.229.0 and later 
are available. For more information, see Available versions of the Lambda Insights 
extension (p. 625).
To verify the signature of the Lambda Insights agent package on a Linux server
1. Enter the following command to download the public key.
shell$ wget https://lambda-insights-extension-arm64.s3-ap-northeast-1.amazonaws.com/
lambda-insights-extension.gpg
2. Enter the following command to import the public key into your keyring.
shell$ gpg --import lambda-insights-extension.gpg
The output will be similar to the following. Make a note of the key value, you will need it in the next 
step. In this example output, the key value is 848ABDC8 .
648Amazon CloudWatch User Guide
Getting started with Lambda Insights
gpg: key 848ABDC8: public key "Amazon Lambda Insights Extension" imported
gpg: Total number processed: 1
gpg: imported: 1  (RSA: 1)
3. Verify the ﬁngerprint by entering the following command. Replace key-value  with the value of the 
key from the preceding step.
shell$  gpg --fingerprint key-value
The ﬁngerprint string in the output of this command should be E0AF FA11 FFF3 5BD7 349E 
E222 479C 97A1 848A BDC8 . If the string doesn't match, don't install the agent and contact AWS.
4. After you have veriﬁed the ﬁngerprint, you can use it to verify the Lambda Insights agent package. 
Download the package signature ﬁle by entering the following command.
shell$  wget https://lambda-insights-extension-arm64.s3-ap-northeast-1.amazonaws.com/
amazon_linux/lambda-insights-extension-arm64.rpm.sig
5. Verify the signature by entering the following command.
shell$ gpg --verify lambda-insights-extension-arm64.rpm.sig lambda-insights-extension-
arm64.rpm
The output should look like the following:
gpg: Signature made Thu 08 Apr 2021 06:41:00 PM UTC using RSA key ID 848ABDC8
gpg: Good signature from "Amazon Lambda Insights Extension"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: E0AF FA11 FFF3 5BD7 349E  E222 479C 97A1 848A BDC8
In the expected output, there might be a warning about a trusted signature. A key is trusted only 
if you or someone who you trust has signed it. This doesn't mean that the signature is invalid, only 
that you have not veriﬁed the public key.
If the output contains BAD signature , check whether you performed the steps correctly. If you 
continue to get a BAD signature  response, contact AWS and avoid using the downloaded ﬁle.
ARM64 Example
This section includes an example of enabling Lambda Insights on a container image-based Python 
Lambda function.
An example of enabling Lambda Insights on a Lambda container image
1. Create a Dockerﬁle that is similar to the following:
FROM public.ecr.aws/lambda/python:3.8
// extra lines to install the agent here
RUN curl -O https://lambda-insights-extension-arm64.s3-ap-northeast-1.amazonaws.com/
amazon_linux/lambda-insights-extension-arm64.rpm && \ 
    rpm -U lambda-insights-extension-arm64.rpm && \ 
    rm -f lambda-insights-extension-arm64.rpm 
   
COPY index.py ${LAMBDA_TASK_ROOT}
CMD [ "index.handler" ]
649Amazon CloudWatch User Guide
Viewing your Lambda Insights metrics
2. Create a Python ﬁle named index.py  that is similar to the following:
def handler(event, context): 
  return { 
    'message': 'Hello World!' 
  }
3. Put the Dockerﬁle and index.py  in the same directory. Then, in that directory, run the following 
steps to build the docker image and upload it to Amazon ECR.
// create an ECR repository
aws ecr create-repository --repository-name test-repository
// build the docker image
docker build -t test-image .
// sign in to AWS
aws ecr get-login-password | docker login --username AWS --password-stdin 
 "${ACCOUNT_ID}".dkr.ecr."${REGION}".amazonaws.com
// tag the image
docker tag test-image:latest "${ACCOUNT_ID}".dkr.ecr."${REGION}".amazonaws.com/test-
repository:latest
// push the image to ECR
docker push "${ACCOUNT_ID}".dkr.ecr."${REGION}".amazonaws.com/test-repository:latest
4. Use that Amazon ECR image that you just created to create the Lambda function.
5. Assign the CloudWatchLambdaInsightsExecutionRolePolicy IAM policy to the function's execution 
role.
Viewing your Lambda Insights metrics
After you have installed the Lambda Insights extension on a Lambda function that has been invoked, you 
can use the CloudWatch console to see your metrics. You can see a multi-function overview, or focus on a 
single function.
For a list of Lambda Insights metrics, see Metrics collected by Lambda Insights (p. 651).
To view the multi-function overview for your Lambda Insights metrics
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the left navigation pane, under Lambda Insights , choose Multi-function.
The top part of the page displays graphs with aggregated metrics of all your Lambda functions in 
the Region that have Lambda Insights enabled. Lower on the page is a table that lists the functions.
3. To ﬁlter by function name to reduce the number of functions displayed, type part of the function 
name in the box near the top of the page.
4. To add this view to a dashboard as a widget, choose Add to dashboard .
To view metrics for a single function
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the left navigation pane, under Lambda Insights , choose Single-function.
The top part of the page displays graphs with metrics for the selected function.
3. If you have X-Ray enabled, you can choose a single trace ID. This opens CloudWatch ServiceLens for 
that invocation, and from there you can zoom out to see the distributed trace and the other services 
involved in handling that speciﬁc transaction. For more information about ServiceLens, see Using 
ServiceLens to monitor the health of your applications (p. 229).
650Amazon CloudWatch User Guide
Integration with Application Insights
4. To open CloudWatch Logs Insights and zoom in on a speciﬁc error, choose View logs by the table at 
the bottom of the page.
5. To add this view to a dashboard as a widget, choose Add to dashboard .
Integration with Application Insights
Amazon CloudWatch Application Insights helps you monitor your applications and identiﬁes and sets 
up key metrics, logs, and alarms across your application resources and technology stack. For more 
information, see Amazon CloudWatch Application Insights (p. 668).
You can enable Application Insights to gather additional data from your Lambda functions. If you haven't 
done this already, you can enable it by choosing Auto-conﬁgure Application Insights in the Application 
Insights  tab below the performance view in the Lambda Insights dashboard.
If you have already set up CloudWatch Application Insights to monitor your Lambda functions, the 
Application Insights dashboard appears below the Lambda Insights dashboard, in the Application 
Insights  tab.
Metrics collected by Lambda Insights
Lambda Insights collects several metrics from the Lambda functions where it is installed. Some of 
these metrics are available as time series aggregated data in CloudWatch Metrics. Other metrics are not 
aggregated into time series data but can be found in the embedded metric format log entries by using 
CloudWatch Logs Insights.
The following metrics are available as time series aggregated data in CloudWatch Metrics in the
LambdaInsights  namespace.
Metric name Dimensions Description
cpu_total_time function_name
function_name, versionSum of
cpu_system_time  and
cpu_user_time .
Unit: Milliseconds
init_duration function_name
function_name, versionThe amount of time 
spent in the init
phase of the Lambda 
execution environment 
lifecycle.
Unit: Milliseconds
memory_utilization function_name
function_name, versionThe maximum 
memory measured as 
a percentage of the 
memory allocated to 
the function.
Unit: Percent
rx_bytes function_name
function_name, versionThe number of bytes 
received by the 
function.
Unit: Bytes
651Amazon CloudWatch User Guide
Metrics collected by Lambda Insights
Metric name Dimensions Description
tx_bytes function_name
function_name, versionThe number of bytes 
sent by the function.
Unit: Bytes
total_memory function_name
function_name, versionThe amount of memory 
allocated to your 
Lambda function. This 
is the same as your 
function’s memory size.
Unit: Megabytes
total_network function_name
function_name, versionSum of rx_bytes  and
tx_bytes . Even for 
functions that don't 
perform I/O tasks, this 
value is usually greater 
than zero because of 
network calls made by 
the Lambda runtime.
Unit: Bytes
used_memory_max function_name
function_name, versionThe measured memory 
of the function 
sandbox.
Unit: Megabytes
The following metrics can be found in the embedded metric format log entries by using CloudWatch 
Logs Insights. For more information about CloudWatch Logs Insights, see  Analyzing Log Data with 
CloudWatch Logs Insights.
For more information about embedded metric format, see Embedding metrics within logs  (p. 985).
Metric name Description
cpu_system_time The amount of time the CPU spent executing 
kernel code.
Unit: Milliseconds
cpu_total_time Sum of cpu_system_time  and cpu_user_time .
Unit: Milliseconds
cpu_user_time The amount of time the CPU spent executing user 
code.
Unit: Milliseconds
fd_max The maximum number of ﬁle descriptors 
available.
Unit: Count
652Amazon CloudWatch User Guide
Troubleshooting and known issues
Metric name Description
fd_use The maximum number of ﬁle descriptors in use.
Unit: Count
memory_utilization The maximum memory measured as a percentage 
of the memory allocated to the function.
Unit: Percent
rx_bytes The number of bytes received by the function.
Unit: Bytes
tx_bytes The number of bytes sent by the function.
Unit: Bytes
threads_max The number of threads in use by the function 
process. As a function author, you don't control 
the initial number of threads created by the 
runtime.
Unit: Count
tmp_max The amount of space available in the /tmp
directory.
Unit: Bytes
tmp_used The amount of space used in the /tmp directory.
Unit: Bytes
total_memory The amount of memory allocated to your Lambda 
function. This is the same as your function’s 
memory size.
Unit: Megabytes
total_network Sum of rx_bytes  and tx_bytes . Even for 
functions that don't perform I/O tasks, this value 
is usually greater than zero because of network 
calls made by the Lambda runtime.
Unit: Bytes
used_memory_max The measured memory of the function sandbox.
Unit: Bytes
Troubleshooting and known issues
The ﬁrst step to troubleshooting any issues is to enable debug logging on the Lambda Insights 
extension. To do this, set the following environment variable on your Lambda function:
LAMBDA_INSIGHTS_LOG_LEVEL=info . For more information, see  Using AWS Lambda environment 
variables .
653Amazon CloudWatch User Guide
Example telemetry event
The extension emits logs into the same log group as your function (/aws/lambda/ function-name ). 
Review those logs to see if the error might be related to a setup issue.
I don't see any metrics from Lambda Insights
If you don't see Lambda Insights metrics that you expect to see, check the following possibilities:
•The metrics might just be delayed— If the function has not yet been invoked or the data has not 
been ﬂushed yet, you won't see the metrics in CloudWatch. For more information, see Known Issues
later in this section.
•Conﬁrm that the Lambda function has the correct permissions—Make sure that the
CloudWatchLambdaInsightsExecutionRolePolicy IAM policy is assigned to the function's execution 
role.
•Check the Lambda runtime —Lambda Insights supports only certain Lambda runtimes. For a list of 
supported runtimes, see Using Lambda Insights  (p. 624).
For example, to use Lambda Insights on Java 8, you must use the java8.al2  runtime, not the java8
runtime.
•Check network access—The Lambda function might be on a VPC private subnet with no internet 
access and you don't have a VPC endpoint conﬁgured for CloudWatch Logs. To help debug this issue, 
you can set the environment variable LAMBDA_INSIGHTS_LOG_LEVEL=info .
Known issues
Data delay can be as high as 20 minutes. When a function handler completes, Lambda freezes the 
sandbox, which also freezes the Lambda Insights extension. While the function is running, we use an 
adaptive batching strategy based on the function TPS to output data. However, if the function stops 
being invoked for an extended period and there is still event data in the buﬀer, this data can be delayed 
until Lambda shuts down the idle sandbox. When Lambda shuts down the sandbox, we ﬂush the 
buﬀered data.
Example telemetry event
Each invocation of a Lambda function that has Lambda Insights enabled writes a single log event to the
/aws/lambda-insights  log group. Each log event contains metrics in embedded metric format. For 
more information about embedded metric format, see Embedding metrics within logs  (p. 985).
To analyze these log events, you can use the following methods:
•The Lambda Insights section of the CloudWatch console, as explained in Viewing your Lambda Insights 
metrics  (p. 650).
•Log event queries using CloudWatch Logs Insights. For more information, see  Analyzing Log Data with 
CloudWatch Logs Insights.
•Metrics collected in the LambdaInsights  namespace, which you graph by using CloudWatch metrics.
The following is an example of a Lambda Insights log event with embedded metric format.
{ 
    "_aws": { 
        "Timestamp": 1605034324256, 
        "CloudWatchMetrics": [ 
            { 
                "Namespace": "LambdaInsights", 
                "Dimensions": [ 
                    [ "function_name" ], 
654Amazon CloudWatch User Guide
Using Contributor Insights to analyze high-cardinality data
                    [ "function_name", "version" ] 
                ], 
                "Metrics": [ 
                    { "Name": "memory_utilization", "Unit": "Percent" }, 
                    { "Name": "total_memory", "Unit": "Megabytes" }, 
                    { "Name": "used_memory_max", "Unit": "Megabytes" }, 
                    { "Name": "cpu_total_time", "Unit": "Milliseconds" }, 
                    { "Name": "tx_bytes", "Unit": "Bytes" }, 
                    { "Name": "rx_bytes", "Unit": "Bytes" }, 
                    { "Name": "total_network", "Unit": "Bytes" }, 
                    { "Name": "init_duration", "Unit": "Milliseconds" } 
                ] 
            } 
        ], 
        "LambdaInsights": { 
            "ShareTelemetry": true 
        } 
    }, 
    "event_type": "performance", 
    "function_name": "cpu-intensive", 
    "version": "Blue", 
    "request_id": "12345678-8bcc-42f7-b1de-123456789012", 
    "trace_id": "1-5faae118-12345678901234567890", 
    "duration": 45191, 
    "billed_duration": 45200, 
    "billed_mb_ms": 11571200, 
    "cold_start": true, 
    "init_duration": 130, 
    "tmp_free": 538329088, 
    "tmp_max": 551346176, 
    "threads_max": 11, 
    "used_memory_max": 63, 
    "total_memory": 256, 
    "memory_utilization": 24, 
    "cpu_user_time": 6640, 
    "cpu_system_time": 50, 
    "cpu_total_time": 6690, 
    "fd_use": 416, 
    "fd_max": 32642, 
    "tx_bytes": 4434, 
    "rx_bytes": 6911, 
    "timeout": true, 
    "shutdown_reason": "Timeout", 
    "total_network": 11345, 
    "agent_version": "1.0.72.0", 
    "agent_memory_avg": 10, 
    "agent_memory_max": 10
}
Using Contributor Insights to analyze high-
cardinality data
You can use Contributor Insights to analyze log data and create time series that display contributor data. 
You can see metrics about the top-N contributors, the total number of unique contributors, and their 
usage. This helps you ﬁnd top talkers and understand who or what is impacting system performance. For 
example, you can ﬁnd bad hosts, identify the heaviest network users, or ﬁnd the URLs that generate the 
most errors.
You can build your rules from scratch, and when you use the AWS Management Console you can also 
use sample rules that AWS has created. Rules deﬁne the log ﬁelds that you want to use to deﬁne 
655Amazon CloudWatch User Guide
Create a Contributor Insights rule
contributors, such as IpAddress . You can also ﬁlter the log data to ﬁnd and analyze the behavior of 
individual contributors.
CloudWatch also provides built-in rules that you can use to analyze metrics from other AWS services.
All rules analyze incoming data in real time.
If you are signed in to an account that is set up as a monitoring account in CloudWatch cross-account 
observability, you can create Contributor Insights rules in that monitoring account that analyze 
log groups in source accounts and in the monitoring account. You can also create a single rule that 
analyzes log groups in multiple accounts. For more information, see CloudWatch cross-account 
observability (p. 846).
Note
If you use Contributor Insights, you are charged for each occurrence of a log event that matches 
a rule. For more information, see Amazon CloudWatch Pricing.
Topics
•Create a Contributor Insights rule (p. 656)
•Contributor Insights rule syntax  (p. 659)
•Contributor Insights rule examples  (p. 662)
•Viewing Contributor Insights reports (p. 665)
•Graphing metrics generated by rules (p. 666)
•Using Contributor Insights built-in rules (p. 668)
Create a Contributor Insights rule
You can create rules to analyze log data. Any logs in JSON or Common Log Format (CLF) can be 
evaluated. This includes your custom logs that follow one of these formats and logs from AWS services 
such as Amazon VPC ﬂow logs, Amazon Route 53 DNS query logs, Amazon ECS container logs, and logs 
from AWS CloudTrail, Amazon SageMaker, Amazon RDS, AWS AppSync and API Gateway.
In a rule, when you specify ﬁeld names or values, all matching is case sensitive.
You can use built-in sample rules when you create a rule or you can create your own rule from scratch. 
Contributor Insights includes sample rules for the following types of logs:
•Amazon API Gateway logs
•Amazon Route 53 public DNS query logs
•Amazon Route 53 resolver query logs
•CloudWatch Container Insights logs
•VPC ﬂow logs
If you are signed in to an account that is set up as a monitoring account in CloudWatch cross-account 
observability, you can create Contributor Insights rules for log groups in the source accounts linked to 
this monitoring account, in addition to creating rules for log groups in the monitoring account. You 
can also set up a single rule that monitors log groups in diﬀerent accounts. For more information, see
CloudWatch cross-account observability (p. 846).
Important
When you grant a user the cloudwatch:PutInsightRule  permission, by default that user 
can create a rule that evaluates any log group in CloudWatch Logs. You can add IAM policy 
conditions that limit these permissions for a user to include and exclude speciﬁc log groups. 
656Amazon CloudWatch User Guide
Create a Contributor Insights rule
For more information, see Using condition keys to limit Contributor Insights users' access to log 
groups (p. 1191 ).
To create a rule using a built-in sample rule
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Insights , Contributor Insights .
3. Choose Create rule.
4. For Select log group(s), select the log group(s) that you want your rule to monitor. You can select 
as many as 20 log groups. If you are signed in to a monitoring account that is set up for CloudWatch 
cross-account observability, you can select log groups in source accounts, and you can also set up a 
single rule to analyze log groups in diﬀerent accounts.
• (Optional) To select all log groups that have names beginning with a speciﬁc string, choose the
Select by preﬁx match dropdown, and then enter the preﬁx. If this is a monitoring account, you 
can optionally select the accounts to search in, otherwise all accounts are selected.
Note
You incur charges for each log event that matches your rule. If you choose the Select by 
preﬁx match  dropdown, be aware of how many log groups the preﬁx can match. If you 
search more log groups than you want, you might incur unexpected charges. For more 
information, see Amazon CloudWatch Pricing.
5. For Rule type, choose Sample rule. Then choose Select sample rule and select the rule.
6. The sample rule has ﬁlled out the Log format , Contribution , Filters , and Aggregate on  ﬁelds. You 
can adjust those values, if you like.
7. Choose Next.
8. For Rule name, enter a name. Valid characters are A-Z, a-z, 0-9, (hyphen), (underscore), and (period).
9. Choose whether to create the rule in a disabled or enabled state. If you choose to enable it, the 
rule immediately starts analyzing your data. You incur costs when you run enabled rules. For more 
information, see Amazon CloudWatch Pricing.
Contributor Insights analyzes only new log events after a rule is created. A rule cannot process logs 
events that were previously processed by CloudWatch Logs.
10. (Optional) For Tags, add one or more key-value pairs as tags for this rule. Tags can help you identify 
and organize your AWS resources and track your AWS costs. For more information, see Tagging your 
Amazon CloudWatch resources (p. 1240 ).
11. Choose Create .
To create a rule from scratch
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Contributor Insights .
3. Choose Create rule.
4. For Select log group(s), select the log group(s) that you want your rule to monitor. You can select 
as many as 20 log groups. If you are signed in to a monitoring account that is set up for CloudWatch 
cross-account observability, you can select log groups in source accounts, and you can also set up a 
single rule to analyze log groups in diﬀerent accounts.
• (Optional) To select all log groups that have names beginning with a speciﬁc string, choose the
Select by preﬁx match dropdown, and then enter the preﬁx.
657Amazon CloudWatch User Guide
Create a Contributor Insights rule
Note
You incur charges for each log event that matches your rule. If you choose the Select by 
preﬁx match  dropdown, be aware of how many log groups the preﬁx can match. If you 
search more log groups than you want, you might incur unexpected charges. For more 
information, see Amazon CloudWatch Pricing.
5. For Rule type, choose Custom rule.
6. For Log format , choose JSON or CLF.
7. You can ﬁnish creating the rule by using the wizard or by choosing the Syntax  tab and specifying 
your rule syntax manually.
To continue using the wizard, do the following:
a. For Contribution , Key, enter a contributor type that you want to report on. The report displays 
the top-N values for this contributor type.
Valid entries are any log ﬁeld that has values. Examples include requestId ,
sourceIPaddress , and containerID .
For information about ﬁnding the log ﬁeld names for the logs in a certain log group, see Finding 
Log Fields  (p. 659).
Keys larger than 1 KB are truncated to 1KB.
b. (Optional) Choose Add new key to add more keys. You can include as many as four keys in a 
rule. If you enter more than one key, the contributors in the report are deﬁned by unique value 
combinations of the keys. For example, if you specify three keys, each unique combination of 
values for the three keys is counted as a unique contributor.
c. (Optional) If you want to add a ﬁlter that narrows the scope of your results, choose Add ﬁlter . 
For Match , enter the name of the log ﬁeld that you want to ﬁlter on. For Condition , choose a 
comparison operator, and enter a value that you want to ﬁlter for.
You can add as many as four ﬁlters in a rule. Multiple ﬁlters are joined by AND logic, so only log 
events that match all ﬁlters are evaluated.
Note
Arrays that follow comparison operators, such as In, NotIn , or StartsWith , can 
include as many as 10 string values. For more information about the Contributor 
Insights rules syntax, see Contributor Insights rule syntax  (p. 659).
d. For Aggregate on , choose Count  or Sum . Choosing Count  causes the contributor ranking to 
be based on the number of occurrences. Choosing Sum  causes the ranking to be based on the 
aggregated sum of the values of the ﬁeld that you specify for Contribution , Value.
8. To enter your rule as a JSON object instead of using the wizard, do the following:
a. Choose the Syntax  tab.
b. In Rule body, enter the JSON object for your rule. For information about rule syntax, see
Contributor Insights rule syntax  (p. 659).
9. Choose Next.
10. For Rule name, enter a name. Valid characters are A-Z, a-z, 0-9, "-", "_', and ".".
11. Choose whether to create the rule in a disabled or enabled state. If you choose to enable it, the 
rule immediately starts analyzing your data. You incur costs when you run enabled rules. For more 
information, see Amazon CloudWatch Pricing.
Contributor Insights analyzes only new log events after a rule is created. A rule cannot process logs 
events that were previously processed by CloudWatch Logs.
658Amazon CloudWatch User Guide
Contributor Insights rule syntax
12. (Optional) For Tags, add one or more key-value pairs as tags for this rule. Tags can help you identify 
and organize your AWS resources and track your AWS costs. For more information, see Tagging your 
Amazon CloudWatch resources (p. 1240 ).
13. Choose Next.
14. Conﬁrm the settings that you entered, and choose Create rule.
You can disable, enable, or delete rules that you have created.
To enable, disable, or delete a rule in Contributor Insights
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Contributor Insights .
3. In the list of rules, select the check box next to a single rule.
Built-in rules are created by AWS services and can't be edited, disabled, or deleted.
4. Choose Actions, and then choose the option you want.
Finding log ﬁelds
When you create a rule, you need to know the names of ﬁelds in the log entries in a log group.
To ﬁnd the log ﬁelds in a log group
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, under Logs , choose Insights .
3. Above the query editor, select one or more log groups to query.
When you select a log group, CloudWatch Logs Insights automatically detects ﬁelds in the data in 
the log group and displays them in the right pane in Discovered ﬁelds.
Contributor Insights rule syntax
This section explains the syntax for Contributor Insights rules. Use this syntax only when you are creating 
a rule by entering a JSON block. If you use the wizard to create a rule, you don't need to know the 
syntax. For more information about creating rules using the wizard, see Create a Contributor Insights 
rule (p. 656).
All matching of rules to log event ﬁeld names and values is case sensitive.
The following example illustrates the syntax for JSON logs.
{ 
    "Schema": { 
        "Name": "CloudWatchLogRule", 
        "Version": 1 
    }, 
    "LogGroupNames": [ 
        "API-Gateway-Access-Logs*", 
        "Log-group-name2" 
    ], 
    "LogFormat": "JSON", 
    "Contribution": { 
659Amazon CloudWatch User Guide
Contributor Insights rule syntax
        "Keys": [ 
            "$.ip" 
        ], 
        "ValueOf": "$.requestBytes", 
        "Filters": [ 
            { 
                "Match": "$.httpMethod", 
                "In": [ 
                    "PUT" 
                ] 
            } 
        ] 
    }, 
    "AggregateOn": "Sum"
}
Fields in Contributor Insights rules
Schema
The value of Schema for a rule that analyzes CloudWatch Logs data must always be {"Name": 
"CloudWatchLogRule", "Version": 1}
LogGroupNames
An array of strings. For each element in the array, you can optionally use * at the end of a string to 
include all log groups with names that start with that preﬁx.
Be careful about using wildcards with log group names. You incur charges or each log event 
that matches a rule. If you accidentally search more log groups than you intend, you might incur 
unexpected charges. For more information, see Amazon CloudWatch Pricing.
LogGroupARNs
If you are creating this rule in a CloudWatch cross-account observability monitoring account, you 
can use LogGroupARNs  to specify log groups in source accounts that are linked to the monitoring 
account, and to specify log groups in the monitoring account itself. You must specify either
LogGroupNames  or LogGroupARNs  in your rule, but not both.
LogGroupARNs  is an array of strings. For each element in the array, you can optionally use * as a 
wildcard in certain situations. For example you can specify arn:aws:logs:us-west-1:*:log-
group/MyLogGroupName2  to specify log groups named MyLogGroupName2  in all source 
accounts and in the monitoring account, in the US West (N. California) Region. You can also 
specify arn:aws:logs:us-west-1:111122223333:log-group/GroupNamePrefix*  to 
specify all log groups in US West (N. California) in 111122223333 that have names starting with
GroupNamePrefix .
You can't specify a partial AWS account ID as a preﬁx with a wild card.
Be careful about using wildcards with log group ARNs. You incur charges or each log event that 
matches a rule. If you accidentally search more log groups than you intend, you might incur 
unexpected charges. For more information, see Amazon CloudWatch Pricing.
LogFormat
Valid values are JSON  and CLF.
Contribution
This object includes a Keys array with as many as four members, optionally a single ValueOf , and 
optionally an array of as many as four Filters .
660Amazon CloudWatch User Guide
Contributor Insights rule syntax
Keys
An array of up to four log ﬁelds that are used as dimensions to classify contributors. If you 
enter more than one key, each unique combination of values for the keys is counted as a unique 
contributor. The ﬁelds must be speciﬁed using JSON property format notation.
ValueOf
(Optional) Specify this only when you are specifying Sum as the value of AggregateOn . ValueOf
speciﬁes a log ﬁeld with numerical values. In this type of rule, the contributors are ranked by their 
sum of the value of this ﬁeld, instead of their number of occurrences in the log entries. For example, 
if you want to sort contributors by their total BytesSent  over a period, you would set ValueOf  to
BytesSent  and specify Sum for AggregateOn .
Filters
(Optional) Speciﬁes an array of as many as four ﬁlters to narrow the log events that are included 
in the report. If you specify multiple ﬁlters, Contributor Insights evaluates them with a logical AND 
operator. You can use this to ﬁlter out irrelevant log events in your search or you can use it to select 
a single contributor to analyze their behavior.
Each member in the array must include a Match ﬁeld and a ﬁeld indicating the type of matching 
operator to use.
The Match ﬁeld speciﬁes a log ﬁeld to evaluate in the ﬁlter. The log ﬁeld is speciﬁed using JSON 
property format notation.
The matching operator ﬁeld must be one of the following: In, NotIn , StartsWith , GreaterThan ,
LessThan , EqualTo , NotEqualTo , or IsPresent . If the operator ﬁeld is In, NotIn , or
StartsWith , it is followed by an array of string values to check for. Contributor Insights evaluates 
the array of string values with an OR operator. The array can include as many as 10 string values.
If the operator ﬁeld is GreaterThan , LessThan , EqualTo , or NotEqualTo , it is followed by a 
single numerical value to compare with.
If the operator ﬁeld is IsPresent , it is followed by either true  or false . This operator matches log 
events based on whether the speciﬁed log ﬁeld is present in the log event. The isPresent  works 
only with values in the leaf node of JSON properties. For example, a ﬁlter that looks for matches to
c-count does not evaluate a log event with a value of details.c-count.c1 .
See the following four ﬁlter examples:
{"Match": "$.httpMethod", "In": [ "PUT", ] }
{"Match": "$.StatusCode", "EqualTo": 200 }
{"Match": "$.BytesReceived", "GreaterThan": 10000}
{"Match": "$.eventSource", "StartsWith": [ "ec2", "ecs" ] }
AggregateOn
Valid values are Count  and Sum. Speciﬁes whether to aggregate the report based on a count of 
occurrences or a sum of the values of the ﬁeld that is speciﬁed in the ValueOf  ﬁeld.
JSON property format notation
The Keys , ValueOf , and Match ﬁelds follow JSON property format with dot notation, where $
represents the root of the JSON object. This is followed by a period and then an alphanumeric string with 
the name of the subproperty. Multiple property levels are supported.
The ﬁrst character of the string can only be A-Z or a-z. The following characters of the string can be A-Z, 
a-z, or 0-9.
661Amazon CloudWatch User Guide
Example rules
The following list illustrates valid examples of JSON property format:
$.userAgent
$.endpoints[0]
$.users[1].name
$.requestParameters.instanceId
Additional ﬁeld in rules for CLF logs
Common Log Format (CLF) log events do not have names for the ﬁelds like JSON does. To provide the 
ﬁelds to use for Contributor Insights rules, a CLF log event can be treated as array with an index starting 
from 1. You can specify the ﬁrst ﬁeld as "1", the second ﬁeld as "2", and so on.
To make a rule for a CLF log easier to read, you can use Fields. This enables you to provide a naming 
alias for CLF ﬁeld locations. For example, you can specify that the location "4" is an IP address. Once 
speciﬁed, IpAddress  can be used as property in the Keys , ValueOf , and Filters  in the rule.
The following is an example of a rule for a CLF log that uses the Fields  ﬁeld.
{ 
    "Schema": { 
        "Name": "CloudWatchLogRule", 
        "Version": 1 
    }, 
    "LogGroupNames": [ 
        "API-Gateway-Access-Logs*" 
    ], 
    "LogFormat": "CLF", 
    "Fields": { 
        "4": "IpAddress", 
        "7": "StatusCode" 
    }, 
    "Contribution": { 
        "Keys": [ 
            "IpAddress" 
        ], 
        "Filters": [ 
            { 
                "Match": "StatusCode", 
                "EqualTo": 200 
            } 
        ] 
    }, 
    "AggregateOn": "Count"
}
Contributor Insights rule examples
This section contains examples that illustrate use cases for Contributor Insights rules.
VPC Flow Logs: Byte transfers by source and destination IP address
{ 
    "Schema": { 
        "Name": "CloudWatchLogRule", 
        "Version": 1 
    }, 
    "LogGroupNames": [ 
        "/aws/containerinsights/sample-cluster-name/flowlogs" 
    ], 
662Amazon CloudWatch User Guide
Example rules
    "LogFormat": "CLF", 
    "Fields": { 
        "4": "srcaddr", 
        "5": "dstaddr", 
        "10": "bytes" 
    }, 
    "Contribution": { 
        "Keys": [ 
            "srcaddr", 
            "dstaddr" 
        ], 
        "ValueOf": "bytes", 
        "Filters": [] 
    }, 
    "AggregateOn": "Sum"
}
VPC Flow Logs: Highest number of HTTPS requests
{ 
    "Schema": { 
        "Name": "CloudWatchLogRule", 
        "Version": 1 
    }, 
    "LogGroupNames": [ 
        "/aws/containerinsights/sample-cluster-name/flowlogs" 
    ], 
    "LogFormat": "CLF", 
    "Fields": { 
        "5": "destination address", 
        "7": "destination port", 
        "9": "packet count" 
    }, 
    "Contribution": { 
        "Keys": [ 
            "destination address" 
        ], 
        "ValueOf": "packet count", 
        "Filters": [ 
            { 
                "Match": "destination port", 
                "EqualTo": 443 
            } 
        ] 
    }, 
    "AggregateOn": "Sum"
}
VPC Flow Logs: Rejected TCP connections
{ 
    "Schema": { 
        "Name": "CloudWatchLogRule", 
        "Version": 1 
    }, 
    "LogGroupNames": [ 
        "/aws/containerinsights/sample-cluster-name/flowlogs" 
    ], 
    "LogFormat": "CLF", 
    "Fields": { 
        "3": "interfaceID", 
        "4": "sourceAddress", 
        "8": "protocol", 
663Amazon CloudWatch User Guide
Example rules
        "13": "action" 
    }, 
    "Contribution": { 
        "Keys": [ 
            "interfaceID", 
            "sourceAddress" 
        ], 
        "Filters": [ 
            { 
                "Match": "protocol", 
                "EqualTo": 6 
            }, 
            { 
                "Match": "action", 
                "In": [ 
                    "REJECT" 
                ] 
            } 
        ] 
    }, 
    "AggregateOn": "Sum"
}
Route 53 NXDomain responses by source address
{ 
    "Schema": { 
        "Name": "CloudWatchLogRule", 
        "Version": 1 
    }, 
    "AggregateOn": "Count", 
    "Contribution": { 
        "Filters": [ 
            { 
                "Match": "$.rcode", 
                "StartsWith": [ 
                    "NXDOMAIN" 
                ] 
            } 
        ], 
        "Keys": [ 
            "$.srcaddr" 
        ] 
    }, 
    "LogFormat": "JSON", 
    "LogGroupNames": [ 
        "<loggroupname>" 
    ]
}
Route 53 resolver queries by domain name
{ 
    "Schema": { 
        "Name": "CloudWatchLogRule", 
        "Version": 1 
    }, 
    "AggregateOn": "Count", 
    "Contribution": { 
        "Filters": [], 
        "Keys": [ 
            "$.query_name" 
        ] 
664Amazon CloudWatch User Guide
Viewing Contributor Insights reports
    }, 
    "LogFormat": "JSON", 
    "LogGroupNames": [ 
        "<loggroupname>" 
    ]
}
Route 53 resolver queries by query type and source address
{ 
    "Schema": { 
        "Name": "CloudWatchLogRule", 
        "Version": 1 
    }, 
    "AggregateOn": "Count", 
    "Contribution": { 
        "Filters": [], 
        "Keys": [ 
            "$.query_type", 
            "$.srcaddr" 
        ] 
    }, 
    "LogFormat": "JSON", 
    "LogGroupNames": [ 
        "<loggroupname>" 
    ]
}
Viewing Contributor Insights reports
To view graphs of report data and a ranked list of contributors found by your rules, follow these steps.
To view your rule reports
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Contributor Insights .
3. In the list of rules, choose the name of a rule.
The graph displays the results of the rule over the last three hours. The table under the graph shows 
the top 10 contributors.
4. To change the number of contributors shown in the table, choose Top 10 contributors at the top of 
the graph.
5. To ﬁlter the graph to show only the results from a single contributor, choose that contributor in the 
table legend. To again show all contributors, choose that same contributor again in the legend.
6. To change the time range shown in the report, choose 15m , 30m , 1h, 2h, 3h, or custom  at the top 
of the graph.
The maximum time range for the report is 24 hours, but you can choose a 24-hour window that 
occurred up to 15 days ago. To choose a time window in the past, choose custom , absolute , and 
then specify your time window.
7. To change the length of the time period used for the aggregation and ranking of contributors, 
choose period  at the top of the graph. Viewing a longer time period generally shows a smoother 
report with few spikes. Choosing a shorter time period is more likely to display spikes.
8. To add this graph to a CloudWatch dashboard, choose Add to dashboard .
9. To open the CloudWatch Logs Insights query window, with the log groups in this report already 
loaded in the query box, choose View logs.
665Amazon CloudWatch User Guide
Graphing metrics generated by rules
10. To export the report data to your clipboard or a CSV ﬁle, choose Export.
Graphing metrics generated by rules
Contributor Insights provides a metric math function, INSIGHT_RULE_METRIC . You can use this 
function to add data from a Contributor Insights report to a graph in the Metrics  tab of the CloudWatch 
console. You can also set an alarm based on this math function. For more information about metric math 
functions, see Use metric math  (p. 136)
To use this metric math function, you must be signed in to an account that has both the
cloudwatch:GetMetricData  and cloudwatch:GetInsightRuleReport  permissions.
The syntax is INSIGHT_RULE_METRIC( ruleName , metricName ). ruleName  is the name of 
a Contributor Insights rule. metricName  is one of the values in the following list. The value of
metricName  determines which type of data the math function returns.
•UniqueContributors  — the number of unique contributors for each data point.
•MaxContributorValue  — the value of the top contributor for each data point. The identity of the 
contributor might change for each data point in the graph.
If this rule aggregates by Count, the top contributor for each data point is the contributor with the 
most occurrences in that period. If the rule aggregates by Sum, the top contributor is the contributor 
with the greatest sum in the log ﬁeld speciﬁed by the rule's Value  during that period.
•SampleCount  — the number of data points matched by the rule.
•Sum — the sum of the values from all contributors during the time period represented by that data 
point.
•Minimum — the minimum value from a single observation during the time period represented by that 
data point.
•Maximum — the maximum value from a single observation during the time period represented by that 
data point.
•Average — the average value from all contributors during the time period represented by that data 
point.
Setting an alarm on Contributor Insights metric data
Using the function INSIGHT_RULE_METRIC , you can set alarms on metrics that Contributor Insights 
generates. For example, you can create an alarm that's based on the percentage of rejected transmission 
control protocol (TCP) connections. To get started with this type of alarm, you can create rules like the 
ones shown in the following two examples:
Example rule: "RejectedConnectionsRule"
{ 
    "Schema": { 
        "Name": "CloudWatchLogRule", 
        "Version": 1 
    }, 
    "LogGroupNames": [ 
        "/aws/containerinsights/sample-cluster-name/flowlogs" 
    ], 
    "LogFormat": "CLF", 
    "Fields": { 
        "3": "interfaceID", 
        "4": "sourceAddress", 
666Amazon CloudWatch User Guide
Graphing metrics generated by rules
        "8": "protocol", 
        "13": "action" 
    }, 
    "Contribution": { 
        "Keys": [ 
            "interfaceID", 
            "sourceAddress" 
        ], 
        "Filters": [ 
            { 
                "Match": "protocol", 
                "EqualTo": 6 
            }, 
            { 
                "Match": "action", 
                "In": [ 
                    "REJECT" 
                ] 
            } 
        ] 
    }, 
    "AggregateOn": "Sum"
}
Example rule: "TotalConnectionsRule"
{ 
    "Schema": { 
        "Name": "CloudWatchLogRule", 
        "Version": 1 
    }, 
    "LogGroupNames": [ 
        "/aws/containerinsights/sample-cluster-name/flowlogs" 
    ], 
    "LogFormat": "CLF", 
    "Fields": { 
        "3": "interfaceID", 
        "4": "sourceAddress", 
        "8": "protocol", 
        "13": "action" 
    }, 
    "Contribution": { 
        "Keys": [ 
            "interfaceID", 
            "sourceAddress" 
        ], 
        "Filters": [ 
            { 
                "Match": "protocol", 
                "EqualTo": 6 
            } 
    "AggregateOn": "Sum"
}
After you create your rules, you can select the Metrics  tab in the CloudWatch Console, where you can use 
the following example metric math expressions to graph the data that Contributor Insights reports:
Example: Metric math expressions
e1 INSIGHT_RULE_METRIC("RejectedConnectionsRule", "Sum")
e2 INSIGHT_RULE_METRIC("TotalConnectionsRule", "Sum")
e3 (e1/e2)*100
667Amazon CloudWatch User Guide
Using Contributor Insights built-in rules
In the example, the metric math expression e3 returns all of the rejected TCP connections. If you want 
to be notiﬁed when 20 percent of the TCP connections are rejected, you can modify the expression by 
changing the threshold from 100 to 20.
Note
You can set an alarm on a metric that you're monitoring from the Metrics  section. While on 
the Graphed metrics  tab, you can select the Create alarm  icon under the Actions column. The
Create alarm  icon looks like a bell.
For more information about graphing metrics and using metric math functions, see the following 
section: Add a math expression to a CloudWatch graph (p. 136).
Using Contributor Insights built-in rules
You can use Contributor Insights built-in rules to analyze metrics from other AWS services. The following 
services support built-in rules:
•Contributor Insights for Amazon DynamoDB in the Amazon DynamoDB Developer Guide .
•Use built-in Contributor Insights rules in the AWS PrivateLink Guide.
Amazon CloudWatch Application Insights
Amazon CloudWatch Application Insights facilitates observability for your applications and underlying 
AWS resources. It helps you set up the best monitors for your application resources to continuously 
analyze data for signs of problems with your applications. Application Insights, which is powered by
SageMaker and other AWS technologies, provides automated dashboards that show potential problems 
with monitored applications, which help you to quickly isolate ongoing issues with your applications 
and infrastructure. The enhanced visibility into the health of your applications that Application Insights 
provides helps reduce mean time to repair (MTTR) to troubleshoot your application issues.
When you add your applications to Amazon CloudWatch Application Insights, it scans the resources 
in the applications and recommends and conﬁgures metrics and logs on CloudWatch for application 
components. Example application components include SQL Server backend databases and Microsoft IIS/
Web tiers. Application Insights analyzes metric patterns using historical data to detect anomalies, and 
continuously detects errors and exceptions from your application, operating system, and infrastructure 
logs. It correlates these observations using a combination of classiﬁcation algorithms and built-in rules. 
Then, it automatically creates dashboards that show the relevant observations and problem severity 
information to help you prioritize your actions. For common problems in .NET and SQL application 
stacks, such as application latency, SQL Server failed backups, memory leaks, large HTTP requests, and 
canceled I/O operations, it provides additional insights that point to a possible root cause and steps for 
resolution. Built-in integration with AWS SSM OpsCenter allows you to resolve issues by running the 
relevant Systems Manager Automation document.
Sections
•What is Amazon CloudWatch Application Insights? (p. 669)
•How Amazon CloudWatch Application Insights works (p. 675)
•Get started with Amazon CloudWatch Application Insights (p. 683)
•Work with component conﬁgurations (p. 702)
•Create and conﬁgure CloudWatch Application Insights monitoring using CloudFormation 
templates  (p. 748)
•Tutorial: Set up monitoring for SAP HANA (p. 757)
•Tutorial: Set up monitoring for SAP NetWeaver (p. 766)
•View and troubleshoot problems detected by Amazon CloudWatch Application Insights (p. 779)
668Amazon CloudWatch User Guide
What is Amazon CloudWatch Application Insights?
•Logs and metrics supported by Amazon CloudWatch Application Insights (p. 781)
What is Amazon CloudWatch Application Insights?
CloudWatch Application Insights helps you monitor your applications that use Amazon EC2 instances 
along with other application resources (p. 674). It identiﬁes and sets up key metrics, logs, and alarms 
across your application resources and technology stack (for example, your Microsoft SQL Server 
database, web (IIS) and application servers, OS, load balancers, and queues). It continuously monitors 
metrics and logs to detect and correlate anomalies and errors. When errors and anomalies are detected, 
Application Insights generates CloudWatch Events that you can use to set up notiﬁcations or take 
actions. To assist with troubleshooting, it creates automated dashboards for detected problems, which 
include correlated metric anomalies and log errors, along with additional insights to point you to 
a potential root cause. The automated dashboards help you to take remedial actions to keep your 
applications healthy and to prevent impact to the end-users of your application. It also creates OpsItems 
so that you can resolve problems using AWS SSM OpsCenter.
You can conﬁgure important counters, such as Mirrored Write Transaction/sec, Recovery Queue Length, 
and Transaction Delay, as well as Windows Event Logs on CloudWatch. When a failover event or problem 
occurs with your SQL HA workload, such as a restricted access to query a target database, CloudWatch 
Application Insights provides automated insights .
CloudWatch Application Insights integrates with AWS Launch Wizard to provide a one-click monitoring 
setup experience for deploying SQL Server HA workloads on AWS. When you select the option to set up 
monitoring and insights with Application Insights on the Launch Wizard console, CloudWatch Application 
Insights automatically sets up relevant metrics, logs, and alarms on CloudWatch, and starts monitoring 
newly deployed workloads. You can view automated insights and detected problems, along with the 
health of your SQL Server HA workloads, on the CloudWatch console.
Contents
•Features (p. 669)
•Concepts (p. 670)
•Pricing  (p. 670)
•Related services (p. 672)
•Supported application components (p. 674)
•Supported technology stacks (p. 675)
Features
Application Insights provides the following features.
Automatic set up of monitors for application resources
CloudWatch Application Insights reduces the time it takes to set up monitoring for your applications. 
It does this by scanning your application resources, providing a customizable list of recommended 
metrics and logs, and setting them up on CloudWatch to provide necessary visibility into your application 
resources, such as Amazon EC2 and Elastic Load Balancers (ELB). It also sets up dynamic alarms on 
monitored metrics. The alarms are automatically updated based on anomalies detected in the previous 
two weeks.
Problem detection and notiﬁcation
CloudWatch Application Insights detects signs of potential problems with your application, such as 
metric anomalies and log errors. It correlates these observations to surface potential problems with your 
669Amazon CloudWatch User Guide
What is Amazon CloudWatch Application Insights?
application. It then generates CloudWatch Events, which can be conﬁgured to receive notiﬁcations or 
take actions (p. 701). This eliminates the need for you to create individual alarms on metrics or log 
errors.
Troubleshooting
CloudWatch Application Insights creates CloudWatch automatic dashboards for problems that are 
detected. The dashboards show details about the problem, including the associated metric anomalies 
and log errors to help you with troubleshooting. They also provide additional insights that point to 
potential root causes of the anomalies and errors.
Concepts
The following concepts are important for understanding how Application Insights monitors your 
application.
Component
An auto-grouped, standalone, or custom grouping of similar resources that make up an application. We 
recommend grouping similar resources into custom components for better monitoring.
Observation
An individual event (metric anomaly, log error, or exception) that is detected with an application or 
application resource.
Problem
Problems are detected by correlating, classifying, and grouping related observations.
For deﬁnitions of other key concepts for CloudWatch Application Insights, see  Amazon CloudWatch 
Concepts.
Pricing
CloudWatch Application Insights sets up recommended metrics and logs for selected application 
resources using CloudWatch metrics, Logs, and Events for notiﬁcations on detected problems. These 
features are charged to your AWS account according to CloudWatch pricing. For detected problems, SSM 
OpsItems  are also created by Application Insights to notify you about problems. Additionally, Application 
Insights creates SSM Parameter Store parameters to conﬁgure the CloudWatch agents on your instances. 
The Amazon EC2 Systems Manager features are charged according to SSM pricing. You are not charged 
for setup assistance, monitoring, data analysis, or problem detection.
Costs for CloudWatch Application Insights
Costs for Amazon EC2 include usage of the following features:
•CloudWatch Agent
•CloudWatch Agent log groups
•CloudWatch Agent metrics
•Prometheus log groups (for JMX workloads)
Costs for all resources include usage of the following features:
•CloudWatch alarms (majority of cost)
•SSM OpsItems (minimal cost)
670Amazon CloudWatch User Guide
What is Amazon CloudWatch Application Insights?
Example cost calculation
The costs in this example are considered according to the following scenario.
You created a resource group that includes the following:
•An Amazon EC2 instance with SQL Server installed.
•An attached Amazon EBS volume.
When you onboard this resource group with CloudWatch Application Insights, the SQL Server workload 
installed on the Amazon EC2 instance is detected. CloudWatch Application Insights starts monitoring the 
following metrics.
The following metrics are monitored for the SQL Server instance:
•CPUUtilization
•StatusCheckFailed
•Memory % Committed Bytes in Use
•Memory Available Mbytes
•Network Interface Bytes Total/sec
•Paging File % Usage
•Physical Disk % Disk Time
•Processor % Processor Time
•SQLServer:Buﬀer Manager cache hit ratio
•SQLServer:Buﬀer Manager life expectancy
•SQLServer:General Statistics Processes blocked
•SQLServer:General Statistics User Connections
•SQLServer:Locks Number of Deadlocks/sec
•SQLServer:SQL Statistics Batch Requests/sec
•System Processor Queue Length
The following metrics are monitored for the volumes attached to the SQL Server instance:
•VolumeReadBytes
•VolumeWriteBytes
•VolumeReadOps
•VolumeWriteOps
•VolumeTotalReadTime
•VolumeTotalWriteTime
•VolumeIdleTime
•VolumeQueueLength
•VolumeThroughputPercentage
•VolumeConsumedReadWriteOps
•BurstBalance
For this scenario, the costs are calculated according to the CloudWatch pricing page and the SSM pricing
page:
•Custom metrics
671Amazon CloudWatch User Guide
What is Amazon CloudWatch Application Insights?
For this scenario, 13 of the above metrics are emitted to CloudWatch using the CloudWatch agent. 
These metrics are treated as custom metrics. The cost for each custom metric is $.3/month. The total 
cost for these custom metrics is 13 * $.3 = $3.90/month.
•Alarms
For this scenario, CloudWatch Application Insights monitors 26 metrics in total, which creates 26 
alarms. The cost for each alarm is $.1/month. The total cost for alarms is 26 * $.1 = $2.60/month.
•Data ingestion and error logs
The cost of data ingestion is $.05/GB and storage for the SQL Server error log is $.03/GB. The total 
cost for data ingestion and the error log is $.05/GB + $.03/GB= $.08/GB.
•Amazon EC2 Systems Manager OpsItems
An SSM OpsItem is created for each problem detected by CloudWatch Application Insights. For n
number of problems in your application, the total cost is $.00267 * n/month.
Related services
The following services are used along with CloudWatch Application Insights:
Related AWS services
•Amazon CloudWatch provides system‐wide visibility into resource utilization, application 
performance, and operational health. It collects and tracks metrics, sends alarm notiﬁcations, 
automatically updates resources that you are monitoring based on the rules that you deﬁne, and 
allows you to monitor your own custom metrics. CloudWatch Application Insights is initiated 
through CloudWatch—speciﬁcally, within the CloudWatch default operational dashboards. For more 
information, see the Amazon CloudWatch User Guide.
•CloudWatch Container Insights collects, aggregates, and summarizes metrics and logs from your 
containerized applications and microservices. You can use Container Insights to monitor Amazon ECS, 
Amazon Elastic Kubernetes Service, and Kubernetes platforms on Amazon EC2. When Application 
Insights is enabled on the Container Insights or Application Insights consoles, Application Insights 
displays detected problems on your Container Insights dashboard. For more information, see Using 
Container Insights  (p. 464) .
•Amazon DynamoDB is a fully managed NoSQL database service that lets you oﬄoad the 
administrative burdens of operating and scaling a distributed database so that you don't have to 
worry about hardware provisioning, setup and conﬁguration, replication, software patching, or cluster 
scaling. DynamoDB also oﬀers encryption at rest, which eliminates the operational burden and 
complexity involved in protecting sensitive data.
•Amazon EC2 provides scalable computing capacity in the AWS Cloud. You can use Amazon EC2 to 
launch as many or as few virtual servers as you need, to conﬁgure security and networking, and to 
manage storage. You can scale up or down to handle changes in requirements or spikes in popularity, 
which reduces your need to forecast traﬃc. For more information, see the Amazon EC2 User Guide for 
Linux Instances  or Amazon EC2 Guide for Windows Instances.
•Amazon Elastic Block Store (Amazon EBS) provides block-level storage volumes for use with Amazon 
EC2 instances. Amazon EBS volumes behave like raw, unformatted block devices. You can mount 
these volumes as devices on your instances. Amazon EBS volumes that are attached to an instance are 
exposed as storage volumes that persist independently from the life of the instance. You can create 
a ﬁle system on top of these volumes, or use them in any way you would use a block device (such as 
a hard drive). You can dynamically change the conﬁguration of a volume attached to an instance. For 
more information, see the Amazon EBS User Guide.
•Amazon EC2 Auto Scaling helps ensure that you have the correct number of EC2 instances available 
to handle the load for your application. For more information, see the Amazon EC2 Auto Scaling User 
Guide .
672Amazon CloudWatch User Guide
What is Amazon CloudWatch Application Insights?
•Elastic Load Balancing distributes incoming applications or network traﬃc across multiple targets, 
such as EC2 instances, containers, and IP addresses, in multiple Availability Zones. For more 
information, see the Elastic Load Balancing User Guide .
•IAM is a web service that helps you to securely control access to AWS resources for your users. Use 
IAM to control who can use your AWS resources (authentication), and to control the resources they can 
use and how they can use them (authorization). For more information, see Authentication and Access 
Control for Amazon CloudWatch.
•AWS Lambda lets you build serverless applications composed of functions that are triggered by events 
and automatically deploy them using CodePipeline and AWS CodeBuild. For more information, see
AWS Lambda Applications.
•AWS Launch Wizard for SQL Server reduces the time it takes to deploy SQL Server high availability 
solution to the cloud. You input your application requirements, including performance, number of 
nodes, and connectivity on the service console, and AWS Launch Wizard identiﬁes the right AWS 
resources to deploy and run your SQL Server Always On application.
•AWS Resource Groups help you to organize the resources that make up your application. With 
Resource Groups, you can manage and automate tasks on a large number of resources at one time. 
Only one Resource Group can be registered for a single application. For more information, see the AWS 
Resource Groups User Guide.
•Amazon SQS oﬀers a secure, durable, and available hosted queue that allows you to integrate and 
decouple distributed software systems and components. For more information, see the Amazon SQS 
User Guide .
•AWS Step Functions is a serverless function composer that allows you to sequence a variety of AWS 
services and resources, including AWS Lambda functions, into structured, visual workﬂows. For more 
information, see the AWS Step Functions User Guide.
•AWS SSM OpsCenter aggregates and standardizes OpsItems across services while providing 
contextual investigation data about each OpsItem, related OpsItems, and related resources. OpsCenter 
also provides Systems Manager Automation documents (runbooks) that you can use to quickly resolve 
issues. You can specify searchable, custom data for each OpsItem. You can also view automatically-
generated summary reports about OpsItems by status and source. For more information, see the AWS 
Systems Manager User Guide.
•Amazon API Gateway is an AWS service for creating, publishing, maintaining, monitoring, and 
securing REST, HTTP, and WebSocket APIs at any scale. API developers can create APIs that access AWS 
or other web services, as well as data stored in the AWS Cloud. For more information, see the Amazon 
API Gateway User Guide.
Note
Application Insights supports only REST API protocols (v1 of the API Gateway service).
•Amazon Elastic Container Service (Amazon ECS) is a fully managed container orchestration service. 
You can use Amazon ECS to run your most sensitive and mission-critical applications. For more 
information, see the Amazon Elastic Container Service Developer Guide.
•Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that you can use to run 
Kubernetes on AWS without having to install, operate, and maintain your own Kubernetes control 
plane or nodes. Kubernetes is an open-source system for automating the deployment, scaling, and 
management of containerized applications. For more information, see the Amazon EKS User Guide.
•Kubernetes on Amazon EC2. Kubernetes is open-source software that helps you deploy and manage 
containerized applications at scale. Kubernetes manages clusters of Amazon EC2 compute instances 
and runs containers on those instances with processes for deployment, maintenance, and scaling. With 
Kubernetes, you can run any type of containerized application with the same toolset on-premises and 
in the cloud. For more information, see Kubernetes Documentation: Getting started.
•Amazon FSx helps you to launch and run popular ﬁle systems that are fully managed by AWS. 
With Amazon FSx, you can leverage the feature sets and performance of common open source 
and commercially-licensed ﬁle systems to avoid time-consuming administrative tasks. For more 
information, see the Amazon FSx Documentation.
673Amazon CloudWatch User Guide
What is Amazon CloudWatch Application Insights?
•Amazon Simple Notiﬁcation Service (SNS) is a fully-managed messaging service for both application-
to-application and application-to-person communication. You can conﬁgure Amazon SNS for 
monitoring by Application Insights. When Amazon SNS is conﬁgured as a resource for monitoring, 
Application Insights tracks SNS metrics to help determine why SNS messages may encounter issues or 
fail.
•Amazon Elastic File System (Amazon EFS) is a fully-managed elastic NFS ﬁle system for use with 
AWS Cloud services and on-premises resources. It is built to scale to petabytes on demand without 
disrupting applications. It grows and shrinks automatically as you add and remove ﬁles, which 
eliminates the need to provision and manage capacity to accommodate growth. For more information, 
see the Amazon Elastic File System documentation.
Related third-party services
•For some workloads and applications monitored in Application Insights, Prometheus JMX exporter
is installed using AWS Systems Manager Distributor so that CloudWatch Application Insights can 
retrieve Java-speciﬁc metrics. When you choose to monitor a Java application, Application Insights 
automatically installs the Prometheus JMX exporter for you.
Supported application components
CloudWatch Application Insights scans your resource group to identify application components. 
Components can be standalone, auto-grouped (such as instances in an Auto Scaling group or behind a 
load balancer), or custom (by grouping together individual Amazon EC2 instances).
The following components are supported by CloudWatch Application Insights:
AWS components
•Amazon EC2
•Amazon EBS
•Amazon RDS
•Elastic Load Balancing: Application Load Balancer and Classic Load Balancer (all target instances of 
these load balancers are identiﬁed and conﬁgured).
•Amazon EC2 Auto Scaling groups: AWS Auto Scaling (Auto Scaling groups are dynamically conﬁgured 
for all target instances; if your application scales up, CloudWatch Application Insights automatically 
conﬁgures the new instances). Auto Scaling groups are not supported for CloudFormation stack-based 
resource groups.
•AWS Lambda
•Amazon Simple Queue Service (Amazon SQS)
•Amazon DynamoDB table
•Amazon S3 bucket metrics
•AWS Step Functions
•Amazon API Gateway REST API stages
•Amazon Elastic Container Service (Amazon ECS): cluster, service, and task
•Amazon Elastic Kubernetes Service (Amazon EKS): cluster
•Kubernetes on Amazon EC2: Kubernetes cluster running on EC2
•Amazon SNS topic
Any other component type resources are not currently tracked by CloudWatch Application Insights. 
If a component type that is supported does not appear in your Application Insights application, the 
674Amazon CloudWatch User Guide
How Application Insights works
component may already be registered and managed by another application you own that is monitored 
by Application Insights.
Supported technology stacks
You can use CloudWatch Application Insights to monitor your applications running on Windows Server 
and Linux operating systems by selecting the application tier dropdown menu option for one of the 
following technologies:
•Front‐end: Microsoft Internet Information Services (IIS) Web Server
•Worker‐tier:
•.NET Framework
•.NET Core
•Applications:
•Java
•SAP NetWeaver distributed and high availability deployments
•Active Directory
•SharePoint
•Databases:
•Microsoft SQL Server running on Amazon RDS or Amazon EC2 (including SQL Server High 
Availability conﬁgurations. See, Component conﬁguration examples (p. 709)).
•MySQL running on Amazon RDS, Amazon Aurora, or Amazon EC2
•PostgreSQL running on Amazon RDS or Amazon EC2
•Amazon DynamoDB table
•Oracle running on Amazon RDS or Amazon EC2
•SAP HANA database on a single Amazon EC2 instance and multiple EC2 instances
•Cross-AZ SAP HANA database high availability setup.
If none of the technology stacks listed above apply to your application resources, you can monitor 
your application stack by choosing Custom  from the application tier dropdown menu on the Manage 
monitoring  page.
How Amazon CloudWatch Application Insights works
This section contains information about how CloudWatch Application Insights works, including:
•How Application Insights monitors applications (p. 675)
•Data retention (p. 676)
•Quotas  (p. 676)
•AWS Systems Manager (SSM) packages used by CloudWatch Application Insights (p. 676)
How Application Insights monitors applications
Application Insights monitors applications as follows.
Application discovery and conﬁguration
The ﬁrst time an application is added to CloudWatch Application Insights it scans the application 
components to recommend key metrics, logs, and other data sources to monitor for your application. 
You can then conﬁgure your application based on these recommendations.
675Amazon CloudWatch User Guide
How Application Insights works
Data preprocessing
CloudWatch Application Insights continuously analyzes the data sources being monitored across the 
application resources to discover metric anomalies and log errors (observations).
Intelligent problem detection
The CloudWatch Application Insights engine detects problems in your application by correlating 
observations using classiﬁcation algorithms and built-in rules. To assist in troubleshooting, it creates 
automated CloudWatch dashboards, which include contextual information about the problems.
Alert and action
When CloudWatch Application Insights detects a problem with your application, it generates CloudWatch 
Events to notify you of the problem. See Application Insights CloudWatch Events and notiﬁcations for 
detected problems (p. 701) for more information about how to set up these Events.
Example scenario
You have an ASP .NET application that is backed by a SQL Server database. Suddenly, your database 
begins to malfunction because of high memory pressure. This leads to application performance 
degradation and possibly HTTP 500 errors in your web servers and load balancer.
With CloudWatch Application Insights and its intelligent analytics, you can identify the application layer 
that is causing the problem by checking the dynamically created dashboard that shows the related 
metrics and log ﬁle snippets. In this case, the problem might be at the SQL database layer.
Data retention
CloudWatch Application Insights retains problems for 55 days and observations for 60 days.
Quotas
For default quotas for CloudWatch Application Insights, see Amazon CloudWatch Application Insights 
endpoints and quotas . Unless otherwise noted, each quota is per AWS Region. Contact AWS Support
to request an increase in your service quota. Many services contain quotas that cannot be changed. For 
more information about the quotas for a speciﬁc service, see the documentation for that service.
AWS Systems Manager (SSM) packages used by CloudWatch 
Application Insights
The packages listed in this section are used by Application Insights, and can be independently managed 
and deployed with AWS Systems Manager Distributor. For more information about SSM Distributor, see
AWS Systems Manager Distributor in the AWS Systems Manager User Guide.
Packages:
•AWSObservabilityExporter-JMXExporterInstallAndConﬁgure (p. 676)
•AWSObservabilityExporter-SAP-HANADBExporterInstallAndConﬁgure (p. 679)
•AWSObservabilityExporter-HAClusterExporterInstallAndConﬁgure (p. 681)
•AWSObservabilityExporter-SAP-SAPHostExporterInstallAndConﬁgure (p. 682)
AWSObservabilityExporter-JMXExporterInstallAndConfigure
You can retrieve workload-speciﬁc Java metrics from Prometheus JMX exporter for Application Insights 
to conﬁgure and monitor alarms. In the Application Insights console, on the Manage monitoring  page, 
676Amazon CloudWatch User Guide
How Application Insights works
select JAVA application from the Application tier  dropdown. Then under JAVA Prometheus exporter 
conﬁguration, select your Collection method and JMX port number.
To use AWS Systems Manager Distributor to package, install, and conﬁgure the AWS-provided 
Prometheus JMX exporter package independently of Application Insights, complete the following steps.
Prerequisites for using the Prometheus JMX exporter SSM package
•SSM agent version 2.3.1550.0 or later installed
•The JAVA_HOME environment variable is set
Install and conﬁgure the AWSObservabilityExporter-JMXExporterInstallAndConfigure
package
The AWSObservabilityExporter-JMXExporterInstallAndConfigure  package is an SSM 
Distributor package that you can use to install and conﬁgure Prometheus JMX Exporter. When Java 
metrics are sent by the Prometheus JMX exporter, the CloudWatch agent can be conﬁgured to retrieve 
the metrics for the CloudWatch service.
1.Based on your preferences, prepare the Prometheus JMX exporter YAML conﬁguration ﬁle located in 
the Prometheus GitHub repository. Use the example conﬁguration and option descriptions to guide 
you.
2.Copy the Prometheus JMX exporter YAML conﬁguration ﬁle encoded as Base64 to a new SSM 
parameter in SSM Parameter Store.
3.Navigate to the SSM Distributor console and open the Owned by Amazon tab. Select
AWSObservabilityExporter-JMXExporterInstallAndConﬁgure and choose Install one time .
4.Update the SSM parameter you created in the ﬁrst step by replacing "Additional Arguments" with the 
following:
{ 
  "SSM_EXPORTER_CONFIGURATION": "{{ssm: <SSM_PARAMETER_STORE_NAME> }}", 
  "SSM_EXPOSITION_PORT": "9404"
}
Note
Port 9404 is the default port used to send Prometheus JMX metrics. You can update this port.
Example: Conﬁgure CloudWatch agent to retrieve Java metrics
1. Install the Prometheus JMX exporter, as described in the previous procedure. Then verify that it is 
correctly installed on your instance by checking the port status.
Successful installation on Windows instance example
PS C:\> curl http://localhost:9404 (http://localhost:9404/)
StatusCode : 200
StatusDescription : OK
Content : # HELP jvm_info JVM version info
Successful installation on Linux instance example
$ curl localhost:9404
# HELP jmx_config_reload_failure_total Number of times configuration have failed to be 
 reloaded.
# TYPE jmx_config_reload_failure_total counter
677Amazon CloudWatch User Guide
How Application Insights works
jmx_config_reload_failure_total 0.0
2. Create the Prometheus service discovery YAML ﬁle. The following example service discovery ﬁle 
performs the following:
•Speciﬁes the Prometheus JMX exporter host port as localhost: 9404 .
•Attaches labels (Application , ComponentName , and InstanceId ) to the metrics, which can be 
set as CloudWatch metric dimensions.
$ cat prometheus_sd_jmx.yaml  
- targets: 
  - 127.0.0.1:9404 
  labels: 
    Application: myApp
    ComponentName: arn:aws:elasticloadbalancing: us-east-1:123456789012 :loadbalancer/
app/sampl-Appli-MMZW8E3GH4H2/aac36d7fea2a6e5b 
    InstanceId: i-12345678901234567
3. Create the Prometheus JMX exporter conﬁguration YAML ﬁle. The following example conﬁguration 
ﬁle speciﬁes the following:
•The metrics retrieval job interval and timeout period.
•The metrics retrieval jobs (jmx and sap), also known as scraping, which include the job name, 
maximum time series returned at a time, and service discovery ﬁle path.
$ cat prometheus.yaml  
global: 
  scrape_interval: 1m 
  scrape_timeout: 10s
scrape_configs: 
  - job_name: jmx 
    sample_limit: 10000 
    file_sd_configs: 
      - files: ["/tmp/prometheus_sd_jmx.yaml"] 
  - job_name: sap 
    sample_limit: 10000 
    file_sd_configs: 
      - files: ["/tmp/prometheus_sd_sap.yaml"]
4. Verify that the CloudWatch agent is installed on your Amazon EC2 instance and that the version is 
1.247346.1b249759 or later. To install the CloudWatch agent on your EC2 instance, see Installing 
the CloudWatch Agent. To verify the version, see Finding information about CloudWatch agent 
versions.
5. Conﬁgure the CloudWatch agent. For more information about how to conﬁgure the CloudWatch 
agent conﬁguration ﬁle, see Manually create or edit the CloudWatch agent conﬁguration ﬁle. The 
following example CloudWatch agent conﬁguration ﬁle performs the following:
•Speciﬁes the Prometheus JMX exporter conﬁguration ﬁle path.
•Speciﬁes the target log group to which to publish EMF metric logs.
•Speciﬁes two sets of dimensions for each metric name.
•Sends 8 (4 metric names * 2 sets of dimensions per metric name) CloudWatch metrics.
{ 
   "logs":{ 
      "logs_collected":{ 
         .... 
678Amazon CloudWatch User Guide
How Application Insights works
      }, 
      "metrics_collected":{ 
         "prometheus":{ 
            "cluster_name":"prometheus-test-cluster", 
            "log_group_name":"prometheus-test", 
            "prometheus_config_path":"/tmp/prometheus.yaml", 
            "emf_processor":{ 
               "metric_declaration_dedup":true, 
               "metric_namespace":"CWAgent", 
               "metric_unit":{ 
                  "jvm_threads_current":"Count", 
                  "jvm_gc_collection_seconds_sum":"Second", 
                  "jvm_memory_bytes_used":"Bytes" 
               }, 
               "metric_declaration":[ 
                  { 
                     "source_labels":[ 
                        "job" 
                     ], 
                     "label_matcher":"^jmx$", 
                     "dimensions":[ 
                        [ 
                           "InstanceId", 
                           "ComponentName" 
                        ], 
                        [ 
                           "ComponentName" 
                        ] 
                     ], 
                     "metric_selectors":[ 
                        "^java_lang_threading_threadcount$", 
                        "^java_lang_memory_heapmemoryusage_used$", 
                        "^java_lang_memory_heapmemoryusage_committed$" 
                     ] 
                  } 
               ] 
            } 
         } 
      } 
   }, 
   "metrics":{ 
      .... 
   }
}
AWSObservabilityExporter-SAP-
HANADBExporterInstallAndConfigure
You can retrieve workload-speciﬁc SAP HANA metrics from Prometheus HANA database exporter for 
Application Insights to conﬁgure and monitor alarms. For more information, see Set up your SAP HANA 
database for monitoring  (p. 760) in this guide.
To use AWS Systems Manager Distributor to package, install, and conﬁgure the AWS-provided 
Prometheus HANA database exporter package independently of Application Insights, complete the 
following steps.
Prerequisites for using the Prometheus HANA database exporter SSM package
•SSM agent version 2.3.1550.0 or later installed
•SAP HANA database
•Linux operating system (SUSE Linux, RedHat Linux)
679Amazon CloudWatch User Guide
How Application Insights works
•A secret with SAP HANA database monitoring credentials, using AWS Secrets Manager. Create a secret 
using the key/value pairs format, specify the key user name, and enter the database user for the value. 
Add a second key password, and then enter the password for the value. For more information about 
how to create secrets, see Create a secret in the AWS Secrets Manager User Guide. The secret must be 
formatted as follows:
{ 
  "username": " <database_user> ", 
  "password": " <database_password> "
}
Install and conﬁgure the AWSObservabilityExporter-SAP-
HANADBExporterInstallAndConfigure  package
The AWSObservabilityExporter-SAP-HANADBExporterInstallAndConfigure  package is an 
SSM Distributor package that you can use to install and conﬁgure Prometheus HANA database Exporter. 
When HANA database metrics are sent by the Prometheus HANA database exporter, the CloudWatch 
agent can be conﬁgured to retrieve the metrics for the CloudWatch service.
1.Create an SSM parameter in SSM Parameter Store to store the Exporter conﬁgurations. The following 
is an example parameter value.
{\"exposition_port\":9668,\"multi_tenant\":true,\"timeout\":600,\"hana\":{\"host\":
\"localhost\",\"port\":30013,\"aws_secret_name\":\"HANA_DB_CREDS\",\"scale_out_mode
\":true}}
Note
In this example, the export runs only on the Amazon EC2 instance with the active SYSTEM
database, and it will remain idle on the other EC2 instances in order to avoid duplicate 
metrics. The exporter can retrieve all of the database tenant information from the SYSTEM
database.
2.Create an SSM parameter in SSM Parameter Store to store the Exporter metrics queries. The package 
can accept more than one metrics parameter. Each parameter must have a valid JSON object format. 
The following is an example parameter value:
{\"SELECT MAX(TIMESTAMP) TIMESTAMP, HOST, MEASURED_ELEMENT_NAME CORE, 
 SUM(MAP(CAPTION, 'User Time', TO_NUMBER(VALUE), 0)) USER_PCT, SUM(MAP(CAPTION, 
 'System Time', TO_NUMBER(VALUE), 0)) SYSTEM_PCT, SUM(MAP(CAPTION, 'Wait Time', 
 TO_NUMBER(VALUE), 0)) WAITIO_PCT, SUM(MAP(CAPTION, 'Idle Time', 0, TO_NUMBER(VALUE))) 
 BUSY_PCT, SUM(MAP(CAPTION, 'Idle Time', TO_NUMBER(VALUE), 0)) IDLE_PCT FROM 
 sys.M_HOST_AGENT_METRICS WHERE MEASURED_ELEMENT_TYPE = 'Processor' GROUP BY HOST, 
 MEASURED_ELEMENT_NAME;\":{\"enabled\":true,\"metrics\":[{\"name\":\"hanadb_cpu_user
\",\"description\":\"Percentage of CPU time spent by HANA DB in user space, over the 
 last minute (in seconds)\",\"labels\":[\"HOST\",\"CORE\"],\"value\":\"USER_PCT\",\"unit
\":\"percent\",\"type\":\"gauge\"},{\"name\":\"hanadb_cpu_system\",\"description\":
\"Percentage of CPU time spent by HANA DB in Kernel space, over the last minute (in 
 seconds)\",\"labels\":[\"HOST\",\"CORE\"],\"value\":\"SYSTEM_PCT\",\"unit\":\"percent
\",\"type\":\"gauge\"},{\"name\":\"hanadb_cpu_waitio\",\"description\":\"Percentage of 
 CPU time spent by HANA DB in IO mode, over the last minute (in seconds)\",\"labels\":
[\"HOST\",\"CORE\"],\"value\":\"WAITIO_PCT\",\"unit\":\"percent\",\"type\":\"gauge\"},
{\"name\":\"hanadb_cpu_busy\",\"description\":\"Percentage of CPU time spent by HANA DB, 
 over the last minute (in seconds)\",\"labels\":[\"HOST\",\"CORE\"],\"value\":\"BUSY_PCT
\",\"unit\":\"percent\",\"type\":\"gauge\"},{\"name\":\"hanadb_cpu_idle\",\"description
\":\"Percentage of CPU time not spent by HANA DB, over the last minute (in seconds)\",
\"labels\":[\"HOST\",\"CORE\"],\"value\":\"IDLE_PCT\",\"unit\":\"percent\",\"type\":
\"gauge\"}]}}
For more information about metrics queries, see the SUSE / hanadb_exporter  repo on GitHub.
680Amazon CloudWatch User Guide
How Application Insights works
3.Navigate to the SSM Distributor console and open the Owned by Amazon tab. Select
AWSObservabilityExporter-SAP-HANADBExporterInstallAndConﬁgure* and choose Install one 
time .
4.Update the SSM parameter you created in the ﬁrst step by replacing "Additional Arguments" with the 
following:
{ 
  "SSM_EXPORTER_CONFIG": "{{ssm:<*SSM_CONFIGURATIONS_PARAMETER_STORE_NAME>*}}", 
  "SSM_SID": "<SAP_DATABASE_SID>", 
  "SSM_EXPORTER_METRICS_1": "{{ssm:<SSM_FIRST_METRICS_PARAMETER_STORE_NAME>}}", 
  "SSM_EXPORTER_METRICS_2": "{{ssm:<SSM_SECOND_METRICS_PARAMETER_STORE_NAME>}}"
}
5.Select the Amazon EC2 instances with SAP HANA database, and choose Run.
AWSObservabilityExporter-
HAClusterExporterInstallAndConfigure
You can retrieve workload-speciﬁc High Availability (HA) cluster metrics from Prometheus HANA cluster 
exporter for Application Insights to conﬁgure and monitor alarms for an SAP HANA database High 
Availability setup. For more information, see Set up your SAP HANA database for monitoring (p. 760) in 
this guide.
To use AWS Systems Manager Distributor to package, install, and conﬁgure the AWS-provided 
Prometheus HA cluster exporter package independently of Application Insights, complete the following 
steps.
Prerequisites for using the Prometheus HA cluster exporter SSM package
•SSM agent version 2.3.1550.0 or later installed
•HA cluster for Pacemaker, Corosync, SBD, and DRBD
•Linux operating system (SUSE Linux, RedHat Linux)
Install and conﬁgure the AWSObservabilityExporter-
HAClusterExporterInstallAndConfigure  package
The AWSObservabilityExporter-HAClusterExporterInstallAndConfigure  package is an SSM 
Distributor package that you can use to install and conﬁgure Prometheus HA Cluster Exporter. When 
cluster metrics are sent by the Prometheus HANA database exporter, the CloudWatch agent can be 
conﬁgured to retrieve the metrics for the CloudWatch service.
1.Create an SSM parameter in SSM Parameter Store to store the Exporter conﬁgurations in JSON 
format. The following is an example parameter value.
{\"port\":\"9664\",\"address\":\"0.0.0.0\",\"log-level\":\"info\",\"crm-mon-path\":\"/
usr/sbin/crm_mon\",\"cibadmin-path\":\"/usr/sbin/cibadmin\",\"corosync-cfgtoolpath-path
\":\"/usr/sbin/corosync-cfgtool\",\"corosync-quorumtool-path\":\"/usr/sbin/corosync-
quorumtool\",\"sbd-path\":\"/usr/sbin/sbd\",\"sbd-config-path\":\"/etc/sysconfig/sbd\",
\"drbdsetup-path\":\"/sbin/drbdsetup\",\"enable-timestamps\":false}
For more information about the exporter conﬁgurations, see the ClusterLabs / 
ha_cluster_exporter  repo on GitHub.
2.Navigate to the SSM Distributor console and open the Owned by Amazon tab. Select
AWSObservabilityExporter-HAClusterExporterInstallAndConﬁgure* and choose Install one time .
3.Update the SSM parameter you created in the ﬁrst step by replacing "Additional Arguments" with the 
following:
681Amazon CloudWatch User Guide
How Application Insights works
{ 
  "SSM_EXPORTER_CONFIG": "{{ssm:<*SSM_CONFIGURATIONS_PARAMETER_STORE_NAME>*}}"
}
4.Select the Amazon EC2 instances with SAP HANA database, and choose Run.
AWSObservabilityExporter-SAP-
SAPHostExporterInstallAndConfigure
You can retrieve workload-speciﬁc SAP NetWeaver metrics from Prometheus SAP host exporter
for Application Insights to conﬁgure and monitor alarms for SAP NetWeaver Distributed and High 
Availability deployments. For more information, see Get started with Amazon CloudWatch Application 
Insights  (p. 683).
To use AWS Systems Manager Distributor to package, install, and conﬁgure the SAP host exporter 
package independently of Application Insights, complete the following steps.
Prerequisites for using the Prometheus SAP host exporter SSM package
•SSM agent version 2.3.1550.0 or later installed
•SAP NetWeaver application servers
•Linux operating system (SUSE Linux, RedHat Linux)
Install and conﬁgure the AWSObservabilityExporter-SAP-
SAPHostExporterInstallAndConfigure  package
The AWSObservabilityExporter-SAP-SAPHostExporterInstallAndConfigure  package is an 
SSM Distributor package that you can use to install and conﬁgure SAP NetWeaver Prometheus metrics 
exporter. When SAP NetWeaver metrics are sent by the Prometheus exporter, the CloudWatch agent can 
be conﬁgured to retrieve the metrics for the CloudWatch service.
1.Create an SSM parameter in SSM Parameter Store to store the Exporter conﬁgurations in JSON 
format. The following is an example parameter value.
{\"address\":\"0.0.0.0\",\"port\":\"9680\",\"log-level\":\"info\",\"is-HA\":false}
•address
The target address to which to send the Prometheus metrics. The default value is localhost .
•port
The target port to which to send the Prometheus metrics. The default value is 9680 .
•is-HA
true for SAP NetWeaver High Availability deployments. For all other deployments the value is
false .
2.Navigate to the SSM Distributor console and open the Owned by Amazon tab. Select
AWSObservabilityExporter-SAP-SAPHostExporterInstallAndConﬁgure and choose Install one time .
3.Update the SSM parameter you created in the ﬁrst step by replacing "Additional Arguments" with the 
following:
{ 
  "SSM_EXPORTER_CONFIG": "{{ssm: <SSM_CONFIGURATIONS_PARAMETER_STORE_NAME> }}", 
682Amazon CloudWatch User Guide
Get started
  "SSM_SID": " <SAP_DATABASE_SID> ", 
  "SSM_INSTANCES_NUM": " <instances_number seperated by comma> "
}                    
Example
{ 
  "SSM_EXPORTER_CONFIG": "{{ssm:exporter_config_paramter}}", 
  "SSM_INSTANCES_NUM": "11,12,10", 
  "SSM_SID": "PR1"
}
4.Select the Amazon EC2 instances with SAP NetWeaver applications, and choose Run.
Note
The Prometheus exporter services the SAP NetWeaver metrics on a local endpoint. The local 
endpoint can be accessed by only the operating system users on the Amazon EC2 instance. 
Therefore, after the exporter package is installed, the metrics are available to all of the 
operating system users. The default local endpoint is localhost:9680/metrics .
Get started with Amazon CloudWatch Application 
Insights
To get started with CloudWatch Application Insights, verify that you have met the following prerequisites 
and have created an IAM policy. Then, you can get started using the console link to enable CloudWatch 
Application Insights. To conﬁgure your application resources, follow the steps under Set up, conﬁgure, 
and manage your application for monitoring (p. 686).
Contents
•Access CloudWatch Application Insights (p. 683)
•Prerequisites (p. 683)
•IAM policy (p. 684)
•IAM role permissions for account-based application onboarding (p. 685)
•Set up, conﬁgure, and manage your application for monitoring (p. 686)
Access CloudWatch Application Insights
You can access and manage CloudWatch Application Insights through one of the following interfaces:
•CloudWatch console. To add monitors for your application, choose Application Insights  under
Insights  in the left navigation pane of the CloudWatch console. After your application is conﬁgured, 
you can use the CloudWatch console to view and analyze problems that are detected.
•AWS Command Line Interface (AWS CLI). You can use the AWS CLI to access AWS API operations. For 
more information, see Installing the AWS Command Line Interface in the AWS Command Line Interface 
User Guide . For Application Insights  API information, see the Amazon CloudWatch Application Insights 
API Reference.
Prerequisites
You must complete the following prerequisites to conﬁgure an application with CloudWatch Application 
Insights:
683Amazon CloudWatch User Guide
Get started
•AWS Systems Manager enablement – Install Systems Manager Agent (SSM Agent) on your Amazon 
EC2 instances, and enable the instances for SSM. For information about how to install the SSM Agent, 
see Setting up AWS Systems Manager in the AWS Systems Manager User Guide.
•EC2 instance role – You must attach the following Amazon EC2 instance roles to enable Systems 
Manager
•You must attach the AmazonSSMManagedInstanceCore  role to enable Systems Manager. For more 
information, see AWS Systems Manager identity-based policy examples.
•You must attach the CloudWatchAgentServerPolicy  policy to enable instance metrics and logs 
to be emitted through CloudWatch. For more information, see Create IAM roles and users for use 
with CloudWatch agent.
•AWS resource groups – To onboard your applications to CloudWatch Application Insights, create a 
resource group that includes all of the associated AWS resources used by your application stack. This 
includes application load balancers, Amazon EC2 instances running IIS and web front‐end, .NET worker 
tiers, and SQL Server databases. For more information about application components and technology 
stacks supported by Application Insights, see Supported application components (p. 674). 
CloudWatch Application Insights automatically includes Auto Scaling groups using the same tags 
or CloudFormation stacks as your resource group, because Auto Scaling groups are not supported 
by CloudFormation resource groups. For more information, see Getting Started with AWS Resource 
Groups.
•IAM permissions  – For users who don't have administrative access, you must create an AWS Identity 
and Access Management (IAM) policy that allows Application Insights to create a service-linked role 
and attach it to the user's identity. For more information about how to create the IAM policy, see IAM 
policy (p. 684).
•Service-linked role – Application Insights uses AWS Identity and Access Management (IAM) service-
linked roles. A service-linked role is created for you when you create your ﬁrst Application Insights 
application in the Application Insights console. For more information, see Using service-linked roles for 
CloudWatch Application Insights (p. 1201 ).
•Performance Counter metrics support for EC2 Windows instances – To monitor Performance 
Counter metrics on your Amazon EC2 Windows instances, Performance Counters must be installed on 
the instances. For Performance Counter metrics and corresponding Performance Counter set names, 
see Performance Counter metrics (p. 841). For more information about Performance Counters, see
Performance Counters.
•Amazon CloudWatch agent – Application Insights installs and conﬁgures the CloudWatch agent. If 
you have CloudWatch agent installed, Application Insights retains your conﬁguration. To avoid a merge 
conﬂict, remove the conﬁguration of resources that you want to use in Application Insights from the 
existing CloudWatch agent conﬁguration ﬁle. For more information, see  Manually create or edit the 
CloudWatch agent conﬁguration ﬁle (p. 903).
IAM policy
To use CloudWatch Application Insights, you must create an AWS Identity and Access Management (IAM) 
policy and attach it to your user, group, or role. For more information about users, groups, and roles, see
IAM Identities (users, user groups, and roles). The IAM policy deﬁnes the user permissions.
To create an IAM policy using the console
To create an IAM policy using the IAM console, perform the following steps.
1. Go to the IAM console. In the left navigation pane, select Policies.
2. At the top of the page, select Create policy.
3. Select the JSON tab.
4. Copy and paste the following JSON document under the JSON tab.
{ 
684Amazon CloudWatch User Guide
Get started
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Action": [ 
                "applicationinsights:*", 
                "iam:CreateServiceLinkedRole", 
                "iam:ListRoles", 
                "resource-groups:ListGroups" 
            ], 
            "Effect": "Allow", 
            "Resource": "*" 
        } 
    ]
}               
5. Select Review Policy.
6. Enter a Name  for the policy, for example, “AppInsightsPolicy.” Optionally, enter a Description .
7. Select Create Policy.
8. In the left navigation pane, select User groups , Users , or Roles.
9. Select the name of the user group, user, or role to which you would like to attach the policy.
10. Select Add permissions .
11. Select Attach existing policies directly.
12. Search for the policy that you just created, and select the check box to the left of the policy name.
13. Select Next: Review.
14. Make sure that the correct policy is listed, and select Add permissions .
15. Make sure that you log in with the user associated with the policy that you just created when you 
use CloudWatch Application Insights.
To create an IAM policy using the AWS CLI
To create an IAM policy using the AWS CLI, run the create-policy operation from the command line using 
the JSON document above as a ﬁle in your current folder.
To create an IAM policy using AWS Tools for Windows PowerShell
To create an IAM policy using the AWS Tools for Windows PowerShell, run the New-IAMPolicy cmdlt 
using the JSON document above as a ﬁle in your current folder.
IAM role permissions for account-based application onboarding
If you want to onboard all of the resources in your account, and you choose not to use the Application 
Insights managed policy (p. 1209 ) for full access to Application Insights functionality, you must attach 
the following permissions to your IAM role so that Application Insights can discover all of the resources in 
your account:
"ec2:DescribeInstances"  
"ec2:DescribeNatGateways"
"ec2:DescribeVolumes"
"ec2:DescribeVPCs"
"rds:DescribeDBInstances"
"rds:DescribeDBClusters"
"sqs:ListQueues"
"elasticloadbalancing:DescribeLoadBalancers"
"autoscaling:DescribeAutoScalingGroups"
"lambda:ListFunctions"
"dynamodb:ListTables"
"s3:ListAllMyBuckets"
685Amazon CloudWatch User Guide
Get started
"sns:ListTopics"
"states:ListStateMachines"
"apigateway:GET"
"ecs:ListClusters"
"ecs:DescribeTaskDefinition"  
"ecs:ListServices"
"ecs:ListTasks"
"eks:ListClusters"
"eks:ListNodegroups"
"fsx:DescribeFileSystems"
"route53:ListHealthChecks"
"route53:ListHostedZones"
"route53:ListQueryLoggingConfigs"
"route53resolver:ListFirewallRuleGroups"
"route53resolver:ListFirewallRuleGroupAssociations"
"route53resolver:ListResolverEndpoints"
"route53resolver:ListResolverQueryLogConfigs"
"route53resolver:ListResolverQueryLogConfigAssociations"
"logs:DescribeLogGroups"
Set up, conﬁgure, and manage your application for monitoring
This section provides steps to set up, conﬁgure, and manage your CloudWatch Application Insights 
application using the console, the AWS CLI, and AWS Tools for Windows PowerShell.
Topics
•Set up, conﬁgure, and manage your application for monitoring from the CloudWatch 
console (p. 686)
•Set up, conﬁgure, and manage your application for monitoring using the command line (p. 689)
•Application Insights CloudWatch Events and notiﬁcations for detected problems (p. 701)
Set up, conﬁgure, and manage your application for monitoring from the 
CloudWatch console
This section provides steps to set up, conﬁgure, and manage your application for monitoring from the 
CloudWatch console.
Console procedures
•Add and conﬁgure an application  (p. 686)
•Enable Application Insights for Amazon ECS and Amazon EKS resource monitoring (p. 688)
•Disable monitoring for an application component (p. 689)
•Delete an application  (p. 689)
Add and conﬁgure an application
Add and conﬁgure an application from the CloudWatch console
To get started with CloudWatch Application Insights from the CloudWatch console, perform the 
following steps.
1. Start. Open the CloudWatch console landing page. From the left navigation pane, under Insights , 
choose Application Insights . The page that opens shows the list of applications that are monitored 
with CloudWatch Application Insights, along with their monitoring status.
2. Add an application.  To set up monitoring for your application, choose Add an application . When 
you choose Add an application , you are prompted to Choose Application Type.
686Amazon CloudWatch User Guide
Get started
•Resource group-based application. When you select this option, you can choose which resource 
groups in this account to monitor.
•Account-based application. When you select this option, you can monitor all of the resources in 
this account. If you want to monitor all of the resources in an account, we recommend this option 
over the resource group-based option because the application onboarding process is faster.
Note
You cannot combine resource group-based monitoring with account-based monitoring 
using Application Insights. In order to change the application type, you must delete all of 
the applications that are being monitored, and Choose Application Type.
When you add your ﬁrst application for monitoring, CloudWatch Application Insights creates a 
service-linked role in your account, which gives Application Insights permissions to call other AWS 
services on your behalf. For more information about the service-linked role created in your account 
by Application Insights, see Using service-linked roles for CloudWatch Application Insights (p. 1201 ).
3. Resource-based application monitoring
1.Select resource group. On the Specify application details page, select the AWS resource 
group that contains your application resources from the dropdown list. These resources 
include front-end servers, load balancers, auto scaling groups, and database servers.
If you have not created a resource group for your application, you can create one by choosing
Create new resource group. For more information about creating resource groups, see the
AWS Resource Groups User Guide.
2.Monitor CloudWatch Events. Select the check box to integrate Application Insights 
monitoring with CloudWatch Events to get insights from Amazon EBS, Amazon EC2, AWS 
CodeDeploy, Amazon ECS, AWS Health APIs And Notiﬁcations, Amazon RDS, Amazon S3, and 
AWS Step Functions.
3.Integrate with AWS Systems Manager OpsCenter. To view and get notiﬁed when problems 
are detected for selected applications, select the Generate Systems Manager OpsCenter 
OpsItems for remedial actions check box. To track the operations that are taken to resolve 
operational work items (OpsItems) that are related to your AWS resources, provide the SNS 
topic ARN.
4.Tags — optional. CloudWatch Application Insights supports both tag-based and 
CloudFormation-based resource groups (with the exception of Auto Scaling groups). For more 
information, see Working with Tag Editor.
5.Choose Next.
An ARN  is generated for the application in the following format.
arn:partition :applicationinsights: region:account-id :application/resource-
group/resource-group-name
Example
arn:aws:applicationinsights:us-east-1:123456789012:application/resource-group/my-
resource-group
Account-based application monitoring
1.Application name . Enter a name for your account-based application.
2.Automated monitoring of new resources. By default, Application Insights uses 
recommended settings to conﬁgure monitoring for resource components that are added to 
687Amazon CloudWatch User Guide
Get started
your account after you onboard the application. You can exclude monitoring for resources 
added after onboarding your application by clearing the check box.
3.Monitor CloudWatch Events. Select the check box to integrate Application Insights 
monitoring with CloudWatch Events to get insights from Amazon EBS, Amazon EC2, AWS 
CodeDeploy, Amazon ECS, AWS Health APIs And Notiﬁcations, Amazon RDS, Amazon S3, and 
AWS Step Functions.
4.Integrate with AWS Systems Manager OpsCenter. To view and get notiﬁed when problems 
are detected for selected applications, select the Generate Systems Manager OpsCenter 
OpsItems for remedial actions check box. To track the operations that are taken to resolve 
operational work items (OpsItems) that are related to your AWS resources, provide the SNS 
topic ARN.
5.Tags — optional. CloudWatch Application Insights supports both tag-based and 
CloudFormation-based resource groups (with the exception of Auto Scaling groups). For more 
information, see Working with Tag Editor.
6.Discovered resources. All of the resources discovered in your account are added to this list. 
If Application Insights is unable to discover all of the resources in your account, an error 
message appears at the top of the page. This message includes a link to the documentation 
for how to add the required permissions (p. 685).
7.Choose Next.
An ARN  is generated for the application in the following format.
arn:partition :applicationinsights: region:account-id :application/TBD/ application-
name
Example
arn:aws:applicationinsights:us-east-1:123456789012:application/TBD/my-application
4. After you submit your application monitoring conﬁguration, you will be taken to the details page for 
the application, where you can view the Application summary, the list of Monitored components
and Unmonitored components, and, by selecting the tabs next to Components , the Conﬁguration 
history, Log patterns, and any Tags that you have applied.
To view insights for the application, choose View Insights .
You can update your selections for CloudWatch Events monitoring and integration with AWS 
Systems Manager OpsCenter by choosing Edit.
Under Components , you can select the Actions menu to Create, Modify, or Ungroup an instance 
group.
You can manage monitoring for components, including application tier, log groups, event logs, 
metrics, and custom alarms, by selecting the bullet next to a component and choosing Manage 
monitoring .
Enable Application Insights for Amazon ECS and Amazon EKS resource monitoring
You can enable Application Insights to monitor containerized applications and microservices from the 
Container Insights console. Application Insights supports monitoring for the following resources:
•Amazon ECS clusters
•Amazon ECS services
•Amazon ECS tasks
•Amazon EKS clusters
688Amazon CloudWatch User Guide
Get started
When Application Insights is enabled, it provides recommended metrics and logs, detects potential 
problems, generates CloudWatch Events, and creates automatic dashboards for your containerized 
applications and microservices.
You can enable Application Insights for containerized resources from the Container Insights or 
Application Insights consoles.
Enable Application Insights from the Container Insights console
From the Container Insights console, on the Container Insights Performance monitoring dashboard, 
choose Auto-conﬁgure Application Insights. When Application Insights is enabled, it displays details 
about detected problems.
Enable Application Insights from the Application Insights console
When ECS clusters appear in the component list, Application Insights automatically enables additional 
container monitoring with Container Insights.
For EKS clusters, you can enable additional monitoring with Container Insights to provide diagnostics 
information, such as container restart failures, to help you isolate and resolve problems. Additional steps 
are required to set up Container Insights for EKS. For information, see Setting up Container Insights on 
Amazon EKS and Kubernetes (p. 479) for steps to set up Container Insights on EKS.
Additional monitoring for EKS with Container Insights is supported on Linux instances with EKS.
For more information about Container Insights support for ECS and EKS clusters, see Using Container 
Insights  (p. 464).
Disable monitoring for an application component
To disable monitoring for an application component, from the application details page, select the 
component for which you want to disable monitoring. Choose Actions, and then Remove from 
monitoring .
Delete an application
To delete an application, from the CloudWatch dashboard, on the left navigation pane, choose
Application Insights  under Insights . Select the application that you want to delete. Under Actions, 
choose Delete application. This deletes monitoring and deletes all of the saved monitors for application 
components. The application resources are not deleted.
Set up, conﬁgure, and manage your application for monitoring using the 
command line
This section provides steps for setting up, conﬁguring, and managing your application for monitoring 
using the AWS CLI and AWS Tools for Windows PowerShell.
Command line procedures
•Add and manage an application  (p. 690)
•Manage and update monitoring  (p. 693)
•Conﬁgure monitoring for SQL Always On Availability Groups (p. 696)
•Conﬁgure monitoring for MySQL RDS (p. 698)
•Conﬁgure monitoring for MySQL EC2 (p. 699)
•Conﬁgure monitoring for PostgreSQL RDS (p. 699)
•Conﬁgure monitoring for PostgreSQL EC2 (p. 700)
•Conﬁgure monitoring for Oracle RDS (p. 700)
•Conﬁgure monitoring for Oracle EC2 (p. 701)
689Amazon CloudWatch User Guide
Get started
Add and manage an application
You can add, get information about, manage, and conﬁgure your Application Insights application using 
the command line.
Topics
•Add an application (p. 690)
•Describe an application  (p. 690)
•List components in an application (p. 690)
•Describe a component (p. 691)
•Group similar resources into a custom component (p. 691)
•Ungroup a custom component (p. 692)
•Update an application  (p. 692)
•Update a custom component (p. 692)
Add an application
Add an application using the AWS CLI
To use the AWS CLI to add an application for your resource group called my-resource-group , 
with OpsCenter enabled to deliver the created opsItem to the SNS topic ARN  arn:aws:sns:us-
east-1:123456789012:MyTopic , use the following command.
aws application-insights create-application --resource-group-name my-resource-group  --ops-
center-enabled --ops-item-sns-topic-arn arn:aws:sns:us-east-1:123456789012:MyTopic
Add an application using AWS Tools for Windows PowerShell
To use AWS Tools for Windows PowerShell to add an application for your resource group called my-
resource-group  with OpsCenter enabled to deliver the created opsItem to the SNS topic ARN
arn:aws:sns:us-east-1:123456789012:MyTopic , use the following command.
New-CWAIApplication -ResourceGroupName my-resource-group  -OpsCenterEnabled true -
OpsItemSNSTopicArn arn:aws:sns:us-east-1:123456789012:MyTopic
Describe an application
Describe an application using the AWS CLI
To use the AWS CLI to describe an application created on a resource group called my-resource-group , 
use the following command.
aws application-insights describe-application --resource-group-name my-resource-group
Describe an application using AWS Tools for Windows PowerShell
To use the AWS Tools for Windows PowerShell to describe an application created on a resource group 
called my-resource-group , use the following command.
Get-CWAIApplication -ResourceGroupName my-resource-group
List components in an application
List components in an application using the AWS CLI
690Amazon CloudWatch User Guide
Get started
To use the AWS CLI to list the components created on a resource group called my-resource-group , use 
the following command.
aws application-insights list-components --resource-group-name my-resource-group
List components in an application using AWS Tools for Windows PowerShell
To use the AWS Tools for Windows PowerShell to list the components created on a resource group called
my-resource-group , use the following command.
Get-CWAIComponentList -ResourceGroupName my-resource-group
Describe a component
Describe a component using the AWS CLI
You can use the following AWS CLI command to describe a component called my-component  that 
belongs to an application created on a resource group called my-resource-group .
aws application-insights describe-component --resource-group-name my-resource-group  --
component-name my-component
Describe a component using AWS Tools for Windows PowerShell
You can use the following AWS Tools for Windows PowerShell command to describe a component called
my-component  that belongs to an application created on a resource group called my-resource-
group .
Get-CWAIComponent -ComponentName my-component  -ResourceGroupName my-resource-group
Group similar resources into a custom component
We recommend grouping similar resources, such as .NET web server instances, into custom components 
for easier onboarding and better monitoring and insights. Currently, CloudWatch Application Insights 
supports custom groups for EC2 instances.
To group resources into a custom component using the AWS CLI
To use the AWS CLI to group three instances (arn:aws:ec2:us-east-1:123456789012:instance/
i-11111 , arn:aws:ec2:us-east-1:123456789012:instance/i-22222 , and arn:aws:ec2:us-
east-1:123456789012:instance/i-33333 ) together into a custom component called my-
component  for an application created for the resource group called my-resource-group , use the 
following command.
aws application-insights create-component --resource-group-name my-resource-group  --
component-name my-component  --resource-list arn:aws:ec2:us-east-1:123456789012:instance/
i-11111 arn:aws:ec2:us-east-1:123456789012:instance/i-22222 arn:aws:ec2:us-
east-1:123456789012:instance/i-33333
To group resources into a custom component using AWS Tools for Windows PowerShell
To use AWS Tools for Windows PowerShell to group three instances (arn:aws:ec2:us-
east-1:123456789012:instance/i-11111 , arn:aws:ec2:us-
east-1:123456789012:instance/i-22222 , and arn:aws:ec2:us-
east-1:123456789012:instance/i-33333 ) together into a custom component called my-
691Amazon CloudWatch User Guide
Get started
component , for an application created for the resource group called my-resource-group , use the 
following command.
New-CWAIComponent -ResourceGroupName my-resource-group  -ComponentName my-component
 -ResourceList arn:aws:ec2:us-east-1:123456789012:instance/i-11111,arn:aws:ec2:us-
east-1:123456789012:instance/i-22222,arn:aws:ec2:us-east-1:123456789012:instance/i-33333  
Ungroup a custom component
To ungroup a custom component using the AWS CLI
To use the AWS CLI to ungroup a custom component named my-component  in an application created on 
the resource group, my-resource-group , use the following command.
aws application-insights delete-component --resource-group-name my-resource-group  --
component-name my-new-component
To ungroup a custom component using AWS Tools for Windows PowerShell
To use the AWS Tools for Windows PowerShell to ungroup a custom component named my-component
in an application created on the resource group, my-resource-group , use the following command.
Remove-CWAIComponent -ComponentName my-component  -ResourceGroupName my-resource-group
Update an application
Update an application using the AWS CLI
You can use the AWS CLI to update an application to generate AWS Systems Manager OpsCenter 
OpsItems for problems detected with the application, and to associate the created OpsItems to the SNS 
topic arn:aws:sns:us-east-1:123456789012:MyTopic , using the following command.
aws application-insights update-application --resource-group-name my-resource-group  --ops-
center-enabled --ops-item-sns-topic-arn arn:aws:sns:us-east-1:123456789012:MyTopic
Update an application using AWS Tools for Windows PowerShell
You can use the AWS Tools for Windows PowerShell to update an application to generate AWS SSM 
OpsCenter OpsItems for problems detected with the application, and to associate the created OpsItems 
to the SNS topic arn:aws:sns:us-east-1:123456789012:MyTopic  , using the following command.
Update-CWAIApplication -ResourceGroupName my-resource-group  -OpsCenterEnabled true -
OpsItemSNSTopicArn arn:aws:sns:us-east-1:123456789012:MyTopic
Update a custom component
Update a custom component using the AWS CLI
You can use the AWS CLI to update a custom component called my-component  with a new component 
name, my-new-component , and an updated group of instances, by using the following command.
aws application-insights update-component --resource-group-name my-resource-
group --component-name my-component  --new-component-name my-new-component  --
resource-list arn:aws:ec2:us-east-1:123456789012:instance/i-44444 arn:aws:ec2:us-
east-1:123456789012:instance/i-55555
692Amazon CloudWatch User Guide
Get started
Update a custom component using AWS Tools for Windows PowerShell
You can use the AWS Tools for Windows PowerShell to update a custom component called my-
component  with a new component name, my-new-component , and an updated group of instances, by 
using the following command.
Update-CWAIComponent -ComponentName my-component  -NewComponentName my-new-
component  -ResourceGroupName my-resource-group  -ResourceList arn:aws:ec2:us-
east-1:123456789012:instance/i-44444,arn:aws:ec2:us-east-1:123456789012:instance/i-55555
Manage and update monitoring
You can manage and update monitoring for your Application Insights application using the command 
line.
Topics
•List problems with your application (p. 693)
•Describe an application problem (p. 693)
•Describe the anomalies or errors associated with a problem (p. 694)
•Describe an anomaly or error with the application (p. 694)
•Describe the monitoring conﬁgurations of a component (p. 694)
•Describe the recommended monitoring conﬁguration of a component (p. 695)
•Update the monitoring conﬁgurations for a component (p. 695)
•Remove a speciﬁed resource group from Application Insights monitoring (p. 695)
List problems with your application
List problems with your application using the AWS CLI
To use the AWS CLI to list problems with your application detected between 1,000 and 10,000 
milliseconds since Unix Epoch for an application created on a resource group called my-resource-
group, use the following command.
aws application-insights list-problems --resource-group-name my-resource-group  --start-
time 1000 --end-time 10000
List problems with your application using AWS Tools for Windows PowerShell
To use the AWS Tools for Windows PowerShell to list problems with your application detected between 
1,000 and 10,000 milliseconds since Unix Epoch for an application created on a resource group called
my-resource-group , use the following command.
$startDate = " 8/6/2019 3:33:00 "
$endDate = " 8/6/2019 3:34:00 "
Get-CWAIProblemList -ResourceGroupName my-resource-group  -StartTime $startDate  -
EndTime $endDate
Describe an application problem
Describe an application problem using the AWS CLI
To use the AWS CLI to describe a problem with problem id p-1234567890 , use the following command.
aws application-insights describe-problem —problem-id p-1234567890
693Amazon CloudWatch User Guide
Get started
Describe an application problem using AWS Tools for Windows PowerShell
To use the AWS Tools for Windows PowerShell to describe a problem with problem id p-1234567890 , 
use the following command.
Get-CWAIProblem -ProblemId p-1234567890
Describe the anomalies or errors associated with a problem
Describe the anomalies or errors associated with a problem using the AWS CLI
To use the AWS CLI to describe the anomalies or errors associated with a problem with problem id
p-1234567890 , use the following command.
aws application-insights describe-problem-observations --problem-id -1234567890
Describe the anomalies or errors associated with a problem using AWS Tools for Windows PowerShell
To use the AWS Tools for Windows PowerShell to describe the anomalies or errors associated with a 
problem with problem id p-1234567890 , use the following command.
Get-CWAIProblemObservation -ProblemId p-1234567890
Describe an anomaly or error with the application
Describe an anomaly or error with the application using the AWS CLI
To use the AWS CLI to describe an anomaly or error with the application with the observation id
o-1234567890 , use the following command.
aws application-insights describe-observation —observation-id o-1234567890
Describe an anomaly or error with the application using AWS Tools for Windows PowerShell
To use the AWS Tools for Windows PowerShell to describe an anomaly or error with the application with 
the observation id o-1234567890 , use the following command.
Get-CWAIObservation -ObservationId o-1234567890
Describe the monitoring conﬁgurations of a component
Describe the monitoring conﬁgurations of a component using the AWS CLI
To use the AWS CLI to describe the monitoring conﬁguration of a component called my-component  in 
an application created on the resource group my-resource-group , use the following command.
aws application-insights describe-component-configuration —resource-group-name my-resource-
group —component-name my-component
Describe the monitoring conﬁgurations of a component using AWS Tools for Windows PowerShell
To use the AWS Tools for Windows PowerShell to describe the monitoring conﬁguration of a component 
called my-component , in an application created on the resource group my-resource-group , use the 
following command.
694Amazon CloudWatch User Guide
Get started
Get-CWAIComponentConfiguration -ComponentName my-component  -ResourceGroupName my-resource-
group
For more information about component conﬁguration and for example JSON ﬁles, see Work with 
component conﬁgurations (p. 702).
Describe the recommended monitoring conﬁguration of a component
Describe the recommended monitoring conﬁguration of a component using the AWS CLI
When the component is part of a .NET Worker application, you can use the AWS CLI to describe the 
recommended monitoring conﬁguration of a component called my-component  in an application created 
on the resource group my-resource-group , by using the following command.
aws application-insights describe-component-configuration-recommendation --resource-group-
name my-resource-group  --component-name my-component  --tier DOT_NET_WORKER
Describe the recommended monitoring conﬁguration of a component using AWS Tools for Windows 
PowerShell
When the component is part of a .NET Worker application, you can use the AWS Tools for Windows 
PowerShell to describe the recommended monitoring conﬁguration of a component called my-
component  in an application created on the resource group my-resource-group , by using the 
following command.
Get-CWAIComponentConfigurationRecommendation -ComponentName my-component  -
ResourceGroupName my-resource-group  -Tier DOT_NET_WORKER
For more information about component conﬁguration and for example JSON ﬁles, see Work with 
component conﬁgurations (p. 702).
Update the monitoring conﬁgurations for a component
Update the monitoring conﬁgurations for a component using the AWS CLI
To use the AWS CLI to update the component called my-component  in an application created on the 
resource group called my-resource-group , use the following command. The command includes these 
actions:
1.Enable monitoring for the component.
2.Set the tier of the component to .NET Worker .
3.Update the JSON conﬁguration of the component to read from the local ﬁle configuration.txt .
aws application-insights update-component-configuration --resource-group-name my-
resource-group  --component-name my-component  --tier DOT_NET_WORKER  --monitor --component-
configuration "file:// configuration.txt "
Update the monitoring conﬁgurations for a component using the AWS Tools for Windows PowerShell
To use the AWS Tools for Windows PowerShell to update the component called my-component  in an 
application created on the resource group called my-resource-group , use the following command. 
The command includes these actions:
1.Enable monitoring for the component.
2.Set the tier of the component to .NET Worker .
3.Update the JSON conﬁguration of the component to read from the local ﬁle configuration.txt .
695Amazon CloudWatch User Guide
Get started
[string]$config = Get-Content -Path configuration.txt
Update-CWAIComponentConfiguration -ComponentName my-component  -ResourceGroupName my-
resource-group  -Tier DOT_NET_WORKER  -Monitor 1 -ComponentConfiguration $config
For more information about component conﬁguration and for example JSON ﬁles, see Work with 
component conﬁgurations (p. 702).
Remove a speciﬁed resource group from Application Insights monitoring
Remove a speciﬁed resource group from Application Insights monitoring using the AWS CLI
To use the AWS CLI to remove an application created on the resource group called my-resource-group
from monitoring, use the following command.
aws application-insights delete-application --resource-group-name my-resource-group
Remove a speciﬁed resource group from Application Insights monitoring using the AWS Tools for 
Windows PowerShell
To use the AWS Tools for Windows PowerShell to remove an application created on the resource group 
called my-resource-group  from monitoring, use the following command.
Remove-CWAIApplication -ResourceGroupName my-resource-group
Conﬁgure monitoring for SQL Always On Availability Groups
1.Create an application for the resource group with the SQL HA EC2 instances.
aws application-insights create-application ‐-region <REGION>  ‐-resource-group-name 
   <RESOURCE_GROUP_NAME>
2.Deﬁne the EC2 instances that represent the SQL HA cluster by creating a new application component.
aws application-insights create-component ‐-resource-group-name  
 "<RESOURCE_GROUP_NAME> " ‐-component-name SQL_HA_CLUSTER ‐-resource-list 
  "arn:aws:ec2: <REGION> :<ACCOUNT_ID> :instance/ <CLUSTER_INSTANCE_1_ID> " 
 "arn:aws:ec2: <REGION> :<ACCOUNT_ID> :instance/ <CLUSTER_INSTANCE_2_ID>
3.Conﬁgure the SQL HA component.
aws application-insights  update-component-configuration ‐-resource-group-name 
 "<RESOURCE_GROUP_NAME>" ‐-region <REGION> ‐-component-name "SQL_HA_CLUSTER" ‐-monitor 
 ‐-tier SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP ‐-monitor  ‐-component-configuration '{ 
  "subComponents" : [ { 
    "subComponentType" : "AWS::EC2::Instance", 
    "alarmMetrics" : [ { 
      "alarmMetricName" : "CPUUtilization", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "StatusCheckFailed", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Processor % Processor Time", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Memory % Committed Bytes In Use", 
      "monitor" : true 
    }, { 
696Amazon CloudWatch User Guide
Get started
      "alarmMetricName" : "Memory Available Mbytes", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Paging File % Usage", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "System Processor Queue Length", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Network Interface Bytes Total/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "PhysicalDisk % Disk Time", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Buffer Manager Buffer cache hit ratio", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Buffer Manager Page life expectancy", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:General Statistics Processes blocked", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:General Statistics User Connections", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Locks Number of Deadlocks/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:SQL Statistics Batch Requests/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica File Bytes Received/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Log Bytes Received/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Log remaining for undo", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Log Send Queue", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Mirrored Write Transaction/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Recovery Queue", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Redo Bytes Remaining", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Redone Bytes/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Total Log requiring undo", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Transaction Delay", 
      "monitor" : true 
    } ], 
    "windowsEvents" : [ { 
      "logGroupName" : "WINDOWS_EVENTS-Application-<RESOURCE_GROUP_NAME>", 
      "eventName" : "Application", 
697Amazon CloudWatch User Guide
Get started
      "eventLevels" : [ "WARNING", "ERROR", "CRITICAL", "INFORMATION" ], 
      "monitor" : true 
    }, { 
      "logGroupName" : "WINDOWS_EVENTS-System-<RESOURCE_GROUP_NAME>", 
      "eventName" : "System", 
      "eventLevels" : [ "WARNING", "ERROR", "CRITICAL" ], 
      "monitor" : true 
    }, { 
      "logGroupName" : "WINDOWS_EVENTS-Security-<RESOURCE_GROUP_NAME>", 
      "eventName" : "Security", 
      "eventLevels" : [ "WARNING", "ERROR", "CRITICAL" ], 
      "monitor" : true 
    } ], 
    "logs" : [ { 
      "logGroupName" : "SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP-<RESOURCE_GROUP_NAME>", 
      "logPath" : "C:\\Program Files\\Microsoft SQL Server\\MSSQL**.MSSQLSERVER\\MSSQL\
\Log\\ERRORLOG", 
      "logType" : "SQL_SERVER", 
      "monitor" : true, 
      "encoding" : "utf-8" 
    } ] 
  }, { 
    "subComponentType" : "AWS::EC2::Volume", 
    "alarmMetrics" : [ { 
      "alarmMetricName" : "VolumeReadBytes", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeWriteBytes", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeReadOps", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeWriteOps", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeQueueLength", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeThroughputPercentage", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "BurstBalance", 
      "monitor" : true 
    } ] 
  } ]
}'
Note
Application Insights must ingest Application Event logs (information level) to detect cluster 
activities such as failover.
Conﬁgure monitoring for MySQL RDS
1.Create an application for the resource group with the RDS MySQL database instance.
aws application-insights create-application ‐-region <REGION>  ‐-resource-group-name 
   <RESOURCE_GROUP_NAME>
2.The error log is enabled by default. The slow query log can be enabled using data parameter groups. 
For more information, see Accessing the MySQL Slow Query and General Logs.
•set slow_query_log = 1
698Amazon CloudWatch User Guide
Get started
•set log_output = FILE
3.Export the logs to be monitored to CloudWatch logs. For more information, see Publishing MySQL 
Logs to CloudWatch Logs.
4.Conﬁgure the MySQL RDS component.
aws application-insights  update-component-configuration ‐-resource-group-name 
 "<RESOURCE_GROUP_NAME> " ‐-region <REGION>  ‐-component-name " <DB_COMPONENT_NAME> " 
 ‐-monitor ‐-tier DEFAULT ‐-monitor  ‐-component-configuration "{\"alarmMetrics\":
[{\"alarmMetricName\":\"CPUUtilization\",\"monitor\":true}],\"logs\":[{\"logType\":
\"MYSQL\",\"monitor\":true},{\"logType\": \"MYSQL_SLOW_QUERY\",\"monitor\":false}]}"
Conﬁgure monitoring for MySQL EC2
1.Create an application for the resource group with the SQL HA EC2 instances.
aws application-insights create-application ‐-region <REGION>  ‐-resource-group-name 
   <RESOURCE_GROUP_NAME>
2.The error log is enabled by default. The slow query log can be enabled using data parameter groups. 
For more information, see Accessing the MySQL Slow Query and General Logs.
•set slow_query_log = 1
•set log_output = FILE
3.Conﬁgure the MySQL EC2 component.
aws application-insights  update-component-configuration ‐-resource-group-name 
 "<RESOURCE_GROUP_NAME> " ‐-region <REGION>  ‐-component-name " <DB_COMPONENT_NAME> " 
 ‐-monitor ‐-tier MYSQL ‐-monitor  ‐-component-configuration "{\"alarmMetrics\":
[{\"alarmMetricName\":\"CPUUtilization\",\"monitor\":true}],\"logs\":[{\"logGroupName
\":\"<UNIQUE_LOG_GROUP_NAME> \",\"logPath\":\"C:\\\\ProgramData\\\\MySQL\\\\MySQL Server 
 **\\\\Data\\\\ <FILE_NAME> .err\",\"logType\":\"MYSQL\",\"monitor\":true,\"encoding\":
\"utf-8\"}]}"
Conﬁgure monitoring for PostgreSQL RDS
1.Create an application for the resource group with the PostgreSQL RDS database instance.
aws application-insights create-application ‐-region <REGION>  ‐-resource-group-name 
   <RESOURCE_GROUP_NAME>
2.Publishing PostgreSQL logs to CloudWatch is not enabled by default. To enable monitoring, open the 
RDS console and select the database to monitor. Choose Modify in the upper right corner, and select 
the check box labeled PostgreSQL log. Choose Continue  to save this setting.
3.Your PostgreSQL logs are exported to CloudWatch.
4.Conﬁgure the PostgreSQL RDS component.
aws application-insights update-component-configuration --region <REGION>  --resource-
group-name <RESOURCE_GROUP_NAME>  --component-name <DB_COMPONENT_NAME>  --monitor --tier 
 DEFAULT --component-configuration  
"{ 
   \"alarmMetrics\":[ 
      { 
         \"alarmMetricName\": \"CPUUtilization\", 
         \"monitor\": true 
      } 
   ], 
699Amazon CloudWatch User Guide
Get started
   \"logs\":[ 
      { 
         \"logType\": \"POSTGRESQL\", 
         \"monitor\": true 
      } 
   ]
}"
Conﬁgure monitoring for PostgreSQL EC2
1.Create an application for the resource group with the PostgreSQL EC2 instance.
aws application-insights create-application ‐-region <REGION>  ‐-resource-group-name 
   <RESOURCE_GROUP_NAME>
2.Conﬁgure the PostgreSQL EC2 component.
aws application-insights update-component-configuration ‐-region <REGION>  ‐-resource-
group-name <RESOURCE_GROUP_NAME>  ‐-component-name <DB_COMPONENT_NAME>  ‐-monitor ‐-tier 
 POSTGRESQL ‐-component-configuration  
"{ 
   \"alarmMetrics\":[ 
      { 
         \"alarmMetricName\":\"CPUUtilization\", 
         \"monitor\":true 
      } 
   ], 
   \"logs\":[ 
      { 
         \"logGroupName\":\" <UNIQUE_LOG_GROUP_NAME> \", 
         \"logPath\":\"/var/lib/pgsql/data/log/\", 
         \"logType\":\"POSTGRESQL\", 
         \"monitor\":true, 
         \"encoding\":\"utf-8\" 
      } 
   ]
}"
Conﬁgure monitoring for Oracle RDS
1.Create an application for the resource group with the Oracle RDS database instance.
aws application-insights create-application ‐-region <REGION>  ‐-resource-group-name 
   <RESOURCE_GROUP_NAME>
2.Publishing Oracle logs to CloudWatch is not enabled by default. To enable monitoring, open the RDS 
console and select the database to monitor. Choose Modify in the upper right corner, and select the 
check boxes labeled Alert log and Listener  log. Choose Continue  to save this setting.
3.Your Oracle logs are exported to CloudWatch.
4.Conﬁgure the Oracle RDS component.
aws application-insights update-component-configuration --region <REGION>  --resource-
group-name <RESOURCE_GROUP_NAME>  --component-name <DB_COMPONENT_NAME>  --monitor --tier 
 DEFAULT --component-configuration  
"{ 
   \"alarmMetrics\":[ 
      { 
         \"alarmMetricName\": \"CPUUtilization\", 
700Amazon CloudWatch User Guide
Get started
         \"monitor\": true 
      } 
   ], 
   \"logs\":[ 
      { 
         \"logType\": \"ORACLE_ALERT\", 
         \"monitor\": true 
      }, 
      { 
         \"logType\": \"ORACLE_LISTENER\", 
         \"monitor\": true 
      } 
   ]
}"
Conﬁgure monitoring for Oracle EC2
1.Create an application for the resource group with the Oracle EC2 instance.
aws application-insights create-application ‐-region <REGION>  ‐-resource-group-name 
   <RESOURCE_GROUP_NAME>
2.Conﬁgure the Oracle EC2 component.
aws application-insights update-component-configuration ‐-region <REGION>  ‐-resource-
group-name <RESOURCE_GROUP_NAME>  ‐-component-name <DB_COMPONENT_NAME>  ‐-monitor ‐-tier 
 ORACLE ‐-component-configuration  
"{ 
   \"alarmMetrics\":[ 
      { 
         \"alarmMetricName\":\"CPUUtilization\", 
         \"monitor\":true 
      } 
   ], 
   \"logs\":[ 
      { 
         \"logGroupName\":\"<UNIQUE_LOG_GROUP_NAME>\", 
         \"logPath\":\"/opt/oracle/diag/rdbms/*/*/trace\", 
         \"logType\":\"ORACLE_ALERT\", 
         \"monitor\":true, 
      }, 
      { 
         \"logGroupName\":\"<UNIQUE_LOG_GROUP_NAME>\", 
         \"logPath\":\"/opt/oracle/diag/tnslsnr/$HOSTNAME/listener/trace/\", 
         \"logType\":\"ORACLE_ALERT\", 
         \"monitor\":true, 
      } 
   ]
}"
Application Insights CloudWatch Events and notiﬁcations for detected problems
For each application that is added to CloudWatch Application Insights, a CloudWatch event is published 
for the following events on a best eﬀort basis:
•Problem creation. Emitted when CloudWatch Application Insights detects a new problem.
•Detail Type:  "Application Insights Problem Detected"
•Detail:
•problemId : The detected problem ID.
701Amazon CloudWatch User Guide
Work with component conﬁgurations
•region: The AWS Region where the problem was created.
•resourceGroupName : The Resource Group for the registered application for which the problem 
was detected.
•status: The status of the problem. Possible status and deﬁnitions are as follows:
•In progress : A new problem has been identiﬁed. The problem is still receiving observations.
•Recovering : The problem is stabilizing. You can manually resolve the problem when it is in this 
state.
•Resolved : The problem is resolved. There are no new observations about this problem.
•Recurring : The problem was resolved within the past 24 hours. It has reopened as a result of 
additional observations.
•severity : The severity of the problem.
•problemUrl : The console URL for the problem.
•Problem update. Emitted when the problem is updated with a new observation or when an existing 
observation is updated and the problem is subsequently updated; updates include a resolution or 
closure of the problem.
•Detail Type:  "Application Insights Problem Updated"
•Detail:
•problemId : The created problem ID.
•region: The AWS Region where the problem was created.
•resourceGroupName : The Resource Group for the registered application for which the problem 
was detected.
•status: The status of the problem.
•severity : The severity of the problem.
•problemUrl : The console URL for the problem.
How to receive notiﬁcation for problem events generated by an application
From the CloudWatch console, select Rules under Events in the left navigation pane. From the
Rules page, select Create rule. Choose Amazon CloudWatch Application Insights from the Service 
Name  dropdown list and choose the Event Type. Then, choose Add target  and select the target and 
parameters, for example, an SNS topic  or Lambda function.
Actions through AWS Systems Manager. CloudWatch Application Insights provides built-in integration 
with Systems Manager OpsCenter. If you choose to use this integration for your application, an OpsItem 
is created on the OpsCenter console for every problem detected with the application. From the 
OpsCenter console, you can view summarized information about the problem detected by CloudWatch 
Application Insights and pick a Systems Manager Automation runbook to take remedial actions or 
further identify Windows processes that are causing resource issues in your application.
Work with component conﬁgurations
A component conﬁguration is a text ﬁle in JSON format that describes the conﬁguration settings of 
the component. This section provides an example template fragment, descriptions of component 
conﬁguration sections, and example component conﬁgurations.
Topics
•Component conﬁguration template fragment (p. 703)
•Component conﬁguration sections (p. 703)
•Component conﬁguration examples (p. 709)
702Amazon CloudWatch User Guide
Work with component conﬁgurations
Component conﬁguration template fragment
The following example shows a template fragment in JSON format.
{ 
  "alarmMetrics" : [ 
    list of alarm metrics 
  ], 
  "logs" : [ 
    list of logs 
  ], 
  "processes" : [ 
   list of processes 
  ], 
  "windowsEvents" : [ 
    list of windows events channels configurations 
  ], 
  "alarms" : [ 
    list of CloudWatch alarms 
  ], 
  "jmxPrometheusExporter": { 
    JMX Prometheus Exporter configuration 
  }, 
  "hanaPrometheusExporter": { 
      SAP HANA Prometheus Exporter configuration 
  }, 
  "haClusterPrometheusExporter": { 
      HA Cluster Prometheus Exporter configuration 
  }, 
  "netWeaverPrometheusExporter": { 
      SAP NetWeaver Prometheus Exporter configuration 
  }, 
  "subComponents" : [ 
    { 
      "subComponentType" : "AWS::EC2::Instance" ... 
      component nested instances configuration 
    }, 
    { 
      "subComponentType" : "AWS::EC2::Volume" ... 
      component nested volumes configuration 
    } 
  ]
}
Component conﬁguration sections
A component conﬁguration includes several major sections. Sections in a component conﬁguration can 
be listed in any order.
•alarmMetrics (optional)
A list of metrics  (p. 705) to monitor for the component. All component types can have an 
alarmMetrics section.
•logs (optional)
A list of logs (p. 705) to monitor for the component. Only EC2 instances can have a logs section.
•processes (optional)
A list of processes (p. 706) to monitor for the component. Only EC2 instances can have a processes 
section.
•subComponents (optional)
703Amazon CloudWatch User Guide
Work with component conﬁgurations
Nested instance and volume subComponent conﬁguration for the component. The following types of 
components can have nested instances and a subComponents section: ELB, ASG, custom-grouped EC2 
instances , and EC2 instances.
•alarms (optional)
A list of alarms  (p. 709) to monitor for the component. All component types can have an alarm 
section.
•windowsEvents (optional)
A list of windows events (p. 708) to monitor for the component. Only Windows on EC2 instances 
have a windowsEvents  section.
•JMXPrometheusExporter (optional)
JMXPrometheus Exporter conﬁguration.
•hanaPrometheusExporter (optional)
SAP HANA Prometheus Exporter conﬁguration.
•haClusterPrometheusExporter (optional)
HA Cluster Prometheus Exporter conﬁguration.
•netWeaverPrometheusExporter (optional)
SAP NetWeaver Prometheus Exporter conﬁguration.
The following example shows the syntax for the subComponents section fragment in JSON format.
[ 
  { 
    "subComponentType" : "AWS::EC2::Instance", 
    "alarmMetrics" : [ 
       list of alarm metrics
    ], 
    "logs" : [ 
       list of logs
    ], 
    "processes": [ 
       list of processes
    ], 
    "windowsEvents" : [ 
       list of windows events channels configurations
    ] 
  }, 
  { 
    "subComponentType" : "AWS::EC2::Volume", 
    "alarmMetrics" : [ 
       list of alarm metrics
    ] 
  }
]
Component conﬁguration section properties
This section describes the properties of each component conﬁguration section.
Sections
•Metric  (p. 705)
•Log (p. 705)
704Amazon CloudWatch User Guide
Work with component conﬁgurations
•Process (p. 706)
•JMX Prometheus Exporter (p. 707)
•HANA Prometheus Exporter (p. 707)
•HA Cluster Prometheus Exporter (p. 708)
•NetWeaver Prometheus Exporter (p. 708)
•Windows Events (p. 708)
•Alarm  (p. 709)
Metric
Deﬁnes a metric to be monitored for the component.
JSON
{ 
  "alarmMetricName" : " monitoredMetricName ", 
  "monitor" : true/false
}
Properties
•alarmMetricName (required)
The name of the metric to be monitored for the component. For metrics supported by Application 
Insights, see Logs and metrics supported by Amazon CloudWatch Application Insights (p. 781).
•monitor (optional)
Boolean to indicate whether to monitor the metric. The default value is true .
Log
Deﬁnes a log to be monitored for the component.
JSON
{ 
  "logGroupName" : " logGroupName ", 
  "logPath" : " logPath", 
  "logType" : " logType", 
  "encoding" : " encodingType ", 
  "monitor" : true/false
}
Properties
•logGroupName (required)
The CloudWatch log group name to be associated to the monitored log. For the log group name 
constraints, see CreateLogGroup.
•logPath (required for EC2 instance components; not required for components that do not use 
CloudWatch Agent, such as AWS Lambda)
The path of the logs to be monitored. The log path must be an absolute Windows system ﬁle path. For 
more information, see CloudWatch Agent Conﬁguration File: Logs Section.
•logType (required)
705Amazon CloudWatch User Guide
Work with component conﬁgurations
The log type decides the log patterns against which Application Insights analyzes the log. The log type 
is selected from the following:
•SQL_SERVER
•MYSQL
•MYSQL_SLOW_QUERY
•POSTGRESQL
•ORACLE_ALERT
•ORACLE_LISTENER
•IIS
•APPLICATION
•WINDOWS_EVENTS
•WINDOWS_EVENTS_ACTIVE_DIRECTORY
•WINDOWS_EVENTS_DNS
•WINDOWS_EVENTS_IIS
•WINDOWS_EVENTS_SHAREPOINT
•SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP
•SQL_SERVER_FAILOVER_CLUSTER_INSTANCE
•DEFAULT
•CUSTOM
•STEP_FUNCTION
•API_GATEWAY_ACCESS
•API_GATEWAY_EXECUTION
•SAP_HANA_LOGS
•SAP_HANA_TRACE
•SAP_HANA_HIGH_AVAILABILITY
•SAP_NETWEAVER_DEV_TRACE_LOGS
•PACEMAKER_HIGH_AVAILABILITY
•encoding (optional)
The type of encoding of the logs to be monitored. The speciﬁed encoding should be included in the list 
of CloudWatch agent supported encodings. If not provided, CloudWatch Application Insights uses the 
default encoding of type utf-8, except for:
•SQL_SERVER : utf-16 encoding
•IIS: ascii encoding
•monitor (optional)
Boolean that indicates whether to monitor the logs. The default value is true .
Process
Deﬁnes a process to be monitored for the component.
JSON
{ 
  "processName" : " monitoredProcessName ", 
  "alarmMetrics" : [ 
       list of alarm metrics
  ]  
706Amazon CloudWatch User Guide
Work with component conﬁgurations
}
Properties
•processName (required)
The name of the process to be monitored for the component. The process name must not contain a 
process stem, such as sqlservr  or sqlservr.exe .
•alarmMetrics (required)
A list of metrics  (p. 705) to monitor for this process. To view process metrics supported by 
CloudWatch Application Insights, see  Amazon Elastic Compute Cloud (EC2)  (p. 783).
JMX Prometheus Exporter
Deﬁnes the JMX Prometheus Exporter settings.
JSON
"JMXPrometheusExporter": { 
  "jmxURL" : " JMX URL", 
  "hostPort" : " The host and port ", 
  "prometheusPort" : " Target port to emit Prometheus metrics "
}
Properties
•jmxURL (optional)
A complete JMX URL to connect to.
•hostPort (optional)
The host and port to connect to through remote JMX. Only one of jmxURL  and hostPort  can be 
speciﬁed.
•prometheusPort (optional)
The target port to send Prometheus metrics to. If not speciﬁed, the default port 9404 is used.
HANA Prometheus Exporter
Deﬁnes the HANA Prometheus Exporter settings.
JSON
"hanaPrometheusExporter": { 
    "hanaSid": "SAP HANA  SID", 
    "hanaPort": "HANA database port", 
    "hanaSecretName": "HANA secret name", 
    "prometheusPort": "Target port to emit Prometheus metrics"
}
Properties
•hanaSid
The three-character SAP system ID (SID) of the SAP HANA system.
•hanaPort
707Amazon CloudWatch User Guide
Work with component conﬁgurations
The HANA database port by which the exporter will query HANA metrics.
•hanaSecretName
The AWS Secrets Manager secret that stores HANA monitoring user credentials. The HANA Prometheus 
exporter uses these credentials to connect to the database and query HANA metrics.
•prometheusPort (optional)
The target port to which Prometheus sends metrics. If not speciﬁed, the default port 9668 is used.
HA Cluster Prometheus Exporter
Deﬁnes the HA Cluster Prometheus Exporter settings.
JSON
"haClusterPrometheusExporter": { 
    "prometheusPort": "Target port to emit Prometheus metrics"
}
Properties
•prometheusPort (optional)
The target port to which Prometheus sends metrics. If not speciﬁed, the default port 9664 is used.
NetWeaver Prometheus Exporter
Deﬁnes the NetWeaver Prometheus Exporter settings.
JSON
"netWeaverPrometheusExporter": { 
    "sapSid": "SAP NetWeaver  SID", 
    "instanceNumbers": [ "Array of instance Numbers of SAP NetWeaver system "],
"prometheusPort": "Target port to emit Prometheus metrics"
}
Properties
•sapSid
The 3 character SAP system ID (SID) of the SAP NetWeaver system.
•instanceNumbers
Array of the instance Numbers of SAP NetWeaver system.
Example: "instanceNumbers": [ "00", "01"]
•prometheusPort (optional)
The target port to which to send Prometheus metrics. If not speciﬁed, the default port 9680  is used.
Windows Events
Deﬁnes Windows Events to log.
JSON
708Amazon CloudWatch User Guide
Work with component conﬁgurations
{ 
  "logGroupName" : " logGroupName ", 
  "eventName" : " eventName ", 
  "eventLevels" : [" ERROR","WARNING","CRITICAL ","INFORMATION ","VERBOSE"], 
  "monitor" : true/false
}
Properties
•logGroupName (required)
The CloudWatch log group name to be associated to the monitored log. For the log group name 
constraints, see CreateLogGroup.
•eventName (required)
The type of Windows Events to log. It is equivalent to the Windows Event log channel name. For 
example, System, Security, CustomEventName, etc. This ﬁeld is required for each type of Windows 
event to log.
•eventLevels (required)
The levels of event to log. You must specify each level to log. Possible values include INFORMATION ,
WARNING , ERROR , CRITICAL , and VERBOSE. This ﬁeld is required for each type of Windows Event to 
log.
•monitor (optional)
Boolean that indicates whether to monitor the logs. The default value is true .
Alarm
Deﬁnes a CloudWatch alarm to be monitored for the component.
JSON
{ 
  "alarmName" : " monitoredAlarmName ", 
  "severity" : HIGH/MEDIUM/LOW
}
Properties
•alarmName (required)
The name of the CloudWatch alarm to be monitored for the component.
•severity (optional)
Indicates the degree of outage when the alarm goes oﬀ.
Component conﬁguration examples
The following examples show component conﬁgurations in JSON format for relevant services.
Example component conﬁgurations
•Amazon DynamoDB table (p. 710)
•Amazon EC2 Auto Scaling (ASG) (p. 711)
•Amazon EKS cluster (p. 712)
709Amazon CloudWatch User Guide
Work with component conﬁgurations
•Amazon Elastic Compute Cloud (EC2) instance (p. 715)
•Amazon Elastic Container Service (Amazon ECS) (p. 716)
•Amazon ECS services (p. 719)
•Amazon ECS tasks (p. 722)
•Amazon Elastic File System (Amazon EFS) (p. 722)
•Amazon FSx (p. 724)
•Amazon Relational Database Service (RDS) Aurora MySQL (p. 724)
•Amazon Relational Database Service (RDS) instance (p. 725)
•Amazon Route 53 health check (p. 725)
•Amazon Route 53 hosted zone (p. 726)
•Amazon Route 53 Resolver endpoint (p. 726)
•Amazon Route 53 Resolver query logging conﬁguration (p. 727)
•Amazon S3 bucket (p. 727)
•Amazon Simple Queue Service (SQS) (p. 727)
•Amazon SNS topic (p. 728)
•Amazon Virtual Private Cloud (Amazon VPC) (p. 728)
•Amazon VPC Network Address Translation (NAT) gateways (p. 728)
•API Gateway REST API stages (p. 729)
•Application Elastic Load Balancing  (p. 729)
•AWS Lambda Function (p. 730)
•AWS Network Firewall rule group (p. 730)
•AWS Network Firewall rule group association (p. 731)
•AWS Step Functions (p. 731)
•Customer-grouped Amazon EC2 instances (p. 731)
•Elastic Load Balancing  (p. 732)
•Java (p. 733)
•Kubernetes on Amazon EC2 (p. 734)
•RDS MariaDB and RDS MySQL (p. 736)
•RDS Oracle (p. 737)
•RDS PostgreSQL (p. 737)
•SAP HANA on Amazon EC2 (p. 737)
•SAP HANA High Availability on Amazon EC2 (p. 739)
•SAP NetWeaver on Amazon EC2 (p. 739)
•SAP NetWeaver High Availability on Amazon EC2 (p. 741)
•SQL Always On Availability Group (p. 743)
•SQL failover cluster instance (p. 745)
Amazon DynamoDB table
The following example shows a component conﬁguration in JSON format for Amazon DynamoDB table.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "SystemErrors", 
      "monitor": false 
    }, 
    { 
710Amazon CloudWatch User Guide
Work with component conﬁgurations
      "alarmMetricName": "UserErrors", 
      "monitor": false 
    }, 
    { 
      "alarmMetricName": "ConsumedReadCapacityUnits", 
      "monitor": false 
    }, 
    { 
      "alarmMetricName": "ConsumedWriteCapacityUnits", 
      "monitor": false 
    }, 
    { 
      "alarmMetricName": "ReadThrottleEvents", 
      "monitor": false 
    }, 
    { 
      "alarmMetricName": "WriteThrottleEvents", 
      "monitor": false 
    }, 
    { 
      "alarmMetricName": "ConditionalCheckFailedRequests", 
      "monitor": false 
    }, 
    { 
      "alarmMetricName": "TransactionConflict", 
      "monitor": false 
    } 
  ], 
  "logs": []
}
Amazon EC2 Auto Scaling (ASG)
The following example shows a component conﬁguration in JSON format for Amazon EC2 Auto Scaling 
(ASG).
{ 
    "alarmMetrics" : [ 
      { 
        "alarmMetricName" : "CPUCreditBalance" 
      }, { 
        "alarmMetricName" : "EBSIOBalance%" 
      } 
    ], 
    "subComponents" : [ 
      { 
        "subComponentType" : "AWS::EC2::Instance", 
        "alarmMetrics" : [ 
          { 
            "alarmMetricName" : "CPUUtilization" 
          }, { 
            "alarmMetricName" : "StatusCheckFailed" 
          } 
        ], 
        "logs" : [ 
          { 
            "logGroupName" : "my_log_group", 
            "logPath" : "C:\\LogFolder\\*", 
            "logType" : "APPLICATION" 
          } 
        ], 
        "processes" : [ 
          { 
            "processName" : "my_process", 
711Amazon CloudWatch User Guide
Work with component conﬁgurations
            "alarmMetrics" : [ 
              { 
                  "alarmMetricName" : "procstat cpu_usage", 
                  "monitor" : true 
              }, { 
                  "alarmMetricName" : "procstat memory_rss", 
                  "monitor" : true 
              } 
          ] 
      } 
  ], 
        "windowsEvents" : [ 
          { 
            "logGroupName" : "my_log_group_2", 
            "eventName" : "Application", 
            "eventLevels" : [ "ERROR", "WARNING", "CRITICAL" ] 
          } 
        ] 
      }, { 
        "subComponentType" : "AWS::EC2::Volume", 
        "alarmMetrics" : [ 
          { 
            "alarmMetricName" : "VolumeQueueLength" 
          }, { 
            "alarmMetricName" : "BurstBalance" 
          } 
        ] 
      } 
    ], 
    "alarms" : [ 
      { 
        "alarmName" : "my_asg_alarm", 
        "severity" : "LOW" 
      } 
    ] 
  }
Amazon EKS cluster
The following example shows a component conﬁguration in JSON format for Amazon EKS cluster.
{ 
    "alarmMetrics":[ 
       { 
          "alarmMetricName": "cluster_failed_node_count", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName": "node_cpu_reserved_capacity", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName": "node_cpu_utilization", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName": "node_filesystem_utilization", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName": "node_memory_reserved_capacity", 
          "monitor":true 
       }, 
       { 
712Amazon CloudWatch User Guide
Work with component conﬁgurations
          "alarmMetricName": "node_memory_utilization", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName": "node_network_total_bytes", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName": "pod_cpu_reserved_capacity", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName": "pod_cpu_utilization", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName": "pod_cpu_utilization_over_pod_limit", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName": "pod_memory_reserved_capacity", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName": "pod_memory_utilization", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName": "pod_memory_utilization_over_pod_limit", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName": "pod_network_rx_bytes", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName": "pod_network_tx_bytes", 
          "monitor":true 
       } 
    ], 
    "logs":[ 
       { 
          "logGroupName": "/aws/containerinsights/kubernetes/application", 
          "logType":"APPLICATION", 
          "monitor":true, 
          "encoding":"utf-8" 
       } 
    ], 
    "subComponents":[ 
       { 
          "subComponentType":"AWS::EC2::Instance", 
          "alarmMetrics":[ 
             { 
                "alarmMetricName":"CPUUtilization", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"StatusCheckFailed", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"disk_used_percent", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"mem_used_percent", 
713Amazon CloudWatch User Guide
Work with component conﬁgurations
                "monitor":true 
             } 
          ], 
          "logs":[ 
             { 
                "logGroupName":"APPLICATION-KubernetesClusterOnEC2-IAD", 
                "logPath":"", 
                "logType":"APPLICATION", 
                "monitor":true, 
                "encoding":"utf-8" 
             } 
          ], 
          "processes" : [ 
            { 
                "processName" : "my_process", 
                "alarmMetrics" : [ 
                    { 
                        "alarmMetricName" : "procstat cpu_usage", 
                        "monitor" : true 
                    }, { 
                        "alarmMetricName" : "procstat memory_rss", 
                        "monitor" : true 
                    } 
                ] 
            } 
        ], 
          "windowsEvents":[ 
             { 
                "logGroupName":"my_log_group_2", 
                "eventName":"Application", 
                "eventLevels":[ 
                   "ERROR", 
                   "WARNING", 
                   "CRITICAL" 
                ], 
                "monitor":true 
             } 
          ] 
       }, 
       { 
          "subComponentType":"AWS::AutoScaling::AutoScalingGroup", 
          "alarmMetrics":[ 
             { 
                "alarmMetricName":"CPUCreditBalance", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"EBSIOBalance%", 
                "monitor":true 
             } 
          ] 
       }, 
       { 
          "subComponentType":"AWS::EC2::Volume", 
          "alarmMetrics":[ 
             { 
                "alarmMetricName":"VolumeReadBytes", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"VolumeWriteBytes", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"VolumeReadOps", 
                "monitor":true 
714Amazon CloudWatch User Guide
Work with component conﬁgurations
             }, 
             { 
                "alarmMetricName":"VolumeWriteOps", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"VolumeQueueLength", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"BurstBalance", 
                "monitor":true 
             } 
          ] 
       } 
    ] 
 }
Note
•The subComponents  section of AWS::EC2::Instance , AWS::EC2::Volume , and
AWS::AutoScaling::AutoScalingGroup  applies only to Amazon EKS cluster running on 
the EC2 launch type.
•The windowsEvents  section of AWS::EC2::Instance  in subComponents  applies only to 
Windows running on Amazon EC2 instances.
Amazon Elastic Compute Cloud (EC2) instance
The following example shows a component conﬁguration in JSON format for an Amazon EC2 instance.
Important
When an Amazon EC2 instance enters a stopped state, it is removed from monitoring. 
When it returns to a running  state, it is added to the list of Unmonitored components on 
the Application details  page of the CloudWatch Application Insights console. If automatic 
monitoring of new resources is enabled for the application, the instance is added to the list of
Monitored components. However, the logs and metrics are set to the default for the workload. 
The previous log and metrics conﬁguration is not saved.
{ 
    "alarmMetrics" : [ 
      { 
        "alarmMetricName" : "CPUUtilization", 
        "monitor" : true 
      }, { 
        "alarmMetricName" : "StatusCheckFailed" 
      } 
    ], 
    "logs" : [ 
      { 
        "logGroupName" : "my_log_group", 
        "logPath" : "C:\\LogFolder\\*", 
        "logType" : "APPLICATION", 
        "monitor" : true 
      }, 
      { 
        "logGroupName" : "my_log_group_2", 
        "logPath" : "C:\\LogFolder2\\*", 
        "logType" : "IIS", 
        "encoding" : "utf-8" 
      } 
    ], 
    "processes" : [ 
715Amazon CloudWatch User Guide
Work with component conﬁgurations
        { 
            "processName" : "my_process", 
            "alarmMetrics" : [ 
                { 
                    "alarmMetricName" : "procstat cpu_usage", 
                    "monitor" : true 
                }, { 
                    "alarmMetricName" : "procstat memory_rss", 
                    "monitor" : true 
                } 
            ] 
        } 
    ], 
    "windowsEvents" : [ 
      { 
        "logGroupName" : "my_log_group_3", 
        "eventName" : "Application", 
        "eventLevels" : [ "ERROR", "WARNING", "CRITICAL" ], 
        "monitor" : true 
      }, { 
        "logGroupName" : "my_log_group_4", 
        "eventName" : "System", 
        "eventLevels" : [ "ERROR", "WARNING", "CRITICAL" ], 
        "monitor" : true 
    }], 
     "alarms" : [ 
      { 
        "alarmName" : "my_instance_alarm_1", 
        "severity" : "HIGH" 
      }, 
      { 
        "alarmName" : "my_instance_alarm_2", 
        "severity" : "LOW" 
      } 
    ], 
     "subComponents" : [ 
     { 
       "subComponentType" : "AWS::EC2::Volume", 
       "alarmMetrics" : [ 
       { 
         "alarmMetricName" : "VolumeQueueLength", 
         "monitor" : "true" 
       }, 
       { 
         "alarmMetricName" : "VolumeThroughputPercentage", 
         "monitor" : "true" 
       }, 
       { 
         "alarmMetricName" : "BurstBalance", 
         "monitor" : "true" 
       } 
    }] 
  }
Amazon Elastic Container Service (Amazon ECS)
The following example shows a component conﬁguration in JSON format for Amazon Elastic Container 
Service (Amazon ECS).
{ 
    "alarmMetrics":[ 
       { 
          "alarmMetricName":"CpuUtilized", 
          "monitor":true 
716Amazon CloudWatch User Guide
Work with component conﬁgurations
       }, 
       { 
          "alarmMetricName":"MemoryUtilized", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"NetworkRxBytes", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"NetworkTxBytes", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"RunningTaskCount", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"PendingTaskCount", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"StorageReadBytes", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"StorageWriteBytes", 
          "monitor":true 
       } 
    ], 
    "logs":[ 
       { 
          "logGroupName":"/ecs/my-task-definition", 
          "logType":"APPLICATION", 
          "monitor":true 
       } 
    ], 
    "subComponents":[ 
       { 
          "subComponentType":"AWS::ElasticLoadBalancing::LoadBalancer", 
          "alarmMetrics":[ 
             { 
                "alarmMetricName":"HTTPCode_Backend_4XX", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"HTTPCode_Backend_5XX", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"Latency", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"SurgeQueueLength", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"UnHealthyHostCount", 
                "monitor":true 
             } 
          ] 
       }, 
       { 
          "subComponentType":"AWS::ElasticLoadBalancingV2::LoadBalancer", 
          "alarmMetrics":[ 
717Amazon CloudWatch User Guide
Work with component conﬁgurations
             { 
                "alarmMetricName":"HTTPCode_Target_4XX_Count", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"HTTPCode_Target_5XX_Count", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"TargetResponseTime", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"UnHealthyHostCount", 
                "monitor":true 
             } 
          ] 
       }, 
       { 
          "subComponentType":"AWS::EC2::Instance", 
          "alarmMetrics":[ 
             { 
                "alarmMetricName":"CPUUtilization", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"StatusCheckFailed", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"disk_used_percent", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"mem_used_percent", 
                "monitor":true 
             } 
          ], 
          "logs":[ 
             { 
                "logGroupName":"my_log_group", 
                "logPath":"/mylog/path", 
                "logType":"APPLICATION", 
                "monitor":true 
             } 
          ], 
          "processes" : [ 
             { 
                "processName" : "my_process", 
                "alarmMetrics" : [ 
                    { 
                        "alarmMetricName" : "procstat cpu_usage", 
                        "monitor" : true 
                    }, { 
                        "alarmMetricName" : "procstat memory_rss", 
                        "monitor" : true 
                    } 
                 ] 
             } 
          ], 
          "windowsEvents":[ 
             { 
                "logGroupName":"my_log_group_2", 
                "eventName":"Application", 
                "eventLevels":[ 
                   "ERROR", 
718Amazon CloudWatch User Guide
Work with component conﬁgurations
                   "WARNING", 
                   "CRITICAL" 
                ], 
                "monitor":true 
             } 
          ] 
       }, 
       { 
          "subComponentType":"AWS::EC2::Volume", 
          "alarmMetrics":[ 
             { 
                "alarmMetricName":"VolumeQueueLength", 
                "monitor":"true" 
             }, 
             { 
                "alarmMetricName":"VolumeThroughputPercentage", 
                "monitor":"true" 
             }, 
             { 
                "alarmMetricName":"BurstBalance", 
                "monitor":"true" 
             } 
          ] 
       } 
    ] 
 }
Note
•The subComponents  section of AWS::EC2::Instance  and AWS::EC2::Volume  applies 
only to Amazon ECS clusters with ECS service or ECS task running on the EC2 launch type.
•The windowsEvents  section of AWS::EC2::Instance  in subComponents  applies only to 
Windows running on Amazon EC2 instances.
Amazon ECS services
The following example shows a component conﬁguration in JSON format for an Amazon ECS service.
{ 
    "alarmMetrics":[ 
       { 
          "alarmMetricName":"CPUUtilization", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"MemoryUtilization", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"CpuUtilized", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"MemoryUtilized", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"NetworkRxBytes", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"NetworkTxBytes", 
719Amazon CloudWatch User Guide
Work with component conﬁgurations
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"RunningTaskCount", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"PendingTaskCount", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"StorageReadBytes", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"StorageWriteBytes", 
          "monitor":true 
       } 
    ], 
    "logs":[ 
       { 
          "logGroupName":"/ecs/my-task-definition", 
          "logType":"APPLICATION", 
          "monitor":true 
       } 
    ], 
    "subComponents":[ 
       { 
          "subComponentType":"AWS::ElasticLoadBalancing::LoadBalancer", 
          "alarmMetrics":[ 
             { 
                "alarmMetricName":"HTTPCode_Backend_4XX", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"HTTPCode_Backend_5XX", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"Latency", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"SurgeQueueLength", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"UnHealthyHostCount", 
                "monitor":true 
             } 
          ] 
       }, 
       { 
          "subComponentType":"AWS::ElasticLoadBalancingV2::LoadBalancer", 
          "alarmMetrics":[ 
             { 
                "alarmMetricName":"HTTPCode_Target_4XX_Count", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"HTTPCode_Target_5XX_Count", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"TargetResponseTime", 
                "monitor":true 
720Amazon CloudWatch User Guide
Work with component conﬁgurations
             }, 
             { 
                "alarmMetricName":"UnHealthyHostCount", 
                "monitor":true 
             } 
          ] 
       }, 
       { 
          "subComponentType":"AWS::EC2::Instance", 
          "alarmMetrics":[ 
             { 
                "alarmMetricName":"CPUUtilization", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"StatusCheckFailed", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"disk_used_percent", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"mem_used_percent", 
                "monitor":true 
             } 
          ], 
          "logs":[ 
             { 
                "logGroupName":"my_log_group", 
                "logPath":"/mylog/path", 
                "logType":"APPLICATION", 
                "monitor":true 
             } 
          ], 
          "processes" : [ 
             { 
                "processName" : "my_process", 
                "alarmMetrics" : [ 
                { 
                    "alarmMetricName" : "procstat cpu_usage", 
                    "monitor" : true 
                }, { 
                    "alarmMetricName" : "procstat memory_rss", 
                    "monitor" : true 
                } 
            ] 
        } 
    ], 
          "windowsEvents":[ 
             { 
                "logGroupName":"my_log_group_2", 
                "eventName":"Application", 
                "eventLevels":[ 
                   "ERROR", 
                   "WARNING", 
                   "CRITICAL" 
                ], 
                "monitor":true 
             } 
          ] 
       }, 
       { 
          "subComponentType":"AWS::EC2::Volume", 
          "alarmMetrics":[ 
             { 
721Amazon CloudWatch User Guide
Work with component conﬁgurations
                "alarmMetricName":"VolumeQueueLength", 
                "monitor":"true" 
             }, 
             { 
                "alarmMetricName":"VolumeThroughputPercentage", 
                "monitor":"true" 
             }, 
             { 
                "alarmMetricName":"BurstBalance", 
                "monitor":"true" 
             } 
          ] 
       } 
    ] 
 }
Note
•The subComponents  section of AWS::EC2::Instance  and AWS::EC2::Volume  applies 
only to Amazon ECS running on the EC2 launch type.
•The windowsEvents  section of AWS::EC2::Instance  in subComponents  applies only to 
Windows running on Amazon EC2 instances.
Amazon ECS tasks
The following example shows a component conﬁguration in JSON format for an Amazon ECS task.
{ 
    "logs":[ 
       { 
          "logGroupName":"/ecs/my-task-definition", 
          "logType":"APPLICATION", 
          "monitor":true 
       } 
    ], 
    "processes" : [ 
        { 
            "processName" : "my_process", 
            "alarmMetrics" : [ 
                { 
                    "alarmMetricName" : "procstat cpu_usage", 
                    "monitor" : true 
                }, { 
                    "alarmMetricName" : "procstat memory_rss", 
                    "monitor" : true 
                } 
            ] 
        } 
    ] 
 }
Amazon Elastic File System (Amazon EFS)
The following example shows a component conﬁguration in JSON format for Amazon EFS.
{ 
   "alarmMetrics": [ 
     { 
       "alarmMetricName": "BurstCreditBalance", 
       "monitor": true 
     }, 
722Amazon CloudWatch User Guide
Work with component conﬁgurations
     { 
       "alarmMetricName": "PercentIOLimit", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "PermittedThroughput", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "MeteredIOBytes", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "TotalIOBytes", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "DataWriteIOBytes", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "DataReadIOBytes", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "MetadataIOBytes", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "ClientConnections", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "TimeSinceLastSync", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "Throughput", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "PercentageOfPermittedThroughputUtilization", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "ThroughputIOPS", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "PercentThroughputDataReadIOBytes", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "PercentThroughputDataWriteIOBytes", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "PercentageOfIOPSDataReadIOBytes", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "PercentageOfIOPSDataWriteIOBytes", 
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "AverageDataReadIOBytesSize", 
723Amazon CloudWatch User Guide
Work with component conﬁgurations
       "monitor": true 
     }, 
     { 
       "alarmMetricName": "AverageDataWriteIOBytesSize", 
       "monitor": true 
     } 
   ], 
   "logs": [ 
    { 
    "logGroupName": "/aws/efs/utils", 
    "logType": "EFS_MOUNT_STATUS", 
    "monitor": true, 
    } 
   ] 
 }
Amazon FSx
The following example shows a component conﬁguration in JSON format for Amazon FSx.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "DataReadBytes", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "DataWriteBytes", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "DataReadOperations", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "DataWriteOperations", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "MetadataOperations", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "FreeStorageCapacity", 
      "monitor": true 
    } 
  ]
}
Amazon Relational Database Service (RDS) Aurora MySQL
The following example shows a component conﬁguration in JSON format for Amazon RDS Aurora 
MySQL.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "CPUUtilization", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "CommitLatency", 
      "monitor": true 
724Amazon CloudWatch User Guide
Work with component conﬁgurations
    } 
  ], 
  "logs": [ 
    { 
      "logType": "MYSQL", 
      "monitor": true, 
    }, 
    { 
      "logType": "MYSQL_SLOW_QUERY", 
      "monitor": false 
    } 
  ]
}
Amazon Relational Database Service (RDS) instance
The following example shows a component conﬁguration in JSON format for an Amazon RDS instance.
{ 
  "alarmMetrics" : [ 
    { 
      "alarmMetricName" : "BurstBalance", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "WriteThroughput", 
      "monitor" : false 
    } 
  ], 
  "alarms" : [ 
    { 
      "alarmName" : "my_rds_instance_alarm", 
      "severity" : "MEDIUM" 
    } 
  ]
}
Amazon Route 53 health check
The following example shows a component conﬁguration in JSON format for Amazon Route 53 health 
check.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "ChildHealthCheckHealthyCount", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "ConnectionTime", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "HealthCheckPercentageHealthy", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "HealthCheckStatus", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "SSLHandshakeTime", 
      "monitor": true 
725Amazon CloudWatch User Guide
Work with component conﬁgurations
    }, 
    { 
      "alarmMetricName": "TimeToFirstByte", 
      "monitor": true 
    } 
  ]   
}
Amazon Route 53 hosted zone
The following example shows a component conﬁguration in JSON format for Amazon Route 53 hosted 
zone.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "DNSQueries", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "DNSSECInternalFailure", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "DNSSECKeySigningKeysNeedingAction", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "DNSSECKeySigningKeyMaxNeedingActionAge", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "DNSSECKeySigningKeyAge", 
      "monitor": true 
    } 
  ], 
  "logs": [ 
    { 
      "logGroupName":"/hosted-zone/logs", 
      "logType": "ROUTE53_DNS_PUBLIC_QUERY_LOGS", 
      "monitor": true 
    } 
  ]
}
Amazon Route 53 Resolver endpoint
The following example shows a component conﬁguration in JSON format for Amazon Route 53 Resolver 
endpoint.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "EndpointHealthyENICount", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "EndpointUnHealthyENICount", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "InboundQueryVolume", 
      "monitor": true 
726Amazon CloudWatch User Guide
Work with component conﬁgurations
    }, 
    { 
      "alarmMetricName": "OutboundQueryVolume", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "OutboundQueryAggregateVolume", 
      "monitor": true 
    } 
  ]   
}
Amazon Route 53 Resolver query logging conﬁguration
The following example shows a component conﬁguration in JSON format for Amazon Route 53 Resolver 
query logging conﬁguration.
{ 
  "logs": [ 
    { 
      "logGroupName": "/resolver-query-log-config/logs", 
      "logType": "ROUTE53_RESOLVER_QUERY_LOGS", 
      "monitor": true 
    } 
  ]   
}
Amazon S3 bucket
The following example shows a component conﬁgurations in JSON format for Amazon S3 bucket.
{ 
    "alarmMetrics" : [ 
        { 
            "alarmMetricName" : "ReplicationLatency", 
            "monitor" : true 
        }, { 
            "alarmMetricName" : "5xxErrors", 
            "monitor" : true 
        }, { 
            "alarmMetricName" : "BytesDownloaded" 
            "monitor" : true 
        } 
    ]
}
Amazon Simple Queue Service (SQS)
The following example shows a component conﬁguration in JSON format for Amazon Simple Queue 
Service.
{ 
  "alarmMetrics" : [ 
    { 
      "alarmMetricName" : "ApproximateAgeOfOldestMessage" 
    }, { 
      "alarmMetricName" : "NumberOfEmptyReceives" 
    } 
  ], 
  "alarms" : [ 
    { 
      "alarmName" : "my_sqs_alarm", 
727Amazon CloudWatch User Guide
Work with component conﬁgurations
      "severity" : "MEDIUM" 
    } 
  ]
}
Amazon SNS topic
The following example shows a component conﬁguration in JSON format for Amazon SNS topic.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "NumberOfNotificationsFailed", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "NumberOfNotificationsFilteredOut-InvalidAttributes", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "NumberOfNotificationsFilteredOut-NoMessageAttributes", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "NumberOfNotificationsFailedToRedriveToDlq", 
      "monitor": true 
    } 
  ]
}
Amazon Virtual Private Cloud (Amazon VPC)
The following example shows a component conﬁguration in JSON format for Amazon VPC.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "NetworkAddressUsage", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "NetworkAddressUsagePeered", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "VPCFirewallQueryVolume", 
      "monitor": true 
    } 
  ]
}
Amazon VPC Network Address Translation (NAT) gateways
The following example shows a component conﬁguration in JSON format for NAT gateways.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "ErrorPortAllocation", 
      "monitor": true 
    }, 
    { 
728Amazon CloudWatch User Guide
Work with component conﬁgurations
      "alarmMetricName": "IdleTimeoutCount", 
      "monitor": true 
    } 
  ]
}
API Gateway REST API stages
The following example shows a component conﬁguration in JSON format for API Gateway REST API 
stages.
{  
     "alarmMetrics" : [  
         { 
             "alarmMetricName" : "4XXError",    
             "monitor" : true 
         },  
         { 
             "alarmMetricName" : "5XXError",    
             "monitor" : true 
         }  
     ], 
    "logs" : [ 
        {  
            "logType" : "API_GATEWAY_EXECUTION",    
            "monitor" : true   
        }, 
        {  
            "logType" : "API_GATEWAY_ACCESS",    
            "monitor" : true   
        } 
    ]
}
Application Elastic Load Balancing
The following example shows a component conﬁguration in JSON format for Application Elastic Load 
Balancing.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "ActiveConnectionCount", 
    }, { 
      "alarmMetricName": "TargetResponseTime" 
    } 
  ],   
  "subComponents": [ 
    { 
      "subComponentType": "AWS::EC2::Instance", 
      "alarmMetrics": [ 
        { 
          "alarmMetricName": "CPUUtilization", 
        }, { 
          "alarmMetricName": "StatusCheckFailed" 
        } 
      ], 
      "logs": [ 
        { 
          "logGroupName": "my_log_group", 
          "logPath": "C:\\LogFolder\\*", 
          "logType": "APPLICATION", 
        } 
729Amazon CloudWatch User Guide
Work with component conﬁgurations
      ], 
      "windowsEvents": [ 
        { 
          "logGroupName": "my_log_group_2", 
          "eventName": "Application", 
          "eventLevels": [ "ERROR", "WARNING", "CRITICAL" ] 
        } 
      ] 
    }, { 
      "subComponentType": "AWS::EC2::Volume", 
      "alarmMetrics": [ 
        { 
          "alarmMetricName": "VolumeQueueLength", 
        }, { 
          "alarmMetricName": "BurstBalance" 
        } 
      ] 
    } 
  ], 
  "alarms": [ 
    { 
      "alarmName": "my_alb_alarm", 
      "severity": "LOW" 
    } 
  ]
}
AWS Lambda Function
The following example shows a component conﬁguration in JSON format for AWS Lambda Function.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "Errors", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "Throttles", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "IteratorAge", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "Duration", 
      "monitor": true 
    } 
  ], 
  "logs": [ 
    { 
      "logType": "DEFAULT", 
      "monitor": true 
    } 
  ]
}
AWS Network Firewall rule group
The following example shows a component conﬁguration in JSON format for AWS Network Firewall rule 
group.
730Amazon CloudWatch User Guide
Work with component conﬁgurations
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "FirewallRuleGroupQueryVolume", 
      "monitor": true 
    } 
  ]
}
AWS Network Firewall rule group association
The following example shows a component conﬁguration in JSON format for AWS Network Firewall rule 
group association.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "FirewallRuleGroupQueryVolume", 
      "monitor": true 
    } 
  ]
}
AWS Step Functions
The following example shows a component conﬁgurations in JSON format for AWS Step Functions.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "ExecutionsFailed", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "LambdaFunctionsFailed", 
      "monitor": true 
    }, 
    { 
      "alarmMetricName": "ProvisionedRefillRate", 
      "monitor": true 
    } 
  ], 
  "logs": [ 
    { 
     "logGroupName": "/aws/states/HelloWorld-Logs", 
      "logType": "STEP_FUNCTION", 
      "monitor": true, 
    } 
  ]
}
Customer-grouped Amazon EC2 instances
The following example shows a component conﬁguration in JSON format for customer-grouped Amazon 
EC2 instances.
{ 
    "subComponents": [ 
      { 
        "subComponentType": "AWS::EC2::Instance", 
731Amazon CloudWatch User Guide
Work with component conﬁgurations
        "alarmMetrics": [ 
          { 
            "alarmMetricName": "CPUUtilization", 
          },  
          { 
            "alarmMetricName": "StatusCheckFailed" 
          } 
        ], 
        "logs": [ 
          { 
            "logGroupName": "my_log_group", 
            "logPath": "C:\\LogFolder\\*", 
            "logType": "APPLICATION", 
          } 
        ], 
        "processes": [ 
            { 
                "processName": "my_process", 
                "alarmMetrics": [ 
                    { 
                        "alarmMetricName": "procstat cpu_usage", 
                        "monitor": true 
                    }, { 
                        "alarmMetricName": "procstat memory_rss", 
                        "monitor": true 
                    } 
                ] 
            } 
        ], 
        "windowsEvents": [ 
          { 
            "logGroupName": "my_log_group_2", 
            "eventName": "Application", 
            "eventLevels": [ "ERROR", "WARNING", "CRITICAL" ] 
          } 
        ] 
      }, { 
        "subComponentType": "AWS::EC2::Volume", 
        "alarmMetrics": [ 
          { 
            "alarmMetricName": "VolumeQueueLength", 
          }, { 
            "alarmMetricName": "BurstBalance" 
          } 
        ] 
      } 
    ], 
    "alarms": [ 
      { 
        "alarmName": "my_alarm", 
        "severity": "MEDIUM" 
      } 
    ] 
  }
Elastic Load Balancing
The following example shows a component conﬁguration in JSON format for Elastic Load Balancing.
{ 
    "alarmMetrics": [ 
      { 
        "alarmMetricName": "EstimatedALBActiveConnectionCount" 
      }, { 
732Amazon CloudWatch User Guide
Work with component conﬁgurations
        "alarmMetricName": "HTTPCode_Backend_5XX" 
      } 
    ], 
    "subComponents": [ 
      { 
        "subComponentType": "AWS::EC2::Instance", 
        "alarmMetrics": [ 
          { 
            "alarmMetricName": "CPUUtilization" 
          }, { 
            "alarmMetricName": "StatusCheckFailed" 
          } 
        ], 
        "logs": [ 
          { 
            "logGroupName": "my_log_group", 
            "logPath": "C:\\LogFolder\\*", 
            "logType": "APPLICATION" 
          } 
        ], 
        "processes": [ 
          { 
            "processName": "my_process", 
            "alarmMetrics": [ 
                { 
                  "alarmMetricName": "procstat cpu_usage", 
                  "monitor": true 
                }, { 
                  "alarmMetricName": "procstat memory_rss", 
                  "monitor": true 
                } 
              ] 
          } 
        ], 
        "windowsEvents": [ 
          { 
            "logGroupName": "my_log_group_2", 
            "eventName": "Application", 
            "eventLevels": [ "ERROR", "WARNING", "CRITICAL" ], 
            "monitor": true 
          } 
        ] 
      }, { 
        "subComponentType": "AWS::EC2::Volume", 
        "alarmMetrics": [ 
          { 
            "alarmMetricName": "VolumeQueueLength" 
          }, { 
            "alarmMetricName": "BurstBalance" 
          } 
        ] 
      } 
    ], 
   
    "alarms": [ 
      { 
        "alarmName": "my_elb_alarm", 
        "severity": "HIGH" 
      } 
    ] 
  }
Java
The following example shows a component conﬁguration in JSON format for Java.
733Amazon CloudWatch User Guide
Work with component conﬁgurations
{ 
  "alarmMetrics": [ { 
    "alarmMetricName": "java_lang_threading_threadcount", 
    "monitor": true 
  }, 
  { 
    "alarmMetricName": "java_lang_memory_heapmemoryusage_used", 
    "monitor": true 
  }, 
  { 
    "alarmMetricName": "java_lang_memory_heapmemoryusage_committed", 
    "monitor": true 
  }], 
  "logs": [ ], 
  "JMXPrometheusExporter": { 
      "hostPort": "8686", 
      "prometheusPort": "9404" 
  }
}
Note
Application Insights does not support conﬁguring authentication for Prometheus JMX exporter. 
For information about how to set up authentication, see the Prometheus JMX exporter example 
conﬁguration.
Kubernetes on Amazon EC2
The following example shows a component conﬁguration in JSON format for Kubernetes on Amazon 
EC2.
{ 
    "alarmMetrics":[ 
       { 
          "alarmMetricName":"cluster_failed_node_count", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"node_cpu_reserved_capacity", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"node_cpu_utilization", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"node_filesystem_utilization", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"node_memory_reserved_capacity", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"node_memory_utilization", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"node_network_total_bytes", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"pod_cpu_reserved_capacity", 
          "monitor":true 
734Amazon CloudWatch User Guide
Work with component conﬁgurations
       }, 
       { 
          "alarmMetricName":"pod_cpu_utilization", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"pod_cpu_utilization_over_pod_limit", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"pod_memory_reserved_capacity", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"pod_memory_utilization", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"pod_memory_utilization_over_pod_limit", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"pod_network_rx_bytes", 
          "monitor":true 
       }, 
       { 
          "alarmMetricName":"pod_network_tx_bytes", 
          "monitor":true 
       } 
    ], 
    "logs":[ 
       { 
          "logGroupName":"/aws/containerinsights/kubernetes/application", 
          "logType":"APPLICATION", 
          "monitor":true, 
          "encoding":"utf-8" 
       } 
    ], 
    "subComponents":[ 
       { 
          "subComponentType":"AWS::EC2::Instance", 
          "alarmMetrics":[ 
             { 
                "alarmMetricName":"CPUUtilization", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"StatusCheckFailed", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"disk_used_percent", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"mem_used_percent", 
                "monitor":true 
             } 
          ], 
          "logs":[ 
             { 
                "logGroupName":"APPLICATION-KubernetesClusterOnEC2-IAD", 
                "logPath":"", 
                "logType":"APPLICATION", 
                "monitor":true, 
                "encoding":"utf-8" 
735Amazon CloudWatch User Guide
Work with component conﬁgurations
             } 
          ], 
          "processes" : [ 
            { 
                "processName" : "my_process", 
                "alarmMetrics" : [ 
                    { 
                        "alarmMetricName" : "procstat cpu_usage", 
                        "monitor" : true 
                    }, { 
                        "alarmMetricName" : "procstat memory_rss", 
                        "monitor" : true 
                    } 
                ] 
            } 
        ] 
       }, 
       { 
          "subComponentType":"AWS::EC2::Volume", 
          "alarmMetrics":[ 
             { 
                "alarmMetricName":"VolumeReadBytes", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"VolumeWriteBytes", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"VolumeReadOps", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"VolumeWriteOps", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"VolumeQueueLength", 
                "monitor":true 
             }, 
             { 
                "alarmMetricName":"BurstBalance", 
                "monitor":true 
             } 
          ] 
       } 
    ] 
 }
RDS MariaDB and RDS MySQL
The following example shows a component conﬁguration in JSON format for RDS MariaDB and RDS 
MySQL.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "CPUUtilization", 
      "monitor": true 
    } 
  ], 
  "logs": [ 
    { 
      "logType": "MYSQL", 
736Amazon CloudWatch User Guide
Work with component conﬁgurations
      "monitor": true, 
    }, 
    { 
      "logType": "MYSQL_SLOW_QUERY", 
      "monitor": false 
    } 
  ]
}
RDS Oracle
The following example shows a component conﬁguration in JSON format for RDS Oracle.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "CPUUtilization", 
      "monitor": true 
    } 
  ], 
  "logs": [ 
    { 
      "logType": "ORACLE_ALERT", 
      "monitor": true, 
    }, 
    { 
      "logType": "ORACLE_LISTENER", 
      "monitor": false 
    } 
  ]
}
RDS PostgreSQL
The following example shows a component conﬁgurations in JSON format for RDS PostgreSQL.
{ 
  "alarmMetrics": [ 
    { 
      "alarmMetricName": "CPUUtilization", 
      "monitor": true 
    } 
  ], 
  "logs": [ 
    { 
      "logType": "POSTGRESQL", 
      "monitor": true 
    } 
  ]
}
SAP HANA on Amazon EC2
The following example shows a component conﬁguration in JSON format for SAP HANA on Amazon EC2.
{ 
  "subComponents": [ 
    { 
      "subComponentType": "AWS::EC2::Instance", 
      "alarmMetrics": [ 
        { 
          "alarmMetricName": "hanadb_server_startup_time_variations_seconds", 
737Amazon CloudWatch User Guide
Work with component conﬁgurations
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "hanadb_level_5_alerts_count", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "hanadb_level_4_alerts_count", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "hanadb_out_of_memory_events_count", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "hanadb_max_trigger_read_ratio_percent", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "hanadb_table_allocation_limit_used_percent", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "hanadb_cpu_usage_percent", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "hanadb_plan_cache_hit_ratio_percent", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "hanadb_last_data_backup_age_days", 
          "monitor": true 
        } 
      ], 
      "logs": [ 
        { 
          "logGroupName": "SAP_HANA_TRACE-my-resourge-group", 
          "logPath": "/usr/sap/HDB/HDB00/*/trace/*.trc", 
          "logType": "SAP_HANA_TRACE", 
          "monitor": true, 
          "encoding": "utf-8" 
        }, 
        { 
          "logGroupName": "SAP_HANA_LOGS-my-resource-group", 
          "logPath": "/usr/sap/HDB/HDB00/*/trace/*.log", 
          "logType": "SAP_HANA_LOGS", 
          "monitor": true, 
          "encoding": "utf-8" 
        } 
      ] 
    } 
  ], 
  "hanaPrometheusExporter": { 
    "hanaSid": "HDB", 
    "hanaPort": "30013", 
    "hanaSecretName": "HANA_DB_CREDS", 
    "prometheusPort": "9668" 
  }
}
738Amazon CloudWatch User Guide
Work with component conﬁgurations
SAP HANA High Availability on Amazon EC2
The following example shows a component conﬁguration in JSON format for SAP HANA High Availability 
on Amazon EC2.
{ 
  "subComponents": [ 
    { 
      "subComponentType": "AWS::EC2::Instance", 
      "alarmMetrics": [ 
        { 
          "alarmMetricName": "hanadb_server_startup_time_variations_seconds", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "hanadb_level_5_alerts_count", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "hanadb_level_4_alerts_count", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "hanadb_out_of_memory_events_count", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "ha_cluster_pacemaker_stonith_enabled", 
          "monitor": true 
        } 
      ], 
      "logs": [ 
        { 
          "logGroupName": "SAP_HANA_TRACE-my-resourge-group", 
          "logPath": "/usr/sap/HDB/HDB00/*/trace/*.trc", 
          "logType": "SAP_HANA_TRACE", 
          "monitor": true, 
          "encoding": "utf-8" 
        }, 
        { 
          "logGroupName": "SAP_HANA_HIGH_AVAILABILITY-my-resource-group", 
          "logPath": "/var/log/pacemaker/pacemaker.log", 
          "logType": "SAP_HANA_HIGH_AVAILABILITY", 
          "monitor": true, 
          "encoding": "utf-8" 
        } 
      ] 
    } 
  ], 
  "hanaPrometheusExporter": { 
    "hanaSid": "HDB", 
    "hanaPort": "30013", 
    "hanaSecretName": "HANA_DB_CREDS", 
    "prometheusPort": "9668" 
  }, 
  "haClusterPrometheusExporter": { 
    "prometheusPort": "9664" 
  }
}
SAP NetWeaver on Amazon EC2
The following example shows a component conﬁguration in JSON format for SAP NetWeaver on Amazon 
EC2.
739Amazon CloudWatch User Guide
Work with component conﬁgurations
{ 
  "subComponents": [ 
    { 
      "subComponentType": "AWS::EC2::Instance", 
      "alarmMetrics": [ 
        { 
          "alarmMetricName": "CPUUtilization", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "StatusCheckFailed", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "disk_used_percent", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "mem_used_percent", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_ResponseTime", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_ResponseTimeDialog", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_ResponseTimeDialogRFC", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_DBRequestTime", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_LongRunners", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_AbortedJobs", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_BasisSystem", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_Database", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_Security", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_System", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_QueueTime", 
          "monitor": true 
        }, 
740Amazon CloudWatch User Guide
Work with component conﬁgurations
        { 
          "alarmMetricName": "sap_alerts_Availability", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_start_service_processes", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_dispatcher_queue_now", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_dispatcher_queue_max", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_enqueue_server_locks_max", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_enqueue_server_locks_now", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_enqueue_server_locks_state", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_enqueue_server_replication_state", 
          "monitor": true 
        } 
      ], 
      "logs": [ 
        { 
          "logGroupName": "SAP_NETWEAVER_DEV_TRACE_LOGS-NetWeaver-ML4", 
          "logPath": "/usr/sap/ML4/*/work/dev_w*", 
          "logType": "SAP_NETWEAVER_DEV_TRACE_LOGS", 
          "monitor": true, 
          "encoding": "utf-8" 
        } 
      ] 
    } 
  ], 
  "netWeaverPrometheusExporter": { 
    "sapSid": "ML4", 
    "instanceNumbers": [ 
      "00", 
      "11" 
    ], 
    "prometheusPort": "9680" 
  }
}
SAP NetWeaver High Availability on Amazon EC2
The following example shows a component conﬁguration in JSON format for SAP NetWeaver High 
Availability on Amazon EC2.
{ 
  "subComponents": [ 
    { 
      "subComponentType": "AWS::EC2::Instance", 
      "alarmMetrics": [ 
741Amazon CloudWatch User Guide
Work with component conﬁgurations
        { 
          "alarmMetricName": "ha_cluster_corosync_ring_errors", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "ha_cluster_pacemaker_fail_count", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_HA_check_failover_config_state", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_HA_get_failover_config_HAActive", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_AbortedJobs", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_Availability", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_BasisSystem", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_DBRequestTime", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_Database", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_FrontendResponseTime", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_LongRunners", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_QueueTime", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_ResponseTime", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_ResponseTimeDialog", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_ResponseTimeDialogRFC", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_Security", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_Shortdumps", 
742Amazon CloudWatch User Guide
Work with component conﬁgurations
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_SqlError", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_alerts_System", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_enqueue_server_replication_state", 
          "monitor": true 
        }, 
        { 
          "alarmMetricName": "sap_start_service_processes", 
          "monitor": true 
        } 
      ], 
      "logs": [ 
        { 
          "logGroupName": "SAP_NETWEAVER_DEV_TRACE_LOGS-NetWeaver-PR1", 
          "logPath": "/usr/sap/<SID>/D*/work/dev_w*", 
          "logType": "SAP_NETWEAVER_DEV_TRACE_LOGS", 
          "monitor": true, 
          "encoding": "utf-8" 
        } 
      ] 
    } 
  ], 
  "haClusterPrometheusExporter": { 
    "prometheusPort": "9664" 
  }, 
  "netWeaverPrometheusExporter": { 
    "sapSid": "PR1", 
    "instanceNumbers": [ 
      "11", 
      "12" 
    ], 
    "prometheusPort": "9680" 
  }
}
SQL Always On Availability Group
The following example shows a component conﬁguration in JSON format for SQL Always On Availability 
Group.
{ 
  "subComponents" : [ { 
    "subComponentType" : "AWS::EC2::Instance", 
    "alarmMetrics" : [ { 
      "alarmMetricName" : "CPUUtilization", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "StatusCheckFailed", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Processor % Processor Time", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Memory % Committed Bytes In Use", 
      "monitor" : true 
    }, { 
743Amazon CloudWatch User Guide
Work with component conﬁgurations
      "alarmMetricName" : "Memory Available Mbytes", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Paging File % Usage", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "System Processor Queue Length", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Network Interface Bytes Total/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "PhysicalDisk % Disk Time", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Buffer Manager Buffer cache hit ratio", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Buffer Manager Page life expectancy", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:General Statistics Processes blocked", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:General Statistics User Connections", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Locks Number of Deadlocks/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:SQL Statistics Batch Requests/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica File Bytes Received/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Log Bytes Received/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Log remaining for undo", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Log Send Queue", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Mirrored Write Transaction/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Recovery Queue", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Redo Bytes Remaining", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Redone Bytes/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Total Log requiring undo", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "SQLServer:Database Replica Transaction Delay", 
      "monitor" : true 
    } ], 
    "windowsEvents" : [ { 
      "logGroupName" : "WINDOWS_EVENTS-Application-<RESOURCE_GROUP_NAME>", 
      "eventName" : "Application", 
744Amazon CloudWatch User Guide
Work with component conﬁgurations
      "eventLevels" : [ "WARNING", "ERROR", "CRITICAL", "INFORMATION" ], 
      "monitor" : true 
    }, { 
      "logGroupName" : "WINDOWS_EVENTS-System-<RESOURCE_GROUP_NAME>", 
      "eventName" : "System", 
      "eventLevels" : [ "WARNING", "ERROR", "CRITICAL" ], 
      "monitor" : true 
    }, { 
      "logGroupName" : "WINDOWS_EVENTS-Security-<RESOURCE_GROUP_NAME>", 
      "eventName" : "Security", 
      "eventLevels" : [ "WARNING", "ERROR", "CRITICAL" ], 
      "monitor" : true 
    } ], 
    "logs" : [ { 
      "logGroupName" : "SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP-<RESOURCE_GROUP_NAME>", 
      "logPath" : "C:\\Program Files\\Microsoft SQL Server\\MSSQL**.MSSQLSERVER\\MSSQL\\Log
\\ERRORLOG", 
      "logType" : "SQL_SERVER", 
      "monitor" : true, 
      "encoding" : "utf-8" 
    } ] 
  }, { 
    "subComponentType" : "AWS::EC2::Volume", 
    "alarmMetrics" : [ { 
      "alarmMetricName" : "VolumeReadBytes", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeWriteBytes", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeReadOps", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeWriteOps", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeQueueLength", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeThroughputPercentage", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "BurstBalance", 
      "monitor" : true 
    } ] 
  } ]
}   
SQL failover cluster instance
The following example shows a component conﬁguration in JSON format for SQL failover cluster 
instance.
{ 
  "subComponents" : [ { 
    "subComponentType" : "AWS::EC2::Instance", 
    "alarmMetrics" : [ { 
      "alarmMetricName" : "CPUUtilization", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "StatusCheckFailed", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Processor % Processor Time", 
745Amazon CloudWatch User Guide
Work with component conﬁgurations
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Memory % Committed Bytes In Use", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Memory Available Mbytes", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Paging File % Usage", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "System Processor Queue Length", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Network Interface Bytes Total/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "PhysicalDisk % Disk Time", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Bytes Received/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Normal Messages Queue Length/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Urgent Message Queue Length/se", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Reconnect Count", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Unacknowledged Message Queue Length/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Messages Outstanding", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Messages Sent/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Database Update Messages/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Update Messages/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Flushes/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Crypto Checkpoints Saved/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Crypto Checkpoints Restored/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Registry Checkpoints Restored/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Registry Checkpoints Saved/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Cluster API Calls/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Resource API Calls/sec", 
746Amazon CloudWatch User Guide
Work with component conﬁgurations
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Cluster Handles/sec", 
      "monitor" : true 
    }, { 
      "alarmMetricName" : "Resource Handles/sec", 
      "monitor" : true 
    } ], 
    "windowsEvents" : [ { 
      "logGroupName" : "WINDOWS_EVENTS-Application-<RESOURCE_GROUP_NAME>", 
      "eventName" : "Application", 
      "eventLevels" : [ "WARNING", "ERROR", "CRITICAL"], 
      "monitor" : true 
    }, { 
      "logGroupName" : "WINDOWS_EVENTS-System-<RESOURCE_GROUP_NAME>", 
      "eventName" : "System", 
      "eventLevels" : [ "WARNING", "ERROR", "CRITICAL", "INFORMATION" ], 
      "monitor" : true 
    }, { 
      "logGroupName" : "WINDOWS_EVENTS-Security-<RESOURCE_GROUP_NAME>", 
      "eventName" : "Security", 
      "eventLevels" : [ "WARNING", "ERROR", "CRITICAL" ], 
      "monitor" : true 
    } ], 
    "logs" : [ { 
      "logGroupName" : "SQL_SERVER_FAILOVER_CLUSTER_INSTANCE-<RESOURCE_GROUP_NAME>", 
      "logPath" : "\\\\amznfsxjmzbykwn.mydomain.aws\\SQLDB\\MSSQL**.MSSQLSERVER\\MSSQL\\Log
\\ERRORLOG", 
      "logType" : "SQL_SERVER", 
      "monitor" : true, 
      "encoding" : "utf-8" 
    } ] 
  }, { 
    "subComponentType" : "AWS::EC2::Volume", 
    "alarmMetrics" : [ { 
      "alarmMetricName" : "VolumeReadBytes", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeWriteBytes", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeReadOps", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeWriteOps", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeQueueLength", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "VolumeThroughputPercentage", 
      "monitor" : true 
    }, { 
    "alarmMetricName" : "BurstBalance", 
      "monitor" : true 
    } ] 
  } ]
}   
747Amazon CloudWatch User Guide
Use CloudFormation templates
Create and conﬁgure CloudWatch Application 
Insights monitoring using CloudFormation templates
You can add Application Insights monitoring, including key metrics and telemetry, to your application, 
database, and web server, directly from AWS CloudFormation templates.
This section provides sample AWS CloudFormation templates in both JSON and YAML formats to help 
you create and conﬁgure Application Insights monitoring.
To view the Application Insights resource and property reference in the AWS CloudFormation User Guide, 
see ApplicationInsights resource type reference.
Sample templates
•Create an Application Insights application for the entire AWS CloudFormation stack (p. 748)
•Create an Application Insights application with detailed settings  (p. 750)
•Create an Application Insights application with CUSTOM mode component conﬁguration (p. 752)
•Create an Application Insights application with DEFAULT mode component conﬁguration (p. 755)
•Create an Application Insights application with DEFAULT_WITH_OVERWRITE mode component 
conﬁguration (p. 755)
Create an Application Insights application for the entire AWS 
CloudFormation stack
To apply the following template, you must create AWS resources and one or more resource groups from 
which to create Application Insights applications to monitor those resources. For more information, see
Getting started with AWS Resource Groups.
The ﬁrst two parts of the following template specify a resource and a resource group. The last part of the 
template creates an Application Insights application for the resource group, but does not conﬁgure the 
application or apply monitoring. For more information, see the CreateApplication command details in 
the Amazon CloudWatch Application Insights API Reference.
Template in JSON format
{ 
    "AWSTemplateFormatVersion": "2010-09-09", 
    "Description": " Test Resource Group stack ", 
    "Resources": { 
        "EC2Instance": { 
            "Type": "AWS::EC2::Instance", 
            "Properties": { 
                "ImageId" : "ami- abcd1234efgh5678i ", 
                "SecurityGroupIds" : ["sg- abcd1234 "] 
            } 
        }, 
        ... 
        "ResourceGroup": { 
            "Type": "AWS::ResourceGroups::Group", 
            "Properties": { 
                "Name": " my_resource_group " 
            } 
        }, 
        "AppInsightsApp": { 
            "Type": "AWS::ApplicationInsights::Application", 
            "Properties": { 
                "ResourceGroupName": " my_resource_group " 
748Amazon CloudWatch User Guide
Use CloudFormation templates
            }, 
            "DependsOn" : "ResourceGroup" 
        } 
    }
}
Template in YAML format
---
AWSTemplateFormatVersion: '2010-09-09'
Description: Test Resource Group stack
Resources: 
  EC2Instance: 
    Type: AWS::EC2::Instance 
    Properties: 
      ImageId: ami- abcd1234efgh5678i
      SecurityGroupIds: 
      - sg- abcd1234
  ... 
  ResourceGroup: 
    Type: AWS::ResourceGroups::Group 
    Properties: 
      Name: my_resource_group
  AppInsightsApp: 
    Type: AWS::ApplicationInsights::Application 
    Properties: 
      ResourceGroupName: my_resource_group
    DependsOn: ResourceGroup
The following template section applies the default monitoring conﬁguration to the Application 
Insights application. For more information, see the CreateApplication command details in the Amazon 
CloudWatch Application Insights API Reference.
When AutoConfigurationEnabled  is set to true, all components of the application are 
conﬁgured with the recommended monitoring settings for the DEFAULT application tier. For more 
information about these settings and tiers, see DescribeComponentConﬁgurationRecommendation and
UpdateComponentConﬁguration  in the Amazon CloudWatch Application Insights API Reference.
Template in JSON format
{ 
    "AWSTemplateFormatVersion": "2010-09-09", 
    "Description": " Test Application Insights Application stack ", 
    "Resources": { 
        "AppInsightsApp": { 
            "Type": "AWS::ApplicationInsights::Application", 
            "Properties": { 
                "ResourceGroupName": " my_resource_group ", 
                "AutoConfigurationEnabled": true 
            } 
        } 
    }
}
Template in YAML format
---
AWSTemplateFormatVersion: '2010-09-09'
Description: Test Application Insights Application stack
Resources: 
  AppInsightsApp: 
    Type: AWS::ApplicationInsights::Application 
749Amazon CloudWatch User Guide
Use CloudFormation templates
    Properties: 
      ResourceGroupName: my_resource_group
      AutoConfigurationEnabled: true
Create an Application Insights application with detailed settings
The following template performs these actions:
•Creates an Application Insights application with CloudWatch Events notiﬁcation and OpsCenter 
enabled. For more information, see the CreateApplication command details in the Amazon CloudWatch 
Application Insights API Reference.
•Tags the application with two tags, one of which has no tag values. For more information, see
TagResource in the Amazon CloudWatch Application Insights API Reference.
•Creates two custom instance group components. For more information, see CreateComponent in the
Amazon CloudWatch Application Insights API Reference.
•Creates two log pattern sets. For more information, see CreateLogPattern in the Amazon CloudWatch 
Application Insights API Reference.
•Sets AutoConfigurationEnabled  to true, which conﬁgures all components of the application 
with the recommended monitoring settings for the DEFAULT tier. For more information, see
DescribeComponentConﬁgurationRecommendation in the Amazon CloudWatch Application Insights API 
Reference.
Template in JSON format
{ 
    "Type": "AWS::ApplicationInsights::Application", 
    "Properties": { 
        "ResourceGroupName": " my_resource_group ", 
        "CWEMonitorEnabled": true, 
        "OpsCenterEnabled": true, 
        "OpsItemSNSTopicArn": "arn:aws:sns: us-east-1:123456789012:my_topic ", 
        "AutoConfigurationEnabled": true, 
        "Tags": [ 
            { 
                "Key": " key1", 
                "Value": " value1" 
            }, 
            { 
                "Key": " key2", 
                "Value": "" 
            } 
        ], 
        "CustomComponents": [ 
            { 
                "ComponentName": " test_component_1 ", 
                "ResourceList": [ 
                    "arn:aws:ec2: us-east-1:123456789012:instance/i-abcd1234efgh5678i " 
                ] 
            }, 
            { 
                "ComponentName": " test_component_2 ", 
                "ResourceList": [ 
                    "arn:aws:ec2: us-east-1:123456789012:instance/i-abcd1234efgh5678i ", 
                    "arn:aws:ec2: us-east-1:123456789012:instance/i-abcd1234efgh5678i " 
                ] 
            } 
        ], 
        "LogPatternSets": [ 
            { 
                "PatternSetName": "pattern_set_1", 
750Amazon CloudWatch User Guide
Use CloudFormation templates
                "LogPatterns": [ 
                    { 
                        "PatternName": "deadlock_pattern", 
                        "Pattern": ".*\\sDeadlocked\\sSchedulers(([^\\w].*)|($))", 
                        "Rank": 1 
                    } 
                ]     
            }, 
            { 
                "PatternSetName": "pattern_set_2", 
                "LogPatterns": [ 
                    { 
                        "PatternName": "error_pattern", 
                        "Pattern": ".*[\\s\\[]ERROR[\\s\\]].*", 
                        "Rank": 1 
                    }, 
                    { 
                        "PatternName": "warning_pattern", 
                        "Pattern": ".*[\\s\\[]WARN(ING)?[\\s\\]].*", 
                        "Rank": 10 
                    } 
                ] 
            } 
        ] 
    }
}
Template in YAML format
---
Type: AWS::ApplicationInsights::Application
Properties: 
  ResourceGroupName: my_resource_group
  CWEMonitorEnabled: true 
  OpsCenterEnabled: true 
  OpsItemSNSTopicArn: arn:aws:sns: us-east-1:123456789012:my_topic
  AutoConfigurationEnabled: true 
  Tags: 
  - Key: key1
    Value: value1
  - Key: key2
    Value: '' 
  CustomComponents: 
  - ComponentName: test_component_1
    ResourceList: 
    - arn:aws:ec2: us-east-1:123456789012:instance/i-abcd1234efgh5678i
  - ComponentName: test_component_2 
    ResourceList: 
    - arn:aws:ec2: us-east-1:123456789012:instance/i-abcd1234efgh5678i
    - arn:aws:ec2: us-east-1:123456789012:instance/i-abcd1234efgh5678i
  LogPatternSets: 
  - PatternSetName: pattern_set_1 
    LogPatterns: 
    - PatternName: deadlock_pattern 
      Pattern: ".*\\sDeadlocked\\sSchedulers(([^\\w].*)|($))" 
      Rank: 1 
  - PatternSetName: pattern_set_2 
    LogPatterns: 
    - PatternName: error_pattern 
      Pattern: ".*[\\s\\[]ERROR[\\s\\]].*" 
      Rank: 1 
    - PatternName: warning_pattern 
      Pattern: ".*[\\s\\[]WARN(ING)?[\\s\\]].*" 
      Rank: 10
751Amazon CloudWatch User Guide
Use CloudFormation templates
Create an Application Insights application with CUSTOM  mode 
component conﬁguration
The following template performs these actions:
•Creates an Application Insights application. For more information, see CreateApplication in the
Amazon CloudWatch Application Insights API Reference.
•Component my_component  sets ComponentConfigurationMode  to CUSTOM , which causes this 
component to be conﬁgured with the conﬁguration speciﬁed in CustomComponentConfiguration . 
For more information, see UpdateComponentConﬁguration  in the Amazon CloudWatch Application 
Insights API Reference.
Template in JSON format
{ 
    "Type": "AWS::ApplicationInsights::Application", 
    "Properties": { 
        "ResourceGroupName": "my_resource_group, 
        "ComponentMonitoringSettings": [ 
            { 
                "ComponentARN": "my_component", 
                "Tier": "SQL_SERVER", 
                "ComponentConfigurationMode": "CUSTOM", 
                "CustomComponentConfiguration": { 
                    "ConfigurationDetails": { 
                        "AlarmMetrics": [ 
                            { 
                                "AlarmMetricName": "StatusCheckFailed" 
                            }, 
                            ... 
                        ], 
                        "Logs": [ 
                            {        
                                "LogGroupName": "my_log_group_1", 
                                "LogPath": "C:\\LogFolder_1\\*", 
                                "LogType": "DOT_NET_CORE", 
                                "Encoding": "utf-8", 
                                "PatternSet": "my_pattern_set_1" 
                            },       
                            ...      
                        ],       
                        "WindowsEvents": [ 
                            {        
                                "LogGroupName": "my_windows_event_log_group_1", 
                                "EventName": "Application", 
                                "EventLevels": [ 
                                    "ERROR", 
                                    "WARNING", 
                                    ...      
                                ],        
                                "Encoding": "utf-8", 
                                "PatternSet": "my_pattern_set_2" 
                            },       
                            ...      
                        ], 
                        "Alarms": [ 
                            { 
                                "AlarmName": "my_alarm_name", 
                                "Severity": "HIGH" 
                            }, 
                            ... 
752Amazon CloudWatch User Guide
Use CloudFormation templates
                        ] 
                    }, 
                    "SubComponentTypeConfigurations": [ 
                        { 
                            "SubComponentType": "EC2_INSTANCE", 
                            "SubComponentConfigurationDetails": { 
                                "AlarmMetrics": [ 
                                    { 
                                        "AlarmMetricName": "DiskReadOps" 
                                    }, 
                                    ... 
                                ], 
                                "Logs": [ 
                                    { 
                                        "LogGroupName": "my_log_group_2", 
                                        "LogPath": "C:\\LogFolder_2\\*", 
                                        "LogType": "IIS", 
                                        "Encoding": "utf-8", 
                                        "PatternSet": "my_pattern_set_3" 
                                    }, 
                                    ... 
                                ], 
                                "processes" : [ 
                                    { 
                                        "processName" : "my_process", 
                                        "alarmMetrics" : [ 
                                    { 
                                        "alarmMetricName" : "procstat cpu_usage", 
                                        "monitor" : true 
                                    }, { 
                                        "alarmMetricName" : "procstat memory_rss", 
                                        "monitor" : true 
                                    } 
                                ] 
                            } 
                        ], 
                                "WindowsEvents": [ 
                                    { 
                                        "LogGroupName": "my_windows_event_log_group_2", 
                                        "EventName": "Application", 
                                        "EventLevels": [ 
                                            "ERROR", 
                                            "WARNING", 
                                            ... 
                                        ], 
                                        "Encoding": "utf-8", 
                                        "PatternSet": "my_pattern_set_4" 
                                    }, 
                                    ... 
                                ] 
                            } 
                        }    
                    ] 
                } 
            } 
        ] 
    }
}
Template in YAML format
---
Type: AWS::ApplicationInsights::Application
Properties: 
  ResourceGroupName: my_resource_group 
753Amazon CloudWatch User Guide
Use CloudFormation templates
  ComponentMonitoringSettings: 
  - ComponentARN: my_component 
    Tier: SQL_SERVER 
    ComponentConfigurationMode: CUSTOM 
    CustomComponentConfiguration: 
      ConfigurationDetails: 
        AlarmMetrics: 
        - AlarmMetricName: StatusCheckFailed 
        ... 
        Logs: 
        - LogGroupName: my_log_group_1 
          LogPath: C:\LogFolder_1\* 
          LogType: DOT_NET_CORE 
          Encoding: utf-8 
          PatternSet: my_pattern_set_1 
        ... 
        WindowsEvents: 
        - LogGroupName: my_windows_event_log_group_1 
          EventName: Application 
          EventLevels: 
          - ERROR 
          - WARNING 
          ... 
          Encoding: utf-8 
          PatternSet: my_pattern_set_2 
        ... 
        Alarms: 
        - AlarmName: my_alarm_name 
          Severity: HIGH 
        ... 
      SubComponentTypeConfigurations: 
      - SubComponentType: EC2_INSTANCE 
        SubComponentConfigurationDetails: 
          AlarmMetrics: 
          - AlarmMetricName: DiskReadOps 
          ... 
          Logs: 
          - LogGroupName: my_log_group_2 
            LogPath: C:\LogFolder_2\* 
            LogType: IIS 
            Encoding: utf-8 
            PatternSet: my_pattern_set_3 
          ... 
          Processes: 
          - ProcessName: my_process 
            AlarmMetrics: 
            - AlarmMetricName: procstat cpu_usage 
              ... 
            ... 
          WindowsEvents: 
          - LogGroupName: my_windows_event_log_group_2 
            EventName: Application 
            EventLevels: 
            - ERROR 
            - WARNING 
            ... 
            Encoding: utf-8 
            PatternSet: my_pattern_set_4 
          ...
754Amazon CloudWatch User Guide
Use CloudFormation templates
Create an Application Insights application with DEFAULT  mode 
component conﬁguration
The following template performs these actions:
•Creates an Application Insights application. For more information, see CreateApplication in the
Amazon CloudWatch Application Insights API Reference.
•Component my_component  sets ComponentConfigurationMode  to DEFAULT  and Tier  to
SQL_SERVER , which causes this component to be conﬁgured with the conﬁguration settings 
that Application Insights recommends for the SQL_Server  tier. For more information, see
DescribeComponentConﬁguration  and UpdateComponentConﬁguration  in the Amazon CloudWatch 
Application Insights API Reference.
Template in JSON format
{ 
    "Type": "AWS::ApplicationInsights::Application", 
    "Properties": { 
        "ResourceGroupName": " my_resource_group ", 
        "ComponentMonitoringSettings": [ 
            { 
                "ComponentARN": " my_component ", 
                "Tier": "SQL_SERVER", 
                "ComponentConfigurationMode": "DEFAULT" 
            } 
        ] 
    }
}
Template in YAML format
---
Type: AWS::ApplicationInsights::Application
Properties: 
  ResourceGroupName: my_resource_group
  ComponentMonitoringSettings: 
  - ComponentARN: my_component
    Tier: SQL_SERVER 
    ComponentConfigurationMode: DEFAULT
Create an Application Insights application with
DEFAULT_WITH_OVERWRITE  mode component conﬁguration
The following template performs these actions:
•Creates an Application Insights application. For more information, see CreateApplication in the
Amazon CloudWatch Application Insights API Reference.
•Component my_component  sets ComponentConfigurationMode  to DEFAULT_WITH_OVERWRITE
and tier  to DOT_NET_CORE , which causes this component to be conﬁgured with the conﬁguration 
settings that Application Insights recommends for the DOT_NET_CORE  tier. Overwritten conﬁguration 
settings are speciﬁed in the DefaultOverwriteComponentConfiguration :
•At the component level AlarmMetrics  settings are overwritten.
•At the sub-component level, for the EC2_Instance  type sub-components, Logs settings are 
overwritten.
755Amazon CloudWatch User Guide
Use CloudFormation templates
For more information, see UpdateComponentConﬁguration  in the Amazon CloudWatch Application 
Insights API Reference.
Template in JSON format
{ 
    "Type": "AWS::ApplicationInsights::Application", 
    "Properties": { 
        "ResourceGroupName": " my_resource_group ", 
        "ComponentMonitoringSettings": [ 
            { 
                "ComponentName": " my_component ", 
                "Tier": "DOT_NET_CORE", 
                "ComponentConfigurationMode": "DEFAULT_WITH_OVERWRITE", 
                "DefaultOverwriteComponentConfiguration": { 
                    "ConfigurationDetails": { 
                        "AlarmMetrics": [ 
                            { 
                                "AlarmMetricName": "StatusCheckFailed" 
                            } 
                        ] 
                    }, 
                    "SubComponentTypeConfigurations": [ 
                        { 
                            "SubComponentType": "EC2_INSTANCE", 
                            "SubComponentConfigurationDetails": { 
                                "Logs": [ 
                                    { 
                                        "LogGroupName": " my_log_group ", 
                                        "LogPath": "C:\\LogFolder\\*", 
                                        "LogType": "IIS", 
                                        "Encoding": "utf-8", 
                                        "PatternSet": " my_pattern_set " 
                                    } 
                                ] 
                            } 
                        }    
                    ]  
                }  
            } 
        ] 
    }
}
Template in YAML format
---
Type: AWS::ApplicationInsights::Application
Properties: 
  ResourceGroupName: my_resource_group
  ComponentMonitoringSettings: 
  - ComponentName: my_component
    Tier: DOT_NET_CORE 
    ComponentConfigurationMode: DEFAULT_WITH_OVERWRITE 
    DefaultOverwriteComponentConfiguration: 
      ConfigurationDetails: 
        AlarmMetrics: 
        - AlarmMetricName: StatusCheckFailed 
      SubComponentTypeConfigurations: 
      - SubComponentType: EC2_INSTANCE 
        SubComponentConfigurationDetails: 
          Logs: 
756Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP HANA
          - LogGroupName: my_log_group
            LogPath: C:\LogFolder\* 
            LogType: IIS 
            Encoding: utf-8 
            PatternSet: my_pattern_set
Tutorial: Set up monitoring for SAP HANA
This tutorial demonstrates how to conﬁgure CloudWatch Application Insights to set up monitoring 
for your SAP HANA databases. You can use CloudWatch Application Insights automatic dashboards to 
visualize problem details, accelerate troubleshooting, and facilitate mean time to resolution (MTTR) for 
your SAP HANA databases.
Application Insights for SAP HANA topics
•Supported environments (p. 757)
•Supported operating systems (p. 757)
•Features (p. 758)
•Prerequisites (p. 758)
•Set up your SAP HANA database for monitoring (p. 760)
•Manage monitoring of your SAP HANA database (p. 760)
•Conﬁgure the alarm threshold (p. 761)
•View and troubleshoot SAP HANA problems detected by CloudWatch Application Insights (p. 762)
•Anomaly detection for SAP HANA (p. 764)
•Troubleshooting Application Insights for SAP HANA (p. 764)
Supported environments
CloudWatch Application Insights supports the deployment of AWS resources for the following systems 
and patterns. You provide and install SAP HANA database software and supported SAP application 
software.
•SAP HANA database on a single Amazon EC2 instance — SAP HANA in a single-node, scale-up 
architecture, with up to 24TB of memory.
•SAP HANA database on multiple Amazon EC2 instances — SAP HANA in a multi-node, scale-out 
architecture.
•Cross-AZ SAP HANA database high availability setup — SAP HANA with high availability conﬁgured 
across two Availability Zones using SUSE/RHEL clustering.
Note
CloudWatch Application Insights supports only single SID HANA environments. If multiple HANA 
SIDs are attached, monitoring will be set up for only the ﬁrst detected SID.
Supported operating systems
CloudWatch Application Insights for SAP HANA supports x86-64 architecture on the following operating 
systems:
•SuSE Linux 12 SP4 For SAP
•SuSE Linux 12 SP5 For SAP
757Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP HANA
•SuSE Linux 15
•SuSE Linux 15 SP1
•SuSE Linux 15 SP2
•SuSE Linux 15 For SAP
•SuSE Linux 15 SP1 For SAP
•SuSE Linux 15 SP2 For SAP
•RedHat Linux 8.2 For SAP With High Availability and Update Services
•RedHat Linux 8.1 For SAP With High Availability and Update Services
•RedHat Linux 7.9 For SAP With High Availability and Update Services
Features
CloudWatch Application Insights for SAP HANA provides the following features:
•Automatic SAP HANA workload detection
•Automatic SAP HANA alarm creation based on static threshold
•Automatic SAP HANA alarm creation based on anomaly detection
•Automatic SAP HANA log pattern recognition
•Health dashboard for SAP HANA
•Problem dashboard for SAP HANA
Prerequisites
You must perform the following prerequisites to conﬁgure an SAP HANA database with CloudWatch 
Application Insights:
•SAP HANA  — Install a running and reachable SAP HANA database 2.0 SPS05 on an Amazon EC2 
instance.
•SAP HANA database user  — A database user with monitoring roles must be created in the SYSTEM 
database and all tenants.
Example
The following SQL commands create a user with monitoring roles.
su - <sid>adm
hdbsql -u SYSTEM -p <SYSTEMDB password>  -d SYSTEMDB
CREATE USER CW_HANADB_EXPORTER_USER PASSWORD <Monitoring user password>  NO 
 FORCE_FIRST_PASSWORD_CHANGE;
CREATE ROLE CW_HANADB_EXPORTER_ROLE;
GRANT MONITORING TO CW_HANADB_EXPORTER_ROLE;
GRANT CW_HANADB_EXPORTER_ROLE TO CW_HANADB_EXPORTER_USER;
•Python 3.6 — Install Python 3.6 or later versions on your operating system. Use the latest release of 
Python. If Python is not detected on your operating system, Python 3.8 will be installed.
See installation examples .
•Pip3  — Install the installer program, pip3, on your operating system. If pip3 is not detected on your 
operating system, it will be installed.
•Amazon CloudWatch agent — Make sure that you are not running a preexisting CloudWatch agent 
on your Amazon EC2 instance. If you have CloudWatch agent installed, make sure to remove the 
758Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP HANA
conﬁguration of the resources you are using in CloudWatch Application Insights from the existing 
CloudWatch agent conﬁguration ﬁle to avoid a merge conﬂict. For more information, see  Manually 
create or edit the CloudWatch agent conﬁguration ﬁle (p. 903).
•AWS Systems Manager enablement — Install SSM Agent on your instances, and the instances must be 
enabled for SSM. For information about how to install the SSM agent, see Working with SSM Agent in 
the AWS Systems Manager User Guide.
•Amazon EC2 instance roles — You must attach the following Amazon EC2 instance roles to conﬁgure 
your database.
•You must attach the AmazonSSMManagedInstanceCore  role to enable Systems Manager. For more 
information, see AWS Systems Manager identity-based policy examples.
•You must attach the CloudWatchAgentServerPolicy  to enable instance metrics and logs to be 
emitted through CloudWatch. For more information, see Create IAM roles and users for use with 
CloudWatch agent.
•You must attach the following IAM inline policy to the Amazon EC2 instance role to read the 
password stored in AWS Secrets Manager. For more information about inline policies, see Inline 
policies  in the AWS Identity and Access Management User Guide.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Sid": "VisualEditor0", 
            "Effect": "Allow", 
            "Action": [ 
                "secretsmanager:GetSecretValue" 
            ], 
            "Resource": "arn:aws:secretsmanager:*:*:secret:ApplicationInsights-*" 
        } 
    ]
}
•AWS resource groups — You must create a resource group that includes all of the associated AWS 
resources used by your application stack to onboard your applications to CloudWatch Application 
Insights. This includes Amazon EC2 instances and Amazon EBS volumes running your SAP HANA 
database. If there are multiple databases per account, we recommend that you create one resource 
group that includes the AWS resources for each SAP HANA database system.
•IAM permissions  — For non-admin users:
•You must create an AWS Identity and Access Management (IAM) policy that allows Application 
Insights to create a service-linked role, and attach it to your user identity. For steps to attach the 
policy, see IAM policy (p. 684).
•The user must have permission to create a secret in AWS Secrets Manager to store the database user 
credentials. For more information, see Example: Permission to create secrets.
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "secretsmanager:CreateSecret" 
      ], 
      "Resource": "arn:aws:secretsmanager:*:*:secret:ApplicationInsights-*" 
    } 
  ]
}
•Service-linked role — Application Insights uses AWS Identity and Access Management (IAM) service-
linked roles. A service-linked role is created for you when you create your ﬁrst Application Insights 
759Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP HANA
application in the Application Insights console. For more information, see Using service-linked roles for 
CloudWatch Application Insights (p. 1201 ).
Set up your SAP HANA database for monitoring
Use the following steps to set up monitoring for your SAP HANA database
1. Open the CloudWatch console.
2. From the left navigation pane, under Insights , choose Application Insights .
3. The Application Insights  page displays the list of applications that are monitored with Application 
Insights, and the monitoring status for each application. In the upper right-hand corner, choose Add 
an application .
4. On the Specify application details page, from the dropdown list under Resource group, select 
the AWS resource group that contains your SAP HANA database resources. If you haven't created 
a resource group for your application, you can create one by choosing Create new resource group
under the Resource group dropdown. For more information about creating resource groups, see the
AWS Resource Groups User Guide.
5. Under Monitor CloudWatch Events, select the check box to integrate Application Insights 
monitoring with CloudWatch Events to get insights from Amazon EBS, Amazon EC2, AWS 
CodeDeploy, Amazon ECS, AWS Health APIs and notiﬁcations, Amazon RDS, Amazon S3, and AWS 
Step Functions.
6. Under Integrate with AWS Systems Manager OpsCenter, select the check box next to Generate 
AWS Systems Manager OpsCenter OpsItems for remedial actions to view and get notiﬁcations 
when problems are detected for the selected applications. To track the operations that are 
performed to resolve operational work items, called OpsItems, that are related to your AWS 
resources, provide an SNS topic ARN.
7. You can optionally enter tags to help you identify and organize your resources. CloudWatch 
Application Insights supports both tag-based and AWS CloudFormation stack-based resource 
groups, with the exception of Application Auto Scaling groups. For more information, see Tag Editor
in the AWS Resource Groups and Tags User Guide.
8. Choose Next to continue to set up monitoring.
9. On the Set up monitoring  page, the monitored components automatically detected by CloudWatch 
Application Insights are listed. Choose Next.
10. On the Specify component details page, enter the user name and password for your user.
11. Choose Next.
12. Review your application monitoring conﬁguration, and choose Submit .
13. The application details page opens, where you can view the Application summary, and the list of
Monitored components and Unmonitored components. If you select the radio button next to a 
component, you can also view the Conﬁguration history, Log patterns, and any Tags that you have 
created. When you submit your conﬁguration, your account deploys all of the metrics and alarms for 
your SAP HANA system, which can take up to 2 hours.
Manage monitoring of your SAP HANA database
You can manage user credentials, metrics, and log paths for your SAP HANA database by performing the 
following steps:
1. Open the CloudWatch console.
2. From the left navigation pane, under Insights , choose Application Insights .
3. The Application Insights  page displays the list of applications that are monitored with Application 
Insights, and the monitoring status for each application.
760Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP HANA
4. Under Monitored components, select the radio button next to the component name. Then, choose
Manage monitoring .
5. Under EC2 instance group logs, you can update the existing log path, log pattern set, and log group 
name. In addition, you can add up to three additional Application logs.
6. Under Metrics , you can choose the SAP HANA metrics according to your requirements. SAP HANA 
metric names are preﬁxed with hanadb. You can add up to 40 metrics per component.
7. Under HANA conﬁguration, enter the password and user name for the SAP HANA database. This 
is the user name and password that Amazon CloudWatch agent uses to connect to the SAP HANA 
database.
8. Under Custom alarms , you can add additional alarms to be monitored by CloudWatch Application 
Insights.
9. Review your application monitoring conﬁguration and choose Submit . When you submit your 
conﬁguration, your account updates all of the metrics and alarms for your SAP HANA system, which 
can take up to 2 hours.
Conﬁgure the alarm threshold
CloudWatch Application Insights automatically creates a Amazon CloudWatch metric for the alarm to 
watch, along with the threshold for that metric. The alarm changes to the ALARM  state when the metric 
surpasses the threshold for a speciﬁed number of evaluation periods. Note that these settings are not 
retained by Application Insights.
To edit an alarm for a single metric, perform the following steps:
1. Open the CloudWatch console.
2. In the left navigation pane, choose Alarms >All alarms .
3. Select the radio button next to the alarm that was automatically created by CloudWatch Application 
Insights. Then choose Actions, and select Edit from the dropdown menu.
4. Edit the following parameters under Metric .
a. Under Statistic , choose one of the statistics or predeﬁned percentiles, or specify a custom 
percentile. For example, p95.45 .
b. Under Period, choose the evaluations period for the alarm. When you evaluate the alarm, each 
period is aggregated into one data point.
5. Edit the following parameters under Conditions .
a. Choose whether the metric must be greater than, less than, or equal to the threshold.
b. Specify the threshold value.
6. Under Additional conﬁguration edit the following parameters.
a. Under Datapoints to alarm , specify the number of data points, or evaluation periods, that must 
be in the ALARM state to initiate the alarm. When the two values match, an alarm is created that 
enters ALARM state if the designated number of consecutive periods are exceeded. To create 
an m out of n alarm, specify a lower value for the ﬁrst data point than for the second. For more 
information about evaluating alarms, see Evaluating an alarm .
b. Under Missing data treatment , choose the behavior of the alarm when some data points are 
missing. For more information about missing data treatment, see Conﬁguring how CloudWatch 
alarms treat missing data.
c. If the alarm uses a percentile as the monitored statistic, a Percentiles with low samples box 
appears. Choose whether to evaluate or ignore cases with low sample rates. If you choose
ignore (maintain alarm state) , the current alarm state is always maintained when the sample 
size is too low. For more information about percentiles with low samples, see Percentile-based 
CloudWatch alarms and low data samples (p. 186).
761Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP HANA
7. Choose Next.
8. Under Notiﬁcation , select an SNS topic to notify when the alarm is in ALARM  state, OK state, or
INSUFFICIENT_DATA  state.
9. Choose Update alarm .
View and troubleshoot SAP HANA problems detected by 
CloudWatch Application Insights
The following sections provide steps to help you resolve common troubleshooting scenarios that occur 
when you conﬁgure monitoring for SAP HANA on Application Insights.
Troubleshooting topics
•SAP HANA database reaches memory allocation limit (p. 762)
•Disk full event (p. 763)
•SAP HANA backup stopped running  (p. 763)
SAP HANA database reaches memory allocation limit
Description
Your SAP application that is backed by an SAP HANA database malfunctions because of high memory 
pressure, leading to application performance degradation.
Resolution
You can identify the application layer that is causing the problem by checking the dynamically created 
dashboard, which shows the related metrics and log ﬁle snippets. In the following example, the problem 
may be because of a large data load in the SAP HANA system.
The used memory allocation exceeds the threshold of 80 percent of the total memory allocation limit.
762Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP HANA
The log group shows the scheme BNR-DATA  and table IMDBMASTER_30003  ran out of memory. In 
addition, the log group shows the exact time of the issue, current global location limit, shared memory, 
code size, and OOM reservation allocation size.
Disk full event
Description
Your SAP application that is backed by an SAP HANA database stops responding, which leads to an 
inability to access the database.
Resolution
You can identify the database layer that is causing the problem by checking the dynamically created 
dashboard, which shows the related metrics and log ﬁle snippets. In the following example, the problem 
may be that the administrator failed to enable automatic log backup, which caused the sap/hana/log 
directory to ﬁll up.
The log group widget in the problem dashboard shows the DISKFULL  event.
SAP HANA backup stopped running
Description
Your SAP application that is backed by an SAP HANA database has stopped working.
Resolution
You can identify the database layer that is causing the problem by checking the dynamically created 
dashboard, which shows the related metrics and log ﬁle snippets.
The log group widget in the problem dashboard shows the ACCESS DENIED  event. This includes 
additional information, such as the S3 bucket, the S3 bucket folder, and the S3 bucket Region.
763Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP HANA
Anomaly detection for SAP HANA
For speciﬁc SAP HANA metrics, such as the number of thread count, CloudWatch applies statistical 
and machine learning algorithms to deﬁne the threshold. These algorithms continuously analyze the 
metrics of the SAP HANA database, determine normal baselines, and surface anomalies with minimal 
user intervention. The algorithms generate an anomaly detection model, which generates a range of 
expected values that represent normal metric behavior.
Anomaly detection algorithms account for the seasonality and trend changes of metrics. The seasonality 
changes can be hourly, daily, or weekly, as shown in the following examples of the SAP HANA CPU usage.
After you create a model, CloudWatch anomaly detection continuously evaluates the model and makes 
adjustments to it to ensure that is it as accurate as possible. This includes retraining the model to adjust 
if the metric values evolve over time or experience sudden changes. It also includes predictors to improve 
the models for metrics that are seasonal, spiky, or sparse.
Troubleshooting Application Insights for SAP HANA
This section provides steps to help you resolve common errors returned by the Application Insights 
dashboard.
Unable to add more than 60 monitor metrics
Error returned : Component cannot have more than 60 monitored metrics.
764Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP HANA
Root cause: The current metric limit is 60 monitor metrics per component.
Resolution: Remove metrics that are not necessary to adhere to the limit.
No SAP metrics or alarms appear after the onboarding process.
Error returned : In AWS Systems Manager Run command, the AWS-ConfigureAWSPackage  failed.
The output shows the following error:
Unable to find a host with system database, for more info rerun using -v
Resolution: The user name and password may be incorrect. Verify that the user name and password are 
valid, and rerun the onboarding process.
The output shows the following installation errors:
ERROR: Can not execute `setup.py` since setuptools is not available in the build 
 environment.
or
[SSL: CERTIFICATE_VERIFY_FAILED]
Resolution: Install Python using one of the following example SUSE Linux commands:
Example 1
sudo zypper install -y python36
Example 2
Install the latest version of Python 3.8.
wget https://www.python.org/ftp/python/3.8.<LATEST_RELEASE>/Python-3.8.<LATEST_RELEASE>.tgz
tar xf Python-3.*
cd Python-3.*/
sudo zypper install make gcc-c++ gcc automake autoconf libtool
sudo zypper install zlib-devel
sudo zypper install libopenssl-devel libffi-devel
./configure --with-ensurepip=install  
765Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP NetWeaver
sudo make
sudo make install
sudo su  
python3.8 -m pip install --upgrade pip setuptools wheel
Tutorial: Set up monitoring for SAP NetWeaver
This tutorial demonstrates how to conﬁgure Amazon CloudWatch Application Insights to set up 
monitoring for SAP NetWeaver. You can use CloudWatch Application Insights automatic dashboards to 
visualize problem details, accelerate troubleshooting, and reduce mean time to resolution (MTTR) for 
your SAP NetWeaver application servers.
CloudWatch Application Insights for SAP NetWeaver topics
•Supported environments (p. 766)
•Supported operating systems (p. 766)
•Features (p. 767)
•Prerequisites (p. 767)
•Set up your SAP NetWeaver application servers for monitoring (p. 768)
•Manage monitoring of your SAP NetWeaver application servers (p. 768)
•View and troubleshoot SAP NetWeaver problems detected by CloudWatch Application 
Insights  (p. 769)
•Troubleshooting Application Insights for SAP NetWeaver (p. 777)
Supported environments
CloudWatch Application Insights supports the deployment of AWS resources for the following systems 
and patterns.
•SAP NetWeaver Distributed deployments on multiple Amazon EC2 instances.
•Cross-AZ SAP NetWeaver high availability setup – SAP NetWeaver with high availability conﬁgured 
across two Availability Zones using SUSE/RHEL clustering.
Supported operating systems
CloudWatch Application Insights for SAP NetWeaver is supported on the following operating systems:
•Oracle Linux 8
•Red Hat Enterprise Linux 7.6
•Red Hat Enterprise Linux 7.7
•Red Hat Enterprise Linux 7.9
•Red Hat Enterprise Linux 8.1
•Red Hat Enterprise Linux 8.2
•Red Hat Enterprise Linux 8.4
•SUSE Linux Enterprise Server 15 for SAP
•SUSE Linux Enterprise Server 15 SP1 for SAP
•SUSE Linux Enterprise Server 15 SP2 for SAP
•SUSE Linux Enterprise Server 15 SP3 for SAP
•SUSE Linux Enterprise Server 15 SP4 for SAP
•SUSE Linux Enterprise Server 12 SP4 for SAP
•SUSE Linux Enterprise Server 12 SP5 for SAP
766Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP NetWeaver
•SUSE Linux Enterprise Server 15 except High Availability patterns
•SUSE Linux Enterprise Server 15 SP1 except High Availability patterns
•SUSE Linux Enterprise Server 15 SP2 except High Availability patterns
•SUSE Linux Enterprise Server 15 SP3 except High Availability patterns
•SUSE Linux Enterprise Server 15 SP4 except High Availability patterns
•SUSE Linux Enterprise Server 12 SP4 except High Availability patterns
•SUSE Linux Enterprise Server 12 SP5 except High Availability patterns
Features
CloudWatch Application Insights for SAP NetWeaver 7.0x–7.5x (including ABAP Platform) provides the 
following features:
•Automatic SAP NetWeaver workload detection
•Automatic SAP NetWeaver alarm creation based on static thresholds
•Automatic SAP NetWeaver log pattern recognition
•Health dashboard for SAP NetWeaver
•Problem dashboard for SAP NetWeaver
Prerequisites
You must perform the following prerequisites to conﬁgure SAP NetWeaver with CloudWatch Application 
Insights:
•AWS Systems Manager enablement – Install SSM Agent on your Amazon EC2 instances, and enable 
the instances for SSM. For information about how to install the SSM Agent, see Setting up AWS 
Systems Manager in the AWS Systems Manager User Guide.
•Amazon EC2 instance roles – You must attach the following Amazon EC2 instance roles to conﬁgure 
your SAP NetWeaver monitoring.
•You must attach the AmazonSSMManagedInstanceCore  role to enable Systems Manager. For more 
information, see AWS Systems Manager identity-based policy examples.
•You must attach the CloudWatchAgentServerPolicy  policy to enable instance metrics and logs 
to be emitted through CloudWatch. For more information, see Create IAM roles and users for use 
with CloudWatch agent.
•AWS resource groups – You must create a resource group that includes all of the associated AWS 
resources used by your application stack to onboard your applications to CloudWatch Application 
Insights. This includes Amazon EC2 instances, Amazon EFS, and Amazon EBS volumes running 
your SAP NetWeaver application servers. If there are multiple SAP NetWeaver systems per account, 
we recommend that you create one resource group that includes the AWS resources for each SAP 
NetWeaver system. For more information about creating resource groups, see the AWS Resource Groups 
and Tags User Guide.
•IAM permissions  – For users who don't have administrative access, you must create an AWS Identity 
and Access Management (IAM) policy that allows Application Insights to create a service-linked role 
and attach it to the user's identity. For more information about how to create the IAM policy, see IAM 
policy.
•Service-linked role – Application Insights uses AWS Identity and Access Management (IAM) service-
linked roles. A service-linked role is created for you when you create your ﬁrst Application Insights 
application in the Application Insights console. For more information, see Using service-linked roles for 
CloudWatch Application Insights (p. 1201 ).
•Amazon CloudWatch agent – Application Insights installs and conﬁgures the CloudWatch agent. If 
you have CloudWatch agent installed, Application Insights retains your conﬁguration. To avoid a merge 
767Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP NetWeaver
conﬂict, remove the conﬁguration of resources that you want to use in Application Insights from the 
existing CloudWatch agent conﬁguration ﬁle. For more information, see  Manually create or edit the 
CloudWatch agent conﬁguration ﬁle (p. 903).
Set up your SAP NetWeaver application servers for monitoring
Use the following steps to set up monitoring for your SAP NetWeaver application servers.
To set up monitoring
1. Open the CloudWatch console.
2. From the left navigation pane, under Insights , select Application Insights .
3. The Application Insights  page displays the list of applications that are monitored with Application 
Insights, and the monitoring status for each application. In the upper right-hand corner, select Add 
an application .
4. On the Specify application details page, from the dropdown list under Resource group, select the 
AWS resource group you created that contains your SAP NetWeaver resources. If you haven't created 
a resource group for your application, you can create one by choosing Create new resource group
under the Resource group dropdown list.
5. Under Automatic monitoring of new resources, select the check box to allow Application Insights 
to automatically monitor the resources that are added to the application's resource group after 
onboarding.
6. Under Monitor EventBridge events, select the check box to integrate Application Insights 
monitoring with CloudWatch Events to get insights from Amazon EBS, Amazon EC2, AWS 
CodeDeploy, Amazon ECS, AWS Health APIs and notiﬁcations, Amazon RDS, Amazon S3, and AWS 
Step Functions.
7. Under Integrate with AWS Systems Manager OpsCenter, select the check box next to Generate 
AWS Systems Manager OpsCenter OpsItems for remedial actions to view and get notiﬁcations 
when problems are detected for the selected applications. To track the operations that are 
performed to resolve operational work items, called OpsItems , that are related to your AWS 
resources, provide an SNS topic ARN.
8. You can optionally enter tags to help you identify and organize your resources. CloudWatch 
Application Insights supports both tag-based and AWS CloudFormation stack-based resource 
groups, with the exception of Application Auto Scaling groups. For more information, see Tag Editor
in the AWS Resource Groups and Tags User Guide.
9. Choose Next to continue to set up monitoring.
10. On the Set up monitoring  page, the monitored components automatically detected by CloudWatch 
Application Insights are listed. Choose Next.
11. On the Specify component details page, choose Next.
12. Review your application monitoring conﬁguration, and choose Submit .
13. The application details page opens, where you can view the Application summary, Dashboard , and
Components . You can also view the Conﬁguration history, Log patterns, and any Tags that you 
have created. After you submit your application, CloudWatch Application Insights deploys all of the 
metrics and alarms for your SAP NetWeaver system, which can take up to an hour.
Manage monitoring of your SAP NetWeaver application servers
Use the following steps to manage monitoring of your SAP NetWeaver application servers.
To manage monitoring
1. Open the CloudWatch console.
768Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP NetWeaver
2. From the left navigation pane, under Insights , select Application Insights .
3. Choose the List view  tab.
4. The Application Insights  page displays the list of applications that are monitored with Application 
Insights, and the monitoring status for each application.
5. Select your application.
6. Choose the Components  tab.
7. Under Monitored components, select the radio button next to the component name. Then, select
Manage monitoring .
8. Under Instance logs, you can update the existing log path, log pattern set, and log group name. In 
addition, you can add up to three additional Application logs.
9. Under Metrics , you can select the SAP NetWeaver metrics according to your requirements. SAP 
NetWeaver metric names are preﬁxed with sap. You can add up to 40 metrics per component.
10. Under Custom alarms , you can add additional alarms to be monitored by CloudWatch Application 
Insights.
11. Review your application monitoring conﬁguration and choose Save. When you submit your 
conﬁguration, your account updates all of the metrics and alarms for your SAP NetWeaver systems.
View and troubleshoot SAP NetWeaver problems detected by 
CloudWatch Application Insights
The following sections provide steps to help you resolve common troubleshooting scenarios that occur 
when you conﬁgure monitoring for SAP NetWeaver on Application Insights.
Troubleshooting topics
•SAP NetWeaver database connectivity issues (p. 769)
•SAP NetWeaver application availability issues (p. 772)
SAP NetWeaver database connectivity issues
Description
Your SAP NetWeaver application experiences database connectivity issues.
Cause
You can identify the connectivity issue by going to the CloudWatch Application Insights console and 
checking the SAP NetWeaver Application Insights problem dashboard. Select the link under Problem 
summary to see the speciﬁc issue.
769Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP NetWeaver
In the following example, under Problem summary, SAP: Availability is the issue.
Immediately following the Problem summary, the Insight  section provides more context about the error 
and where you can get more information about the causes of the issue.
On the same problem dashboard, you can view related logs and metrics that problem detection has 
grouped together to help you isolate the cause of the error. The sap_alerts_Availability  metric 
tracks the availability of the SAP NetWeaver system over time. You can use historical tracking to 
correlate when the metric initiated an error state or breached the alarm threshold. In the following 
example, there is an availability issue with the SAP NetWeaver system. The example shows two alarms 
because there are two SAP application server instances and an alarm was created for each instance.
For more information about each alarm, hover over the sap_alerts_Availability  metric name.
770Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP NetWeaver
In the following example, the sap_alerts_Database  metric shows that the database layer has an issue 
or a failure. This alarm indicates that SAP NetWeaver had issues connecting to or communicating with its 
database.
Since the database is a key resource for SAP NetWeaver, you may get many related alarms when the 
database has an issue or failure. In the following example, the sap_alerts_FrontendResponseTime
and sap_alerts_LongRunners  metrics are initiated because the database is not available.
Resolution
Application Insights monitors the detected problem hourly. If there are no new related log entries in 
your SAP NetWeaver log ﬁles, the older log entries will be treated as resolved. You must ﬁx any error 
771Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP NetWeaver
conditions related to the CloudWatch alarms. After the error conditions are ﬁxed, the alarm is resolved 
when the alarms and logs are recovered. When all of the CloudWatch log errors and alarms are resolved, 
Application Insights stops detecting errors and the problem is automatically resolved within an hour. We 
recommend that you resolve all log error conditions and alarms so that you have the latest problems on 
the problem dashboard.
In the following example, the SAP Availability issue is resolved.
SAP NetWeaver application availability issues
Description
Your SAP NetWeaver High Availability Enqueue replication stopped working.
Cause
You can identify the connectivity issue by going to the CloudWatch Application Insights console and 
checking the SAP NetWeaver Application Insights problem dashboard. Select the link under Problem 
summary to see the speciﬁc issue.
772Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP NetWeaver
773Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP NetWeaver
In the following example, under Problem summary, High Availability Enqueue Replication is the issue.
Immediately following the Problem summary, the Insight  section provides more context about the error 
and where you can get more information about the causes of the issue.
The following example shows the problem dashboard where you view logs and metrics which are 
grouped to help you isolate the causes of the error. The sap_enqueue_server_replication_state
metric tracks the value over time. You can use historical tracking to correlate when the metric initiated 
an error state or breached the alarm threshold.
In the following example, the ha_cluster_pacemaker_fail_count  metric shows that the high 
availability pacemaker cluster experienced a resource failure. The speciﬁc pacemaker resources that had a 
fail count greater than or equal to one are identiﬁed in the component dashboard.
774Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP NetWeaver
The following example shows the sap_alerts_Shortdumps  metric, which indicates that the SAP 
application performance was reduced when the problem was detected.
Logs
The log entries are helpful to get a better understanding of issues that occurred at the SAP NetWeaver 
layer when the problem was detected. The log group widget in the problem dashboard shows the 
speciﬁc time of the issue.
775Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP NetWeaver
To see detailed information about the logs, select the three vertical dots in the upper-right corner, and 
select View in CloudWatch Logs Insights.
Use the following steps to get more information about the metrics and alarms displayed in the problem 
dashboard.
To get more information about metrics and alarms
1. Open the CloudWatch console.
2. In the left navigation pane, under Insights , select Application Insights . Then, choose the List view
tab, and select your application.
3. Select the Components  tab. Then, select the SAP NetWeaver component about which you want to 
get more information.
The following example shows the HA Metrics  section with the
ha_cluster_pacemaker_fail_count  metric that was displayed in the problem dashboard.
776Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP NetWeaver
Resolution
Application Insights monitors the detected problem hourly. If there are no new related log entries in 
your SAP NetWeaver log ﬁles, the older log entries will be treated as resolved. You must ﬁx any error 
conditions related to this problem.
For the sap_alerts_Shortdumps  alarm, you must resolve the alert in the SAP NetWeaver system 
by using transaction code RZ20 # R3Abap # Shortdumps  to navigate to the CCMS alert. For more 
information about CCMS alerts, see the SAP website. Resolve all of the CCMS alerts in the Shortdumps 
tree. After all of the alerts are resolved in the SAP NetWeaver system, CloudWatch no longer reports the 
metric in an alarm state.
When all of the CloudWatch log errors and alarms are resolved, Application Insights stops detecting 
errors and the problem is automatically resolved within an hour. We recommend that you resolve all 
log error conditions and alarms so that you have the latest problems on the problem dashboard. In the 
following example, the SAP Netweaver High Availability Enqueue Replication problem is resolved.
Troubleshooting Application Insights for SAP NetWeaver
This section provides steps to help you resolve common errors returned by the Application Insights 
dashboard.
Unable to add more than 60 monitor metrics
Error returned : Component cannot have more than 60 monitored metrics.
Root cause: The current metric limit is 60 monitor metrics per component.
Resolution: Remove metrics that are not necessary to adhere to the limit.
SAP metrics do not appear on the dashboard after the onboarding process
Root cause: Component Dashboard uses a ﬁve minute metric period to aggregate the data points.
777Amazon CloudWatch User Guide
Tutorial: Set up monitoring for SAP NetWeaver
Resolution: All metrics should show up on the dashboard after ﬁve minutes.
SAP metrics and alarms don't appear on the dashboard
Use the following steps to identify why SAP metrics and alarms don't appear on the dashboard after the 
onboarding process.
To identify the issue with metrics and alarms
1. Open the CloudWatch console.
2. In the left navigation pane, under Insights , select Application Insights . Then, choose the List view
tab, and select your application.
3. Choose the Conﬁguration history tab.
4. If you see missing metrics datapoints, check for errors related to prometheus-
sap_host_exporter .
5. If you don't ﬁnd an error in the previous step, Connect to your Linux instance. For High Availability 
deployments, connect to the primary cluster Amazon EC2 instance.
6. In your instance, verify that the exporter is running by using the following command. The default 
port is 9680. If you are using a diﬀerent port, replace 9680 with the port you are using.
curl localhost:9680/metrics
If no data is returned, then the exporter failed to start.
7. Run the following command to check for errors in the exporter service logs:
sudo journalctl -e --unit=prometheus-sap_host_exporter.service
If this command does not return an error, continue to the next step.
8. Run the following command to check the exporter manager service logs for errors:
sudo journalctl -e --unit=prometheus-sap_host_exporter_manager.service
Note
This service should be up and running at all times.
If this command does not return an error, continue to the next step.
9. Run the following command to manually start the exporter. Then, check the exporter output.
sudo /opt/aws/sap_host_exporter/sap_host_exporter
You can exit the exporter process after you check for errors.
Root cause: There are several possible causes for this issue. A common cause is that the exporter is not 
able to connect to one of the application server instances.
Resolution
Use the following steps to connect the exporter to the application server instances. You will verify that 
the SAP application instance is running and use SAPControl to connect to the instance.
To connect the exporter to the application server instances
1. In your Amazon EC2 instance, run the following command to verify that the SAP application is 
running.
778Amazon CloudWatch User Guide
View and troubleshoot Application Insights
sapcontrol -nr <App_InstNo> -function GetProcessList
2. You must establish a working SAPControl connection. If the SAPControl connection doesn't work, 
ﬁnd the root cause of the issue on the relevant SAP application instance.
3. To manually start the exporter after you ﬁx the SAP Control connection issue, run the following 
command:
sudo systemctl start prometheus-sap_host_exporter.service
4. If you can't resolve the SAPControl connection issue, use the following procedure as a temporary ﬁx.
a. Open the AWS Systems Manager console.
b. From the left navigation pane, choose State Manager .
c. Under Associations  search for the SAP NetWeaver system's association.
Association Name: Equal: AWS-ApplicationInsights-
SSMSAPHostExporterAssociationForCUSTOMSAPNW<SID>-1
d. Select the Association id .
e. Choose the Parameters tab and remove the application server number from
additionalArguments .
f.Choose Apply Association Now.
Note
This is a temporary ﬁx. If updates are made to the component's monitoring 
conﬁgurations, the instance will be added back.
View and troubleshoot problems detected by 
Amazon CloudWatch Application Insights
The topics in this section provide detailed information about the detected problems and insights 
displayed by Application Insights. It also provides suggested resolutions for detected issues with your 
account or your conﬁguration.
Troubleshooting topics
•CloudWatch console overview (p. 779)
•Application Insights problem summary page (p. 780)
•Feedback (p. 780)
•Conﬁguration errors (p. 780)
CloudWatch console overview
An overview of problems that impact your monitored applications can be found under the CloudWatch 
Application Insights pane in the overview page of the CloudWatch console. For more information, see
Get started with Amazon CloudWatch Application Insights (p. 683).
The CloudWatch Application Insights overview pane displays the following:
•The severity of the problems detected: High/Medium/Low
•A short summary of the problem
779Amazon CloudWatch User Guide
View and troubleshoot Application Insights
•The problem source
•The time the problem started
•The resolution status of the problem
•The aﬀected resource group
To view the details of a speciﬁc problem, under Problem Summary, select the description of the 
problem. A detailed dashboard displays insights into the problem and related metric anomalies and 
snippets of log errors. You can provide feedback on the relevance of the insight by selecting whether it is 
useful.
If a new resource is detected that is not conﬁgured, the problem summary description takes you to the
Edit conﬁguration wizard to conﬁgure your new resource. You can view or edit your resource group 
conﬁguration by choosing View/edit conﬁguration in the upper right‐hand corner of the detailed 
dashboard.
To return to the overview, choose Back to overview, which is next to the CloudWatch Application 
Insights detailed dashboard header.
Application Insights problem summary page
Application Insights problem summary page
CloudWatch Application Insights provides the following information about detected problems on the 
problem summary page:
•A short summary of the problem
•The start time and date of the problem
•The problem severity: High/Medium/Low
•The status of the detected problem: In‐progress/Resolved
•Insights: Automatically generated insights on the detected problem and possible root cause
•Feedback on insights: Feedback you have provided about the usefulness of the insights generated by 
CloudWatch Application Insights
•Related observations: A detailed view of the metric anomalies and error snippets of relevant logs 
related to the problem across various application components
Feedback
Feedback
You can provide feedback on the automatically generated insights on detected problems by designating 
them useful or not useful. Your feedback on the insights, along with your application diagnostics (metric 
anomalies and log exceptions), are used to improve the future detection of similar problems.
Conﬁguration errors
CloudWatch Application Insights uses your conﬁguration to create monitoring telemetries for the 
components. When Application Insights detects an issue with your account or your conﬁguration, 
information is provided in the Remarks ﬁeld of the Application summary about how to resolve the 
conﬁguration issue for your application.
The following table shows suggested resolutions for speciﬁc remarks.
780Amazon CloudWatch User Guide
Supported logs and metrics
Remarks Suggested resolution Additional notes
The quota for CloudFormation 
has already been reached.Application Insights creates 
one CloudFormation stack for 
each application to manage 
CloudWatch agent installation 
and conﬁguration for all 
application components. By 
default, each AWS account can 
have 2000 stacks. See AWS 
CloudFormation Limits. To 
resolve this, raise the limit for 
CloudFormation stacks.n/a
No SSM instance role on the 
following instances.For Application Insights 
to be able to install and 
conﬁgure CloudWatch agent 
on application instances, 
AmazonSSMManagedInstanceCore 
and 
CloudWatchAgentServerPolicy 
policies must be attached to the 
instance role.Application Insights 
calls the SSM
DescribeInstanceInformation 
API to get the list of instances 
with SSM permission. After 
the role is attached to the 
instance, it takes time for SSM 
to include the instance in the 
DescribeInstanceInformation 
result. Until SSM includes 
the instance in the result, 
NO_SSM_INSTANCE_ROLE 
error remains present for the 
application.
New components may need 
conﬁguration.Application Insights detects that 
there are new components in 
the application Resource Group. 
To resolve this, conﬁgure the 
new components accordingly.n/a
Logs and metrics supported by Amazon CloudWatch 
Application Insights
The following lists show the supported logs and metrics for Amazon CloudWatch Application Insights.
CloudWatch Application Insights supports the following logs:
•Microsoft Internet Information Services (IIS) logs
•Error log for SQL Server on EC2
•Custom .NET application logs, such as Log4Net
•Windows Event logs, including Windows logs (System, Application, and Security) and Applications and 
Services log
•Amazon CloudWatch Logs for AWS Lambda
•Error log and slow log for RDS MySQL, Aurora MySQL, and MySQL on EC2
•Postgresql log for PostgreSQL RDS and PostgreSQL on EC2
•Amazon CloudWatch Logs for AWS Step Functions
•Execution logs and access logs (JSON, CSV, and XML, but not CLF) for API Gateway REST API stages
781Amazon CloudWatch User Guide
Supported logs and metrics
•Prometheus JMX exporter logs (EMF)
•Alert logs and listener logs for Oracle on Amazon RDS and Oracle on Amazon EC2
•Container logs routing from Amazon ECS containers to CloudWatch using awslogs log driver.
•Container logs routing from Amazon ECS containers to CloudWatch using FireLens container log 
router.
•Container logs routing from Amazon EKS or Kubernetes running on Amazon EC2 to CloudWatch using
Fluent Bit or Fluentd log processor with Container Insights.
•SAP HANA trace and error logs
•HA Pacemaker logs
•SAP NetWeaver dev trace logs
•Process metrics for Windows processes using proctstat plugin for CloudWatch agent (p. 933)
•Public DNS query logs for hosted zone
•Amazon Route 53 Resolver DNS query logs
CloudWatch Application Insights supports metrics for the following application components:
•Amazon Elastic Compute Cloud (EC2)  (p. 783)
•CloudWatch built-in metrics (p. 783)
•CloudWatch agent metrics (Windows server) (p. 784)
•CloudWatch agent process metrics (Windows server) (p. 787)
•CloudWatch agent metrics (Linux server) (p. 788)
•Elastic Block Store (EBS)  (p. 790)
•Amazon Elastic File System (Amazon EFS) (p. 791)
•Elastic Load Balancer (ELB)  (p. 792)
•Application ELB  (p. 792)
•Amazon EC2 Auto Scaling groups  (p. 792)
•Amazon Simple Queue Server (SQS)  (p. 793)
•Amazon Relational Database Service (RDS)  (p. 794)
•RDS Database instances (p. 794)
•RDS Database clusters (p. 794)
•AWS Lambda function  (p. 796)
•Amazon DynamoDB table (p. 796)
•Amazon S3 bucket (p. 796)
•AWS Step Functions (p. 797)
•Execution-level (p. 797)
•Activity (p. 797)
•Lambda function (p. 798)
•Service integration (p. 798)
•Step Functions API (p. 798)
•API Gateway REST API stages (p. 799)
•SAP HANA  (p. 799)
•SAP NetWeaver (p. 803)
•HA Cluster  (p. 807)
•Java (p. 807)
•Amazon Elastic Container Service (Amazon ECS) (p. 808)
•CloudWatch built-in metrics (p. 808)
782Amazon CloudWatch User Guide
Supported logs and metrics
•Container Insights metrics  (p. 808)
•Container Insights Prometheus metrics (p. 809)
•Kubernetes on AWS (p. 810)
•Container Insights metrics  (p. 810)
•Container Insights Prometheus metrics (p. 811)
•Amazon FSx (p. 811)
•Amazon VPC (p. 812)
•Amazon VPC NAT gateways (p. 812)
•Amazon Route 53 health check (p. 812)
•Amazon Route 53 hosted zone (p. 812)
•Amazon Route 53 Resolver endpoint (p. 813)
•AWS Network Firewall rule group (p. 813)
•AWS Network Firewall rule group association (p. 813)
•Metrics with data points requirements  (p. 813)
•AWS/ApplicationELB (p. 814)
•AWS/AutoScaling (p. 814)
•AWS/EC2 (p. 814)
•Elastic Block Store (EBS) (p. 815)
•AWS/ELB (p. 816)
•AWS/RDS (p. 816)
•AWS/Lambda (p. 817)
•AWS/SQS (p. 818)
•AWS/CWAgent (p. 818)
•AWS/DynamoDB (p. 819)
•AWS/S3 (p. 820)
•AWS/States (p. 820)
•AWS/ApiGateway (p. 821)
•AWS/SNS (p. 821)
•Recommended metrics (p. 822)
•Performance Counter metrics  (p. 841)
Amazon Elastic Compute Cloud (EC2)
CloudWatch Application Insights supports the following metrics:
Metrics
•CloudWatch built-in metrics (p. 783)
•CloudWatch agent metrics (Windows server) (p. 784)
•CloudWatch agent process metrics (Windows server) (p. 787)
•CloudWatch agent metrics (Linux server) (p. 788)
CloudWatch built-in metrics
CPUCreditBalance
CPUCreditUsage
783Amazon CloudWatch User Guide
Supported logs and metrics
CPUSurplusCreditBalance
CPUSurplusCreditsCharged
CPUUtilization
DiskReadBytes
DiskReadOps
DiskWriteBytes
DiskWriteOps
EBSByteBalance%
EBSIOBalance%
EBSReadBytes
EBSReadOps
EBSWriteBytes
EBSWriteOps
NetworkIn
NetworkOut
NetworkPacketsIn
NetworkPacketsOut
StatusCheckFailed
StatusCheckFailed_Instance
StatusCheckFailed_System
CloudWatch agent metrics (Windows server)
.NET CLR Exceptions # of Exceps Thrown
.NET CLR Exceptions # of Exceps Thrown/Sec
.NET CLR Exceptions # of Filters/sec
.NET CLR Exceptions # of Finallys/sec
.NET CLR Exceptions Throw to Catch Depth/sec
.NET CLR Interop # of CCWs
.NET CLR Interop # of Stubs
.NET CLR Interop # of TLB exports/sec
.NET CLR Interop # of TLB imports/sec
784Amazon CloudWatch User Guide
Supported logs and metrics
.NET CLR Interop # of marshaling
.NET CLR Jit % Time in Jit
.NET CLR Jit Standard Jit Failures
.NET CLR Loading % Time Loading
.NET CLR Loading Rate of Load Failures
.NET CLR LocksAndThreads Contention Rate/sec
.NET CLR LocksAndThreads Queue Length/sec
.NET CLR Memory # Total Committed Bytes
.NET CLR Memory % Time in GC
.NET CLR Networking 4.0.0.0 HttpWebRequest Average Queue Time
.NET CLR Networking 4.0.0.0 HttpWebRequests Aborted/sec
.NET CLR Networking 4.0.0.0 HttpWebRequests Failed/sec
.NET CLR Networking 4.0.0.0 HttpWebRequests Queued/sec
APP_POOL_WAS Total Worker Process Ping Failures
ASP.NET Application Restarts
ASP.NET Applications % Managed Processor Time (estimated)
ASP.NET Applications Errors Total/Sec
ASP.NET Applications Errors Unhandled During Execution/sec
ASP.NET Applications Requests in Application Queue
ASP.NET Applications Requests/Sec
ASP.NET Request Wait Time
ASP.NET Requests Queued
HTTP Service Request Queues CurrentQueueSize
LogicalDisk % Free Space
Memory % Committed Bytes In Use
Memory Available Mbytes
Memory Pages/sec
Network Interface Bytes Total/sec
Paging File % Usage
PhysicalDisk % Disk Time
PhysicalDisk Avg. Disk Queue Length
785Amazon CloudWatch User Guide
Supported logs and metrics
PhysicalDisk Avg. Disk sec/Read
PhysicalDisk Avg. Disk sec/Write
PhysicalDisk Disk Read Bytes/sec
PhysicalDisk Disk Reads/sec
PhysicalDisk Disk Write Bytes/sec
PhysicalDisk Disk Writes/sec
Processor % Idle Time
Processor % Interrupt Time
Processor % Processor Time
Processor % User Time
SQLServer:Access Methods Forwarded Records/sec
SQLServer:Access Methods Full Scans/sec
SQLServer:Access Methods Page Splits/sec
SQLServer:Buﬀer Manager Buﬀer cache hit ratio
SQLServer:Buﬀer Manager Page life expectancy
SQLServer:General Statistics Processes blocked
SQLServer:General Statistics User Connections
SQLServer:Latches Average Latch Wait Time (ms)
SQLServer:Locks Average Wait Time (ms)
SQLServer:Locks Lock Timeouts/sec
SQLServer:Locks Lock Waits/sec
SQLServer:Locks Number of Deadlocks/sec
SQLServer:Memory Manager Memory Grants Pending
SQLServer:SQL Statistics Batch Requests/sec
SQLServer:SQL Statistics SQL Compilations/sec
SQLServer:SQL Statistics SQL Re-Compilations/sec
System Processor Queue Length
TCPv4 Connections Established
TCPv6 Connections Established
W3SVC_W3WP File Cache Flushes
W3SVC_W3WP File Cache Misses
786Amazon CloudWatch User Guide
Supported logs and metrics
W3SVC_W3WP Requests/Sec
W3SVC_W3WP URI Cache Flushes
W3SVC_W3WP URI Cache Misses
Web Service Bytes Received/Sec
Web Service Bytes Sent/Sec
Web Service Connection attempts/sec
Web Service Current Connections
Web Service Get Requests/sec
Web Service Post Requests/sec
Bytes Received/sec
Normal Messages Queue Length/sec
Urgent Message Queue Length/sec
Reconnect Count
Unacknowledged Message Queue Length/sec
Messages Outstanding
Messages Sent/sec
Database Update Messages/sec
Update Messages/sec
Flushes/sec
Crypto Checkpoints Saved/sec
Crypto Checkpoints Restored/sec
Registry Checkpoints Restored/sec
Registry Checkpoints Saved/sec
Cluster API Calls/sec
Resource API Calls/sec
Cluster Handles/sec
Resource Handles/sec
CloudWatch agent process metrics (Windows server)
Process metrics are collected using the CloudWatch agent procstat plugin (p. 933). Only Amazon EC2 
instances running Windows workloads support process metrics.
procstat cpu_time_system
787Amazon CloudWatch User Guide
Supported logs and metrics
procstat cpu_time_user
procstat cpu_usage
procstat memory_rss
procstat memory_vms
procstat read_bytes
procstat write_bytes
.procstat read_count
procstat write_count
CloudWatch agent metrics (Linux server)
cpu_time_active
cpu_time_guest
cpu_time_guest_nice
cpu_time_idle
cpu_time_iowait
cpu_time_irq
cpu_time_nice
cpu_time_softirq
cpu_time_steal
cpu_time_system
cpu_time_user
cpu_usage_active
cpu_usage_guest
cpu_usage_guest_nice
cpu_usage_idle
cpu_usage_iowait
cpu_usage_irq
cpu_usage_nice
cpu_usage_softirq
cpu_usage_steal
cpu_usage_system
788Amazon CloudWatch User Guide
Supported logs and metrics
cpu_usage_user
disk_free
disk_inodes_free
disk_inodes_used
disk_used
disk_used_percent
diskio_io_time
diskio_iops_in_progress
diskio_read_bytes
diskio_read_time
diskio_reads
diskio_write_bytes
diskio_write_time
diskio_writes
mem_active
mem_available
mem_available_percent
mem_buﬀered
mem_cached
mem_free
mem_inactive
mem_used
mem_used_percent
net_bytes_recv
net_bytes_sent
net_drop_in
net_drop_out
net_err_in
net_err_out
net_packets_recv
net_packets_sent
789Amazon CloudWatch User Guide
Supported logs and metrics
netstat_tcp_close
netstat_tcp_close_wait
netstat_tcp_closing
netstat_tcp_established
netstat_tcp_ﬁn_wait1
netstat_tcp_ﬁn_wait2
netstat_tcp_last_ack
netstat_tcp_listen
netstat_tcp_none
netstat_tcp_syn_recv
netstat_tcp_syn_sent
netstat_tcp_time_wait
netstat_udp_socket
processes_blocked
processes_dead
processes_idle
processes_paging
processes_running
processes_sleeping
processes_stopped
processes_total
processes_total_threads
processes_wait
processes_zombies
swap_free
swap_used
swap_used_percent
Elastic Block Store (EBS)
CloudWatch Application Insights supports the following metrics:
VolumeReadBytes
790Amazon CloudWatch User Guide
Supported logs and metrics
VolumeWriteBytes
VolumeReadOps
VolumeWriteOps
VolumeTotalReadTime
VolumeTotalWriteTime
VolumeIdleTime
VolumeQueueLength
VolumeThroughputPercentage
VolumeConsumedReadWriteOps
BurstBalance
Amazon Elastic File System (Amazon EFS)
CloudWatch Application Insights supports the following metrics:
BurstCreditBalance
PercentIOLimit
PermittedThroughput
MeteredIOBytes
TotalIOBytes
DataWriteIOBytes
DataReadIOBytes
MetadataIOBytes
ClientConnections
TimeSinceLastSync
StorageBytes
Throughput
PercentageOfPermittedThroughputUtilization
ThroughputIOPS
PercentThroughputDataReadIOByte
PercentThroughputDataWriteIOBytes
PercentageOfIOPSDataReadIOBytes
PercentageOfIOPSDataWriteIOBytes
791Amazon CloudWatch User Guide
Supported logs and metrics
AverageDataReadIOBytesSize
AverageDataWriteIOBytesSize
Elastic Load Balancer (ELB)
CloudWatch Application Insights supports the following metrics:
EstimatedALBActiveConnectionCount
EstimatedALBConsumedLCUs
EstimatedALBNewConnectionCount
EstimatedProcessedBytes
HTTPCode_Backend_4XX
HTTPCode_Backend_5XX
HealthyHostCount
RequestCount
UnHealthyHostCount
Application ELB
CloudWatch Application Insights supports the following metrics:
EstimatedALBActiveConnectionCount
EstimatedALBConsumedLCUs
EstimatedALBNewConnectionCount
EstimatedProcessedBytes
HTTPCode_Backend_4XX
HTTPCode_Backend_5XX
HealthyHostCount
Latency
RequestCount
SurgeQueueLength
UnHealthyHostCount
Amazon EC2 Auto Scaling groups
CloudWatch Application Insights supports the following metrics:
CPUCreditBalance
CPUCreditUsage
792Amazon CloudWatch User Guide
Supported logs and metrics
CPUSurplusCreditBalance
CPUSurplusCreditsCharged
CPUUtilization
DiskReadBytes
DiskReadOps
DiskWriteBytes
DiskWriteOps
EBSByteBalance%
EBSIOBalance%
EBSReadBytes
EBSReadOps
EBSWriteBytes
EBSWriteOps
NetworkIn
NetworkOut
NetworkPacketsIn
NetworkPacketsOut
StatusCheckFailed
StatusCheckFailed_Instance
StatusCheckFailed_System
Amazon Simple Queue Server (SQS)
CloudWatch Application Insights supports the following metrics:
ApproximateAgeOfOldestMessage
ApproximateNumberOfMessagesDelayed
ApproximateNumberOfMessagesNotVisible
ApproximateNumberOfMessagesVisible
NumberOfEmptyReceives
NumberOfMessagesDeleted
NumberOfMessagesReceived
NumberOfMessagesSent
793Amazon CloudWatch User Guide
Supported logs and metrics
Amazon Relational Database Service (RDS)
CloudWatch Application Insights supports the following metrics:
Metrics
•RDS Database instances (p. 794)
•RDS Database clusters (p. 794)
RDS Database instances
BurstBalance
CPUCreditBalance
CPUUtilization
DatabaseConnections
DiskQueueDepth
FailedSQLServerAgentJobsCount
FreeStorageSpace
FreeableMemory
NetworkReceiveThroughput
NetworkTransmitThroughput
ReadIOPS
ReadLatency
ReadThroughput
WriteIOPS
WriteLatency
WriteThroughput
RDS Database clusters
ActiveTransactions
AuroraBinlogReplicaLag
AuroraReplicaLag
BackupRetentionPeriodStorageUsed
BinLogDiskUsage
BlockedTransactions
BuﬀerCacheHitRatio
794Amazon CloudWatch User Guide
Supported logs and metrics
CPUUtilization
CommitLatency
CommitThroughput
DDLLatency
DDLThroughput
DMLLatency
DMLThroughput
DatabaseConnections
Deadlocks
DeleteLatency
DeleteThroughput
EngineUptime
FreeLocalStorage
FreeableMemory
InsertLatency
InsertThroughput
LoginFailures
NetworkReceiveThroughput
NetworkThroughput
NetworkTransmitThroughput
Queries
ResultSetCacheHitRatio
SelectLatency
SelectThroughput
SnapshotStorageUsed
TotalBackupStorageBilled
UpdateLatency
UpdateThroughput
VolumeBytesUsed
VolumeReadIOPs
VolumeWriteIOPs
795Amazon CloudWatch User Guide
Supported logs and metrics
AWS Lambda function
CloudWatch Application Insights supports the following metrics:
Errors
DeadLetterErrors
Duration
Throttles
IteratorAge
ProvisionedConcurrencySpilloverInvocations
Amazon DynamoDB table
CloudWatch Application Insights supports the following metrics:
SystemErrors
UserErrors
ConsumedReadCapacityUnits
ConsumedWriteCapacityUnits
ReadThrottleEvents
WriteThrottleEvents
TimeToLiveDeletedItemCount
ConditionalCheckFailedRequests
TransactionConﬂict
ReturnedRecordsCount
PendingReplicationCount
ReplicationLatency
Amazon S3 bucket
CloudWatch Application Insights supports the following metrics:
ReplicationLatency
BytesPendingReplication
OperationsPendingReplication
4xxErrors
5xxErrors
AllRequests
796Amazon CloudWatch User Guide
Supported logs and metrics
GetRequests
PutRequests
DeleteRequests
HeadRequests
PostRequests
SelectRequests
ListRequests
SelectScannedBytes
SelectReturnedBytes
FirstByteLatency
TotalRequestLatency
BytesDownloaded
BytesUploaded
AWS Step Functions
CloudWatch Application Insights supports the following metrics:
Metrics
•Execution-level (p. 797)
•Activity (p. 797)
•Lambda function (p. 798)
•Service integration (p. 798)
•Step Functions API (p. 798)
Execution-level
ExecutionTime
ExecutionThrottled
ExecutionsFailed
ExecutionsTimedOut
ExecutionsAborted
ExecutionsSucceeded
ExecutionsStarted
Activity
ActivityRunTime
ActivityScheduleTime
797Amazon CloudWatch User Guide
Supported logs and metrics
ActivityTime
ActivitiesFailed
ActivitiesHeartbeatTimedOut
ActivitiesTimedOut
ActivitiesScheduled
ActivitiesSucceeded
ActivitiesStarted
Lambda function
LambdaFunctionRunTime
LambdaFunctionScheduleTime
LambdaFunctionTime
LambdaFunctionsFailed
LambdaFunctionsTimedOut
LambdaFunctionsScheduled
LambdaFunctionsSucceeded
LambdaFunctionsStarted
Service integration
ServiceIntegrationRunTime
ServiceIntegrationScheduleTime
ServiceIntegrationTime
ServiceIntegrationsFailed
ServiceIntegrationsTimedOut
ServiceIntegrationsScheduled
ServiceIntegrationsSucceeded
ServiceIntegrationsStarted
Step Functions API
ThrottledEvents
ProvisionedBucketSize
ProvisionedReﬁllRate
ConsumedCapacity
798Amazon CloudWatch User Guide
Supported logs and metrics
API Gateway REST API stages
CloudWatch Application Insights supports the following metrics:
4XXError
5XXError
IntegrationLatency
Latency
DataProcessed
CacheHitCount
CacheMissCount
SAP HANA
Note
CloudWatch Application Insights supports only single SID HANA environments. If multiple HANA 
SIDs are attached, monitoring will be set up for only the ﬁrst detected SID.
CloudWatch Application Insights supports the following metrics:
hanadb_every_service_started_status
hanadb_daemon_service_started_status
hanadb_preprocessor_service_started_status
hanadb_webdispatcher_service_started_status
hanadb_compileserver_service_started_status
hanadb_nameserver_service_started_status
hanadb_server_startup_time_variations_seconds
hanadb_level_5_alerts_count
hanadb_level_4_alerts_count
hanadb_out_of_memory_events_count
hanadb_max_trigger_read_ratio_percent
hanadb_max_trigger_write_ratio_percent
hanadb_log_switch_wait_ratio_percent
hanadb_log_switch_race_ratio_percent
hanadb_time_since_last_savepoint_seconds
hanadb_disk_usage_highlevel_percent
hanadb_max_converter_page_number_count
799Amazon CloudWatch User Guide
Supported logs and metrics
hanadb_long_running_savepoints_count
hanadb_failed_io_reads_count
hanadb_failed_io_writes_count
hanadb_disk_data_unused_percent
hanadb_current_allocation_limit_used_percent
hanadb_table_allocation_limit_used_percent
hanadb_host_total_physical_memory_mb
hanadb_host_physical_memory_used_mb
hanadb_host_physical_memory_free_mb
hanadb_swap_memory_free_mb
hanadb_swap_memory_used_mb
hanadb_host_allocation_limit_mb
hanadb_host_total_memory_used_mb
hanadb_host_total_peak_memory_used_mb
hanadb_host_total_allocation_limit_mb
hanadb_host_code_size_mb
hanadb_host_shared_memory_allocation_mb
hanadb_cpu_usage_percent
hanadb_cpu_user_percent
hanadb_cpu_system_percent
hanadb_cpu_waitio_percent
hanadb_cpu_busy_percent
hanadb_cpu_idle_percent
hanadb_long_delta_merge_count
hanadb_unsuccessful_delta_merge_count
hanadb_successful_delta_merge_count
hanadb_row_store_allocated_size_mb
hanadb_row_store_free_size_mb
hanadb_row_store_used_size_mb
hanadb_temporary_tables_count
hanadb_large_non_compressed_tables_count
800Amazon CloudWatch User Guide
Supported logs and metrics
hanadb_total_non_compressed_tables_count
hanadb_longest_running_job_seconds
hanadb_average_commit_time_milliseconds
hanadb_suspended_sql_statements_count
hanadb_plan_cache_hit_ratio_percent
hanadb_plan_cache_lookup_count
hanadb_plan_cache_hit_count
hanadb_plan_cache_total_execution_microseconds
hanadb_plan_cache_cursor_duration_microseconds
hanadb_plan_cache_preparation_microseconds
hanadb_plan_cache_evicted_count
hanadb_plan_cache_evicted_microseconds
hanadb_plan_cache_evicted_preparation_count
hanadb_plan_cache_evicted_execution_count
hanadb_plan_cache_evicted_preparation_microseconds
hanadb_plan_cache_evicted_cursor_duration_microseconds
hanadb_plan_cache_evicted_total_execution_microseconds
hanadb_plan_cache_evicted_plan_size_mb
hanadb_plan_cache_count
hanadb_plan_cache_preparation_count
hanadb_plan_cache_execution_count
hanadb_network_collision_rate
hanadb_network_receive_rate
hanadb_network_transmit_rate
hanadb_network_packet_receive_rate
hanadb_network_packet_transmit_rate
hanadb_network_transmit_error_rate
hanadb_network_receive_error_rate
hanadb_time_until_license_expires_days
hanadb_is_license_valid_status
hanadb_local_running_connections_count
801Amazon CloudWatch User Guide
Supported logs and metrics
hanadb_local_idle_connections_count
hanadb_remote_running_connections_count
hanadb_remote_idle_connections_count
hanadb_last_full_data_backup_age_days
hanadb_last_data_backup_age_days
hanadb_last_log_backup_age_hours
hanadb_failed_data_backup_past_7_days_count
hanadb_failed_log_backup_past_7_days_count
hanadb_oldest_backup_in_catalog_age_days
hanadb_backup_catalog_size_mb
hanadb_hsr_replication_status
hanadb_hsr_log_shipping_delay_seconds
hanadb_hsr_secondary_failover_count
hanadb_hsr_secondary_reconnect_count
hanadb_hsr_async_buﬀer_used_mb
hanadb_hsr_secondary_active_status
hanadb_handle_count
hanadb_ping_time_milliseconds
hanadb_connection_count
hanadb_internal_connection_count
hanadb_external_connection_count
hanadb_idle_connection_count
hanadb_transaction_count
hanadb_internal_transaction_count
hanadb_external_transaction_count
hanadb_user_transaction_count
hanadb_blocked_transaction_count
hanadb_statement_count
hanadb_active_commit_id_range_count
hanadb_mvcc_version_count
hanadb_pending_session_count
802Amazon CloudWatch User Guide
Supported logs and metrics
hanadb_record_lock_count
hanadb_read_count
hanadb_write_count
hanadb_merge_count
hanadb_unload_count
hanadb_active_thread_count
hanadb_waiting_thread_count
hanadb_total_thread_count
hanadb_active_sql_executor_count
hanadb_waiting_sql_executor_count
hanadb_total_sql_executor_count
hanadb_data_write_size_mb
hanadb_data_write_time_milliseconds
hanadb_log_write_size_mb
hanadb_log_write_time_milliseconds
hanadb_data_read_size_mb
hanadb_data_read_time_milliseconds
hanadb_log_read_size_mb
hanadb_log_read_time_milliseconds
hanadb_data_backup_write_size_mb
hanadb_data_backup_write_time_milliseconds
hanadb_log_backup_write_size_mb
hanadb_log_backup_write_time_milliseconds
hanadb_mutex_collision_count
hanadb_read_write_lock_collision_count
hanadb_admission_control_admit_count
hanadb_admission_control_reject_count
hanadb_admission_control_queue_size_mb
hanadb_admission_control_wait_time_milliseconds
SAP NetWeaver
CloudWatch Application Insights supports the following metrics:
803Amazon CloudWatch User Guide
Supported logs and metrics
Metric Description
sap_alerts_ResponseTime The SAP response time alert from CCMS 
(RZ20)>R3Services>Dialog>ResponseTime.
sap_alerts_ResponseTimeDialog The SAP response time dialog alert from CCMS 
(RZ20)>R3Services>Dialog> ResponseTimeDialog.
sap_alerts_ResponseTimeDialogRFCThe SAP response time alert 
from CCMS (RZ20)>R3Services> 
Dialog>ResponseTimeDialogRFC.
sap_alerts_DBRequestTime The SAP response time alert from CCMS 
(RZ20)>R3Services>Dialog>DBRequestTime.
sap_alerts_FrontendResponseTimeThe SAP response time alert 
from CCMS (RZ20)>R3Services > 
Dialog>FrontEndResponseTime.
sap_alerts_Database The SAP system has logged database-
related errors. Alert from SM21 or CCMS 
(RZ20)>R3Syslog>Database.
sap_alerts_QueueTime The SAP queue time alert from CCMS 
(RZ20)>R3Services>Dialog>QueueTime.
sap_alerts_AbortedJobs Failed background jobs in SAP system. Alert from 
(RZ20)>R3Services > Background>AbortedJobs.
sap_alerts_BasisSystem SAP system logged system-level errors. Alert from 
SM21 or CCMS (RZ20)>R3Syslog>BasisSystem.
sap_alerts_Security The SAP system logged security-related 
messages. Alert from SM21 or CCMS 
(RZ20)>R3Syslog>Security.
sap_alerts_System The SAP system logged security or audit-
related messages. Alert from SM21 or CCMS 
(RZ20)>Security>System.
sap_alerts_LongRunners There are long running programs in your SAP 
system. Alert from CCMS (RZ20)>R3Services > 
Dialog>LongRunners.
sap_alerts_SqlError There are SAP database client 
layer error logs. Alert from 
CCMS(RZ20)>DatabaseClient>AbapSql>SqlError.
sap_alerts_State State alert from CCMS (RZ20)>OS Collector>State.
sap_alerts_Shortdumps Shortdumps alert from ST22 and CCMS 
(RZ20)>R3Abap>Shortdumps.
sap_alerts_Availability Availability alert for SAP application server 
instance from SM21, SM50, SM51, SM66, and 
CCMS (RZ20)>InstanceAsTask>Availability.
sap_dispatcher_queue_high The SAPControl Web Service function
GetQueueStatistic  provides the dispatcher 
queue high count.
804Amazon CloudWatch User Guide
Supported logs and metrics
Metric Description
sap_dispatcher_queue_max The SAPControl Web Service function
GetQueueStatistic  provides the dispatcher 
queue max count.
sap_dispatcher_queue_now The SAPControl Web Service function
GetQueueStatistic  provides the dispatcher 
queue now count.
sap_dispatcher_queue_reads The SAPControl Web Service function
GetQueueStatistic  provides the dispatcher 
queue reads count.
sap_dispatcher_queue_writes The SAPControl Web Service function
GetQueueStatistic  provides the dispatcher 
queue writes count.
sap_enqueue_server_arguments_highThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue 
arguments high.
sap_enqueue_server_arguments_maxThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue 
arguments max.
sap_enqueue_server_arguments_nowThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue 
arguments now.
sap_enqueue_server_arguments_stateThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue 
arguments state.
sap_enqueue_server_backup_requestsThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue backup 
requests.
sap_enqueue_server_cleanup_requestsThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue cleanup 
requests.
sap_enqueue_server_dequeue_all_requestsThe SAPControl Web Service function
EnqGetStatistic  provides the dequeue all 
requests.
sap_enqueue_server_dequeue_errorsThe SAPControl Web Service function
EnqGetStatistic  provides the dequeue errors.
sap_enqueue_server_dequeue_requestsThe SAPControl Web Service function
EnqGetStatistic  provides the dequeue 
requests.
sap_enqueue_server_enqueue_errorsThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue errors.
sap_enqueue_server_enqueue_rejectsThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue rejects.
805Amazon CloudWatch User Guide
Supported logs and metrics
Metric Description
sap_enqueue_server_enqueue_requestsThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue 
requests.
sap_enqueue_server_lock_time The SAPControl Web Service function
EnqGetStatistic  provides the enqueue lock 
time.
sap_enqueue_server_lock_wait_timeThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue lock 
wait time.
sap_enqueue_server_locks_high The SAPControl Web Service function
EnqGetStatistic  provides the enqueue locks 
high.
sap_enqueue_server_locks_max The SAPControl Web Service function
EnqGetStatistic  provides the enqueue locks 
max.
sap_enqueue_server_locks_now The SAPControl Web Service function
EnqGetStatistic  provides the enqueue locks 
now.
sap_enqueue_server_locks_stateThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue locks 
state.
sap_enqueue_server_owner_highThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue owner 
high.
sap_enqueue_server_owner_maxThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue owner 
max.
sap_enqueue_server_owner_nowThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue owner 
now.
sap_enqueue_server_owner_stateThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue owner 
state.
sap_enqueue_server_replication_stateThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue 
replication state status.
sap_enqueue_server_reporting_requestsThe SAPControl Web Service function
EnqGetStatistic  provides the reqporting 
requests status.
sap_enqueue_server_server_timeThe SAPControl Web Service function
EnqGetStatistic  provides the enqueue server 
time.
806Amazon CloudWatch User Guide
Supported logs and metrics
Metric Description
sap_HA_check_failover_conﬁg_stateThe SAPControl Web Service function
HACheckFailoverConfig  provides the SAP 
High Availability status.
sap_HA_get_failover_conﬁg_HAActiveThe SAPControl Web Service function
HAGetFailoverConfig  provides the SAP High 
Availability Cluster conﬁguration and status.
sap_start_service_processes The SAPControl Web Service function
GetProcessList  provides the disp+work, IGS, 
gwrd, icman, message server, and enqueue server 
processes status.
HA Cluster
CloudWatch Application Insights supports the following metrics:
ha_cluster_pacemaker_stonith_enabled
ha_cluster_corosync_quorate
hanadb_webdispatcher_service_started_status
ha_cluster_pacemaker_nodes
ha_cluster_corosync_ring_errors
ha_cluster_pacemaker_fail_count
Java
CloudWatch Application Insights supports the following metrics:
java_lang_memory_heapmemoryusage_used
java_lang_memory_heapmemoryusage_committed
java_lang_operatingsystem_openﬁledescriptorcount
java_lang_operatingsystem_maxﬁledescriptorcount
java_lang_operatingsystem_freephysicalmemorysize
java_lang_operatingsystem_freeswapspacesize
java_lang_threading_threadcount
java_lang_threading_daemonthreadcount
java_lang_classloading_loadedclasscount
java_lang_garbagecollector_collectiontime_copy
java_lang_garbagecollector_collectiontime_ps_scavenge
java_lang_garbagecollector_collectiontime_parnew
807Amazon CloudWatch User Guide
Supported logs and metrics
java_lang_garbagecollector_collectiontime_marksweepcompact
java_lang_garbagecollector_collectiontime_ps_marksweep
java_lang_garbagecollector_collectiontime_concurrentmarksweep
java_lang_garbagecollector_collectiontime_g1_young_generation
java_lang_garbagecollector_collectiontime_g1_old_generation
java_lang_garbagecollector_collectiontime_g1_mixed_generation
java_lang_operatingsystem_committedvirtualmemorysize
Amazon Elastic Container Service (Amazon ECS)
CloudWatch Application Insights supports the following metrics:
Metrics
•CloudWatch built-in metrics (p. 808)
•Container Insights metrics  (p. 808)
•Container Insights Prometheus metrics (p. 809)
CloudWatch built-in metrics
CPUReservation
CPUUtilization
MemoryReservation
MemoryUtilization
GPUReservation
Container Insights metrics
ContainerInstanceCount
CpuUtilized
CpuReserved
DeploymentCount
DesiredTaskCount
MemoryUtilized
MemoryReserved
NetworkRxBytes
NetworkTxBytes
PendingTaskCount
RunningTaskCount
808Amazon CloudWatch User Guide
Supported logs and metrics
ServiceCount
StorageReadBytes
StorageWriteBytes
TaskCount
TaskSetCount
instance_cpu_limit
instance_cpu_reserved_capacity
instance_cpu_usage_total
instance_cpu_utilization
instance_ﬁlesystem_utilization
instance_memory_limit
instance_memory_reserved_capacity
instance_memory_utilization
instance_memory_working_set
instance_network_total_bytes
instance_number_of_running_tasks
Container Insights Prometheus metrics
Java JMX metrics
java_lang_memory_heapmemoryusage_used
java_lang_memory_heapmemoryusage_committed
java_lang_operatingsystem_openﬁledescriptorcount
java_lang_operatingsystem_maxﬁledescriptorcount
java_lang_operatingsystem_freephysicalmemorysize
java_lang_operatingsystem_freeswapspacesize
java_lang_threading_threadcount
java_lang_classloading_loadedclasscount
java_lang_threading_daemonthreadcount
java_lang_garbagecollector_collectiontime_copy
java_lang_garbagecollector_collectiontime_ps_scavenge
java_lang_garbagecollector_collectiontime_parnew
809Amazon CloudWatch User Guide
Supported logs and metrics
java_lang_garbagecollector_collectiontime_marksweepcompact
java_lang_garbagecollector_collectiontime_ps_marksweep
java_lang_garbagecollector_collectiontime_concurrentmarksweep
java_lang_garbagecollector_collectiontime_g1_young_generation
java_lang_garbagecollector_collectiontime_g1_old_generation
java_lang_garbagecollector_collectiontime_g1_mixed_generation
java_lang_operatingsystem_committedvirtualmemorysize
Kubernetes on AWS
CloudWatch Application Insights supports the following metrics:
Metrics
•Container Insights metrics  (p. 810)
•Container Insights Prometheus metrics (p. 811)
Container Insights metrics
cluster_failed_node_count
cluster_node_count
namespace_number_of_running_pods
node_cpu_limit
node_cpu_reserved_capacity
node_cpu_usage_total
node_cpu_utilization
node_ﬁlesystem_utilization
node_memory_limit
node_memory_reserved_capacity
node_memory_utilization
node_memory_working_set
node_network_total_bytes
node_number_of_running_containers
node_number_of_running_pods
pod_cpu_reserved_capacity
pod_cpu_utilization
810Amazon CloudWatch User Guide
Supported logs and metrics
pod_cpu_utilization_over_pod_limit
pod_memory_reserved_capacity
pod_memory_utilization
pod_memory_utilization_over_pod_limit
pod_network_rx_bytes
pod_network_tx_bytes
service_number_of_running_pods
Container Insights Prometheus metrics
Java JMX metrics
java_lang_memory_heapmemoryusage_used
java_lang_memory_heapmemoryusage_committed
java_lang_operatingsystem_openﬁledescriptorcount
java_lang_operatingsystem_maxﬁledescriptorcount
java_lang_operatingsystem_freephysicalmemorysize
java_lang_operatingsystem_freeswapspacesize
java_lang_threading_threadcount
java_lang_classloading_loadedclasscount
java_lang_threading_daemonthreadcount
java_lang_garbagecollector_collectiontime_copy
java_lang_garbagecollector_collectiontime_ps_scavenge
java_lang_garbagecollector_collectiontime_parnew
java_lang_garbagecollector_collectiontime_marksweepcompact
java_lang_garbagecollector_collectiontime_ps_marksweep
java_lang_garbagecollector_collectiontime_concurrentmarksweep
java_lang_garbagecollector_collectiontime_g1_young_generation
java_lang_garbagecollector_collectiontime_g1_old_generation
java_lang_garbagecollector_collectiontime_g1_mixed_generation
java_lang_operatingsystem_committedvirtualmemorysize
Amazon FSx
CloudWatch Application Insights supports the following metrics:
811Amazon CloudWatch User Guide
Supported logs and metrics
DataReadBytes
DataWriteBytes
DataReadOperations
DataWriteOperations
MetadataOperations
FreeStorageCapacity
FreeDataStorageCapacity
LogicalDiskUsage
PhysicalDiskUsage
Amazon VPC
CloudWatch Application Insights supports the following metrics:
NetworkAddressUsage
NetworkAddressUsagePeered
VPCFirewallQueryVolume
Amazon VPC NAT gateways
CloudWatch Application Insights supports the following metrics:
ErrorPortAllocation
IdleTimeoutCount
Amazon Route 53 health check
CloudWatch Application Insights supports the following metrics:
ChildHealthCheckHealthyCount
ConnectionTime
HealthCheckPercentageHealthy
HealthCheckStatus
SSLHandshakeTime
TimeToFirstByte
Amazon Route 53 hosted zone
CloudWatch Application Insights supports the following metrics:
DNSQueries
812Amazon CloudWatch User Guide
Supported logs and metrics
DNSSECInternalFailure
DNSSECKeySigningKeysNeedingAction
DNSSECKeySigningKeyMaxNeedingActionAge
DNSSECKeySigningKeyAge
Amazon Route 53 Resolver endpoint
CloudWatch Application Insights supports the following metrics:
EndpointHealthyENICount
EndpointUnHealthyENICount
InboundQueryVolume
OutboundQueryVolume
OutboundQueryAggregateVolume
AWS Network Firewall rule group
CloudWatch Application Insights supports the following metrics:
FirewallRuleGroupQueryVolume
AWS Network Firewall rule group association
CloudWatch Application Insights supports the following metrics:
FirewallRuleGroupVpcQueryVolume
Metrics with data points requirements
For metrics without an obvious default threshold to alarm on, Application Insights waits until the 
metric has enough data points to predict a reasonable threshold to alarm on. The metric data points 
requirement that CloudWatch Application Insights checks before an alarm is created are:
•The metric has at least 100 data points from the past 15 to the past 2 days.
•The metric has at least 100 data points from the last day.
The following metrics follow these data points requirements. Note that CloudWatch agent metrics 
require up to one hour to create alarms.
Metrics
•AWS/ApplicationELB (p. 814)
•AWS/AutoScaling (p. 814)
•AWS/EC2 (p. 814)
•Elastic Block Store (EBS) (p. 815)
•AWS/ELB (p. 816)
•AWS/RDS (p. 816)
813Amazon CloudWatch User Guide
Supported logs and metrics
•AWS/Lambda (p. 817)
•AWS/SQS (p. 818)
•AWS/CWAgent (p. 818)
•AWS/DynamoDB (p. 819)
•AWS/S3 (p. 820)
•AWS/States (p. 820)
•AWS/ApiGateway (p. 821)
•AWS/SNS (p. 821)
AWS/ApplicationELB
ActiveConnectionCount
ConsumedLCUs
HTTPCode_ELB_4XX_Count
HTTPCode_Target_2XX_Count
HTTPCode_Target_3XX_Count
HTTPCode_Target_4XX_Count
HTTPCode_Target_5XX_Count
NewConnectionCount
ProcessedBytes
TargetResponseTime
UnHealthyHostCount
AWS/AutoScaling
GroupDesiredCapacity
GroupInServiceInstances
GroupMaxSize
GroupMinSize
GroupPendingInstances
GroupStandbyInstances
GroupTerminatingInstances
GroupTotalInstances
AWS/EC2
CPUCreditBalance
814Amazon CloudWatch User Guide
Supported logs and metrics
CPUCreditUsage
CPUSurplusCreditBalance
CPUSurplusCreditsCharged
CPUUtilization
DiskReadBytes
DiskReadOps
DiskWriteBytes
DiskWriteOps
EBSByteBalance%
EBSIOBalance%
EBSReadBytes
EBSReadOps
EBSWriteBytes
EBSWriteOps
NetworkIn
NetworkOut
NetworkPacketsIn
NetworkPacketsOut
Elastic Block Store (EBS)
VolumeReadBytes
VolumeWriteBytes
VolumeReadOps
VolumeWriteOps
VolumeTotalReadTime
VolumeTotalWriteTime
VolumeIdleTime
VolumeQueueLength
VolumeThroughputPercentage
VolumeConsumedReadWriteOps
BurstBalance
815Amazon CloudWatch User Guide
Supported logs and metrics
AWS/ELB
EstimatedALBActiveConnectionCount
EstimatedALBConsumedLCUs
EstimatedALBNewConnectionCount
EstimatedProcessedBytes
HTTPCode_Backend_4XX
HTTPCode_Backend_5XX
HealthyHostCount
Latency
RequestCount
SurgeQueueLength
UnHealthyHostCount
AWS/RDS
ActiveTransactions
AuroraBinlogReplicaLag
AuroraReplicaLag
BackupRetentionPeriodStorageUsed
BinLogDiskUsage
BlockedTransactions
CPUCreditBalance
CommitLatency
CommitThroughput
DDLLatency
DDLThroughput
DMLLatency
DMLThroughput
DatabaseConnections
Deadlocks
DeleteLatency
816Amazon CloudWatch User Guide
Supported logs and metrics
DeleteThroughput
DiskQueueDepth
EngineUptime
FreeLocalStorage
FreeStorageSpace
FreeableMemory
InsertLatency
InsertThroughput
LoginFailures
NetworkReceiveThroughput
NetworkThroughput
NetworkTransmitThroughput
Queries
ReadIOPS
ReadThroughput
SelectLatency
SelectThroughput
SnapshotStorageUsed
TotalBackupStorageBilled
UpdateLatency
UpdateThroughput
VolumeBytesUsed
VolumeReadIOPs
VolumeWriteIOPs
WriteIOPS
WriteThroughput
AWS/Lambda
Errors
DeadLetterErrors
Duration
817Amazon CloudWatch User Guide
Supported logs and metrics
Throttles
IteratorAge
ProvisionedConcurrencySpilloverInvocations
AWS/SQS
ApproximateAgeOfOldestMessage
ApproximateNumberOfMessagesDelayed
ApproximateNumberOfMessagesNotVisible
ApproximateNumberOfMessagesVisible
NumberOfEmptyReceives
NumberOfMessagesDeleted
NumberOfMessagesReceived
NumberOfMessagesSent
AWS/CWAgent
LogicalDisk % Free Space
Memory % Committed Bytes In Use
Memory Available Mbytes
Network Interface Bytes Total/sec
Paging File % Usage
PhysicalDisk % Disk Time
PhysicalDisk Avg. Disk sec/Read
PhysicalDisk Avg. Disk sec/Write
PhysicalDisk Disk Read Bytes/sec
PhysicalDisk Disk Reads/sec
PhysicalDisk Disk Write Bytes/sec
PhysicalDisk Disk Writes/sec
Processor % Idle Time
Processor % Interrupt Time
Processor % Processor Time
Processor % User Time
SQLServer:Access Methods Forwarded Records/sec
818Amazon CloudWatch User Guide
Supported logs and metrics
SQLServer:Access Methods Page Splits/sec
SQLServer:Buﬀer Manager Buﬀer cache hit ratio
SQLServer:Buﬀer Manager Page life expectancy
SQLServer:Database Replica File Bytes Received/sec
SQLServer:Database Replica Log Bytes Received/sec
SQLServer:Database Replica Log remaining for undo
SQLServer:Database Replica Log Send Queue
SQLServer:Database Replica Mirrored Write Transaction/sec
SQLServer:Database Replica Recovery Queue
SQLServer:Database Replica Redo Bytes Remaining
SQLServer:Database Replica Redone Bytes/sec
SQLServer:Database Replica Total Log requiring undo
SQLServer:Database Replica Transaction Delay
SQLServer:General Statistics Processes blocked
SQLServer:SQL Statistics Batch Requests/sec
SQLServer:SQL Statistics SQL Compilations/sec
SQLServer:SQL Statistics SQL Re-Compilations/sec
System Processor Queue Length
TCPv4 Connections Established
TCPv6 Connections Established
AWS/DynamoDB
ConsumedReadCapacityUnits
ConsumedWriteCapacityUnits
ReadThrottleEvents
WriteThrottleEvents
TimeToLiveDeletedItemCount
ConditionalCheckFailedRequests
TransactionConﬂict
ReturnedRecordsCount
PendingReplicationCount
819Amazon CloudWatch User Guide
Supported logs and metrics
ReplicationLatency
AWS/S3
ReplicationLatency
BytesPendingReplication
OperationsPendingReplication
4xxErrors
5xxErrors
AllRequests
GetRequests
PutRequests
DeleteRequests
HeadRequests
PostRequests
SelectRequests
ListRequests
SelectScannedBytes
SelectReturnedBytes
FirstByteLatency
TotalRequestLatency
BytesDownloaded
BytesUploaded
AWS/States
ActivitiesScheduled
ActivitiesStarted
ActivitiesSucceeded
ActivityScheduleTime
ActivityRuntime
ActivityTime
LambdaFunctionsScheduled
LambdaFunctionsStarted
820Amazon CloudWatch User Guide
Supported logs and metrics
LambdaFunctionsSucceeded
LambdaFunctionScheduleTime
LambdaFunctionRuntime
LambdaFunctionTime
ServiceIntegrationsScheduled
ServiceIntegrationsStarted
ServiceIntegrationsSucceeded
ServiceIntegrationScheduleTime
ServiceIntegrationRuntime
ServiceIntegrationTime
ProvisionedReﬁllRate
ProvisionedBucketSize
ConsumedCapacity
ThrottledEvents
AWS/ApiGateway
4XXError
IntegrationLatency
Latency
DataProcessed
CacheHitCount
CacheMissCount
AWS/SNS
NumberOfNotiﬁcationsDelivered
NumberOfMessagesPublished
NumberOfNotiﬁcationsFailed
NumberOfNotiﬁcationsFilteredOut
NumberOfNotiﬁcationsFilteredOut-InvalidAttributes
NumberOfNotiﬁcationsFilteredOut-NoMessageAttributes
NumberOfNotiﬁcationsRedrivenToDlq
NumberOfNotiﬁcationsFailedToRedriveToDlq
821Amazon CloudWatch User Guide
Supported logs and metrics
SMSSuccessRate
Recommended metrics
The following table lists the recommended metrics for each component type.
Component type Workload type Recommended metric
Default/Custom CPUUtilization
StatusCheckFailed
Processor % Processor Time
Memory % Committed Bytes In 
Use
LogicalDisk % Free Space
Memory Available Mbytes
Active Directory CPUUtilization
StatusCheckFailed
Processor % Processor Time
Memory % Committed Bytes In 
Use
Memory Available Mbytes
Database ==> Instances 
Database Cache % Hit
DirectoryServices DRA Pending 
Replication Operations
DirectoryServices DRA Pending 
Replication Synchronizations
DNS Recursive Query Failure/sec
LogicalDisk Avg. Disk Queue 
LengthEC2 instance (Windows servers)
Java Application CPUUtilization
StatusCheckFailed
Processor % Processor Time
Memory % Committed Bytes In 
Use
Memory Available Mbytes
java_lang_threading_threadcount
java_lang_classloading_loadedclasscount
822Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
java_lang_memory_heapmemoryusage_used
java_lang_memory_heapmemoryusage_committed
java_lang_operatingsystem_freephysicalmemorysize
java_lang_operatingsystem_freeswapspacesize
Microsoft IIS/.NET Web Front-
EndCPUUtilization
StatusCheckFailed
Processor % Processor Time
Memory % Committed Bytes In 
Use
Memory Available Mbytes
.NET CLR Exceptions # of Exceps 
Thrown/Sec
.NET CLR Memory # Total 
Committed Bytes
.NET CLR Memory % Time in GC
ASP.NET Applications Requests 
in Application Queue
ASP.NET Requests Queued
ASP.NET Application Restarts
823Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
Microsoft SQL Server Database 
TierCPUUtilization
StatusCheckFailed
Processor % Processor Time
Memory % Committed Bytes In 
Use
Memory Available Mbytes
Paging File % Usage
System Processor Queue Length
Network Interface Bytes Total/
Sec
PhysicalDisk % Disk Time
SQLServer:Buﬀer Manager 
Buﬀer Cache Hit ratio
SQLServer:Buﬀer Manager Page 
Life Expectancy
SQLServer:General Statistics 
Processes Blocked
SQLServer:General Statistics 
User Connections
SQLServer:Locks Number of 
Deadlocks/Sec
SQLServer:SQL Statistics Batch 
Requests/Sec
MySQL CPUUtilization
StatusCheckFailed
Processor % Processor Time
Memory % Committed Bytes In 
Use
LogicalDisk % Free Space
Memory Available Mbytes
824Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
.NET workerpool/Mid-Tier CPUUtilization
StatusCheckFailed
Processor % Processor Time
Memory % Committed Bytes In 
Use
Memory Available Mbytes
.NET CLR Exceptions # of Exceps 
Thrown/Sec
.NET CLR Memory # Total 
Committed Bytes
.NET CLR Memory % Time in GC
.NET Core Tier CPUUtilization
StatusCheckFailed
Processor % Processor Time
Memory % Committed Bytes In 
Use
Memory Available Mbytes
Oracle CPUUtilization
StatusCheckFailed
Processor % Processor Time
Memory % Committed Bytes In 
Use
LogicalDisk % Free Space
Memory Available Mbytes
Postgres CPUUtilization
StatusCheckFailed
Processor % Processor Time
Memory % Committed Bytes In 
Use
LogicalDisk % Free Space
Memory Available Mbytes
825Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
SharePoint CPUUtilization
StatusCheckFailed
Processor % Processor Time
Memory % Committed Bytes In 
Use
Memory Available Mbytes
ASP.NET Applications Cache API 
trims
ASP.NET Requests Rejected
ASP.NET Worker Process Restarts
Memory Pages/sec
SharePoint Publishing Cache 
Publishing cache ﬂushes / 
second
SharePoint Foundation 
Executing Time/Page Request
SharePoint Disk-Based 
Cache Total number of cache 
compactions
SharePoint Disk-Based Cache 
Blob cache hit ratio
SharePoint Disk-Based Cache 
Blob Cache ﬁll ratio
SharePoint Disk-Based Cache 
Blob cache ﬂushes / second
ASP.NET Requests Queued
ASP.NET Applications Requests 
in Application Queue
ASP.NET Application Restarts
LogicalDisk Avg. Disk sec/Write
LogicalDisk Avg. Disk sec/Read
Processor % Interrupt Time
826Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
Default/Custom CPUUtilization
StatusCheckFailed
disk_used_percent
mem_used_percent
Java Application CPUUtilization
StatusCheckFailed
disk_used_percent
mem_used_percent
java_lang_threading_threadcount
java_lang_classloading_loadedclasscount
java_lang_memory_heapmemoryusage_used
java_lang_memory_heapmemoryusage_committed
java_lang_operatingsystem_freephysicalmemorysize
java_lang_operatingsystem_freeswapspacesize
.NET Core Tier or SQL Server 
Database TierCPUUtilization
StatusCheckFailed
disk_used_percent
mem_used_percent
Oracle CPUUtilization
StatusCheckFailed
disk_used_percent
mem_used_percentEC2 instance (Linux servers)
Postgres CPUUtilization
StatusCheckFailed
disk_used_percent
mem_used_percent
827Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
EC2 instance group SAP HANA multi-node or single 
node•hanadb_server_startup_time_variations_seconds
•hanadb_level_5_alerts_count
•hanadb_level_4_alerts_count
•hanadb_out_of_memory_events_count
•hanadb_max_trigger_read_ratio_percent
•hanadb_max_trigger_write_ratio_percent
•hanadb_log_switch_race_ratio_percent
•hanadb_time_since_last_savepoint_seconds
•hanadb_disk_usage_highlevel_percent
•hanadb_current_allocation_limit_used_percent
•hanadb_table_allocation_limit_used_percent
•hanadb_cpu_usage_percent
•hanadb_plan_cache_hit_ratio_percent
•hanadb_last_data_backup_age_days
EBS volume Any VolumeReadBytes
VolumeWriteBytes
VolumeReadOps
VolumeWriteOps
VolumeQueueLength
VolumeThroughputPercentage
VolumeConsumedReadWriteOps
BurstBalance
Classic ELB Any HTTPCode_Backend_4XX
HTTPCode_Backend_5XX
Latency
SurgeQueueLength
UnHealthyHostCount
Application ELB Any HTTPCode_Target_4XX_Count
HTTPCode_Target_5XX_Count
TargetResponseTime
UnHealthyHostCount
828Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
RDS Database instanceAny CPUUtilization
ReadLatency
WriteLatency
BurstBalance
FailedSQLServerAgentJobsCount
RDS Database clusterAny CPUUtilization
CommitLatency
DatabaseConnections
Deadlocks
FreeableMemory
NetworkThroughput
VolumeBytesUsed
Lambda FunctionAny Duration
Errors
IteratorAge
ProvisionedConcurrencySpilloverInvocations
Throttles
SQS Queue Any ApproximateAgeOfOldestMessage
ApproximateNumberOfMessagesVisible
NumberOfMessagesSent
Amazon DynamoDB tableAny SystemErrors
UserErrors
ConsumedReadCapacityUnits
ConsumedWriteCapacityUnits
ReadThrottleEvents
WriteThrottleEvents
ConditionalCheckFailedRequests
TransactionConﬂict
829Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
Amazon S3 bucketAny If replication conﬁguration with 
Replication Time Control (RTC) is 
enabled:
ReplicationLatency
BytesPendingReplication
OperationsPendingReplication
If request metrics are turned on:
5xxErrors
4xxErrors
BytesDownloaded
BytesUploaded
830Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
AWS Step FunctionsAny General
•ExecutionThrottled
•ExecutionsAborted
•ProvisionedBucketSize
•ProvisionedReﬁllRate
•ConsumedCapacity
If state machine type is
EXPRESS or log group level 
is OFF
•ExecutionsFailed
•ExecutionsTimedOut
If state machine has Lambda 
functions
•LambdaFunctionsFailed
•LambdaFunctionsTimedOut
If state machine has 
activities
•ActivitiesFailed
•ActivitiesTimedOut
•ActivitiesHeartbeatTimedOut
If state machine has service 
integrations
•ServiceIntegrationsFailed
•ServiceIntegrationsTimedOut
API Gateway REST API stageAny •4XXErrors
•5XXErrors
•Latency
831Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
ECS Cluster Any CpuUtilized
MemoryUtilized
NetworkRxBytes
NetworkTxBytes
RunningTaskCount
PendingTaskCount
StorageReadBytes
StorageWriteBytes
CPUReservation (EC2 Launch 
Type only)
CPUUtilization (EC2 Launch Type 
only)
MemoryReservation (EC2 Launch 
Type only)
MemoryUtilization (EC2 Launch 
Type only)
GPUReservation (EC2 Launch 
Type only)
instance_cpu_utilization (EC2 
Launch Type only)
instance_ﬁlesystem_utilization 
(EC2 Launch Type only)
instance_memory_utilization 
(EC2 Launch Type only)
instance_network_total_bytes 
(EC2 Launch Type only)
832Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
Java ApplicationCpuUtilized
MemoryUtilized
NetworkRxBytes
NetworkTxBytes
RunningTaskCount
PendingTaskCount
StorageReadBytes
StorageWriteBytes
CPUReservation (EC2 Launch 
Type only)
CPUUtilization (EC2 Launch Type 
only)
MemoryReservation (EC2 Launch 
Type only)
MemoryUtilization (EC2 Launch 
Type only)
GPUReservation (EC2 Launch 
Type only)
instance_cpu_utilization (EC2 
Launch Type only)
instance_ﬁlesystem_utilization 
(EC2 Launch Type only)
instance_memory_utilization 
(EC2 Launch Type only)
instance_network_total_bytes 
(EC2 Launch Type only)
java_lang_threading_threadcount
java_lang_classloading_loadedclasscount
java_lang_memory_heapmemoryusage_used
java_lang_memory_heapmemoryusage_committed
java_lang_operatingsystem_freephysicalmemorysize
java_lang_operatingsystem_freeswapspacesize
833Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
Any CPUUtilization
MemoryUtilization
CpuUtilized
MemoryUtilized
NetworkRxBytes
NetworkTxBytes
RunningTaskCount
PendingTaskCount
StorageReadBytes
StorageWriteBytesECS Service
Java Application CPUUtilization
MemoryUtilization
CpuUtilized
MemoryUtilized
NetworkRxBytes
NetworkTxBytes
RunningTaskCount
PendingTaskCount
StorageReadBytes
StorageWriteBytes
java_lang_threading_threadcount
java_lang_classloading_loadedclasscount
java_lang_memory_heapmemoryusage_used
java_lang_memory_heapmemoryusage_committed
java_lang_operatingsystem_freephysicalmemorysize
java_lang_operatingsystem_freeswapspacesize
834Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
EKS Cluster Any cluster_failed_node_count
node_cpu_reserved_capacity
node_cpu_utilization
node_ﬁlesystem_utilization
node_memory_reserved_capacity
node_memory_utilization
node_network_total_bytes
pod_cpu_reserved_capacity
pod_cpu_utilization
pod_cpu_utilization_over_pod_limit
pod_memory_reserved_capacity
pod_memory_utilization
pod_memory_utilization_over_pod_limit
pod_network_rx_bytes
pod_network_tx_bytes
835Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
Java Applicationcluster_failed_node_count
node_cpu_reserved_capacity
node_cpu_utilization
node_ﬁlesystem_utilization
node_memory_reserved_capacity
node_memory_utilization
node_network_total_bytes
pod_cpu_reserved_capacity
pod_cpu_utilization
pod_cpu_utilization_over_pod_limit
pod_memory_reserved_capacity
pod_memory_utilization
pod_memory_utilization_over_pod_limit
pod_network_rx_bytes
pod_network_tx_bytes
java_lang_threading_threadcount
java_lang_classloading_loadedclasscount
java_lang_memory_heapmemoryusage_used
java_lang_memory_heapmemoryusage_committed
java_lang_operatingsystem_freephysicalmemorysize
java_lang_operatingsystem_freeswapspacesize
836Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
Kubernetes Cluster on EC2Any cluster_failed_node_count
node_cpu_reserved_capacity
node_cpu_utilization
node_ﬁlesystem_utilization
node_memory_reserved_capacity
node_memory_utilization
node_network_total_bytes
pod_cpu_reserved_capacity
pod_cpu_utilization
pod_cpu_utilization_over_pod_limit
pod_memory_reserved_capacity
pod_memory_utilization
pod_memory_utilization_over_pod_limit
pod_network_rx_bytes
pod_network_tx_bytes
837Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended metric
Java Applicationcluster_failed_node_count
node_cpu_reserved_capacity
node_cpu_utilization
node_ﬁlesystem_utilization
node_memory_reserved_capacity
node_memory_utilization
node_network_total_bytes
pod_cpu_reserved_capacity
pod_cpu_utilization
pod_cpu_utilization_over_pod_limit
pod_memory_reserved_capacity
pod_memory_utilization
pod_memory_utilization_over_pod_limit
pod_network_rx_bytes
pod_network_tx_bytes
java_lang_threading_threadcount
java_lang_classloading_loadedclasscount
java_lang_memory_heapmemoryusage_used
java_lang_memory_heapmemoryusage_committed
java_lang_operatingsystem_freephysicalmemorysize
java_lang_operatingsystem_freeswapspacesize
The following table lists the recommended processes and process metrics for each component type. 
CloudWatch Application Insights does not recommend process monitoring for processes that do not run 
on an instance.
Component type Workload type Recommended processRecommended metric
EC2 instance (Windows 
servers)Microsoft IIS/.NET Web 
Front-Endw3wp procstat 
cpu_usage ,
procstat 
memory_rss ,
procstat 
memory_vms ,
838Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended processRecommended metric
procstat 
read_bytes ,
procstat 
write_bytes
SQLAgent procstat 
cpu_usage ,
procstat 
memory_rss ,
procstat 
memory_vms ,
procstat 
read_bytes ,
procstat 
write_bytes
sqlservr procstat 
cpu_usage ,
procstat 
memory_rss ,
procstat 
memory_vms ,
procstat 
read_bytes ,
procstat 
write_bytes
sqlwriter procstat 
cpu_usage ,
procstat 
memory_rssMicrosoft SQL Server 
Database Tier
ReportingServicesService procstat 
cpu_usage ,
procstat 
memory_rss
839Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended processRecommended metric
MsDtsServr procstat 
cpu_usage ,
procstat 
memory_rss ,
procstat 
memory_vms ,
procstat 
read_bytes ,
procstat 
write_bytes
Msmdsrv procstat 
cpu_usage ,
procstat 
memory_rss ,
procstat 
memory_vms ,
procstat 
read_bytes ,
procstat 
write_bytes
.NET workerpool/Mid-
Tierw3wp procstat 
cpu_usage ,
procstat 
memory_rss ,
procstat 
memory_vms ,
procstat 
read_bytes ,
procstat 
write_bytes
840Amazon CloudWatch User Guide
Supported logs and metrics
Component typeWorkload typeRecommended processRecommended metric
.NET Core Tier w3wp procstat 
cpu_usage ,
procstat 
memory_rss ,
procstat 
memory_vms ,
procstat 
read_bytes ,
procstat 
write_bytes
Performance Counter metrics
Performance Counter metrics are recommended for instances only when the corresponding Performance 
Counter sets are installed on the Windows instances.
Performance Counter metric name Performance Counter set name
.NET CLR Exceptions # of Exceps Thrown .NET CLR Exceptions
.NET CLR Exceptions # of Exceps Thrown/Sec .NET CLR Exceptions
.NET CLR Exceptions # of Filters/Sec .NET CLR Exceptions
.NET CLR Exceptions # of Finallys/Sec .NET CLR Exceptions
.NET CLR Exceptions Throw to Catch Depth/Sec .NET CLR Exceptions
.NET CLR Interop # of CCWs .NET CLR Interop
.NET CLR Interop # of Stubs .NET CLR Interop
.NET CLR Interop # of TLB exports/Sec .NET CLR Interop
.NET CLR Interop # of TLB imports/Sec .NET CLR Interop
.NET CLR Interop # of Marshaling .NET CLR Interop
.NET CLR Jit % Time in Jit .NET CLR Jit
.NET CLR Jit Standard Jit Failures .NET CLR Jit
.NET CLR Loading % Time Loading .NET CLR Loading
.NET CLR Loading Rate of Load Failures .NET CLR Loading
.NET CLR LocksAndThreads Contention Rate/Sec .NET CLR LocksAndThreads
.NET CLR LocksAndThreads Queue Length/Sec .NET CLR LocksAndThreads
.NET CLR Memory # Total Committed Bytes .NET CLR Memory
.NET CLR Memory % Time in GC .NET CLR Memory
841Amazon CloudWatch User Guide
Supported logs and metrics
Performance Counter metric namePerformance Counter set name
.NET CLR Networking 4.0.0.0 HttpWebRequest 
Average Queue Time.NET CLR Networking 4.0.0.0
.NET CLR Networking 4.0.0.0 HttpWebRequests 
Aborted/Sec.NET CLR Networking 4.0.0.0
.NET CLR Networking 4.0.0.0 HttpWebRequests 
Failed/Sec.NET CLR Networking 4.0.0.0
.NET CLR Networking 4.0.0.0 HttpWebRequests 
Queued/Sec.NET CLR Networking 4.0.0.0
APP_POOL_WAS Total Worker Process Ping 
FailuresAPP_POOL_WAS
ASP.NET Application Restarts ASP.NET
ASP.NET Requests Rejected ASP.NET
ASP.NET Worker Process RestartsASP.NET
ASP.NET Applications Cache API trimsASP.NET Applications
ASP.NET Applications % Managed Processor Time 
(estimated)ASP.NET Applications
ASP.NET Applications Errors Total/SecASP.NET Applications
ASP.NET Applications Errors Unhandled During 
Execution/SecASP.NET Applications
ASP.NET Applications Requests in Application 
QueueASP.NET Applications
ASP.NET Applications Requests/SecASP.NET Applications
ASP.NET Request Wait Time ASP.NET
ASP.NET Requests Queued ASP.NET
Database ==> Instances Database Cache % HitDatabase ==> Instances
Database ==> Instances I/O Database Reads 
Average LatencyDatabase ==> Instances
Database ==> Instances I/O Database Reads/secDatabase ==> Instances
Database ==> Instances I/O Log Writes Average 
LatencyDatabase ==> Instances
DirectoryServices DRA Pending Replication 
OperationsDirectoryServices
DirectoryServices DRA Pending Replication 
SynchronizationsDirectoryServices
DirectoryServices LDAP Bind TimeDirectoryServices
DNS Recursive Queries/sec DNS
842Amazon CloudWatch User Guide
Supported logs and metrics
Performance Counter metric namePerformance Counter set name
DNS Recursive Query Failure/sec DNS
DNS TCP Query Received/sec DNS
DNS Total Query Received/sec DNS
DNS Total Response Sent/sec DNS
DNS UDP Query Received/sec DNS
HTTP Service Request Queues CurrentQueueSizeHTTP Service Request Queues
LogicalDisk % Free Space LogicalDisk
LogicalDisk Avg. Disk sec/Write LogicalDisk
LogicalDisk Avg. Disk sec/Read LogicalDisk
LogicalDisk Avg. Disk Queue Length LogicalDisk
Memory % Committed Bytes In UseMemory
Memory Available Mbytes Memory
Memory Pages/Sec Memory
Memory Long-Term Average Standby Cache 
Lifetime (s)Memory
Network Interface Bytes Total/SecNetwork Interface
Network Interface Bytes Received/secNetwork Interface
Network Interface Bytes Sent/secNetwork Interface
Network Interface Current BandwidthNetwork Interface
Paging File % Usage Paging File
PhysicalDisk % Disk Time PhysicalDisk
PhysicalDisk Avg. Disk Queue LengthPhysicalDisk
PhysicalDisk Avg. Disk Sec/Read PhysicalDisk
PhysicalDisk Avg. Disk Sec/WritePhysicalDisk
PhysicalDisk Disk Read Bytes/SecPhysicalDisk
PhysicalDisk Disk Reads/Sec PhysicalDisk
PhysicalDisk Disk Write Bytes/SecPhysicalDisk
PhysicalDisk Disk Writes/Sec PhysicalDisk
Processor % Idle Time Processor
Processor % Interrupt Time Processor
Processor % Processor Time Processor
843Amazon CloudWatch User Guide
Supported logs and metrics
Performance Counter metric namePerformance Counter set name
Processor % User Time Processor
SharePoint Disk-Based Cache Blob Cache ﬁll ratioSharePoint Disk-Based Cache
SharePoint Disk-Based Cache Blob cache ﬂushes / 
secondSharePoint Disk-Based Cache
SharePoint Disk-Based Cache Blob cache hit ratioSharePoint Disk-Based Cache
SharePoint Disk-Based Cache Total number of 
cache compactionsSharePoint Disk-Based Cache
SharePoint Foundation Executing Time/Page 
RequestSharePoint Foundation
SharePoint Publishing Cache Publishing cache 
ﬂushes / secondSharePoint Publishing Cache
Security System-Wide Statistics Kerberos 
AuthenticationsSecurity System-Wide Statistics
Security System-Wide Statistics NTLM 
AuthenticationsSecurity System-Wide Statistics
SQLServer:Access Methods Forwarded Records/
SecSQLServer:Access Methods
SQLServer:Access Methods Full Scans/SecSQLServer:Access Methods
SQLServer:Access Methods Page Splits/SecSQLServer:Access Methods
SQLServer:Buﬀer Manager Buﬀer cache hit RatioSQLServer:Buﬀer Manager
SQLServer:Buﬀer Manager Page life ExpectancySQLServer:Buﬀer Manager
SQLServer:Database Replica File Bytes Received/
secSQLServer:Database Replica
SQLServer:Database Replica Log Bytes Received/
secSQLServer:Database Replica
SQLServer:Database Replica Log remaining for 
undoSQLServer:Database Replica
SQLServer:Database Replica Log Send QueueSQLServer:Database Replica
SQLServer:Database Replica Mirrored Write 
Transaction/secSQLServer:Database Replica
SQLServer:Database Replica Recovery QueueSQLServer:Database Replica
SQLServer:Database Replica Redo Bytes 
RemainingSQLServer:Database Replica
SQLServer:Database Replica Redone Bytes/secSQLServer:Database Replica
SQLServer:Database Replica Total Log requiring 
undoSQLServer:Database Replica
SQLServer:Database Replica Transaction DelaySQLServer:Database Replica
844Amazon CloudWatch User Guide
Supported logs and metrics
Performance Counter metric namePerformance Counter set name
SQLServer:General Statistics Processes BlockedSQLServer:General Statistics
SQLServer:General Statistics User ConnectionsSQLServer:General Statistics
SQLServer:Latches Average Latch Wait Time (ms)SQLServer:Latches
SQLServer:Locks Average Wait Time (ms)SQLServer:Locks
SQLServer:Locks Lock Timeouts/SecSQLServer:Locks
SQLServer:Locks Lock Waits/SecSQLServer:Locks
SQLServer:Locks Number of Deadlocks/SecSQLServer:Locks
SQLServer:Memory Manager Memory Grants 
PendingSQLServer:Memory Manager
SQLServer:SQL Statistics Batch Requests/SecSQLServer:SQL Statistics
SQLServer:SQL Statistics SQL Compilations/SecSQLServer:SQL Statistics
SQLServer:SQL Statistics SQL Re-Compilations/
SecSQLServer:SQL Statistics
System Processor Queue Length System
TCPv4 Connections Established TCPv4
TCPv6 Connections Established TCPv6
W3SVC_W3WP File Cache FlushesW3SVC_W3WP
W3SVC_W3WP File Cache MissesW3SVC_W3WP
W3SVC_W3WP Requests/Sec W3SVC_W3WP
W3SVC_W3WP URI Cache FlushesW3SVC_W3WP
W3SVC_W3WP URI Cache MissesW3SVC_W3WP
Web Service Bytes Received/SecWeb Service
Web Service Bytes Sent/Sec Web Service
Web Service Connection Attempts/SecWeb Service
Web Service Current ConnectionsWeb Service
Web Service Get Requests/Sec Web Service
Web Service Post Requests/Sec Web Service
845Amazon CloudWatch User Guide
CloudWatch cross-account 
observability
With Amazon CloudWatch cross-account observability, you can monitor and troubleshoot applications 
that span multiple accounts within a Region. Seamlessly search, visualize, and analyze your metrics, logs, 
and traces in any of the linked accounts without account boundaries.
Set up one or more AWS accounts as monitoring accounts  and link them with multiple source accounts . 
A monitoring account is a central AWS account that can view and interact with observability data 
generated from source accounts. A source account is an individual AWS account that generates 
observability data for the resources that reside in it. Source accounts share their observability data with 
the monitoring account. The shared observability data can include the following types of telemetry:
•Metrics in Amazon CloudWatch
•Log groups in Amazon CloudWatch Logs
•Traces in AWS X-Ray
To create links between monitoring accounts and source accounts, you can use the CloudWatch console. 
Alternatively, use the Observability Access Manager commands in the AWS CLI and API. For more 
information, see Observability Access Manager API Reference.
A sink is a resource that represents an attachment point in a monitoring account. Source accounts can 
link to the sink to share observability data. Each sink is managed by the monitoring account where it is 
located. An observability link is a resource that represents the link established between a source account 
and a monitoring account. Links are managed by the source account.
For a video demonstration of setting up CloudWatch cross-account observability, see the following video.
846Amazon CloudWatch User Guide
The next topic explains how to set up CloudWatch cross-account observability in both monitoring 
accounts and source accounts. For information about the cross-account cross-Region CloudWatch 
dashboard, see Cross-account cross-Region CloudWatch console (p. 1243 ).
Use Organizations for source accounts
There are two options for linking source accounts to your monitoring account. You can use one or both 
options.
•Use AWS Organizations to link accounts in an organization or organizational unit to the monitoring 
account.
•Connect individual AWS accounts to the monitoring account.
We recommend that you use Organizations so that new AWS accounts created later in the organization 
are automatically onboarded to cross-account observability as source accounts.
Details about linking monitoring accounts and source accounts
•Each monitoring account can be linked to as many as 100,000 source accounts.
•Each source account can share data with as many as ﬁve monitoring accounts.
847Amazon CloudWatch User Guide
Link monitoring accounts with source accounts
•You can set up a single account as both a monitoring account and a source account. If you do, this 
account sends only the observability data from itself to the its linked monitoring account. It does not 
relay the data from its source accounts.
•A monitoring account speciﬁes which telemetry types can be shared with it. A source account speciﬁes 
which telemetry types it wants to share.
•If there are more telemetry types selected in the monitoring account  than in the source account, the 
accounts are linked. Only the data types that are selected in both accounts are shared.
•If there are more telemetry types selected in the source account  than in the monitoring account, the 
link creation fails and nothing is shared.
•To remove a link between accounts, do so from the source account.
•To delete the sink in a monitoring account, you must ﬁrst remove all links to the monitoring account.
Pricing
Cross-account observability in CloudWatch comes with no extra cost for logs and metrics, and the ﬁrst 
trace copy is free. For more information about pricing, see Amazon CloudWatch Pricing.
Contents
•Link monitoring accounts with source accounts (p. 848)
•Necessary permissions (p. 849)
•Setup overview (p. 851)
•Step 1: Set up a monitoring account (p. 851)
•Step 2: (Optional) Download an AWS CloudFormation template or URL (p. 852)
•Step 3: Link the source accounts (p. 853)
•Use an AWS CloudFormation template to set up all accounts in an organization or 
an organizational unit as source accounts (p. 853)
•Use an AWS CloudFormation template to set up individual source 
accounts (p. 853)
•Use a URL to set up individual source accounts (p. 854)
•Manage monitoring accounts and source accounts (p. 854)
•Link more source accounts to an existing monitoring account (p. 854)
•Remove the link between a monitoring account and source account (p. 855)
•View information about a monitoring account (p. 856)
Link monitoring accounts with source accounts
The topics in this section explain how to set up links between monitoring accounts and source accounts.
We recommend that you create a new AWS account to serve as the monitoring account for your 
organization.
Contents
•Necessary permissions (p. 849)
•Setup overview (p. 851)
•Step 1: Set up a monitoring account (p. 851)
•Step 2: (Optional) Download an AWS CloudFormation template or URL (p. 852)
•Step 3: Link the source accounts (p. 853)
•Use an AWS CloudFormation template to set up all accounts in an organization or an 
organizational unit as source accounts (p. 853)
•Use an AWS CloudFormation template to set up individual source accounts (p. 853)
848Amazon CloudWatch User Guide
Necessary permissions
•Use a URL to set up individual source accounts (p. 854)
Necessary permissions
To create links between a monitoring account and a source account, you must be signed in with certain 
permissions.
•To set up a monitoring account – You must have either full administrator access in the monitoring 
account, or you must sign in to that account with the following permissions:
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Sid": "AllowSinkModification", 
            "Effect": "Allow", 
            "Action": [ 
                "oam:CreateSink", 
                "oam:DeleteSink", 
                "oam:PutSinkPolicy", 
                "oam:TagResource" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Sid": "AllowReadOnly", 
            "Effect": "Allow", 
            "Action": ["oam:Get*", "oam:List*"], 
            "Resource": "*" 
        } 
    ]
}
•Source account, scoped to a speciﬁc monitoring account – To create, update, and manage links 
for just one speciﬁed monitoring account, you must sign in to account with at least the following 
permissions. In this example, the monitoring account is 999999999999 .
If the link will not share all three resource types (metrics, logs, and traces), you can omit
cloudwatch:Link , logs:Link , or xray:Link  as needed.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Action": [ 
                "oam:CreateLink", 
                "oam:UpdateLink", 
                "oam:DeleteLink", 
                "oam:GetLink", 
                "oam:TagResource" 
            ], 
            "Effect": "Allow", 
            "Resource": "arn:*:oam:*:*:link/*" 
        }, 
        { 
            "Action": [ 
                "oam:CreateLink", 
                "oam:UpdateLink" 
            ], 
            "Effect": "Allow", 
            "Resource": "arn:*:oam:*:*:sink/*", 
849Amazon CloudWatch User Guide
Necessary permissions
            "Condition": { 
                "StringEquals": { 
                    "aws:ResourceAccount": [ 
                        "999999999999" 
                    ] 
                } 
            } 
        }, 
        { 
            "Action": "oam:ListLinks", 
            "Effect": "Allow", 
            "Resource": "*" 
        }, 
        { 
            "Action": "cloudwatch:Link", 
            "Effect": "Allow", 
            "Resource": "*" 
        }, 
        { 
            "Action": "logs:Link", 
            "Effect": "Allow", 
            "Resource": "*" 
        }, 
        { 
            "Action": "xray:Link", 
            "Effect": "Allow", 
            "Resource": "*" 
        } 
    ]
}
•Source account, with permissions to link to any monitoring account – To create a link to any existing 
monitoring account sink and share metrics, log groups, and traces, you must sign in to the source 
account with full administrator permissions or sign in there with the following permissions
If the link will not share all three resource types (metrics, logs, and traces), you can omit
cloudwatch:Link , logs:Link , or xray:Link  as needed.
{ 
    "Version": "2012-10-17", 
    "Statement": [{ 
            "Effect": "Allow", 
            "Action": [ 
                "oam:CreateLink", 
                "oam:UpdateLink" 
            ], 
            "Resource": [ 
                "arn:aws:oam:*:*:link/*", 
                "arn:aws:oam:*:*:sink/*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "oam:List*", 
                "oam:Get*" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "oam:DeleteLink", 
                "oam:GetLink", 
850Amazon CloudWatch User Guide
Setup overview
                "oam:TagResource" 
            ], 
            "Resource": "arn:aws:oam:*:*:link/*" 
        }, 
        { 
            "Action": "cloudwatch:Link", 
            "Effect": "Allow", 
            "Resource": "*" 
        }, 
        { 
            "Action": "logs:Link", 
            "Effect": "Allow", 
            "Resource": "*" 
        }, 
        { 
            "Action": "xray:Link", 
            "Effect": "Allow", 
            "Resource": "*" 
        } 
    ]
}
Setup overview
The following high-level steps show you how to set up CloudWatch cross-account observability.
Note
We recommend creating a new AWS account to use as your organization's monitoring account.
1.Set up a dedicated monitoring account.
2.(Optional) Download an AWS CloudFormation template or copy a URL to link source accounts.
3.Link source accounts to the monitoring account.
After completing these steps, you can use the monitoring account to view the observability data of the 
source accounts.
Step 1: Set up a monitoring account
Follow the steps in this section to set up an AWS account as a monitoring account for CloudWatch cross-
account observability.
Prerequisites
•If you're setting up accounts in an AWS Organizations organization as the source accounts – Get the 
organization path or organization ID.
•If you're not using Organizations for the source accounts – Get the account IDs of the source 
accounts.
To set up an account as a monitoring account, you must have certain permissions. For more information, 
see Necessary permissions (p. 849).
To set up a monitoring account
1. Sign in to the account that you want to use as a monitoring account.
2. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
851Amazon CloudWatch User Guide
Step 2: (Optional) Download an AWS 
CloudFormation template or URL
3. In the left navigation pane, choose Settings.
4. By Monitoring account conﬁguration, choose Conﬁgure .
5. For Select data, choose whether this monitoring account will be able to view Logs , Metrics , and
Traces data from the source accounts it is linked to.
6. For List source accounts, enter the source accounts that this monitoring account will view. To 
identify the source accounts, enter individual account IDs, organization paths, or organization IDs. 
If you enter an organization path or organization ID, this monitoring account is allowed to view 
observability data from all linked accounts in that organization.
Separate the entries in this list with commas.
7. For Deﬁne a label to identify your source account, specify whether to use account names or email 
addresses to identify the source accounts when you use the monitoring account to view them.
8. Choose Conﬁgure .
Important
The link between the monitoring and source accounts is not complete until you conﬁgure the 
source accounts. For more information, see the following sections.
Step 2: (Optional) Download an AWS CloudFormation 
template or URL
To link source accounts to a monitoring account, we recommend using an AWS CloudFormation template 
or a URL.
•If you are linking an entire organization – CloudWatch provides an AWS CloudFormation template.
•If you are linking individual accounts – Use either an AWS CloudFormation template or a URL that 
CloudWatch provides.
To use an AWS CloudFormation template, you must download it during these steps. After you link the 
monitoring account with at least one source account, the AWS CloudFormation template is no longer 
available to download.
To download an AWS CloudFormation template or copy a URL for linking source accounts to 
the monitoring account
1. Sign in to the account that you want to use as a monitoring account.
2. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
3. In the left navigation pane, choose Settings.
4. By Monitoring account conﬁguration, choose Resources to link accounts.
5. Do one of the following:
•Choose AWS organization to get a template to use to link accounts in an organization to this 
monitoring account.
•Choose Any account to get a template or URL for setting up individual accounts as source 
accounts.
6. Do one of the following:
•If you chose AWS organization, choose Download CloudFormation template.
•If you chose Any account, choose either Download CloudFormation template or Copy URL.
7. (Optional) Repeat steps 5-6 to download both the AWS CloudFormation template and the URL.
852Amazon CloudWatch User Guide
Step 3: Link the source accounts
Step 3: Link the source accounts
Use the steps in these sections to link source accounts to a monitoring account.
To link monitoring accounts with source accounts, you must have certain permissions. For more 
information, see Necessary permissions (p. 849).
Use an AWS CloudFormation template to set up all accounts in 
an organization or an organizational unit as source accounts
These steps assume that you already downloaded the necessary AWS CloudFormation template by 
performing the steps in Step 2: (Optional) Download an AWS CloudFormation template or URL (p. 852).
To use an AWS CloudFormation template to link accounts in an organization or 
organizational unit to the monitoring account
1. Sign in to the organization's management account.
2. Open the AWS CloudFormation console at https://console.aws.amazon.com/cloudformation.
3. In the left navigation bar, choose StackSets .
4. Check that you are signed in to the Region that you want, then choose Create StackSet .
5. Choose Next.
6. Choose Template is ready and choose Upload a template ﬁle.
7. Choose Choose ﬁle, choose the template that you downloaded from the monitoring account, and 
choose Open .
8. Choose Next.
9. For Specify StackSet details, enter a name for the StackSet and choose Next.
10. For Add stacks to stack set , choose Deploy new stacks.
11. For Deployment targets, choose whether to deploy to the entire organization or to speciﬁed 
organizational units.
12. For Specify regions, choose which Regions to deploy CloudWatch cross-account observability to.
13. Choose Next.
14. On the Review page, conﬁrm your selected options and choose Submit .
15. In the Stack instances tab, refresh the screen until you see that your stack instances have the status
CREATE_COMPLETE.
Use an AWS CloudFormation template to set up individual 
source accounts
These steps assume that you already downloaded the necessary AWS CloudFormation template by 
performing the steps in Step 2: (Optional) Download an AWS CloudFormation template or URL (p. 852).
To use an AWS CloudFormation template to set up individual source accounts for 
CloudWatch cross-account observability
1. Sign in to the source account.
2. Open the AWS CloudFormation console at https://console.aws.amazon.com/cloudformation.
3. In the left navigation bar, choose Stacks .
4. Check that you are signed in to the Region that you want, then choose Create stack , With new 
resources (standard).
5. Choose Next.
853Amazon CloudWatch User Guide
Manage monitoring accounts and source accounts
6. Choose Upload a template ﬁle.
7. Choose Choose ﬁle, choose the template that you downloaded from the monitoring account, and 
choose Open .
8. Choose Next.
9. For Specify stack details, enter a name for the stack and choose Next.
10. On the Conﬁgure stack options  page, choose Next.
11. On the Review page, choose Submit .
12. On the status page for your stack, refresh the screen until you see that your stack has the status
CREATE_COMPLETE.
13. To use this same template to link more source accounts to this monitoring account, sign out of this 
account and sign in to the next source account. Then repeat steps 2-12.
Use a URL to set up individual source accounts
These steps assume that you already copied the necessary URL by performing the steps in Step 2: 
(Optional) Download an AWS CloudFormation template or URL (p. 852).
To use a URL to link individual source accounts to the monitoring account
1. Sign in to the account that you want to use as a source account.
2. Enter the URL that you copied from the monitoring account.
You see the CloudWatch settings page, with some information ﬁlled in.
3. For Select data, choose whether this source account will share Logs , Metrics , and Traces data to this 
monitoring account.
4. Do not change the ARN in Enter monitoring account conﬁguration ARN.
5. The Deﬁne a label to identify your source account section is pre-ﬁlled with the label choice from 
the monitoring account. Optionally, choose Edit to change it.
6. Choose Link .
7. Enter Confirm in the box and choose Conﬁrm .
8. To use this same URL to link more source accounts to this monitoring account, sign out of this 
account and sign in to the next source account. Then repeat steps 2-7.
Manage monitoring accounts and source accounts
After you set up your monitoring accounts and source accounts, you can use the steps in these sections 
to manage them.
Contents
•Link more source accounts to an existing monitoring account (p. 854)
•Remove the link between a monitoring account and source account (p. 855)
•View information about a monitoring account (p. 856)
Link more source accounts to an existing monitoring 
account
Follow the steps in this section to add links from additional source accounts to an existing monitoring 
account.
854Amazon CloudWatch User Guide
Remove the link between a monitoring 
account and source account
Each source account can be linked to as many as ﬁve monitoring accounts. Each monitoring account can 
be linked to as many as 100,000 source accounts.
To manage a source account, you must have certain permissions. For more information, see Necessary 
permissions  (p. 849).
To add more source accounts to a monitoring account
1. Sign in to the monitoring account.
2. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
3. In the left navigation pane, choose Settings.
4. By Monitoring account conﬁguration, choose Manage source accounts.
5. Choose the Conﬁguration policy tab.
6. In the Conﬁguration policy box, add the new source account ID in the Principal  line.
For example, suppose the Principal  line is currently the following:
"Principal": {"AWS": ["111111111111", "222222222222"]}
To add 999999999999  as a third source account, edit the line to the following:
"Principal": {"AWS": ["111111111111", "222222222222", "999999999999"]}
7. Choose Update .
8. Choose the Conﬁguration details  tab.
9. Choose the copy icon that is next to the monitoring account's sink ARN.
10. Sign in to the account that you want to use as a new source account.
11. Enter the URL that you copied into the browser.
You see the CloudWatch settings page, with some information ﬁlled in.
12. For Select data, choose whether this source account will share Logs , Metrics , and Traces data to this 
monitoring account.
13. Do not change the ARN in Enter monitoring account conﬁguration ARN.
14. The Deﬁne a label to identify your source account section is pre-ﬁlled with the label choice from 
the monitoring account. Optionally, choose Edit to change it.
15. Choose Link .
16. Enter Confirm in the box and choose Conﬁrm .
Remove the link between a monitoring account and 
source account
Follow the steps in this section to stop sending data from one source account to a monitoring account.
You must have the permissions required to manage a source account to complete this task. For more 
information, see Necessary permissions (p. 849).
To remove the link between a source account and a monitoring account
1. Sign in to the source account.
2. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
3. In the left navigation pane, choose Settings.
855Amazon CloudWatch User Guide
View information about a monitoring account
4. By Source account information, choose View monitoring accounts.
5. Select the check box next to the monitoring account that you want to stop sharing data with.
6. Choose Stop sharing data , Conﬁrm .
7. Sign in to the monitoring account.
8. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
9. Choose Settings.
10. By Monitoring account information, choose View conﬁguration.
11. In the Policy box, delete the source account ID from the Principal  line and choose Update .
View information about a monitoring account
Follow the steps in this section to view the cross-account settings for a monitoring account.
To manage a monitoring account, you must have certain permissions. For more information, see
Necessary permissions (p. 849).
To manage a monitoring account
1. Sign in to the monitoring account.
2. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
3. In the left navigation pane, choose Settings.
4. By Monitoring account conﬁguration, choose Manage source accounts.
5. To view the Observability Access Manager policy that enables this account to be a monitoring 
account, choose the Conﬁguration policy tab.
6. To view the source accounts that are linked to this monitoring account, choose the Linked source 
accounts tab.
7. To view the monitoring account sink ARN, and the types of data that this monitoring account can 
view in linked source accounts, choose the Linked source accounts tab.
856Amazon CloudWatch User Guide
Collect metrics and logs from 
Amazon EC2 instances and 
on-premises servers with the 
CloudWatch agent
The uniﬁed CloudWatch agent enables you to do the following:
•Collect internal system-level metrics from Amazon EC2 instances across operating systems. The 
metrics can include in-guest metrics, in addition to the metrics for EC2 instances. The additional 
metrics that can be collected are listed in Metrics collected by the CloudWatch agent (p. 958).
•Collect system-level metrics from on-premises servers. These can include servers in a hybrid 
environment as well as servers not managed by AWS.
•Retrieve custom metrics from your applications or services using the StatsD  and collectd  protocols.
StatsD is supported on both Linux servers and servers running Windows Server. collectd  is 
supported only on Linux servers.
•Collect logs from Amazon EC2 instances and on-premises servers, running either Linux or Windows 
Server.
Note
The CloudWatch agent does not support collecting logs from FIFO pipes.
You can store and view the metrics that you collect with the CloudWatch agent in CloudWatch just as you 
can with any other CloudWatch metrics. The default namespace for metrics collected by the CloudWatch 
agent is CWAgent, although you can specify a diﬀerent namespace when you conﬁgure the agent.
The logs collected by the uniﬁed CloudWatch agent are processed and stored in Amazon CloudWatch 
Logs, just like logs collected by the older CloudWatch Logs agent. For information about CloudWatch 
Logs pricing, see Amazon CloudWatch Pricing.
Metrics collected by the CloudWatch agent are billed as custom metrics. For more information about 
CloudWatch metrics pricing, see Amazon CloudWatch Pricing.
The CloudWatch agent is open-source under the MIT license, and is  hosted on GitHub . If you would 
like to build, customize or contribute to the CloudWatch agent, see the GitHub repository for the latest 
instructions. If you think you’ve found a potential security issue, do not post it on GitHub or any public 
forum. Instead, please follow the instructions at  Vulnerability Reporting or  email AWS security directly.
The steps in this section explain how to install the uniﬁed CloudWatch agent on Amazon EC2 instances 
and on-premises servers. For more information about the metrics that the CloudWatch agent can collect, 
see Metrics collected by the CloudWatch agent (p. 958).
Supported operating systems
The CloudWatch agent is supported on x86-64 architecture on the following operating systems. It is also 
supported on all minor version updates for each of the major versions listed here.
857Amazon CloudWatch User Guide
•AL2023
•Amazon Linux 2
•Amazon Linux version 2014.03.02 or later
•Ubuntu Server versions 22.04, 20.04, 18.04, 16.04, and 14.04
•CentOS versions 9, 8, and 7
•Red Hat Enterprise Linux (RHEL) versions 9, 8, and 7
•Debian versions 11 and 10
•SUSE Linux Enterprise Server (SLES) versions 15 and 12
•Oracle Linux versions 8 and 7
•The following macOS computers: EC2 M1 Mac1 instances, and computers running macOS 13 (Ventura), 
macOS 12 (Monterey), and macOS 11 (Big Sur)
•64-bit versions of Windows Server 2022, Windows Server 2019, Windows Server 2016, and Windows 
Server 2012 R2
•64-bit Windows 10
The agent is supported on ARM64 architecture on the following operating systems. It is also supported 
on all minor version updates for each of the major versions listed here.
•Amazon Linux 2
•Ubuntu Server versions 22.04, 20.04, 18.04, and 16.04
•CentOS versions 9 and 8
•Red Hat Enterprise Linux (RHEL) versions 9, 8, and 7
•Debian versions 11 and 10
•SUSE Linux Enterprise Server 15
•The following macOS computers: macOS 13 (Ventura), macOS 12 (Monterey), and macOS 11 (Big Sur)
Installation process overview
You can download and install the CloudWatch agent manually using the command line, or you can 
integrate it with SSM. The general ﬂow of installing the CloudWatch agent using either method is as 
follows:
1.Create IAM roles or users that enable the agent to collect metrics from the server and optionally to 
integrate with AWS Systems Manager.
2.Download the agent package.
3.Modify the CloudWatch agent conﬁguration ﬁle and specify the metrics that you want to collect.
4.Install and start the agent on your servers. As you install the agent on an EC2 instance, you attach the 
IAM role that you created in step 1. As you install the agent on an on-premises server, you specify a 
named proﬁle that contains the credentials of the IAM user that you created in step 1.
Contents
•Installing the CloudWatch agent (p. 859)
•Create the CloudWatch agent conﬁguration ﬁle (p. 897)
•Metrics collected by the CloudWatch agent (p. 958)
•Use the AWS OpenTelemetry Collector with the CloudWatch agent (p. 970)
•Common scenarios with the CloudWatch agent (p. 971)
•Troubleshooting the CloudWatch agent (p. 978)
858Amazon CloudWatch User Guide
Installing the CloudWatch agent
Installing the CloudWatch agent
The CloudWatch agent is available as a package in Amazon Linux 2. If you are using this operating 
system, you can install the package by entering the following command. You must also make sure 
that the IAM role attached to the instance has the CloudWatchAgentServerPolicy attached. For more 
information, see  Create IAM roles to use with the CloudWatch agent on Amazon EC2 instances (p. 874).
sudo yum install amazon-cloudwatch-agent
On all supported operating systems including Linux and Windows Server, you can download and install 
the CloudWatch agent using either the command line with an Amazon S3 download link, using Amazon 
EC2 Systems Manager, or using an AWS CloudFormation template. See the following sections for details.
Contents
•Installing the CloudWatch agent using the command line (p. 859)
•Installing the CloudWatch agent using AWS Systems Manager (p. 874)
•Installing the CloudWatch agent on new instances using AWS CloudFormation (p. 886)
•Verifying the signature of the CloudWatch agent package (p. 891)
Installing the CloudWatch agent using the command 
line
Use the following topics to download, conﬁgure, and install the CloudWatch agent package.
Topics
•Download and conﬁgure the CloudWatch agent using the command line (p. 859)
•Create IAM roles and users for use with CloudWatch agent (p. 864)
•Installing and running the CloudWatch agent on your servers (p. 866)
Download and conﬁgure the CloudWatch agent using the 
command line
Use the following steps to download the CloudWatch agent package, create IAM roles or users, and 
optionally modify the common conﬁguration ﬁle.
Download the CloudWatch agent package
Note
To download the CloudWatch agent, your connection must use TLS 1.2 or later.
The CloudWatch agent is available as a package in Amazon Linux 2. If you are using this operating 
system, you can install the package by entering the following command. You must also make sure 
that the IAM role attached to the instance has the CloudWatchAgentServerPolicy attached. For more 
information, see  Create IAM roles and users for use with CloudWatch agent (p. 864).
sudo yum install amazon-cloudwatch-agent
On all supported operating systems, you can download and install the CloudWatch agent using the 
command line.
859Amazon CloudWatch User Guide
Installing the CloudWatch agent using the command line
For each download link, there is a general link as well as links for each Region. For example, for Amazon 
Linux and Amazon Linux 2 and the x86-64 architecture, three of the valid download links are:
•https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/
amazon-cloudwatch-agent.rpm
•https://s3.us-east-1.amazonaws.com/amazoncloudwatch-agent-us-east-1/
amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
•https://s3.eu-central-1.amazonaws.com/amazoncloudwatch-agent-eu-central-1/
amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
You can also download a README ﬁle about the latest changes to the agent, and a ﬁle that indicates the 
version number that is available for download. These ﬁles are in the following locations:
•https://s3.amazonaws.com/amazoncloudwatch-agent/info/latest/RELEASE_NOTES  or
https://s3. region.amazonaws.com/amazoncloudwatch-agent- Region/info/latest/
RELEASE_NOTES
•https://s3.amazonaws.com/amazoncloudwatch-agent/info/latest/CWAGENT_VERSION
or https://s3. region.amazonaws.com/amazoncloudwatch-agent- Region/info/latest/
CWAGENT_VERSION
ArchitecturePlatform Download link Signature ﬁle link
x86-64 Amazon Linux 
and Amazon 
Linux 2https://s3.amazonaws.com/
amazoncloudwatch-agent/
amazon_linux/amd64/latest/
amazon-cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/amazon_linux/
amd64/latest/amazon-
cloudwatch-agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
amazon_linux/amd64/
latest/amazon-cloudwatch-
agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/amazon_linux/
amd64/latest/amazon-
cloudwatch-agent.rpm.sig
x86-64 Centos https://s3.amazonaws.com/
amazoncloudwatch-agent/
centos/amd64/latest/amazon-
cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/centos/amd64/
latest/amazon-cloudwatch-
agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
centos/amd64/latest/amazon-
cloudwatch-agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/centos/amd64/
latest/amazon-cloudwatch-
agent.rpm.sig
x86-64 Redhat https://s3.amazonaws.com/
amazoncloudwatch-agent/
redhat/amd64/latest/amazon-
cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-https://s3.amazonaws.com/
amazoncloudwatch-agent/
redhat/amd64/latest/amazon-
cloudwatch-agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
860Amazon CloudWatch User Guide
Installing the CloudWatch agent using the command line
ArchitecturePlatformDownload linkSignature ﬁle link
agent-region/redhat/amd64/
latest/amazon-cloudwatch-
agent.rpmagent-region/redhat/amd64/
latest/amazon-cloudwatch-
agent.rpm.sig
x86-64SUSEhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
suse/amd64/latest/amazon-
cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /suse/amd64/
latest/amazon-cloudwatch-
agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
suse/amd64/latest/amazon-
cloudwatch-agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /suse/amd64/
latest/amazon-cloudwatch-
agent.rpm.sig
x86-64 Debianhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
debian/amd64/latest/amazon-
cloudwatch-agent.deb
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /debian/amd64/
latest/amazon-cloudwatch-
agent.debhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
debian/amd64/latest/amazon-
cloudwatch-agent.deb.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /debian/amd64/
latest/amazon-cloudwatch-
agent.deb.sig
x86-64 Ubuntuhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
ubuntu/amd64/latest/amazon-
cloudwatch-agent.deb
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /ubuntu/amd64/
latest/amazon-cloudwatch-
agent.debhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
ubuntu/amd64/latest/amazon-
cloudwatch-agent.deb.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /ubuntu/amd64/
latest/amazon-cloudwatch-
agent.deb.sig
x86-64 Oraclehttps://s3.amazonaws.com/
amazoncloudwatch-agent/
oracle_linux/amd64/latest/
amazon-cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /oracle_linux/
amd64/latest/amazon-
cloudwatch-agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
oracle_linux/amd64/latest/
amazon-cloudwatch-
agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /oracle_linux/
amd64/latest/amazon-
cloudwatch-agent.rpm.sig
861Amazon CloudWatch User Guide
Installing the CloudWatch agent using the command line
ArchitecturePlatformDownload linkSignature ﬁle link
x86-64macOShttps://s3.amazonaws.com/
amazoncloudwatch-agent/
darwin/amd64/latest/amazon-
cloudwatch-agent.pkg
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/darwin/amd64/
latest/amazon-cloudwatch-
agent.pkghttps://s3.amazonaws.com/
amazoncloudwatch-agent/
darwin/amd64/latest/amazon-
cloudwatch-agent.pkg.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/darwin/amd64/
latest/amazon-cloudwatch-
agent.pkg.sig
x86-64Windowshttps://s3.amazonaws.com/
amazoncloudwatch-agent/
windows/amd64/latest/
amazon-cloudwatch-agent.msi
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/windows/
amd64/latest/amazon-
cloudwatch-agent.msihttps://s3.amazonaws.com/
amazoncloudwatch-agent/
windows/amd64/latest/
amazon-cloudwatch-
agent.msi.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/windows/
amd64/latest/amazon-
cloudwatch-agent.msi.sig
ARM64Amazon Linux 
2https://s3.amazonaws.com/
amazoncloudwatch-agent/
amazon_linux/arm64/latest/
amazon-cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/amazon_linux/
arm64/latest/amazon-
cloudwatch-agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
amazon_linux/arm64/
latest/amazon-cloudwatch-
agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/amazon_linux/
arm64/latest/amazon-
cloudwatch-agent.rpm.sig
ARM64Redhathttps://s3.amazonaws.com/
amazoncloudwatch-agent/
redhat/arm64/latest/amazon-
cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/redhat/arm64/
latest/amazon-cloudwatch-
agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
redhat/arm64/latest/amazon-
cloudwatch-agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/redhat/arm64/
latest/amazon-cloudwatch-
agent.rpm.sig
862Amazon CloudWatch User Guide
Installing the CloudWatch agent using the command line
ArchitecturePlatformDownload linkSignature ﬁle link
ARM64 Ubuntuhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
ubuntu/arm64/latest/amazon-
cloudwatch-agent.deb
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /ubuntu/arm64/
latest/amazon-cloudwatch-
agent.debhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
ubuntu/arm64/latest/amazon-
cloudwatch-agent.deb.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /ubuntu/arm64/
latest/amazon-cloudwatch-
agent.deb.sig
ARM64SUSEhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
suse/arm64/latest/amazon-
cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /suse/arm64/
latest/amazon-cloudwatch-
agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
suse/arm64/latest/amazon-
cloudwatch-agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /suse/arm64/
latest/amazon-cloudwatch-
agent.rpm.sig
ARM64MacOShttps://s3.amazonaws.com/
amazoncloudwatch-agent/
darwin/arm64/latest/amazon-
cloudwatch-agent.pkg
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/darwin/arm64/
latest/amazon-cloudwatch-
agent.pkghttps://s3.amazonaws.com/
amazoncloudwatch-agent/
darwin/arm64/latest/amazon-
cloudwatch-agent.pkg.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/darwin/arm64/
latest/amazon-cloudwatch-
agent.pkg.sig
To use the command line to download and install the CloudWatch agent package
1. Download the CloudWatch agent.
On a Linux server, enter the following. For download-link , use the appropriate download link from 
the previous table.
wget download-link
On a server running Windows Server, download the following ﬁle:
https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-
agent.msi
2. After you have downloaded the package, you can optionally verify the package signature. For more 
information, see Verifying the signature of the CloudWatch agent package (p. 891).
3. Install the package. If you downloaded an RPM package on a Linux server, change to the directory 
containing the package and enter the following:
863Amazon CloudWatch User Guide
Installing the CloudWatch agent using the command line
sudo rpm -U ./amazon-cloudwatch-agent.rpm
If you downloaded a DEB package on a Linux server, change to the directory containing the package 
and enter the following:
sudo dpkg -i -E ./amazon-cloudwatch-agent.deb
If you downloaded an MSI package on a server running Windows Server, change to the directory 
containing the package and enter the following:
msiexec /i amazon-cloudwatch-agent.msi
This command also works from within PowerShell. For more information about MSI command 
options, see Command-Line Options  in the Microsoft Windows documentation.
If you downloaded a PKG package on a macOS server, change to the directory containing the 
package and enter the following:
sudo installer -pkg ./amazon-cloudwatch-agent.pkg -target /
Create and modify the agent conﬁguration ﬁle
After you have downloaded the CloudWatch agent, you must create the conﬁguration ﬁle before you 
start the agent on any servers. For more information, see Create the CloudWatch agent conﬁguration 
ﬁle (p. 897).
Create IAM roles and users for use with CloudWatch agent
Access to AWS resources requires permissions. You create an IAM role, an IAM user, or both to grant 
permissions that the CloudWatch agent needs to write metrics to CloudWatch. If you're going to use the 
agent on Amazon EC2 instances, you must create an IAM role. If you're going to use the agent on on-
premises servers, you must create an IAM user.
Note
We recently modiﬁed the following procedures by using new
CloudWatchAgentServerPolicy  and CloudWatchAgentAdminPolicy  policies created by 
Amazon, instead of requiring customers to create these policies themselves. For writing ﬁles 
to and downloading ﬁles from the Parameter Store, the policies created by Amazon support 
only ﬁles with names that start with AmazonCloudWatch- . If you have a CloudWatch agent 
conﬁguration ﬁle with a ﬁle name that doesn't start with AmazonCloudWatch- , these policies 
can't be used to write the ﬁle to Parameter Store or download it from Parameter Store.
If you're going to run the CloudWatch agent on Amazon EC2 instances, use the following steps to create 
the necessary IAM role. This role provides permissions for reading information from the instance and 
writing it to CloudWatch.
To create the IAM role necessary to run the CloudWatch agent on EC2 instances
1. Sign in to the AWS Management Console and open the IAM console at https:// 
console.aws.amazon.com/iam/.
2. In the navigation pane on the left, choose Roles and then Create role.
3. Make sure that AWS service is selected under Trusted entity type.
864Amazon CloudWatch User Guide
Installing the CloudWatch agent using the command line
4. For Use case , choose EC2 under Common use cases ,
5. Choose Next.
6. In the list of policies, select the check box next to CloudWatchAgentServerPolicy. If necessary, use 
the search box to ﬁnd the policy.
7. Choose Next.
8. In Role name, enter a name for the role, such as CloudWatchAgentServerRole . Optionally give it 
a description. Then choose Create role.
The role is now created.
9. (Optional) If the agent is going to send logs to CloudWatch Logs and you want the agent to be able 
to set retention policies for these log groups, you need to add the logs:PutRetentionPolicy
permission to the role. For more information, see Allowing the CloudWatch agent to set log 
retention policy (p. 865).
If you're going to run the CloudWatch agent on on-premises servers, use the following steps to create 
the necessary IAM user.
To create the IAM user necessary for the CloudWatch agent to run on on-premises servers
1. Sign in to the AWS Management Console and open the IAM console at https:// 
console.aws.amazon.com/iam/.
2. In the navigation pane on the left, choose Users  and then Add users .
3. Enter the user name for the new user.
4. Select Access key - Programmatic access and choose Next: Permissions.
5. Choose Attach existing policies directly.
6. In the list of policies, select the check box next to CloudWatchAgentServerPolicy. If necessary, use 
the search box to ﬁnd the policy.
7. Choose Next: Tags.
8. Optionally create tags for the new IAM user, and then choose Next:Review.
9. Conﬁrm that the correct policy is listed, and choose Create user .
10. Next to the name of the new user, choose Show. Copy the access key and secret key to a ﬁle so that 
you can use them when installing the agent. Choose Close.
Allowing the CloudWatch agent to set log retention policy
You can conﬁgure the CloudWatch agent to set the retention policy for log groups that it sends log 
events to. If you do this, you must grant the logs:PutRetentionPolicy  to the IAM role or user that 
the agent uses. The agent uses an IAM role to run on Amazon EC2 instances, and uses an IAM user for on-
premises servers.
To grant the CloudWatch agent's IAM role permission to set log retention policies
1. Sign in to the AWS Management Console and open the IAM console at https:// 
console.aws.amazon.com/iam/.
2. In the left navigation pane, choose Roles.
3. In the search box, Type the beginning of the name of the CloudWatch agent's IAM role. You chose 
this name when you created the role. It might be named CloudWatchAgentServerRole .
When you see the role, choose the name of the role.
4. In the Permissions tab, choose Add permissions , Create inline policy.
865Amazon CloudWatch User Guide
Installing the CloudWatch agent using the command line
5. Choose the JSON tab and copy the following policy into the box, replacing the default JSON in the 
box:
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Action": "logs:PutRetentionPolicy", 
      "Resource": "*" 
    } 
  ]
}
6. Choose Review policy.
7. For Name , enter CloudWatchAgentPutLogsRetention  or something similar, and choose Create 
policy.
To grant the CloudWatch agent's IAM user permission to set log retention policies
1. Sign in to the AWS Management Console and open the IAM console at https:// 
console.aws.amazon.com/iam/.
2. In the left navigation pane, choose Users .
3. In the search box, Type the beginning of the name of the CloudWatch agent's IAM user. You chose 
this name when you created the user.
When you see the user, choose the name of the user.
4. In the Permissions tab, choose Add inline policy.
5. Choose the JSON tab and copy the following policy into the box, replacing the default JSON in the 
box:
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Action": "logs:PutRetentionPolicy", 
      "Resource": "*" 
    } 
  ]
}
6. Choose Review policy.
7. For Name , enter CloudWatchAgentPutLogsRetention  or something similar, and choose Create 
policy.
Installing and running the CloudWatch agent on your servers
After you have created the agent conﬁguration ﬁle that you want and created an IAM role or IAM user, 
use the following steps to install and run the agent on your servers, using that conﬁguration. First, attach 
an IAM role or IAM user to the server that will run the agent. Then, on that server, download the agent 
package and start it using the agent conﬁguration you created.
Download the CloudWatch agent package using an S3 download link
Note
To download the CloudWatch agent, your connection must use TLS 1.2 or later.
866Amazon CloudWatch User Guide
Installing the CloudWatch agent using the command line
You need to install the agent on each server where you will run the agent.
Amazon Linux 2
The CloudWatch agent is available as a package in Amazon Linux 2. If you are using this operating 
system, you can install the package by entering the following command. You must also make sure 
that the IAM role attached to the instance has the CloudWatchAgentServerPolicy attached. For more 
information, see Create IAM roles to use with the CloudWatch agent on Amazon EC2 instances (p. 874).
sudo yum install amazon-cloudwatch-agent
All operating systems
On all supported operating systems, you can download and install the CloudWatch agent using the 
command line with an Amazon S3 download link as described in the following steps.
For each download link, there is a general link as well as links for each Region. For example, for Amazon 
Linux and Amazon Linux 2 and the x86-64 architecture, three of the valid download links are:
•https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/
amazon-cloudwatch-agent.rpm
•https://s3.us-east-1.amazonaws.com/amazoncloudwatch-agent-us-east-1/
amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
•https://s3.eu-central-1.amazonaws.com/amazoncloudwatch-agent-eu-central-1/
amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
ArchitecturePlatform Download link Signature ﬁle link
x86-64 Amazon Linux 
and Amazon 
Linux 2https://s3.amazonaws.com/
amazoncloudwatch-agent/
amazon_linux/amd64/latest/
amazon-cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/amazon_linux/
amd64/latest/amazon-
cloudwatch-agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
amazon_linux/amd64/
latest/amazon-cloudwatch-
agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/amazon_linux/
amd64/latest/amazon-
cloudwatch-agent.rpm.sig
x86-64 Centos https://s3.amazonaws.com/
amazoncloudwatch-agent/
centos/amd64/latest/amazon-
cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/centos/amd64/
latest/amazon-cloudwatch-
agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
centos/amd64/latest/amazon-
cloudwatch-agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/centos/amd64/
latest/amazon-cloudwatch-
agent.rpm.sig
x86-64 Redhat https://s3.amazonaws.com/
amazoncloudwatch-agent/
redhat/amd64/latest/amazon-
cloudwatch-agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
redhat/amd64/latest/amazon-
cloudwatch-agent.rpm.sig
867Amazon CloudWatch User Guide
Installing the CloudWatch agent using the command line
ArchitecturePlatformDownload linkSignature ﬁle link
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/redhat/amd64/
latest/amazon-cloudwatch-
agent.rpmhttps://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/redhat/amd64/
latest/amazon-cloudwatch-
agent.rpm.sig
x86-64SUSEhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
suse/amd64/latest/amazon-
cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /suse/amd64/
latest/amazon-cloudwatch-
agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
suse/amd64/latest/amazon-
cloudwatch-agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /suse/amd64/
latest/amazon-cloudwatch-
agent.rpm.sig
x86-64 Debianhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
debian/amd64/latest/amazon-
cloudwatch-agent.deb
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /debian/amd64/
latest/amazon-cloudwatch-
agent.debhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
debian/amd64/latest/amazon-
cloudwatch-agent.deb.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /debian/amd64/
latest/amazon-cloudwatch-
agent.deb.sig
x86-64 Ubuntuhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
ubuntu/amd64/latest/amazon-
cloudwatch-agent.deb
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /ubuntu/amd64/
latest/amazon-cloudwatch-
agent.debhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
ubuntu/amd64/latest/amazon-
cloudwatch-agent.deb.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /ubuntu/amd64/
latest/amazon-cloudwatch-
agent.deb.sig
x86-64 Oraclehttps://s3.amazonaws.com/
amazoncloudwatch-agent/
oracle_linux/amd64/latest/
amazon-cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /oracle_linux/
amd64/latest/amazon-
cloudwatch-agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
oracle_linux/amd64/latest/
amazon-cloudwatch-
agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /oracle_linux/
amd64/latest/amazon-
cloudwatch-agent.rpm.sig
868Amazon CloudWatch User Guide
Installing the CloudWatch agent using the command line
ArchitecturePlatformDownload linkSignature ﬁle link
x86-64macOShttps://s3.amazonaws.com/
amazoncloudwatch-agent/
darwin/amd64/latest/amazon-
cloudwatch-agent.pkg
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/darwin/amd64/
latest/amazon-cloudwatch-
agent.pkghttps://s3.amazonaws.com/
amazoncloudwatch-agent/
darwin/amd64/latest/amazon-
cloudwatch-agent.pkg.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/darwin/amd64/
latest/amazon-cloudwatch-
agent.pkg.sig
x86-64Windowshttps://s3.amazonaws.com/
amazoncloudwatch-agent/
windows/amd64/latest/
amazon-cloudwatch-agent.msi
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/windows/
amd64/latest/amazon-
cloudwatch-agent.msihttps://s3.amazonaws.com/
amazoncloudwatch-agent/
windows/amd64/latest/
amazon-cloudwatch-
agent.msi.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/windows/
amd64/latest/amazon-
cloudwatch-agent.msi.sig
ARM64Amazon Linux 
2https://s3.amazonaws.com/
amazoncloudwatch-agent/
amazon_linux/arm64/latest/
amazon-cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/amazon_linux/
arm64/latest/amazon-
cloudwatch-agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
amazon_linux/arm64/
latest/amazon-cloudwatch-
agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/amazon_linux/
arm64/latest/amazon-
cloudwatch-agent.rpm.sig
ARM64Redhathttps://s3.amazonaws.com/
amazoncloudwatch-agent/
redhat/arm64/latest/amazon-
cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/redhat/arm64/
latest/amazon-cloudwatch-
agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
redhat/arm64/latest/amazon-
cloudwatch-agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/redhat/arm64/
latest/amazon-cloudwatch-
agent.rpm.sig
869Amazon CloudWatch User Guide
Installing the CloudWatch agent using the command line
ArchitecturePlatformDownload linkSignature ﬁle link
ARM64 Ubuntuhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
ubuntu/arm64/latest/amazon-
cloudwatch-agent.deb
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /ubuntu/arm64/
latest/amazon-cloudwatch-
agent.debhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
ubuntu/arm64/latest/amazon-
cloudwatch-agent.deb.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /ubuntu/arm64/
latest/amazon-cloudwatch-
agent.deb.sig
ARM64SUSEhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
suse/arm64/latest/amazon-
cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /suse/arm64/
latest/amazon-cloudwatch-
agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
suse/arm64/latest/amazon-
cloudwatch-agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region suse/arm64/
latest/amazon-cloudwatch-
agent.rpm.sig
To use the command line to install the CloudWatch agent on an Amazon EC2 instance
1. Download the CloudWatch agent. For a Linux server, enter the following. For download-link , use 
the appropriate download link from the previous table.
wget download-link
For a server running Windows Server, download the following ﬁle:
https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-
agent.msi
2. After you have downloaded the package, you can optionally verify the package signature. For more 
information, see Verifying the signature of the CloudWatch agent package (p. 891).
3. Install the package. If you downloaded an RPM package on a Linux server, change to the directory 
containing the package and enter the following:
sudo rpm -U ./amazon-cloudwatch-agent.rpm
If you downloaded a DEB package on a Linux server, change to the directory containing the package 
and enter the following:
sudo dpkg -i -E ./amazon-cloudwatch-agent.deb
If you downloaded an MSI package on a server running Windows Server, change to the directory 
containing the package and enter the following:
msiexec /i amazon-cloudwatch-agent.msi
870Amazon CloudWatch User Guide
Installing the CloudWatch agent using the command line
This command also works from within PowerShell. For more information about MSI command 
options, see Command-Line Options  in the Microsoft Windows documentation.
(Installing on an EC2 instance) Attaching an IAM role
To enable the CloudWatch agent to send data from the instance, you must attach an IAM role to 
the instance. The role to attach is CloudWatchAgentServerRole. You should have created this 
role previously. For more information see Create IAM roles and users for use with CloudWatch 
agent  (p. 864).
For more information on attaching an IAM role to an instance, see Attaching an IAM Role to an Instance
in the Amazon EC2 User Guide for Windows Instances.
(Installing on an on-premises server) Specify IAM credentials and AWS Region
To enable the CloudWatch agent to send data from an on-premises server, you must specify the access 
key and secret key of the IAM user that you created earlier. For more information about creating this 
user, see Create IAM roles and users for use with CloudWatch agent (p. 864).
You also must specify the AWS Region to send the metrics to, using the region  ﬁeld in the
[AmazonCloudWatchAgent]  section of the AWS conﬁg ﬁle, as in the following example.
[profile AmazonCloudWatchAgent]
region = us-west-1
The following is an example of using the aws configure  command to create a named proﬁle 
for the CloudWatch agent. This example assumes that you are using the default proﬁle name of
AmazonCloudWatchAgent .
To create the AmazonCloudWatchAgent proﬁle for the CloudWatch agent
1. If you haven't already done so, install the AWS Command Line Interface on the server. For more 
information, see  Installing the AWS CLI.
2. On Linux servers, enter the following command and follow the prompts:
sudo aws configure --profile AmazonCloudWatchAgent
On Windows Server, open PowerShell as an administrator, enter the following command, and follow 
the prompts.
aws configure --profile AmazonCloudWatchAgent
Verify internet access
Your Amazon EC2 instances must have outbound internet access to send data to CloudWatch or 
CloudWatch Logs. For more information about how to conﬁgure internet access, see Internet Gateways in 
the Amazon VPC User Guide .
The endpoints and ports to conﬁgure on your proxy are as follows:
•If you're using the agent to collect metrics, you must add the CloudWatch endpoints for the 
appropriate Regions to the allow list. These endpoints are listed in  Amazon CloudWatch endpoints 
and quotas .
871Amazon CloudWatch User Guide
Installing the CloudWatch agent using the command line
•If you're using the agent to collect logs, you must add the CloudWatch Logs endpoints for the 
appropriate Regions to the allow list. These endpoints are listed in  Amazon CloudWatch Logs 
endpoints and quotas .
•If you're using Systems Manager to install the agent or Parameter Store to store your conﬁguration 
ﬁle, you must add the Systems Manager endpoints for the appropriate Regions to the allow list. These 
endpoints are listed in AWS Systems Manager endpoints and quotas.
(Optional) Modify the common conﬁguration for proxy or Region information
The CloudWatch agent includes a conﬁguration ﬁle called common-config.toml . You can optionally 
use this ﬁle to specify proxy and Region information.
On a server running Linux, this ﬁle is in the /opt/aws/amazon-cloudwatch-agent/etc
directory. On a server running Windows Server, this ﬁle is in the C:\ProgramData\Amazon
\AmazonCloudWatchAgent  directory.
The default common-config.toml  is as follows.
# This common-config is used to configure items used for both ssm and cloudwatch access 
  
  
## Configuration for shared credential.
## Default credential strategy will be used if it is absent here:
##            Instance role is used for EC2 case by default.
##            AmazonCloudWatchAgent profile is used for the on-premises case by default.
# [credentials]
#    shared_credential_profile = "{profile_name}"
#    shared_credential_file= "{file_name}" 
  
## Configuration for proxy.
## System-wide environment-variable will be read if it is absent here.
## i.e. HTTP_PROXY/http_proxy; HTTPS_PROXY/https_proxy; NO_PROXY/no_proxy
## Note: system-wide environment-variable is not accessible when using ssm run-command.
## Absent in both here and environment-variable means no proxy will be used.
# [proxy]
#    http_proxy = "{http_url}"
#    https_proxy = "{https_url}"
#    no_proxy = "{domain}"
All lines are commented out initially. To set the credential proﬁle or proxy settings, remove the # from 
that line and specify a value. You can edit this ﬁle manually or by using the RunShellScript  Run 
Command in Systems Manager:
•shared_credential_profile  – For on-premises servers, this line speciﬁes the IAM user 
credential proﬁle to use to send data to CloudWatch. If you keep this line commented out,
AmazonCloudWatchAgent  is used. For more information about creating this proﬁle, see (Installing on 
an on-premises server) Specify IAM credentials and AWS Region (p. 871).
On an EC2 instance, you can use this line to have the CloudWatch agent send data from this instance 
to CloudWatch in a diﬀerent AWS Region. To do so, specify a named proﬁle that includes a region
ﬁeld specifying the name of the Region to send to.
If you specify a shared_credential_profile , you must also remove the # from the beginning of 
the [credentials]  line.
•shared_credential_file  – To have the agent look for credentials in a ﬁle located in a path other 
than the default path, specify that complete path and ﬁle name here. The default path is /root/.aws
on Linux and is C:\\Users\\Administrator\\.aws  on Windows Server.
872Amazon CloudWatch User Guide
Installing the CloudWatch agent using the command line
The ﬁrst example below shows the syntax of a valid shared_credential_file  line for Linux 
servers, and the second example is valid for Windows Server. On Windows Server, you must escape the 
\ characters.
shared_credential_file= "/usr/ username /credentials"
shared_credential_file= "C:\\Documents and Settings\\ username \\.aws\\credentials"
If you specify a shared_credential_file , you must also remove the # from the beginning of the
[credentials]  line.
•Proxy settings – If your servers use HTTP or HTTPS proxies to contact AWS services, specify those 
proxies in the http_proxy  and https_proxy  ﬁelds. If there are URLs that should be excluded from 
proxying, specify them in the no_proxy  ﬁeld, separated by commas.
Start the CloudWatch agent using the command line
Follow these steps to use the command line to start the CloudWatch agent on a server.
To use the command line to start the CloudWatch agent on a server
1. Copy the agent conﬁguration ﬁle that you want to use to the server where you're going to run the 
agent. Note the pathname where you copy it to.
2. In this command, -a fetch-config  causes the agent to load the latest version of the CloudWatch 
agent conﬁguration ﬁle, and -s starts the agent.
Enter one of the following commands. Replace configuration-file-path  with the path to the 
agent conﬁguration ﬁle. This ﬁle is called config.json  if you created it with the wizard, and might 
be called amazon-cloudwatch-agent.json  if you created it manually.
On an EC2 instance running Linux, enter the following command.
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -
m ec2 -s -c file: configuration-file-path
On an on-premises server running Linux, enter the following:
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -
m onPremise -s -c file: configuration-file-path
On an EC2 instance running Windows Server, enter the following from the PowerShell console:
& "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a 
 fetch-config -m ec2 -s -c file: configuration-file-path
On an on-premises server running Windows Server, enter the following from the PowerShell 
console:
& "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a 
 fetch-config -m onPremise -s -c file: configuration-file-path
873Amazon CloudWatch User Guide
Install the CloudWatch agent using Systems Manager
Installing the CloudWatch agent using AWS Systems 
Manager
Use the following topics to install and run the CloudWatch agent using AWS Systems Manager.
Topics
•Create IAM roles and users for use with the CloudWatch agent (p. 874)
•Download and conﬁgure the CloudWatch agent (p. 877)
•Installing the CloudWatch agent on EC2 instances using your agent conﬁguration (p. 879)
•Installing the CloudWatch agent on on-premises servers (p. 883)
Create IAM roles and users for use with the CloudWatch agent
Access to AWS resources requires permissions. You can create IAM roles and users that include the 
permissions that you need for the CloudWatch agent to write metrics to CloudWatch and for the 
CloudWatch agent to communicate with Amazon EC2 and AWS Systems Manager. You use IAM roles on 
Amazon EC2 instances, and you use IAM users with on-premises servers.
One role or user enables CloudWatch agent to be installed on a server and send metrics to CloudWatch. 
The other role or user is needed to store your CloudWatch agent conﬁguration in Systems Manager 
Parameter Store. Parameter Store enables multiple servers to use one CloudWatch agent conﬁguration.
The ability to write to Parameter Store is a broad and powerful permission. You should use it only when 
you need it, and it shouldn't be attached to multiple instances in your deployment. If you store your 
CloudWatch agent conﬁguration in Parameter Store, we recommend the following:
•Set up one instance where you perform this conﬁguration.
•Use the IAM role with permissions to write to Parameter Store only on this instance.
•Use the IAM role with permissions to write to Parameter Store only while you are working with and 
saving the CloudWatch agent conﬁguration ﬁle.
Note
We recently modiﬁed the following procedures by using new
CloudWatchAgentServerPolicy  and CloudWatchAgentAdminPolicy  policies created 
by Amazon, instead of requiring customers to create these policies themselves. To use 
these policies to write the agent conﬁguration ﬁle to Parameter Store and then download 
it from Parameter Store, your agent conﬁguration ﬁle must have a name that starts with
AmazonCloudWatch- . If you have a CloudWatch agent conﬁguration ﬁle with a ﬁle name 
that doesn't start with AmazonCloudWatch- , these policies can't be used to write the ﬁle to 
Parameter Store or to download the ﬁle from Parameter Store.
Create IAM roles to use with the CloudWatch agent on Amazon EC2 instances
The ﬁrst procedure creates the IAM role that you must attach to each Amazon EC2 instance that runs the 
CloudWatch agent. This role provides permissions for reading information from the instance and writing 
it to CloudWatch.
The second procedure creates the IAM role that you must attach to the Amazon EC2 instance being used 
to create the CloudWatch agent conﬁguration ﬁle. This step is necessary if you're going to store this ﬁle 
in Systems Manager Parameter Store so that other servers can use it. This role provides permissions for 
writing to Parameter Store, in addition to the permissions for reading information from the instance and 
874Amazon CloudWatch User Guide
Install the CloudWatch agent using Systems Manager
writing it to CloudWatch. This role includes permissions suﬃcient to run the CloudWatch agent as well as 
to write to Parameter Store.
Note
Parameter Store supports parameters in Standard and Advanced tiers. These parameter tiers are 
not related to the Basic, Standard, and Advanced levels of details available with the CloudWatch 
Agent predeﬁned metric sets.
To create the IAM role necessary for each server to run the CloudWatch agent
1. Sign in to the AWS Management Console and open the IAM console at https:// 
console.aws.amazon.com/iam/.
2. In the navigation pane, choose Roles and then choose Create role.
3. Under Select type of trusted entity, choose AWS service.
4. Immediately under Common use cases , choose EC2,and then choose Next: Permissions.
5. In the list of policies, select the check box next to CloudWatchAgentServerPolicy. If necessary, use 
the search box to ﬁnd the policy.
6. To use Systems Manager to install or conﬁgure the CloudWatch agent, select the box next to
AmazonSSMManagedInstanceCore. This AWS managed policy enables an instance to use Systems 
Manager service core functionality. If necessary, use the search box to ﬁnd the policy. This policy isn't 
necessary if you start and conﬁgure the agent only through the command line.
7. Choose Next: Tags.
8. (Optional) Add one or more tag-key value pairs to organize, track, or control access for this role, and 
then choose Next: Review.
9. For Role name, enter a name for your new role, such as CloudWatchAgentServerRole  or another 
name that you prefer.
10. (Optional) For Role description, enter a description.
11. Conﬁrm that CloudWatchAgentServerPolicy and optionally AmazonSSMManagedInstanceCore
appear next to Policies.
12. Choose Create role.
The role is now created.
The following procedure creates the IAM role that can also write to Parameter Store. You can use this 
role to store the agent conﬁguration ﬁle in Parameter Store so that other servers can retrieve it.
The permissions for writing to Parameter Store provide broad access. This role shouldn't be 
attached to all your servers, and only administrators should use it. After you create the agent 
conﬁguration ﬁle and copy it to Parameter Store, you should detach this role from the instance and use
CloudWatchAgentServerRole  instead.
To create the IAM role for an administrator to write to Parameter Store
1. Sign in to the AWS Management Console and open the IAM console at https:// 
console.aws.amazon.com/iam/.
2. In the navigation pane, choose Roles and then choose Create role.
3. Under Select type of trusted entity, choose AWS service.
4. Immediately under Choose the service that will use this role, choose EC2, and then choose Next: 
Permissions.
5. In the list of policies, select the check box next to CloudWatchAgentAdminPolicy. If necessary, use 
the search box to ﬁnd the policy.
875Amazon CloudWatch User Guide
Install the CloudWatch agent using Systems Manager
6. To use Systems Manager to install or conﬁgure the CloudWatch agent, select the box next to
AmazonSSMManagedInstanceCore. This AWS managed policy enables an instance to use Systems 
Manager service core functionality. If necessary, use the search box to ﬁnd the policy. This policy isn't 
necessary if you start and conﬁgure the agent only through the command line.
7. Choose Next: Tags.
8. (Optional) Add one or more tag-key value pairs to organize, track, or control access for this role, and 
then choose Next: Review.
9. For Role name, enter a name for your new role, such as CloudWatchAgentAdminRole  or another 
name that you prefer.
10. (Optional) For Role description, enter a description.
11. Conﬁrm that CloudWatchAgentAdminPolicy and optionally AmazonSSMManagedInstanceCore
appear next to Policies.
12. Choose Create role.
The role is now created.
Create IAM users to use with the CloudWatch agent on on-premises servers
The ﬁrst procedure creates the IAM user that you need to run the CloudWatch agent. This user provides 
permissions to send data to CloudWatch.
The second procedure creates the IAM user that you can use when creating the CloudWatch agent 
conﬁguration ﬁle. Use this procedure to store this ﬁle in Systems Manager Parameter Store so that 
other servers can use it. This user provides permissions to write to Parameter Store, in addition to the 
permissions to write data to CloudWatch.
Note
Parameter Store supports parameters in Standard and Advanced tiers. These parameter tiers are 
not related to the Basic, Standard, and Advanced levels of details available with the CloudWatch 
Agent predeﬁned metric sets.
To create the IAM user necessary for the CloudWatch agent to write data to CloudWatch
1. Sign in to the AWS Management Console and open the IAM console at https:// 
console.aws.amazon.com/iam/.
2. In the navigation pane, choose Users , and then choose Add user .
3. Enter the user name for the new user.
4. For Access type, select Programmatic access, and then choose Next: Permissions.
5. For Set permissions , choose Attach existing policies directly.
6. In the list of policies, select the check box next to CloudWatchAgentServerPolicy. If necessary, use 
the search box to ﬁnd the policy.
7. To use Systems Manager to install or conﬁgure the CloudWatch agent, select the box next to
AmazonSSMManagedInstanceCore. This AWS managed policy enables an instance to use Systems 
Manager service core functionality. (If necessary, use the search box to ﬁnd the policy. This policy 
isn't necessary if you start and conﬁgure the agent only through the command line.)
8. Choose Next: Tags.
9. (Optional) Add one or more tag-key value pairs to organize, track, or control access for this role, and 
then choose Next: Review.
10. Conﬁrm that the correct policies are listed, and then choose Create user .
11. In the row for the new user, choose Show. Copy the access key and secret key to a ﬁle so that you 
can use them when installing the agent. Choose Close.
876Amazon CloudWatch User Guide
Install the CloudWatch agent using Systems Manager
The following procedure creates the IAM user that can also write to Parameter Store. If you're going to 
store the agent conﬁguration ﬁle in Parameter Store so that other servers can use it, you need to use this 
IAM user. This IAM user provides permissions for writing to Parameter Store. This user also provides the 
permissions for reading information from the instance and writing it to CloudWatch. The permissions for 
writing to Systems Manager Parameter Store provide broad access. This IAM user shouldn't be attached 
to all your servers, and only administrators should use it. You should use this IAM user only when you are 
storing the agent conﬁguration ﬁle in Parameter Store.
To create the IAM user necessary to store the conﬁguration ﬁle in Parameter Store and send 
information to CloudWatch
1. Sign in to the AWS Management Console and open the IAM console at https:// 
console.aws.amazon.com/iam/.
2. In the navigation pane, choose Users , and then choose Add user .
3. Enter the user name for the new user.
4. For Access type, select Programmatic access, and then choose Next: Permissions.
5. For Set permissions , choose Attach existing policies directly.
6. In the list of policies, select the check box next to CloudWatchAgentAdminPolicy. If necessary, use 
the search box to ﬁnd the policy.
7. To use Systems Manager to install or conﬁgure the CloudWatch agent, select the check box next to
AmazonSSMManagedInstanceCore. This AWS managed policy enables an instance to use Systems 
Manager service core functionality. (If necessary, use the search box to ﬁnd the policy. This policy 
isn't necessary if you start and conﬁgure the agent only through the command line.)
8. Choose Next: Tags.
9. (Optional) Add one or more tag-key value pairs to organize, track, or control access for this role, and 
then choose Next: Review.
10. Conﬁrm that the correct policies are listed, and then choose Create user .
11. In the row for the new user, choose Show. Copy the access key and secret key to a ﬁle so that you 
can use them when installing the agent. Choose Close.
Download and conﬁgure the CloudWatch agent
This section explains how to use Systems Manager to download the agent and then how to create your 
agent conﬁguration ﬁle. Before you can use Systems Manager to download the agent, you must make 
sure that the instance is conﬁgured correctly for Systems Manager.
Installing or updating SSM Agent
On an Amazon EC2 instance, the CloudWatch agent requires that the instance is running version 2.2.93.0 
or later. Before you install the CloudWatch agent, update or install SSM Agent on the instance if you 
haven't already done so.
For information about installing or updating SSM Agent on an instance running Linux, see  Installing and 
Conﬁguring SSM Agent on Linux Instances in the AWS Systems Manager User Guide.
For information about installing or updating the SSM Agent, see Working with SSM Agent in the AWS 
Systems Manager User Guide.
(Optional) Verify Systems Manager prerequisites
Before you use Systems Manager Run Command to install and conﬁgure the CloudWatch agent, verify 
that your instances meet the minimum Systems Manager requirements. For more information, see
Systems Manager Prerequisites in the AWS Systems Manager User Guide.
877Amazon CloudWatch User Guide
Install the CloudWatch agent using Systems Manager
Verify internet access
Your Amazon EC2 instances must have outbound internet access to send data to CloudWatch or 
CloudWatch Logs. For more information about how to conﬁgure internet access, see Internet Gateways in 
the Amazon VPC User Guide .
The endpoints and ports to conﬁgure on your proxy are as follows:
•If you're using the agent to collect metrics, you must allow list the CloudWatch endpoints for the 
appropriate Regions. These endpoints are listed in Amazon CloudWatch in the Amazon Web Services 
General Reference.
•If you're using the agent to collect logs, you must allow list the CloudWatch Logs endpoints for the 
appropriate Regions. These endpoints are listed in Amazon CloudWatch Logs in the Amazon Web 
Services General Reference.
•If you're using Systems Manager to install the agent or Parameter Store to store your conﬁguration 
ﬁle, you must allow list the Systems Manager endpoints for the appropriate Regions. These endpoints 
are listed in AWS Systems Manager in the Amazon Web Services General Reference.
Use the following steps to download the CloudWatch agent package using Systems Manager.
To download the CloudWatch agent using Systems Manager
1. Open the Systems Manager console at https://console.aws.amazon.com/systems-manager/.
2. In the navigation pane, choose Run Command .
-or-
If the AWS Systems Manager home page opens, scroll down and choose Explore Run Command.
3. Choose Run command.
4. In the Command document  list, choose AWS-ConﬁgureAWSPackage.
5. In the Targets area, choose the instance to install the CloudWatch agent on. If you don't see a 
speciﬁc instance, it might not be conﬁgured as a managed instance for use with Systems Manager. 
For more information, see Setting Up AWS Systems Manager for Hybrid Environments in the AWS 
Systems Manager User Guide.
6. In the Action list, choose Install .
7. In the Name  ﬁeld, enter AmazonCloudWatchAgent .
8. Keep Version set to latest  to install the latest version of the agent.
9. Choose Run.
10. Optionally, in the Targets and outputs areas, select the button next to an instance name and choose
View output . Systems Manager should show that the agent was successfully installed.
Create and modify the agent conﬁguration ﬁle
After you have downloaded the CloudWatch agent, you must create the conﬁguration ﬁle before you 
start the agent on any servers.
If you're going to save your agent conﬁguration ﬁle in the Systems Manager Parameter Store, you must 
use an EC2 instance to save to the Parameter Store. Additionally, you must ﬁrst attach to that instance 
the CloudWatchAgentAdminRole  IAM role. For more information about attaching roles, see Attaching 
an IAM Role to an Instance in the Amazon EC2 User Guide for Windows Instances.
For more information about creating the CloudWatch agent conﬁguration ﬁle, see Create the 
CloudWatch agent conﬁguration ﬁle (p. 897).
878Amazon CloudWatch User Guide
Install the CloudWatch agent using Systems Manager
Installing the CloudWatch agent on EC2 instances using your 
agent conﬁguration
After you have a CloudWatch agent conﬁguration saved in Parameter Store, you can use it when you 
install the agent on other servers.
Topics
•Attach an IAM role to the instance (p. 879)
•Download the CloudWatch agent package on an Amazon EC2 instance (p. 879)
•(Optional) Modify the common conﬁguration and named proﬁle for CloudWatch agent (p. 880)
•Start the CloudWatch agent (p. 881)
Attach an IAM role to the instance
You must attach the CloudWatchAgentServerRole IAM role to the EC2 instance to be able to run the 
CloudWatch agent on the instance. This role enables the CloudWatch agent to perform actions on the 
instance. You should have created this role previously. For more information see Create IAM roles and 
users for use with CloudWatch agent (p. 864).
For more information, see Attaching an IAM Role to an Instance in the Amazon EC2 User Guide for 
Windows Instances .
Download the CloudWatch agent package on an Amazon EC2 instance
You need to install the agent on each server where you will run the agent. The CloudWatch agent is 
available as a package in Amazon Linux 2. If you are using this operating system, you can install the 
package by entering the following command. You must also make sure that the IAM role attached to the 
instance has the CloudWatchAgentServerPolicy attached. For more information, see  Create IAM roles to 
use with the CloudWatch agent on Amazon EC2 instances (p. 874).
sudo yum install amazon-cloudwatch-agent
On all supported operating systems, you can download the CloudWatch agent package using either 
Systems Manager Run Command or an Amazon S3 download link. For information about using an 
Amazon S3 download link, see Download the CloudWatch agent package (p. 859).
Note
When you install or update the CloudWatch agent, only the Uninstall and reinstall  option is 
supported. You can't use the In-place update option.
Download the CloudWatch agent on an Amazon EC2 instance Using Systems Manager
Before you can use Systems Manager to install the CloudWatch agent, you must make sure that the 
instance is conﬁgured correctly for Systems Manager.
Installing or updating SSM Agent
On an Amazon EC2 instance, the CloudWatch agent requires that the instance is running version 2.2.93.0 
or later. Before you install the CloudWatch agent, update or install SSM Agent on the instance if you 
haven't already done so.
For information about installing or updating SSM Agent on an instance running Linux, see Installing and 
Conﬁguring the SSM Agent on Linux Instances in the AWS Systems Manager User Guide.
For information about installing or updating SSM Agent on an instance running Windows Server, see 
Installing and Conﬁguring SSM Agent on Windows Instances in the AWS Systems Manager User Guide.
879Amazon CloudWatch User Guide
Install the CloudWatch agent using Systems Manager
(Optional) Verify Systems Manager prerequisites
Before you use Systems Manager Run Command to install and conﬁgure the CloudWatch agent, verify 
that your instances meet the minimum Systems Manager requirements. For more information, see
Setting Up AWS Systems Manager in the AWS Systems Manager User Guide.
Verify internet access
Your Amazon EC2 instances must have outbound internet access in order to send data to CloudWatch or 
CloudWatch Logs. For more information about how to conﬁgure internet access, see Internet Gateways in 
the Amazon VPC User Guide .
Download the CloudWatch agent package
Systems Manager Run Command enables you to manage the conﬁguration of your instances. You specify 
a Systems Manager document, specify parameters, and execute the command on one or more instances. 
SSM Agent on the instance processes the command and conﬁgures the instance as speciﬁed.
To download the CloudWatch agent using Run Command
1. Open the Systems Manager console at https://console.aws.amazon.com/systems-manager/.
2. In the navigation pane, choose Run Command .
-or-
If the AWS Systems Manager home page opens, scroll down and choose Explore Run Command.
3. Choose Run command.
4. In the Command document  list, choose AWS-ConﬁgureAWSPackage.
5. In the Targets area, choose the instance on which to install the CloudWatch agent. If you do not see 
a speciﬁc instance, it might not be conﬁgured for Run Command. For more information, see Setting 
Up AWS Systems Manager for Hybrid Environments in the AWS Systems Manager User Guide.
6. In the Action list, choose Install .
7. In the Name  box, enter AmazonCloudWatchAgent .
8. Keep Version set to latest  to install the latest version of the agent.
9. Choose Run.
10. Optionally, in the Targets and outputs areas, select the button next to an instance name and choose
View output . Systems Manager should show that the agent was successfully installed.
(Optional) Modify the common conﬁguration and named proﬁle for CloudWatch 
agent
The CloudWatch agent includes a conﬁguration ﬁle called common-config.toml . You can use this ﬁle 
to optionally specify proxy and Region information.
On a server running Linux, this ﬁle is in the /opt/aws/amazon-cloudwatch-agent/etc
directory. On a server running Windows Server, this ﬁle is in the C:\ProgramData\Amazon
\AmazonCloudWatchAgent  directory.
The default common-config.toml  is as follows:
# This common-config is used to configure items used for both ssm and cloudwatch access 
  
  
880Amazon CloudWatch User Guide
Install the CloudWatch agent using Systems Manager
## Configuration for shared credential.
## Default credential strategy will be used if it is absent here:
##            Instance role is used for EC2 case by default.
##            AmazonCloudWatchAgent profile is used for onPremise case by default.
# [credentials]
#    shared_credential_profile = "{profile_name}"
#    shared_credential_file= "{file_name}" 
  
## Configuration for proxy.
## System-wide environment-variable will be read if it is absent here.
## i.e. HTTP_PROXY/http_proxy; HTTPS_PROXY/https_proxy; NO_PROXY/no_proxy
## Note: system-wide environment-variable is not accessible when using ssm run-command.
## Absent in both here and environment-variable means no proxy will be used.
# [proxy]
#    http_proxy = "{http_url}"
#    https_proxy = "{https_url}"
#    no_proxy = "{domain}"
All lines are commented out initially. To set the credential proﬁle or proxy settings, remove the # from 
that line and specify a value. You can edit this ﬁle manually, or by using the RunShellScript  Run 
Command in Systems Manager:
•shared_credential_profile  – For on-premises servers, this line speciﬁes the IAM user 
credential proﬁle to use to send data to CloudWatch. If you keep this line commented out,
AmazonCloudWatchAgent  is used.
On an EC2 instance, you can use this line to have the CloudWatch agent send data from this instance 
to CloudWatch in a diﬀerent AWS Region. To do so, specify a named proﬁle that includes a region
ﬁeld specifying the name of the Region to send to.
If you specify a shared_credential_profile , you must also remove the # from the beginning of 
the [credentials]  line.
•shared_credential_file  – To have the agent look for credentials in a ﬁle located in a path other 
than the default path, specify that complete path and ﬁle name here. The default path is /root/.aws
on Linux and is C:\\Users\\Administrator\\.aws  on Windows Server.
The ﬁrst example below shows the syntax of a valid shared_credential_file  line for Linux 
servers, and the second example is valid for Windows Server. On Windows Server, you must escape the 
\ characters.
shared_credential_file= "/usr/ username /credentials"
shared_credential_file= "C:\\Documents and Settings\\ username \\.aws\\credentials"
If you specify a shared_credential_file , you must also remove the # from the beginning of the
[credentials]  line.
•Proxy settings – If your servers use HTTP or HTTPS proxies to contact AWS services, specify those 
proxies in the http_proxy  and https_proxy  ﬁelds. If there are URLs that should be excluded from 
proxying, specify them in the no_proxy  ﬁeld, separated by commas.
Start the CloudWatch agent
You can start the agent using Systems Manager Run Command or the command line.
Start the CloudWatch agent using Systems Manager Run Command
Follow these steps to start the agent using Systems Manager Run Command.
881Amazon CloudWatch User Guide
Install the CloudWatch agent using Systems Manager
To start the CloudWatch agent using Run Command
1. Open the Systems Manager console at https://console.aws.amazon.com/systems-manager/.
2. In the navigation pane, choose Run Command .
-or-
If the AWS Systems Manager home page opens, scroll down and choose Explore Run Command.
3. Choose Run command.
4. In the Command document  list, choose AmazonCloudWatch-ManageAgent.
5. In the Targets area, choose the instance where you installed the CloudWatch agent.
6. In the Action list, choose conﬁgure.
7. In the Optional Conﬁguration Source list, choose ssm.
8. In the Optional Conﬁguration Location  box, enter the name of the agent conﬁguration ﬁle that 
you created and saved to Systems Manager Parameter Store, as explained in Create the CloudWatch 
agent conﬁguration ﬁle (p. 897).
9. In the Optional Restart list, choose yes to start the agent after you have ﬁnished these steps.
10. Choose Run.
11. Optionally, in the Targets and outputs areas, select the button next to an instance name and choose
View output . Systems Manager should show that the agent was successfully started.
Start the CloudWatch agent on an Amazon EC2 instance using the command line
Follow these steps to use the command line to install the CloudWatch agent on an Amazon EC2 instance.
To use the command line to start the CloudWatch agent on an Amazon EC2 instance
• In this command, -a fetch-config  causes the agent to load the latest version of the CloudWatch 
agent conﬁguration ﬁle, and -s starts the agent.
Linux and macOS: If you saved the conﬁguration ﬁle in the Systems Manager Parameter Store, enter 
the following:
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -
m ec2 -s -c ssm: configuration-parameter-store-name
Linux and macOS: If you saved the conﬁguration ﬁle on the local computer, enter the following 
command. Replace configuration-file-path  with the path to the agent conﬁguration ﬁle. 
This ﬁle is called config.json  if you created it with the wizard, and might be called amazon-
cloudwatch-agent.json  if you created it manually.
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -
m ec2 -s -c file: configuration-file-path
Windows Server: If you saved the agent conﬁguration ﬁle in Systems Manager Parameter Store, 
enter the following from the PowerShell console:
& "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a 
 fetch-config -m ec2 -s -c ssm: configuration-parameter-store-name
Windows Server: If you saved the agent conﬁguration ﬁle on the local computer, enter the following 
from the PowerShell console:
882Amazon CloudWatch User Guide
Install the CloudWatch agent using Systems Manager
& "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" 
 -a fetch-config -m ec2 -s -c file:"C:\Program Files\Amazon\AmazonCloudWatchAgent
\config.json"
Installing the CloudWatch agent on on-premises servers
If you have downloaded the CloudWatch agent on one computer and created the agent conﬁguration ﬁle 
you want, you can use that conﬁguration ﬁle to install the agent on other on-premises servers.
Download the CloudWatch agent on an on-premises server
You can download the CloudWatch agent package using either Systems Manager Run Command or an 
Amazon S3 download link. For information about using an Amazon S3 download link, see Download the 
CloudWatch agent package (p. 859).
Download using Systems Manager
To use Systems Manager Run Command, you must register your on-premises server with Amazon EC2 
Systems Manager. For more information, see  Setting Up Systems Manager in Hybrid Environments in the
AWS Systems Manager User Guide.
If you have already registered your server, update SSM Agent to the latest version.
For information about updating SSM Agent on a server running Linux, see Install SSM Agent for a Hybrid 
Environment (Linux) in the AWS Systems Manager User Guide.
For information about updating the SSM Agent on a server running Windows Server, see  Install SSM 
Agent for a Hybrid Environment (Windows) in the AWS Systems Manager User Guide.
To use the SSM Agent to download the CloudWatch agent package on an on-premises server
1. Open the Systems Manager console at https://console.aws.amazon.com/systems-manager/.
2. In the navigation pane, choose Run Command .
-or-
If the AWS Systems Manager home page opens, scroll down and choose Explore Run Command.
3. Choose Run command.
4. In the Command document  list, select the button next to AWS-ConﬁgureAWSPackage.
5. In the Targets area, select the server to install the CloudWatch agent on. If you don't see a speciﬁc 
server, it might not be conﬁgured for Run Command. For more information, see Setting Up AWS 
Systems Manager for Hybrid Environments in the AWS Systems Manager User Guide.
6. In the Action list, choose Install .
7. In the Name  box, enter AmazonCloudWatchAgent .
8. Keep Version blank to install the latest version of the agent.
9. Choose Run.
The agent package is downloaded, and the next steps are to conﬁgure and start it.
(Installing on an on-premises server) Specify IAM credentials and AWS Region
To enable the CloudWatch agent to send data from an on-premises server, you must specify the access 
key and secret key of the IAM user that you created earlier. For more information about creating this 
user, see Create IAM roles and users for use with the CloudWatch agent (p. 874).
883Amazon CloudWatch User Guide
Install the CloudWatch agent using Systems Manager
You also must specify the AWS Region to send the metrics to, using the region  ﬁeld.
Following is an example of this ﬁle.
[AmazonCloudWatchAgent]
aws_access_key_id= my_access_key
aws_secret_access_key= my_secret_key
region = us-west-1
For my_access_key  and my_secret_key , use the keys from the IAM user that doesn't have the 
permissions to write to Systems Manager Parameter Store. For more information about the IAM users 
needed for CloudWatch agent, see Create IAM users to use with the CloudWatch agent on on-premises 
servers (p. 876).
If you name this proﬁle AmazonCloudWatchAgent , you don't need to do anything more. Optionally, 
you can give it a diﬀerent name and specify that name as the value for shared_credential_profile
in the common-config.toml  ﬁle, which is explained in the following section.
Following is an example of using the aws conﬁgure command to create a named proﬁle for 
the CloudWatch agent. This example assumes that you're using the default proﬁle name of
AmazonCloudWatchAgent .
To create the AmazonCloudWatchAgent proﬁle for the CloudWatch agent
1. If you haven't already done so, install the AWS Command Line Interface on the server. For more 
information, see  Installing the AWS CLI.
2. On Linux servers, enter the following command and follow the prompts:
sudo aws configure --profile AmazonCloudWatchAgent
On Windows Server, open PowerShell as an administrator, enter the following command, and follow 
the prompts.
aws configure --profile AmazonCloudWatchAgent
(Optional) Modifying the common conﬁguration and named proﬁle for 
CloudWatch agent
The CloudWatch agent includes a conﬁguration ﬁle called common-config.toml . You can optionally 
use this ﬁle to specify proxy and Region information.
On a server running Linux, this ﬁle is in the /opt/aws/amazon-cloudwatch-agent/etc
directory. On a server running Windows Server, this ﬁle is in the C:\ProgramData\Amazon
\AmazonCloudWatchAgent  directory.
The default common-config.toml  is as follows:
# This common-config is used to configure items used for both ssm and cloudwatch access 
  
  
## Configuration for shared credential.
## Default credential strategy will be used if it is absent here:
##            Instance role is used for EC2 case by default.
##            AmazonCloudWatchAgent profile is used for onPremise case by default.
# [credentials]
#    shared_credential_profile = "{profile_name}"
#    shared_credential_file= "{file_name}" 
884Amazon CloudWatch User Guide
Install the CloudWatch agent using Systems Manager
 
## Configuration for proxy.
## System-wide environment-variable will be read if it is absent here.
## i.e. HTTP_PROXY/http_proxy; HTTPS_PROXY/https_proxy; NO_PROXY/no_proxy
## Note: system-wide environment-variable is not accessible when using ssm run-command.
## Absent in both here and environment-variable means no proxy will be used.
# [proxy]
#    http_proxy = "{http_url}"
#    https_proxy = "{https_url}"
#    no_proxy = "{domain}"
All lines are commented out initially. To set the credential proﬁle or proxy settings, remove the # from 
that line and specify a value. You can edit this ﬁle manually, or by using the RunShellScript  Run 
Command in Systems Manager:
•shared_credential_profile  – For on-premises servers, this line speciﬁes the IAM user 
credential proﬁle to use to send data to CloudWatch. If you keep this line commented out,
AmazonCloudWatchAgent  is used. For more information about creating this proﬁle, see (Installing on 
an on-premises server) Specify IAM credentials and AWS Region (p. 883).
On an EC2 instance, you can use this line to have the CloudWatch agent send data from this instance 
to CloudWatch in a diﬀerent AWS Region. To do so, specify a named proﬁle that includes a region
ﬁeld specifying the name of the Region to send to.
If you specify a shared_credential_profile , you must also remove the # from the beginning of 
the [credentials]  line.
•shared_credential_file  – To have the agent look for credentials in a ﬁle located in a path other 
than the default path, specify that complete path and ﬁle name here. The default path is /root/.aws
on Linux and is C:\\Users\\Administrator\\.aws  on Windows Server.
The ﬁrst example below shows the syntax of a valid shared_credential_file  line for Linux 
servers, and the second example is valid for Windows Server. On Windows Server, you must escape the 
\ characters.
shared_credential_file= "/usr/ username /credentials"
shared_credential_file= "C:\\Documents and Settings\\ username \\.aws\\credentials"
If you specify a shared_credential_file , you must also remove the # from the beginning of the
[credentials]  line.
•Proxy settings – If your servers use HTTP or HTTPS proxies to contact AWS services, specify those 
proxies in the http_proxy  and https_proxy  ﬁelds. If there are URLs that should be excluded from 
proxying, specify them in the no_proxy  ﬁeld, separated by commas.
Starting the CloudWatch agent
You can start the CloudWatch agent using either Systems Manager Run Command or the command line.
To use SSM Agent to start the CloudWatch agent on an on-premises server
1. Open the Systems Manager console at https://console.aws.amazon.com/systems-manager/.
2. In the navigation pane, choose Run Command .
-or-
If the AWS Systems Manager home page opens, scroll down and choose Explore Run Command.
885Amazon CloudWatch User Guide
Installing the CloudWatch agent on new 
instances using AWS CloudFormation
3. Choose Run command.
4. In the Command document  list, select the button next to AmazonCloudWatch-ManageAgent.
5. In the Targets area, select the instance where you installed the agent.
6. In the Action list, choose conﬁgure.
7. In the Mode  list, choose onPremise .
8. In the Optional Conﬁguration Location  box, enter the name of the agent conﬁguration ﬁle that you 
created with the wizard and stored in the Parameter Store.
9. Choose Run.
The agent starts with the conﬁguration you speciﬁed in the conﬁguration ﬁle.
To use the command line to start the CloudWatch agent on an on-premises server
• In this command, -a fetch-config  causes the agent to load the latest version of the CloudWatch 
agent conﬁguration ﬁle, and -s starts the agent.
Linux: If you saved the conﬁguration ﬁle in the Systems Manager Parameter Store, enter the 
following:
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -
m onPremise -s -c ssm: configuration-parameter-store-name
Linux: If you saved the conﬁguration ﬁle on the local computer, enter the following command. 
Replace configuration-file-path  with the path to the agent conﬁguration ﬁle. This ﬁle is 
called config.json  if you created it with the wizard, and might be called amazon-cloudwatch-
agent.json  if you created it manually.
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -
m onPremise -s -c file: configuration-file-path
Windows Server: If you saved the agent conﬁguration ﬁle in Systems Manager Parameter Store, 
enter the following from the PowerShell console:
& "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a 
 fetch-config -m onPremise -s -c ssm: configuration-parameter-store-name
Windows Server: If you saved the agent conﬁguration ﬁle on the local computer, enter the following 
from the PowerShell console. Replace configuration-file-path  with the path to the agent 
conﬁguration ﬁle. This ﬁle is called config.json  if you created it with the wizard, and might be 
called amazon-cloudwatch-agent.json  if you created it manually.
& "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a 
 fetch-config -m onPremise -s -c file: configuration-file-path
Installing the CloudWatch agent on new instances 
using AWS CloudFormation
Amazon has uploaded several AWS CloudFormation templates to GitHub to help you install and 
update the CloudWatch agent on new Amazon EC2 instances. For more information about using AWS 
CloudFormation, see  What is AWS CloudFormation?.
886Amazon CloudWatch User Guide
Installing the CloudWatch agent on new 
instances using AWS CloudFormation
The template location is  Deploy the Amazon CloudWatch agent to EC2 instances using AWS 
CloudFormation. This location includes both inline  and ssm directories. Each of these directories 
contains templates for both Linux and Windows instances.
•The templates in the inline directory have the CloudWatch agent conﬁguration embedded 
into the AWS CloudFormation template. By default, the Linux templates collect the metrics
mem_used_percent  and swap_used_percent , and the Windows templates collect Memory % 
Committed Bytes In Use  and Paging File % Usage .
To modify these templates to collect diﬀerent metrics, modify the following section of the template. 
The following example is from the template for Linux servers. Follow the format and syntax of the 
agent conﬁguration ﬁle to make these changes. For more information, see  Manually create or edit the 
CloudWatch agent conﬁguration ﬁle (p. 903).
{ 
   "metrics":{ 
      "append_dimensions":{ 
         "AutoScalingGroupName":"${!aws:AutoScalingGroupName}", 
         "ImageId":"${!aws:ImageId}", 
         "InstanceId":"${!aws:InstanceId}", 
         "InstanceType":"${!aws:InstanceType}" 
      }, 
      "metrics_collected":{ 
         "mem":{ 
            "measurement":[ 
               "mem_used_percent" 
            ] 
         }, 
         "swap":{ 
            "measurement":[ 
               "swap_used_percent" 
            ] 
         } 
      } 
   }
}
Note
In the inline templates, all placeholder variables must have an exclamation mark (!) before 
them as an escape character. You can see this in the example template. If you add other 
placeholder variables, be sure to add an exclamation mark before the name.
•The templates in the ssm directory load an agent conﬁguration ﬁle from Parameter Store. To use 
these templates, you must ﬁrst create a conﬁguration ﬁle and upload it to Parameter Store. You 
then provide the Parameter Store name of the ﬁle in the template. You can create the conﬁguration 
ﬁle manually or by using the wizard. For more information, see Create the CloudWatch agent 
conﬁguration ﬁle (p. 897).
You can use both types of templates for installing the CloudWatch agent and for updating the agent 
conﬁguration.
Tutorial: Install and conﬁgure the CloudWatch agent using an 
AWS CloudFormation inline template
This tutorial walks you through using AWS CloudFormation to install the CloudWatch agent on a new 
Amazon EC2 instance. This tutorial installs on a new instance running Amazon Linux 2 using the inline 
templates, which don't require the use of the JSON conﬁguration ﬁle or Parameter Store. The inline 
887Amazon CloudWatch User Guide
Installing the CloudWatch agent on new 
instances using AWS CloudFormation
template includes the agent conﬁguration in the template. In this tutorial, you use the default agent 
conﬁguration contained in the template.
After the procedure for installing the agent, the tutorial continues with how to update the agent.
To use AWS CloudFormation to install the CloudWatch agent on a new instance
1. Download the template from GitHub. In this tutorial, download the inline template for Amazon 
Linux 2 as follows:
curl -O https://raw.githubusercontent.com/awslabs/aws-cloudformation-templates/master/
aws/solutions/AmazonCloudWatchAgent/inline/amazon_linux.template
2. Open the AWS CloudFormation console at https://console.aws.amazon.com/cloudformation.
3. Choose Create stack .
4. For Choose a template , select Upload a template to Amazon S3, choose the downloaded template, 
and choose Next.
5. On the Specify Details page, ﬁll out the following parameters and choose Next:
•Stack name : Choose a stack name for your AWS CloudFormation stack.
•IAMRole: Choose an IAM role that has permissions to write CloudWatch metrics and logs. For 
more information, see Create IAM roles to use with the CloudWatch agent on Amazon EC2 
instances (p. 864).
•InstanceAMI: Choose an AMI that is valid in the Region where you're going to launch your stack.
•InstanceType: Choose a valid instance type.
•KeyName: To enable SSH access to the new instance, choose an existing Amazon EC2 key pair. 
If you don't already have an Amazon EC2 key pair, you can create one in the AWS Management 
Console. For more information, see Amazon EC2 Key Pairs in the Amazon EC2 User Guide for Linux 
Instances .
•SSHLocation: Speciﬁes the IP address range that can be used to connect to the instance using 
SSH. The default allows access from any IP address.
6. On the Options  page, you can choose to tag your stack resources. Choose Next.
7. On the Review page, review your information, acknowledge that the stack might create IAM 
resources, and then choose Create .
If you refresh the console, you see that the new stack has the CREATE_IN_PROGRESS  status.
8. When the instance is created, you can see it in the Amazon EC2 console. Optionally, you can connect 
to the host and check the progress.
Use the following command to conﬁrm that the agent is installed:
rpm -qa amazon-cloudwatch-agent
Use the following command to conﬁrm that the agent is running:
ps aux | grep amazon-cloudwatch-agent
The next procedure demonstrates using AWS CloudFormation to update the CloudWatch agent using an 
inline template. The default inline template collects the mem_used_percent  metric. In this tutorial, you 
change the agent conﬁguration to stop collecting that metric.
888Amazon CloudWatch User Guide
Installing the CloudWatch agent on new 
instances using AWS CloudFormation
To use AWS CloudFormation to update the CloudWatch agent
1. In the template that you downloaded in the previous procedure, remove the following lines and 
then save the template:
"mem": { 
                         
     "measurement": [ 
         "mem_used_percent" 
       ] 
 },
2. Open the AWS CloudFormation console at https://console.aws.amazon.com/cloudformation.
3. On the AWS CloudFormation dashboard, select the stack that you created and choose Update Stack .
4. For Select Template, select Upload a template to Amazon S3, choose the template that you 
modiﬁed, and choose Next.
5. On the Options  page, choose Next and then Next.
6. On the Review page, review your information and choose Update .
After some time, you see UPDATE_COMPLETE .
Tutorial: Install the CloudWatch agent using AWS 
CloudFormation and Parameter Store
This tutorial walks you through using AWS CloudFormation to install the CloudWatch agent on a new 
Amazon EC2 instance. This tutorial installs on a new instance running Amazon Linux 2 using an agent 
conﬁguration ﬁle that you create and save in Parameter Store.
After the procedure for installing the agent, the tutorial continues with how to update the agent.
To use AWS CloudFormation to install the CloudWatch agent on a new instance using a 
conﬁguration from Parameter Store
1. If you haven't done so already, download the CloudWatch agent package to one of your computers 
so that you can create the agent conﬁguration ﬁle. For more information and downloading the 
agent using Parameter Store, see Download and conﬁgure the CloudWatch agent (p. 877). 
For more information on downloading the package using the command line, see Download and 
conﬁgure the CloudWatch agent using the command line (p. 859).
2. Create the agent conﬁguration ﬁle and save it in Parameter Store. For more information, see Create 
the CloudWatch agent conﬁguration ﬁle (p. 897).
3. Download the template from GitHub as follows:
curl -O https://raw.githubusercontent.com/awslabs/aws-cloudformation-templates/master/
aws/solutions/AmazonCloudWatchAgent/ssm/amazon_linux.template
4. Open the AWS CloudFormation console at https://console.aws.amazon.com/cloudformation.
5. Choose Create stack .
6. For Choose a template , select Upload a template to Amazon S3, choose the template that you 
downloaded, and choose Next.
7. On the Specify Details page, ﬁll out the following parameters accordingly and choose Next:
•Stack name : Choose a stack name for your AWS CloudFormation stack.
889Amazon CloudWatch User Guide
Installing the CloudWatch agent on new 
instances using AWS CloudFormation
•IAMRole: Choose an IAM role that has permissions to write CloudWatch metrics and logs. For 
more information, see Create IAM roles to use with the CloudWatch agent on Amazon EC2 
instances (p. 874).
•InstanceAMI: Choose an AMI that is valid in the Region where you're going to launch your stack.
•InstanceType: Choose a valid instance type.
•KeyName: To enable SSH access to the new instance, choose an existing Amazon EC2 key pair. 
If you don't already have an Amazon EC2 key pair, you can create one in the AWS Management 
Console. For more information, see Amazon EC2 Key Pairs in the Amazon EC2 User Guide for Linux 
Instances .
•SSHLocation: Speciﬁes the IP address range that can be used to connect to the instance using 
SSH. The default allows access from any IP address.
•SSMKey: Speciﬁes the agent conﬁguration ﬁle that you created and saved in Parameter Store.
8. On the Options  page, you can choose to tag your stack resources. Choose Next.
9. On the Review page, review your information, acknowledge that the stack might create IAM 
resources, and then choose Create .
If you refresh the console, you see that the new stack has the CREATE_IN_PROGRESS  status.
10. When the instance is created, you can see it in the Amazon EC2 console. Optionally, you can connect 
to the host and check the progress.
Use the following command to conﬁrm that the agent is installed:
rpm -qa amazon-cloudwatch-agent
Use the following command to conﬁrm that the agent is running:
ps aux | grep amazon-cloudwatch-agent
The next procedure demonstrates using AWS CloudFormation to update the CloudWatch agent, using an 
agent conﬁguration that you saved in Parameter Store.
To use AWS CloudFormation to update the CloudWatch agent using a conﬁguration in 
Parameter Store
1. Change the agent conﬁguration ﬁle stored in Parameter Store to the new conﬁguration that you 
want.
2. In the AWS CloudFormation template that you downloaded in the the section called “Tutorial: Install 
the CloudWatch agent using AWS CloudFormation and Parameter Store” (p. 889) topic, change the 
version number. For example, you might change VERSION=1.0  to VERSION=2.0 .
3. Open the AWS CloudFormation console at https://console.aws.amazon.com/cloudformation.
4. On the AWS CloudFormation dashboard, select the stack that you created and choose Update Stack .
5. For Select Template, select Upload a template to Amazon S3, select the template that you just 
modiﬁed, and choose Next.
6. On the Options  page, choose Next and then Next.
7. On the Review page, review your information and choose Update .
After some time, you see UPDATE_COMPLETE .
890Amazon CloudWatch User Guide
Verifying the signature of the CloudWatch agent package
Troubleshooting installation of the CloudWatch agent with AWS 
CloudFormation
This section helps you troubleshoot issues with installing and updating the CloudWatch agent using AWS 
CloudFormation.
Detecting when an update fails
If you use AWS CloudFormation to update your CloudWatch agent conﬁguration, and use an invalid 
conﬁguration, the agent stops sending any metrics to CloudWatch. A quick way to check whether an 
agent conﬁguration update succeeded is to look at the cfn-init-cmd.log  ﬁle. On a Linux server, the 
ﬁle is located at /var/log/cfn-init-cmd.log . On a Windows instance, the ﬁle is located at C:\cfn
\log\cfn-init-cmd.log .
Metrics are missing
If you don't see metrics that you expect to see after installing or updating the agent, conﬁrm that the 
agent is conﬁgured to collect that metric. To do this, check the amazon-cloudwatch-agent.json  ﬁle 
to make sure that the metric is listed, and check that you are looking in the correct metric namespace. 
For more information, see CloudWatch agent ﬁles and locations (p. 981).
Verifying the signature of the CloudWatch agent 
package
GPG signature ﬁles are included for CloudWatch agent packages on Linux servers. You can use a public 
key to verify that the agent download ﬁle is original and unmodiﬁed.
For Windows Server, you can use the MSI to verify the signature.
For macOS computers, the signature is included in the agent download package.
To ﬁnd the correct signature ﬁle, see the following table. For each architecture and operating system 
there is a general link as well as links for each Region. For example, for Amazon Linux and Amazon Linux 
2 and the x86-64 architecture, three of the valid links are:
•https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/
amazon-cloudwatch-agent.rpm.sig
•https://s3.us-east-1.amazonaws.com/amazoncloudwatch-agent-us-east-1/
amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm.sig
•https://s3.eu-central-1.amazonaws.com/amazoncloudwatch-agent-eu-central-1/
amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm.sig
Note
To download the CloudWatch agent, your connection must use TLS 1.2 or later.
Architecture Platform Download link Signature ﬁle link
x86-64 Amazon Linux 
and Amazon 
Linux 2https://s3.amazonaws.com/
amazoncloudwatch-agent/
amazon_linux/amd64/latest/
amazon-cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/https://s3.amazonaws.com/
amazoncloudwatch-agent/
amazon_linux/amd64/
latest/amazon-cloudwatch-
agent.rpm.sig
891Amazon CloudWatch User Guide
Verifying the signature of the CloudWatch agent package
ArchitecturePlatformDownload linkSignature ﬁle link
amazoncloudwatch-
agent-region/amazon_linux/
amd64/latest/amazon-
cloudwatch-agent.rpmhttps://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/amazon_linux/
amd64/latest/amazon-
cloudwatch-agent.rpm.sig
x86-64 Centoshttps://s3.amazonaws.com/
amazoncloudwatch-agent/
centos/amd64/latest/amazon-
cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/centos/amd64/
latest/amazon-cloudwatch-
agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
centos/amd64/latest/amazon-
cloudwatch-agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/centos/amd64/
latest/amazon-cloudwatch-
agent.rpm.sig
x86-64Redhathttps://s3.amazonaws.com/
amazoncloudwatch-agent/
redhat/amd64/latest/amazon-
cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/redhat/amd64/
latest/amazon-cloudwatch-
agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
redhat/amd64/latest/amazon-
cloudwatch-agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/redhat/amd64/
latest/amazon-cloudwatch-
agent.rpm.sig
x86-64SUSEhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
suse/amd64/latest/amazon-
cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /suse/amd64/
latest/amazon-cloudwatch-
agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
suse/amd64/latest/amazon-
cloudwatch-agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /suse/amd64/
latest/amazon-cloudwatch-
agent.rpm.sig
x86-64 Debianhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
debian/amd64/latest/amazon-
cloudwatch-agent.deb
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /debian/amd64/
latest/amazon-cloudwatch-
agent.debhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
debian/amd64/latest/amazon-
cloudwatch-agent.deb.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /debian/amd64/
latest/amazon-cloudwatch-
agent.deb.sig
892Amazon CloudWatch User Guide
Verifying the signature of the CloudWatch agent package
ArchitecturePlatformDownload linkSignature ﬁle link
x86-64 Ubuntuhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
ubuntu/amd64/latest/amazon-
cloudwatch-agent.deb
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /ubuntu/amd64/
latest/amazon-cloudwatch-
agent.debhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
ubuntu/amd64/latest/amazon-
cloudwatch-agent.deb.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /ubuntu/amd64/
latest/amazon-cloudwatch-
agent.deb.sig
x86-64 Oraclehttps://s3.amazonaws.com/
amazoncloudwatch-agent/
oracle_linux/amd64/latest/
amazon-cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /oracle_linux/
amd64/latest/amazon-
cloudwatch-agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
oracle_linux/amd64/latest/
amazon-cloudwatch-
agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /oracle_linux/
amd64/latest/amazon-
cloudwatch-agent.rpm.sig
x86-64macOShttps://s3.amazonaws.com/
amazoncloudwatch-agent/
darwin/amd64/latest/amazon-
cloudwatch-agent.pkg
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/darwin/amd64/
latest/amazon-cloudwatch-
agent.pkghttps://s3.amazonaws.com/
amazoncloudwatch-agent/
darwin/amd64/latest/amazon-
cloudwatch-agent.pkg.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/darwin/amd64/
latest/amazon-cloudwatch-
agent.pkg.sig
x86-64Windowshttps://s3.amazonaws.com/
amazoncloudwatch-agent/
windows/amd64/latest/
amazon-cloudwatch-agent.msi
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/windows/
amd64/latest/amazon-
cloudwatch-agent.msihttps://s3.amazonaws.com/
amazoncloudwatch-agent/
windows/amd64/latest/
amazon-cloudwatch-
agent.msi.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/windows/
amd64/latest/amazon-
cloudwatch-agent.msi.sig
893Amazon CloudWatch User Guide
Verifying the signature of the CloudWatch agent package
ArchitecturePlatformDownload linkSignature ﬁle link
ARM64Amazon Linux 
2https://s3.amazonaws.com/
amazoncloudwatch-agent/
amazon_linux/arm64/latest/
amazon-cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/amazon_linux/
arm64/latest/amazon-
cloudwatch-agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
amazon_linux/arm64/
latest/amazon-cloudwatch-
agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/amazon_linux/
arm64/latest/amazon-
cloudwatch-agent.rpm.sig
ARM64Redhathttps://s3.amazonaws.com/
amazoncloudwatch-agent/
redhat/arm64/latest/amazon-
cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/redhat/arm64/
latest/amazon-cloudwatch-
agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
redhat/arm64/latest/amazon-
cloudwatch-agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region/redhat/arm64/
latest/amazon-cloudwatch-
agent.rpm.sig
ARM64 Ubuntuhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
ubuntu/arm64/latest/amazon-
cloudwatch-agent.deb
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /ubuntu/arm64/
latest/amazon-cloudwatch-
agent.debhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
ubuntu/arm64/latest/amazon-
cloudwatch-agent.deb.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /ubuntu/arm64/
latest/amazon-cloudwatch-
agent.deb.sig
ARM64SUSEhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
suse/arm64/latest/amazon-
cloudwatch-agent.rpm
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region /suse/arm64/
latest/amazon-cloudwatch-
agent.rpmhttps://s3.amazonaws.com/
amazoncloudwatch-agent/
suse/arm64/latest/amazon-
cloudwatch-agent.rpm.sig
https://
s3.region.amazonaws.com/
amazoncloudwatch-
agent-region suse/arm64/
latest/amazon-cloudwatch-
agent.rpm.sig
To verify the CloudWatch agent package on a Linux server
1. Download the public key.
894Amazon CloudWatch User Guide
Verifying the signature of the CloudWatch agent package
shell$ wget https://s3.amazonaws.com/amazoncloudwatch-agent/assets/amazon-cloudwatch-
agent.gpg
2. Import the public key into your keyring.
shell$  gpg --import amazon-cloudwatch-agent.gpg
gpg: key 3B789C72: public key "Amazon CloudWatch Agent" imported
gpg: Total number processed: 1
gpg: imported: 1 (RSA: 1)
Make a note of the key value, as you need it in the next step. In the preceding example, the key value 
is 3B789C72 .
3. Verify the ﬁngerprint by running the following command, replacing key-value  with the value from 
the preceding step:
shell$  gpg --fingerprint key-value
pub   2048R/3B789C72 2017-11-14 
      Key fingerprint = 9376 16F3 450B 7D80 6CBD  9725 D581 6730 3B78 9C72
uid                  Amazon CloudWatch Agent
The ﬁngerprint string should be equal to the following:
9376 16F3 450B 7D80 6CBD 9725 D581 6730 3B78 9C72
If the ﬁngerprint string doesn't match, don't install the agent. Contact Amazon Web Services.
After you have veriﬁed the ﬁngerprint, you can use it to verify the signature of the CloudWatch 
agent package.
4. Download the package signature ﬁle using wget. To determine the correct signature ﬁle, see the 
preceding table.
wget Signature File Link
5. To verify the signature, run gpg --verify.
shell$ gpg --verify signature-filename  agent-download-filename
gpg: Signature made Wed 29 Nov 2017 03:00:59 PM PST using RSA key ID 3B789C72
gpg: Good signature from "Amazon CloudWatch Agent"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 9376 16F3 450B 7D80 6CBD  9725 D581 6730 3B78 9C72
If the output includes the phrase BAD signature , check whether you performed the procedure 
correctly. If you continue to get this response, contact Amazon Web Services and avoid using the 
downloaded ﬁle.
Note the warning about trust. A key is trusted only if you or someone who you trust has signed it. 
This doesn't mean that the signature is invalid, only that you have not veriﬁed the public key.
To verify the CloudWatch agent package on a server running Windows Server
1. Download and install GnuPG for Windows from https://gnupg.org/download/. When installing, 
include the Shell Extension (GpgEx) option.
You can perform the remaining steps in Windows PowerShell.
895Amazon CloudWatch User Guide
Verifying the signature of the CloudWatch agent package
2. Download the public key.
PS> wget https://s3.amazonaws.com/amazoncloudwatch-agent/assets/amazon-cloudwatch-
agent.gpg -OutFile amazon-cloudwatch-agent.gpg
3. Import the public key into your keyring.
PS>  gpg --import amazon-cloudwatch-agent.gpg
gpg: key 3B789C72: public key "Amazon CloudWatch Agent" imported
gpg: Total number processed: 1
gpg: imported: 1 (RSA: 1)
Make a note of the key value because you need it in the next step. In the preceding example, the key 
value is 3B789C72 .
4. Verify the ﬁngerprint by running the following command, replacing key-value  with the value from 
the preceding step:
PS>  gpg --fingerprint key-value
pub   rsa2048 2017-11-14 [SC] 
      9376 16F3 450B 7D80 6CBD  9725 D581 6730 3B78 9C72
uid           [ unknown] Amazon CloudWatch Agent
The ﬁngerprint string should be equal to the following:
9376 16F3 450B 7D80 6CBD 9725 D581 6730 3B78 9C72
If the ﬁngerprint string doesn't match, don't install the agent. Contact Amazon Web Services.
After you have veriﬁed the ﬁngerprint, you can use it to verify the signature of the CloudWatch 
agent package.
5. Download the package signature ﬁle using wget. To determine the correct signature ﬁle, see
CloudWatch Agent Download Links (p. 860).
6. To verify the signature, run gpg --verify.
PS> gpg --verify sig-filename  agent-download-filename
gpg: Signature made 11/29/17 23:00:45 Coordinated Universal Time
gpg:                using RSA key D58167303B789C72
gpg: Good signature from "Amazon CloudWatch Agent" [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 9376 16F3 450B 7D80 6CBD  9725 D581 6730 3B78 9C72
If the output includes the phrase BAD signature , check whether you performed the procedure 
correctly. If you continue to get this response, contact Amazon Web Services and avoid using the 
downloaded ﬁle.
Note the warning about trust. A key is trusted only if you or someone who you trust has signed it. 
This doesn't mean that the signature is invalid, only that you have not veriﬁed the public key.
To verify the CloudWatch agent package on a macOS computer
• There are two methods for signature veriﬁcation on macOS.
• Verify the ﬁngerprint by running the following command.
pkgutil --check-signature amazon-cloudwatch-agent.pkg
896Amazon CloudWatch User Guide
Create the CloudWatch agent conﬁguration ﬁle
You should see a result similar to the following.
Package "amazon-cloudwatch-agent.pkg": 
        Status: signed by a developer certificate issued by Apple for distribution 
        Signed with a trusted timestamp on: 2020-10-02 18:13:24 +0000 
        Certificate Chain: 
        1. Developer ID Installer: AMZN Mobile LLC (94KV3E626L) 
        Expires: 2024-10-18 22:31:30 +0000 
        SHA256 Fingerprint: 
        81 B4 6F AF 1C CA E1 E8 3C 6F FB 9E 52 5E 84 02 6E 7F 17 21 8E FB 
        0C 40 79 13 66 8D 9F 1F 10 1C 
        ------------------------------------------------------------------------ 
        2. Developer ID Certification Authority 
        Expires: 2027-02-01 22:12:15 +0000 
        SHA256 Fingerprint: 
        7A FC 9D 01 A6 2F 03 A2 DE 96 37 93 6D 4A FE 68 09 0D 2D E1 8D 03 
        F2 9C 88 CF B0 B1 BA 63 58 7F 
        ------------------------------------------------------------------------ 
        3. Apple Root CA 
        Expires: 2035-02-09 21:40:36 +0000 
        SHA256 Fingerprint: 
        B0 B1 73 0E CB C7 FF 45 05 14 2C 49 F1 29 5E 6E DA 6B CA ED 7E 2C 
        68 C5 BE 91 B5 A1 10 01 F0 24
• Or, download and use the .sig ﬁle To use this method, follow these steps.
• Install the GPG application to your macOS host by entering the following command.
brew install GnuPG
• Download the package signature ﬁle using curl. To determine the correct signature ﬁle, see
CloudWatch Agent Download Links (p. 860).
• To verify the signature, run gpg --verify.
PS> gpg --verify sig-filename  agent-download-filename
gpg: Signature made 11/29/17 23:00:45 Coordinated Universal Time
gpg:                using RSA key D58167303B789C72
gpg: Good signature from "Amazon CloudWatch Agent" [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 9376 16F3 450B 7D80 6CBD  9725 D581 6730 3B78 9C72
If the output includes the phrase BAD signature , check whether you performed the procedure 
correctly. If you continue to get this response, contact Amazon Web Services and avoid using the 
downloaded ﬁle.
Note the warning about trust. A key is trusted only if you or someone who you trust has signed 
it. This doesn't mean that the signature is invalid, only that you have not veriﬁed the public key.
Create the CloudWatch agent conﬁguration ﬁle
Before running the CloudWatch agent on any servers, you must create a CloudWatch agent conﬁguration 
ﬁle.
The agent conﬁguration ﬁle is a JSON ﬁle that speciﬁes the metrics and logs that the agent is to collect, 
including custom metrics. You can create it by using the wizard or by creating it yourself from scratch. 
You could also use the wizard to initially create the conﬁguration ﬁle and then modify it manually. If 
897Amazon CloudWatch User Guide
Create the CloudWatch agent 
conﬁguration ﬁle with the wizard
you create or modify the ﬁle manually, the process is more complex, but you have more control over the 
metrics collected and can specify metrics not available through the wizard.
Any time you change the agent conﬁguration ﬁle, you must then restart the agent to have the changes 
take eﬀect. To restart the agent, follow the instructions in Start the CloudWatch agent (p. 881).
After you have created a conﬁguration ﬁle, you can save it manually as a JSON ﬁle and then use this ﬁle 
when installing the agent on your servers. Alternatively, you can store it in Systems Manager Parameter 
Store if you're going to use Systems Manager when you install the agent on servers.
Contents
•Create the CloudWatch agent conﬁguration ﬁle with the wizard (p. 898)
•Manually create or edit the CloudWatch agent conﬁguration ﬁle (p. 903)
Create the CloudWatch agent conﬁguration ﬁle with 
the wizard
The agent conﬁguration ﬁle wizard, amazon-cloudwatch-agent-config-wizard , asks a series of 
questions, including the following:
•Are you installing the agent on an Amazon EC2 instance or an on-premises server?
•Is the server running Linux or Windows Server?
•Do you want the agent to also send log ﬁles to CloudWatch Logs? If so, do you have an existing 
CloudWatch Logs agent conﬁguration ﬁle? If yes, the CloudWatch agent can use this ﬁle to determine 
the logs to collect from the server.
•If the agent will send log ﬁles to CloudWatch Logs, what retention period do you want for those log 
ﬁles? The default value of -1 sets the log items to never expire.
•If you're going to collect metrics from the server, do you want to monitor one of the default sets of 
metrics or customize the list of metrics that you collect?
•Do you want to collect custom metrics from your applications or services, using StatsD  or collectd ?
•Are you migrating from an existing SSM Agent?
The wizard can autodetect the credentials and AWS Region to use if you have the AWS credentials and 
conﬁguration ﬁles in place before you start the wizard. For more information about these ﬁles, see 
Conﬁguration and Credential Files in the AWS Systems Manager User Guide.
In the AWS credentials ﬁle, the wizard checks for default credentials and also looks for an
AmazonCloudWatchAgent  section such as the following:
[AmazonCloudWatchAgent]
aws_access_key_id = my_access_key
aws_secret_access_key = my_secret_key
The wizard displays the default credentials, the credentials from the AmazonCloudWatchAgent , and an
Others option. You can select which credentials to use. If you choose Others, you can input credentials.
For my_access_key  and my_secret_key , use the keys from the IAM user that has the permissions 
to write to Systems Manager Parameter Store. For more information about the IAM users needed 
for the CloudWatch agent, see Create IAM users to use with the CloudWatch agent on on-premises 
servers (p. 876).
In the AWS conﬁguration ﬁle, you can specify the Region that the agent sends metrics to if it's diﬀerent 
than the [default]  section. The default is to publish the metrics to the Region where the Amazon EC2 
898Amazon CloudWatch User Guide
Create the CloudWatch agent 
conﬁguration ﬁle with the wizard
instance is located. If the metrics should be published to a diﬀerent Region, specify the Region here. In 
the following example, the metrics are published to the us-west-1  Region.
[AmazonCloudWatchAgent]
region = us-west-1
CloudWatch agent predeﬁned metric sets
The wizard is conﬁgured with predeﬁned sets of metrics, with diﬀerent detail levels. These sets of 
metrics are shown in the following tables. For more information about these metrics, see Metrics 
collected by the CloudWatch agent (p. 958).
Note
Parameter Store supports parameters in Standard and Advanced tiers. These parameter tiers are 
not related to the Basic, Standard, and Advanced levels of metric details that are described in 
these tables.
Amazon EC2 instances running Linux
Detail level Metrics included
Basic Mem:  mem_used_percent
Disk:  disk_used_percent
The disk  metrics such as disk_used_percent  have a dimension for
Partition , which means that the number of custom metrics generated is 
dependent on the number of partitions associated with your instance. The 
number of disk partitions you have depends on which AMI you are using and the 
number of Amazon EBS volumes you attach to the server.
Standard CPU:  cpu_usage_idle , cpu_usage_iowait , cpu_usage_user ,
cpu_usage_system
Disk:  disk_used_percent , disk_inodes_free
Diskio:  diskio_io_time
Mem:  mem_used_percent
Swap:  swap_used_percent
Advanced CPU:  cpu_usage_idle , cpu_usage_iowait , cpu_usage_user ,
cpu_usage_system
Disk:  disk_used_percent , disk_inodes_free
Diskio:  diskio_io_time , diskio_write_bytes , diskio_read_bytes ,
diskio_writes , diskio_reads
Mem:  mem_used_percent
Netstat:  netstat_tcp_established , netstat_tcp_time_wait
Swap:  swap_used_percent
On-premises servers running Linux
899Amazon CloudWatch User Guide
Create the CloudWatch agent 
conﬁguration ﬁle with the wizard
Detail level Metrics included
Basic Disk:  disk_used_percent
Diskio:  diskio_write_bytes , diskio_read_bytes , diskio_writes ,
diskio_reads
Mem:  mem_used_percent
Net: net_bytes_sent , net_bytes_recv , net_packets_sent ,
net_packets_recv
Swap:  swap_used_percent
Standard CPU:  cpu_usage_idle , cpu_usage_iowait
Disk:  disk_used_percent , disk_inodes_free
Diskio:  diskio_io_time , diskio_write_bytes , diskio_read_bytes ,
diskio_writes , diskio_reads
Mem:  mem_used_percent
Net: net_bytes_sent , net_bytes_recv , net_packets_sent ,
net_packets_recv
Swap:  swap_used_percent
Advanced CPU:  cpu_usage_guest , cpu_usage_idle , cpu_usage_iowait ,
cpu_usage_steal , cpu_usage_user , cpu_usage_system
Disk:  disk_used_percent , disk_inodes_free
Diskio:  diskio_io_time , diskio_write_bytes , diskio_read_bytes ,
diskio_writes , diskio_reads
Mem:  mem_used_percent
Net: net_bytes_sent , net_bytes_recv , net_packets_sent ,
net_packets_recv
Netstat:  netstat_tcp_established , netstat_tcp_time_wait
Swap:  swap_used_percent
Amazon EC2 instances running Windows Server
Note
The metric names listed in this table display how the metric appears when viewed in the 
console. The actual metric name might not include the ﬁrst word. For example, the actual metric 
name for LogicalDisk % Free Space  is just % Free Space .
Detail level Metrics included
Basic Memory: Memory % Committed Bytes In Use
LogicalDisk:  LogicalDisk % Free Space
Standard Memory: Memory % Committed Bytes In Use
900Amazon CloudWatch User Guide
Create the CloudWatch agent 
conﬁguration ﬁle with the wizard
Detail level Metrics included
Paging: Paging File % Usage
Processor: Processor % Idle Time , Processor % Interrupt Time ,
Processor % User Time
PhysicalDisk: PhysicalDisk % Disk Time
LogicalDisk:  LogicalDisk % Free Space
AdvancedMemory: Memory % Committed Bytes In Use
Paging: Paging File % Usage
Processor: Processor % Idle Time , Processor % Interrupt Time ,
Processor % User Time
LogicalDisk:  LogicalDisk % Free Space
PhysicalDisk: PhysicalDisk % Disk Time , PhysicalDisk Disk Write 
Bytes/sec , PhysicalDisk Disk Read Bytes/sec , PhysicalDisk Disk 
Writes/sec , PhysicalDisk Disk Reads/sec
TCP: TCPv4 Connections Established , TCPv6 Connections 
Established
On-premises server running Windows Server
Note
The metric names listed in this table display how the metric appears when viewed in the 
console. The actual metric name might not include the ﬁrst word. For example, the actual metric 
name for LogicalDisk % Free Space  is just % Free Space .
Detail level Metrics included
Basic Paging: Paging File % Usage
Processor: Processor % Processor Time
LogicalDisk: LogicalDisk % Free Space
PhysicalDisk: PhysicalDisk Disk Write Bytes/sec , PhysicalDisk Disk 
Read Bytes/sec , PhysicalDisk Disk Writes/sec , PhysicalDisk Disk 
Reads/sec
Memory: Memory % Committed Bytes In Use
Network Interface: Network Interface Bytes Sent/sec , Network 
Interface Bytes Received/sec , Network Interface Packets Sent/
sec, Network Interface Packets Received/sec
Standard Paging: Paging File % Usage
Processor: Processor % Processor Time , Processor % Idle Time ,
Processor % Interrupt Time
LogicalDisk:  LogicalDisk % Free Space
901Amazon CloudWatch User Guide
Create the CloudWatch agent 
conﬁguration ﬁle with the wizard
Detail level Metrics included
PhysicalDisk: PhysicalDisk % Disk Time , PhysicalDisk Disk Write 
Bytes/sec , PhysicalDisk Disk Read Bytes/sec , PhysicalDisk Disk 
Writes/sec , PhysicalDisk Disk Reads/sec
Memory: Memory % Committed Bytes In Use
Network Interface: Network Interface Bytes Sent/sec , Network 
Interface Bytes Received/sec , Network Interface Packets Sent/
sec, Network Interface Packets Received/sec
AdvancedPaging:Paging File % Usage
Processor: Processor % Processor Time , Processor % Idle Time ,
Processor % Interrupt Time , Processor % User Time
LogicalDisk:  LogicalDisk % Free Space
PhysicalDisk: PhysicalDisk % Disk Time , PhysicalDisk Disk Write 
Bytes/sec , PhysicalDisk Disk Read Bytes/sec , PhysicalDisk Disk 
Writes/sec , PhysicalDisk Disk Reads/sec
Memory: Memory % Committed Bytes In Use
Network Interface: Network Interface Bytes Sent/sec , Network 
Interface Bytes Received/sec , Network Interface Packets Sent/
sec, Network Interface Packets Received/sec
TCP: TCPv4 Connections Established , TCPv6 Connections 
Established
Run the CloudWatch agent conﬁguration wizard
To create the CloudWatch agent conﬁguration ﬁle
1. Start the CloudWatch agent conﬁguration wizard by entering the following:
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard
On a server running Windows Server, run the following commands to launch the wizard:
cd "C:\Program Files\Amazon\AmazonCloudWatchAgent"
.\amazon-cloudwatch-agent-config-wizard.exe
2. Answer the questions to customize the conﬁguration ﬁle for your server.
3. If you're storing the conﬁguration ﬁle locally, the conﬁguration ﬁle config.json  is stored in /opt/
aws/amazon-cloudwatch-agent/bin/  on Linux servers, and is stored in C:\Program Files
\Amazon\AmazonCloudWatchAgent  on Windows Server. You can then copy this ﬁle to other 
servers where you want to install the agent.
If you're going to use Systems Manager to install and conﬁgure the agent, be sure to answer Yes
when prompted whether to store the ﬁle in Systems Manager Parameter Store. You can also choose 
to store the ﬁle in Parameter Store even if you aren't using the SSM Agent to install the CloudWatch 
agent. To be able to store the ﬁle in Parameter Store, you must use an IAM role with suﬃcient 
902Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
permissions. For more information, see Create IAM roles and users for use with the CloudWatch 
agent  (p. 874).
Manually create or edit the CloudWatch agent 
conﬁguration ﬁle
The CloudWatch agent conﬁguration ﬁle is a JSON ﬁle with three sections: agent , metrics , and logs .
•The agent section includes ﬁelds for the overall conﬁguration of the agent.
•The metrics section speciﬁes the custom metrics for collection and publishing to CloudWatch. If 
you're using the agent only to collect logs, you can omit the metrics section from the ﬁle.
•The logs section speciﬁes what log ﬁles are published to CloudWatch Logs. This can include events 
from the Windows Event Log if the server runs Windows Server.
The following sections explain the structure and ﬁelds of this JSON ﬁle. You can also view the schema 
deﬁnition for this conﬁguration ﬁle. The schema deﬁnition is located at installation-directory /
doc/amazon-cloudwatch-agent-schema.json  on Linux servers, and at installation-
directory /amazon-cloudwatch-agent-schema.json  on servers running Windows Server.
If you create or edit the agent conﬁguration ﬁle manually, you can give it any name. For simplicity 
in troubleshooting, we recommend that you name it /opt/aws/amazon-cloudwatch-agent/
etc/amazon-cloudwatch-agent.json  on a Linux server and $Env:ProgramData\Amazon
\AmazonCloudWatchAgent\amazon-cloudwatch-agent.json  on servers running Windows Server. 
After you have created the ﬁle, you can copy it to other servers where you want to install the agent.
CloudWatch agent conﬁguration ﬁle: Agent section
The agent section can include the following ﬁelds. The wizard doesn't create an agent section. Instead, 
the wizard omits it and uses the default values for all ﬁelds in this section.
•metrics_collection_interval  – Optional. Speciﬁes how often all metrics speciﬁed in this 
conﬁguration ﬁle are to be collected. You can override this value for speciﬁc types of metrics.
This value is speciﬁed in seconds. For example, specifying 10 causes metrics to be collected every 10 
seconds, and setting it to 300 speciﬁes metrics to be collected every 5 minutes.
If you set this value below 60 seconds, each metric is collected as a high-resolution metric. For more 
information about high-resolution metrics, see High-resolution metrics (p. 176).
The default value is 60.
•region – Speciﬁes the Region to use for the CloudWatch endpoint when an Amazon EC2 instance is 
being monitored. The metrics collected are sent to this Region, such as us-west-1 . If you omit this 
ﬁeld, the agent sends metrics to the Region where the Amazon EC2 instance is located.
If you are monitoring an on-premises server, this ﬁeld isn't used, and the agent reads the Region from 
the AmazonCloudWatchAgent  proﬁle of the AWS conﬁguration ﬁle.
•credentials  – Speciﬁes an IAM role to use when sending metrics and logs to a diﬀerent AWS 
account. If speciﬁed, this ﬁeld contains one parameter, role_arn .
•role_arn  – Speciﬁes the Amazon Resource Name (ARN) of an IAM role to use for authentication 
when sending metrics and logs to a diﬀerent AWS account. For more information, see Sending 
metrics and logs to a diﬀerent account (p. 976).
•debug – Optional. Speciﬁes running the CloudWatch agent with debug log messages. The default 
value is false .
903Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
•aws_sdk_log_level  – Optional. Supported only in versions 1.247350.0 and later of the CloudWatch 
agent,
You can specify this ﬁeld to have the agent perform logging for AWS SDK endpoints. The value for this 
ﬁeld can include one or more of the following options. Separate multiple options with the | character.
•LogDebug
•LogDebugWithSigning
•LogDebugWithHTTPBody
•LogDebugRequestRetries
•LogDebugWithEventStreamBody
For more information about these options, see LogLevelType.
•logfile – Speciﬁes the location where the CloudWatch agent writes log messages. If you specify 
an empty string, the log goes to stderr. If you don't specify this option, the default locations are the 
following:
•Linux: /opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log
•Windows Server: c:\\ProgramData\\Amazon\\CloudWatchAgent\\Logs\\amazon-
cloudwatch-agent.log
The CloudWatch agent automatically rotates the log ﬁle that it creates. A log ﬁle is rotated out when 
it reaches 100 MB in size. The agent keeps the rotated log ﬁles for up to seven days, and it keeps as 
many as ﬁve backup log ﬁles that have been rotated out. Backup log ﬁles have a timestamp appended 
to their ﬁlename. The timestamp shows the date and time that the ﬁle was rotated out: for example,
amazon-cloudwatch-agent-2018-06-08T21-01-50.247.log.gz .
•omit_hostname  – Optional. By default, the hostname is published as a dimension of metrics that are 
collected by the agent, unless you are using the append_dimensions  ﬁeld in the metrics section. 
Set omit_hostname  to true to prevent the hostname from being published as a dimension even if 
you are not using append_dimensions . The default value is false .
•run_as_user  – Optional. Speciﬁes a user to use to run the CloudWatch agent. If you don't specify this 
parameter, the root user is used. This option is valid only on Linux servers.
If you specify this option, the user must exist before you start the CloudWatch agent. For more 
information, see Running the CloudWatch agent as a diﬀerent user (p. 971).
•user_agent  – Optional. Speciﬁes the user-agent  string that is used by the CloudWatch agent when 
it makes API calls to the CloudWatch backend. The default value is a string consisting of the agent 
version, the version of the Go programming language that was used to compile the agent, the runtime 
operating system and architecture, the build time, and the plugins enabled.
•usage_data  – Optional. By default, the CloudWatch agent sends health and performance data about 
itself to CloudWatch whenever it publishes metrics or logs to CloudWatch. This data incurs no costs 
to you. You can prevent the agent from sending this data by specifying false  for usage_data . If 
you omit this parameter, the default of true is used and the agent sends the health and performance 
data.
If you set this value to false, you must stop and restart the agent for it to take eﬀect.
The following is an example of an agent section.
"agent": { 
   "metrics_collection_interval": 60, 
   "region": "us-west-1", 
   "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log", 
   "debug": false, 
   "run_as_user": "cwagent" 
  }
904Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
CloudWatch agent conﬁguration ﬁle: Metrics section
On servers running either Linux or Windows Server, the metrics section includes the following ﬁelds:
•namespace  – Optional. The namespace to use for the metrics collected by the agent. The default 
value is CWAgent. The maximum length is 255 characters. The following is an example:
{ 
  "metrics": { 
    "namespace": "Development/Product1Metrics", 
   ...... 
   },
} 
•append_dimensions  – Optional. Adds Amazon EC2 metric dimensions to all metrics collected by the 
agent. This also causes the agent to not publish the hostname as a dimension.
The only supported key-value pairs for append_dimensions  are shown in the following list. Any 
other key-value pairs are ignored. The agent supports these key-value pairs exactly as they are shown 
in the following list. You can't change the key values to publish diﬀerent dimension names for them.
•"ImageID":"${aws:ImageId}"  sets the instance's AMI ID as the value of the ImageID  dimension.
•"InstanceId":"${aws:InstanceId}"  sets the instance's instance ID as the value of the
InstanceID  dimension.
•"InstanceType":"${aws:InstanceType}"  sets the instance's instance type as the value of the
InstanceType  dimension.
•"AutoScalingGroupName":"${aws:AutoScalingGroupName}"  sets the instance's Auto Scaling 
group name as the value of the AutoScalingGroupName  dimension.
If you want to append dimensions to metrics with arbitrary key-value pairs, use the
append_dimensions  parameter in the ﬁeld for that particular type of metric.
If you specify a value that depends on Amazon EC2 metadata and you use proxies, you must make sure 
that the server can access the endpoint for Amazon EC2. For more information about these endpoints, 
see Amazon Elastic Compute Cloud (Amazon EC2) in the Amazon Web Services General Reference.
•aggregation_dimensions  – Optional. Speciﬁes the dimensions that collected metrics are to be 
aggregated on. For example, if you roll up metrics on the AutoScalingGroupName  dimension, the 
metrics from all instances in each Auto Scaling group are aggregated and can be viewed as a whole.
You can roll up metrics along single or multiple dimensions. For example, specifying
[["InstanceId"], ["InstanceType"], ["InstanceId","InstanceType"]]  aggregates 
metrics for instance ID singly, instance type singly, and for the combination of the two dimensions.
You can also specify [] to roll up all metrics into one collection, disregarding all dimensions.
•endpoint_override  – Speciﬁes a FIPS endpoint or private link to use as the endpoint where the 
agent sends metrics. Specifying this and setting a private link enables you to send the metrics to an 
Amazon VPC endpoint. For more information, see What Is Amazon VPC?.
The value of endpoint_override  must be a string that is a URL.
For example, the following part of the metrics section of the conﬁguration ﬁle sets the agent to use a 
VPC Endpoint when sending metrics.
{ 
  "metrics": { 
    "endpoint_override": "vpce-XXXXXXXXXXXXXXXXXXXXXXXXX.monitoring.us-
east-1.vpce.amazonaws.com", 
   ...... 
905Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
   },
} 
•metrics_collected  – Required. Speciﬁes which metrics are to be collected, including custom 
metrics collected through StatsD  or collectd . This section includes several subsections.
The contents of the metrics_collected  section depend on whether this conﬁguration ﬁle is for a 
server running Linux or Windows Server.
•force_flush_interval  – Speciﬁes in seconds the maximum amount of time that metrics remain 
in the memory buﬀer before being sent to the server. No matter the setting for this, if the size of the 
metrics in the buﬀer reaches 1 MB or 1000 diﬀerent metrics, the metrics are immediately sent to the 
server.
The default value is 60.
•credentials  – Speciﬁes an IAM role to use when sending metrics to a diﬀerent account. If speciﬁed, 
this ﬁeld contains one parameter, role_arn .
•role_arn  – Speciﬁes the ARN of an IAM role to use for authentication when sending metrics 
to a diﬀerent account. For more information, see Sending metrics and logs to a diﬀerent 
account (p. 976). If speciﬁed here, this value overrides the role_arn  speciﬁed in the agent
section of the conﬁguration ﬁle, if any.
Linux section
On servers running Linux, the metrics_collected  section of the conﬁguration ﬁle can also contain 
the following ﬁelds.
Many of these ﬁelds can include a measurement  sections that lists the metrics you want to collect 
for that resource. These measurement  sections can either specify the complete metric name such 
as swap_used , or just the part of the metric name that will be appended to the type of resource. 
For example, specifying reads  in the measurement  section of the diskio section causes the
diskio_reads  metric to be collected.
•collectd  – Optional. Speciﬁes that you want to retrieve custom metrics using the collectd
protocol. You use collectd  software to send the metrics to the CloudWatch agent. For more 
information about the conﬁguration options available for collectd, see Retrieve custom metrics with 
collectd (p. 947).
•ethtool – Optional. Speciﬁes that you want to retrieve network metrics using the ethtool  plugin. 
This plugin can import both the metrics collected by the standard ethtool utility, as well as network 
performance metrics from Amazon EC2 instances. For more information about the conﬁguration 
options available for ethtool, see Collect network performance metrics (p. 928).
•cpu – Optional. Speciﬁes that CPU metrics are to be collected. This section is valid only for Linux 
instances. You must include at least one of the resources  and totalcpu  ﬁelds for any CPU metrics 
to be collected. This section can include the following ﬁelds:
•drop_original_metrics  – Optional. If you are using the aggregation_dimensions  ﬁeld in the
metrics section to roll up metrics into aggregated results, then by default the agent sends both 
the aggregated metrics and the original metrics that are separated for each value of the dimension. 
If you don't want the original metrics to be sent to CloudWatch, you can specify this parameter 
with a list of metrics. The metrics speciﬁed along with this parameter don't have their metrics by 
dimension reported to CloudWatch. Instead, only the aggregated metrics are reported. This reduces 
the number of metrics that the agent collects, reducing your costs.
•resources  – Optional. Specify this ﬁeld with a value of * to cause per-cpu metrics to be collected. 
The only allowed value is *.
•totalcpu  – Optional. Speciﬁes whether to report cpu metrics aggregated across all cpu cores. The 
default is true.
906Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
•measurement  – Speciﬁes the array of cpu metrics to be collected. Possible values are
time_active , time_guest , time_guest_nice , time_idle , time_iowait , time_irq ,
time_nice , time_softirq , time_steal , time_system , time_user , usage_active ,
usage_guest , usage_guest_nice , usage_idle , usage_iowait , usage_irq , usage_nice ,
usage_softirq , usage_steal , usage_system , and usage_user . This ﬁeld is required if you 
include cpu.
By default, the unit for cpu_usage_*  metrics is Percent , and cpu_time_*  metrics don't have a 
unit.
Within the entry for each individual metric, you might optionally specify one or both of the 
following:
•rename – Speciﬁes a diﬀerent name for this metric.
•unit – Speciﬁes the unit to use for this metric, overriding the default unit of None  for the metric. 
The unit that you specify must be a valid CloudWatch metric unit, as listed in the Unit  description 
in MetricDatum .
•metrics_collection_interval  – Optional. Speciﬁes how often to collect the cpu metrics, 
overriding the global metrics_collection_interval  speciﬁed in the agent section of the 
conﬁguration ﬁle.
This value is speciﬁed in seconds. For example, specifying 10 causes metrics to be collected every 10 
seconds, and setting it to 300 speciﬁes metrics to be collected every 5 minutes.
If you set this value below 60 seconds, each metric is collected as a high-resolution metric. For more 
information about high-resolution metrics, see High-resolution metrics (p. 176).
•append_dimensions  – Optional. Additional dimensions to use for only the cpu metrics. If you 
specify this ﬁeld, it's used in addition to dimensions speciﬁed in the global append_dimensions
ﬁeld that is used for all types of metrics that the agent collects.
•disk – Optional. Speciﬁes that disk metrics are to be collected. This section is valid only for Linux 
instances. This section can include the following ﬁelds:
•drop_original_metrics  – Optional. If you are using the aggregation_dimensions  ﬁeld in the
metrics section to roll up metrics into aggregated results, then by default the agent sends both 
the aggregated metrics and the original metrics that are separated for each value of the dimension. 
If you don't want the original metrics to be sent to CloudWatch, you can specify this parameter 
with a list of metrics. The metrics speciﬁed along with this parameter don't have their metrics by 
dimension reported to CloudWatch. Instead, only the aggregated metrics are reported. This reduces 
the number of metrics that the agent collects, reducing your costs.
•resources  – Optional. Speciﬁes an array of disk mount points. This ﬁeld limits CloudWatch to 
collect metrics from only the listed mount points. You can specify * as the value to collect metrics 
from all mount points. The default value is to collect metrics from all mount points.
•measurement  – Speciﬁes the array of disk metrics to be collected. Possible values are free , total ,
used , used_percent , inodes_free , inodes_used , and inodes_total . This ﬁeld is required if 
you include disk .
Note
The disk metrics have a dimension for Partition , which means that the number of 
custom metrics generated is dependent on the number of partitions associated with your 
instance. The number of disk partitions you have depends on which AMI you are using and 
the number of Amazon EBS volumes you attach to the server.
To see the default units for each disk  metric, see Metrics collected by the CloudWatch agent on 
Linux and macOS instances (p. 958).
Within the entry for each individual metric, you might optionally specify one or both of the 
following:
•rename – Speciﬁes a diﬀerent name for this metric.
907Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
•unit – Speciﬁes the unit to use for this metric, overriding the default unit of None  of None  for 
the metric. The unit that you specify must be a valid CloudWatch metric unit, as listed in the Unit
description in MetricDatum .
•ignore_file_system_types  – Speciﬁes ﬁle system types to exclude when collecting disk metrics. 
Valid values include sysfs , devtmpfs , and so on.
•drop_device  – Setting this to true  causes Device  to not be included as a dimension for disk 
metrics.
Preventing Device from being used as a dimension can be useful on instances that use the Nitro 
system because on those instances the device names change for each disk mount when the instance 
is rebooted. This can cause inconsistent data in your metrics and cause alarms based on these 
metrics to go to INSUFFICIENT DATA  state.
The default is false .
•metrics_collection_interval  – Optional. Speciﬁes how often to collect the disk metrics, 
overriding the global metrics_collection_interval  speciﬁed in the agent section of the 
conﬁguration ﬁle.
This value is speciﬁed in seconds.
If you set this value below 60 seconds, each metric is collected as a high-resolution metric. For more 
information, see High-resolution metrics (p. 176).
•append_dimensions  – Optional. Additional dimensions to use for only the disk metrics. If you 
specify this ﬁeld, it is used in addition to dimensions speciﬁed in the append_dimensions  ﬁeld 
that is used for all types of metrics collected by the agent.
•diskio – Optional. Speciﬁes that disk i/o metrics are to be collected. This section is valid only for 
Linux instances. This section can include the following ﬁelds:
•drop_original_metrics  – Optional. If you are using the aggregation_dimensions  ﬁeld in the
metrics section to roll up metrics into aggregated results, then by default the agent sends both 
the aggregated metrics and the original metrics that are separated for each value of the dimension. 
If you don't want the original metrics to be sent to CloudWatch, you can specify this parameter 
with a list of metrics. The metrics speciﬁed along with this parameter don't have their metrics by 
dimension reported to CloudWatch. Instead, only the aggregated metrics are reported. This reduces 
the number of metrics that the agent collects, reducing your costs.
•resources  – Optional. If you specify an array of devices, CloudWatch collects metrics from only 
those devices. Otherwise, metrics for all devices are collected. You can also specify * as the value to 
collect metrics from all devices.
•measurement  – Speciﬁes the array of diskio metrics to be collected. Possible values are
reads , writes , read_bytes , write_bytes , read_time , write_time , io_time , and
iops_in_progress . This ﬁeld is required if you include diskio .
Within the entry for each individual metric, you might optionally specify one or both of the 
following:
•rename – Speciﬁes a diﬀerent name for this metric.
•unit – Speciﬁes the unit to use for this metric, overriding the default unit of None  of None  for 
the metric. The unit that you specify must be a valid CloudWatch metric unit, as listed in the Unit
description in MetricDatum .
•metrics_collection_interval  – Optional. Speciﬁes how often to collect the diskio metrics, 
overriding the global metrics_collection_interval  speciﬁed in the agent section of the 
conﬁguration ﬁle.
This value is speciﬁed in seconds.
If you set this value below 60 seconds, each metric is collected as a high-resolution metric. For more 
information about high-resolution metrics, see High-resolution metrics (p. 176).
908Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
•append_dimensions  – Optional. Additional dimensions to use for only the diskio metrics. If you 
specify this ﬁeld, it is used in addition to dimensions speciﬁed in the append_dimensions  ﬁeld 
that is used for all types of metrics collected by the agent.
•swap – Optional. Speciﬁes that swap memory metrics are to be collected. This section is valid only for 
Linux instances. This section can include the following ﬁelds:
•drop_original_metrics  – Optional. If you are using the aggregation_dimensions  ﬁeld in the
metrics section to roll up metrics into aggregated results, then by default the agent sends both 
the aggregated metrics and the original metrics that are separated for each value of the dimension. 
If you don't want the original metrics to be sent to CloudWatch, you can specify this parameter 
with a list of metrics. The metrics speciﬁed along with this parameter don't have their metrics by 
dimension reported to CloudWatch. Instead, only the aggregated metrics are reported. This reduces 
the number of metrics that the agent collects, reducing your costs.
•measurement  – Speciﬁes the array of swap metrics to be collected. Possible values are free , used , 
and used_percent . This ﬁeld is required if you include swap .
To see the default units for each swap  metric, see Metrics collected by the CloudWatch agent on 
Linux and macOS instances (p. 958).
Within the entry for each individual metric, you might optionally specify one or both of the 
following:
•rename – Speciﬁes a diﬀerent name for this metric.
•unit – Speciﬁes the unit to use for this metric, overriding the default unit of None  of None  for 
the metric. The unit that you specify must be a valid CloudWatch metric unit, as listed in the Unit
description in MetricDatum .
•metrics_collection_interval  – Optional. Speciﬁes how often to collect the swap metrics, 
overriding the global metrics_collection_interval  speciﬁed in the agent section of the 
conﬁguration ﬁle.
This value is speciﬁed in seconds.
If you set this value below 60 seconds, each metric is collected as a high-resolution metric. For more 
information about high-resolution metrics, see High-resolution metrics (p. 176).
•append_dimensions  – Optional. Additional dimensions to use for only the swap metrics. If you 
specify this ﬁeld, it is used in addition to dimensions speciﬁed in the global append_dimensions
ﬁeld that is used for all types of metrics collected by the agent. It's collected as a high-resolution 
metric.
•mem – Optional. Speciﬁes that memory metrics are to be collected. This section is valid only for Linux 
instances. This section can include the following ﬁelds:
•drop_original_metrics  – Optional. If you are using the aggregation_dimensions  ﬁeld in the
metrics section to roll up metrics into aggregated results, then by default the agent sends both 
the aggregated metrics and the original metrics that are separated for each value of the dimension. 
If you don't want the original metrics to be sent to CloudWatch, you can specify this parameter 
with a list of metrics. The metrics speciﬁed along with this parameter don't have their metrics by 
dimension reported to CloudWatch. Instead, only the aggregated metrics are reported. This reduces 
the number of metrics that the agent collects, reducing your costs.
•measurement  – Speciﬁes the array of memory metrics to be collected. Possible values are active ,
available , available_percent , buffered , cached , free , inactive , total , used , and
used_percent . This ﬁeld is required if you include mem.
To see the default units for each mem metric, see Metrics collected by the CloudWatch agent on Linux 
and macOS instances (p. 958).
Within the entry for each individual metric, you might optionally specify one or both of the 
following:
•rename – Speciﬁes a diﬀerent name for this metric.
909Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
•unit – Speciﬁes the unit to use for this metric, overriding the default unit of None  for the metric. 
The unit that you specify must be a valid CloudWatch metric unit, as listed in the Unit  description 
in MetricDatum .
•metrics_collection_interval  – Optional. Speciﬁes how often to collect the mem metrics, 
overriding the global metrics_collection_interval  speciﬁed in the agent section of the 
conﬁguration ﬁle.
This value is speciﬁed in seconds.
If you set this value below 60 seconds, each metric is collected as a high-resolution metric. For more 
information about high-resolution metrics, see High-resolution metrics (p. 176).
•append_dimensions  – Optional. Additional dimensions to use for only the mem metrics. If you 
specify this ﬁeld, it's used in addition to dimensions speciﬁed in the append_dimensions  ﬁeld that 
is used for all types of metrics that the agent collects.
•net – Optional. Speciﬁes that networking metrics are to be collected. This section is valid only for 
Linux instances. This section can include the following ﬁelds:
•drop_original_metrics  – Optional. If you are using the aggregation_dimensions  ﬁeld in the
metrics section to roll up metrics into aggregated results, then by default the agent sends both 
the aggregated metrics and the original metrics that are separated for each value of the dimension. 
If you don't want the original metrics to be sent to CloudWatch, you can specify this parameter 
with a list of metrics. The metrics speciﬁed along with this parameter don't have their metrics by 
dimension reported to CloudWatch. Instead, only the aggregated metrics are reported. This reduces 
the number of metrics that the agent collects, reducing your costs.
•resources  – Optional. If you specify an array of network interfaces, CloudWatch collects metrics 
from only those interfaces. Otherwise, metrics for all devices are collected. You can also specify * as 
the value to collect metrics from all interfaces.
•measurement  – Speciﬁes the array of networking metrics to be collected. Possible values are
bytes_sent , bytes_recv , drop_in , drop_out , err_in , err_out , packets_sent , and
packets_recv . This ﬁeld is required if you include net.
To see the default units for each net metric, see Metrics collected by the CloudWatch agent on Linux 
and macOS instances (p. 958).
Within the entry for each individual metric, you might optionally specify one or both of the 
following:
•rename – Speciﬁes a diﬀerent name for this metric.
•unit – Speciﬁes the unit to use for this metric, overriding the default unit of None  for the metric. 
The unit that you specify must be a valid CloudWatch metric unit, as listed in the Unit  description 
in MetricDatum .
•metrics_collection_interval  – Optional. Speciﬁes how often to collect the net metrics, 
overriding the global metrics_collection_interval  speciﬁed in the agent section of the 
conﬁguration ﬁle.
This value is speciﬁed in seconds. For example, specifying 10 causes metrics to be collected every 10 
seconds, and setting it to 300 speciﬁes metrics to be collected every 5 minutes.
If you set this value below 60 seconds, each metric is collected as a high-resolution metric. For more 
information about high-resolution metrics, see High-resolution metrics (p. 176).
•append_dimensions  – Optional. Additional dimensions to use for only the net metrics. If you 
specify this ﬁeld, it's used in addition to dimensions speciﬁed in the append_dimensions  ﬁeld that 
is used for all types of metrics collected by the agent.
•netstat – Optional. Speciﬁes that TCP connection state and UDP connection metrics are to be 
collected. This section is valid only for Linux instances. This section can include the following ﬁelds:
910Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
•drop_original_metrics  – Optional. If you are using the aggregation_dimensions  ﬁeld in the
metrics section to roll up metrics into aggregated results, then by default the agent sends both 
the aggregated metrics and the original metrics that are separated for each value of the dimension. 
If you don't want the original metrics to be sent to CloudWatch, you can specify this parameter 
with a list of metrics. The metrics speciﬁed along with this parameter don't have their metrics by 
dimension reported to CloudWatch. Instead, only the aggregated metrics are reported. This reduces 
the number of metrics that the agent collects, reducing your costs.
•measurement  – Speciﬁes the array of netstat metrics to be collected. Possible values are
tcp_close , tcp_close_wait , tcp_closing , tcp_established , tcp_fin_wait1 ,
tcp_fin_wait2 , tcp_last_ack , tcp_listen , tcp_none , tcp_syn_sent , tcp_syn_recv ,
tcp_time_wait , and udp_socket . This ﬁeld is required if you include netstat .
To see the default units for each netstat  metric, see Metrics collected by the CloudWatch agent on 
Linux and macOS instances (p. 958).
Within the entry for each individual metric, you might optionally specify one or both of the 
following:
•rename – Speciﬁes a diﬀerent name for this metric.
•unit – Speciﬁes the unit to use for this metric, overriding the default unit of None  for the metric. 
The unit that you specify must be a valid CloudWatch metric unit, as listed in the Unit  description 
in MetricDatum .
•metrics_collection_interval  – Optional. Speciﬁes how often to collect the netstat metrics, 
overriding the global metrics_collection_interval  speciﬁed in the agent section of the 
conﬁguration ﬁle.
This value is speciﬁed in seconds.
If you set this value below 60 seconds, each metric is collected as a high-resolution metric. For more 
information about high-resolution metrics, see High-resolution metrics (p. 176).
•append_dimensions  – Optional. Additional dimensions to use for only the netstat metrics. If you 
specify this ﬁeld, it's used in addition to dimensions speciﬁed in the append_dimensions  ﬁeld that 
is used for all types of metrics collected by the agent.
•processes  – Optional. Speciﬁes that process metrics are to be collected. This section is valid only for 
Linux instances. This section can include the following ﬁelds:
•drop_original_metrics  – Optional. If you are using the aggregation_dimensions  ﬁeld in the
metrics section to roll up metrics into aggregated results, then by default the agent sends both 
the aggregated metrics and the original metrics that are separated for each value of the dimension. 
If you don't want the original metrics to be sent to CloudWatch, you can specify this parameter 
with a list of metrics. The metrics speciﬁed along with this parameter don't have their metrics by 
dimension reported to CloudWatch. Instead, only the aggregated metrics are reported. This reduces 
the number of metrics that the agent collects, reducing your costs.
•measurement  – Speciﬁes the array of processes metrics to be collected. Possible values are
blocked , dead , idle , paging , running , sleeping , stopped , total , total_threads , wait , 
and zombies. This ﬁeld is required if you include processes .
For all processes  metrics, the default unit is Count .
Within the entry for each individual metric, you might optionally specify one or both of the 
following:
•rename – Speciﬁes a diﬀerent name for this metric.
•unit – Speciﬁes the unit to use for this metric, overriding the default unit of None  for the metric. 
The unit that you specify must be a valid CloudWatch metric unit, as listed in the Unit  description 
in MetricDatum .
911Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
•metrics_collection_interval  – Optional. Speciﬁes how often to collect the processes metrics, 
overriding the global metrics_collection_interval  speciﬁed in the agent section of the 
conﬁguration ﬁle.
This value is speciﬁed in seconds. For example, specifying 10 causes metrics to be collected every 10 
seconds, and setting it to 300 speciﬁes metrics to be collected every 5 minutes.
If you set this value below 60 seconds, each metric is collected as a high-resolution metric. For more 
information, see High-resolution metrics (p. 176).
•append_dimensions  – Optional. Additional dimensions to use for only the process metrics. If you 
specify this ﬁeld, it's used in addition to dimensions speciﬁed in the append_dimensions  ﬁeld that 
is used for all types of metrics collected by the agent.
•nvidia_gpu  – Optional. Speciﬁes that NVIDIA GPU metrics are to be collected. This section is valid 
only for Linux instances on hosts that are conﬁgured with a NVIDIA GPU accelerator and have the 
NVIDIA System Management Interface (nvidia-smi) installed.
The NVIDIA GPU metrics that are collected are preﬁxed with the string nvidia_smi_  to distinguish 
them from the metrics collected for other accelerator types. This section can include the following 
ﬁelds:
•drop_original_metrics  – Optional. If you are using the aggregation_dimensions  ﬁeld in the
metrics section to roll up metrics into aggregated results, then by default the agent sends both 
the aggregated metrics and the original metrics that are separated for each value of the dimension. 
If you don't want the original metrics to be sent to CloudWatch, you can specify this parameter 
with a list of metrics. The metrics speciﬁed along with this parameter don't have their metrics by 
dimension reported to CloudWatch. Instead, only the aggregated metrics are reported. This reduces 
the number of metrics that the agent collects, reducing your costs.
•measurement  – Speciﬁes the array of NVIDIA GPU metrics to be collected. For a list of the possible 
values to use here, see the Metric  column in the table in Collect NVIDIA GPU metrics (p. 932).
Within the entry for each individual metric, you can optionally specify one or both of the following:
•rename – Speciﬁes a diﬀerent name for this metric.
•unit – Speciﬁes the unit to use for this metric, overriding the default unit of None  for the metric. 
The unit that you specify must be a valid CloudWatch metric unit, as listed in the Unit  description 
in MetricDatum .
•metrics_collection_interval  – Optional. Speciﬁes how often to collect the NVIDIA GPU 
metrics, overriding the global metrics_collection_interval  speciﬁed in the agent section of 
the conﬁguration ﬁle.
•procstat  – Optional. Speciﬁes that you want to retrieve metrics from individual processes. For more 
information about the conﬁguration options available for procstat, see Collect process metrics with the 
procstat plugin (p. 933).
•statsd – Optional. Speciﬁes that you want to retrieve custom metrics using the StatsD protocol. The 
CloudWatch agent acts as a daemon for the protocol. You use any standard StatsD  client to send the 
metrics to the CloudWatch agent. For more information about the conﬁguration options available for 
StatsD, see Retrieve custom metrics with StatsD  (p. 945).
•ethtool – Optional. Speciﬁes that you want to import ethtool statistics into CloudWatch. For more 
information, see Collect network performance metrics (p. 928).
The following is an example of a metrics section for a Linux server. In this example, three CPU metrics, 
three netstat metrics, three process metrics, and one disk metric are collected, and the agent is set up to 
receive additional metrics from a collectd  client.
"metrics": { 
    "aggregation_dimensions" : [["AutoScalingGroupName"], ["InstanceId", "InstanceType"],
[]], 
912Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
    "metrics_collected": { 
      "collectd": {}, 
      "cpu": { 
        "resources": [ 
          "*" 
        ], 
        "measurement": [ 
          {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"}, 
          {"name": "cpu_usage_nice", "unit": "Percent"}, 
          "cpu_usage_guest" 
        ], 
        "totalcpu": false, 
        "drop_original_metrics": [ "cpu_usage_guest" ], 
        "metrics_collection_interval": 10, 
        "append_dimensions": { 
          "test": "test1", 
          "date": "2017-10-01" 
        } 
      }, 
      "netstat": { 
        "measurement": [ 
          "tcp_established", 
          "tcp_syn_sent", 
          "tcp_close" 
        ], 
        "metrics_collection_interval": 60 
      }, 
       "disk": { 
        "measurement": [ 
          "used_percent" 
        ], 
        "resources": [ 
          "*" 
        ], 
        "drop_device": true 
      },   
      "processes": { 
        "measurement": [ 
          "running", 
          "sleeping", 
          "dead" 
        ] 
      } 
    }, 
    "append_dimensions": { 
      "ImageId": "${aws:ImageId}", 
      "InstanceId": "${aws:InstanceId}", 
      "InstanceType": "${aws:InstanceType}", 
      "AutoScalingGroupName": "${aws:AutoScalingGroupName}" 
    } 
  }
Windows Server
In the metrics_collected  section for Windows Server, you can have subsections for each Windows 
performance object, such as Memory , Processor , and LogicalDisk . For information about what 
objects and counters are available, see Performance Counters in the Microsoft Windows documentation.
Within the subsection for each object, you specify a measurement  array of the counters to collect. The
measurement  array is required for each object that you specify in the conﬁguration ﬁle. You can also 
specify a resources  ﬁeld to name the instances to collect metrics from. You can also specify * for
resources  to collect separate metrics for every instance. If you omit resources  for counters that have 
instances, the data for all instances is aggregated into one set. If you omit resources  for counters that 
913Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
don't have instances, the counters are not collected by the CloudWatch agent. To determine whether 
counters have instances, you can use one of the following commands.
Powershell:
Get-Counter -ListSet *
Command line (not Powershell):
TypePerf.exe –q
Within each object section, you can also specify the following optional ﬁelds:
•metrics_collection_interval  – Optional. Speciﬁes how often to collect the metrics for this 
object, overriding the global metrics_collection_interval  speciﬁed in the agent section of the 
conﬁguration ﬁle.
This value is speciﬁed in seconds. For example, specifying 10 causes metrics to be collected every 10 
seconds, and setting it to 300 speciﬁes metrics to be collected every 5 minutes.
If you set this value below 60 seconds, each metric is collected as a high-resolution metric. For more 
information, see High-resolution metrics (p. 176).
•append_dimensions  – Optional. Speciﬁes additional dimensions to use for only the metrics 
for this object. If you specify this ﬁeld, it's used in addition to dimensions speciﬁed in the global
append_dimensions  ﬁeld that is used for all types of metrics collected by the agent.
•drop_original_metrics  – Optional. If you are using the aggregation_dimensions  ﬁeld in the
metrics section to roll up metrics into aggregated results, then by default the agent sends both the 
aggregated metrics and the original metrics that are separated for each value of the dimension. If 
you don't want the original metrics to be sent to CloudWatch, you can specify this parameter with a 
list of metrics. The metrics speciﬁed along with this parameter don't have their metrics by dimension 
reported to CloudWatch. Instead, only the aggregated metrics are reported. This reduces the number 
of metrics that the agent collects, reducing your costs.
Within each counter section, you can also specify the following optional ﬁelds:
•rename – Speciﬁes a diﬀerent name to be used in CloudWatch for this metric.
•unit – Speciﬁes the unit to use for this metric. The unit that you specify must be a valid CloudWatch 
metric unit, as listed in the Unit  description in MetricDatum .
There are two other optional sections that you can include in metrics_collected :
•statsd – Enables you to retrieve custom metrics using the StatsD protocol. The CloudWatch agent 
acts as a daemon for the protocol. You use any standard StatsD  client to send the metrics to the 
CloudWatch agent. For more information, see Retrieve custom metrics with StatsD  (p. 945).
•procstat  – Enables you to retrieve metrics from individual processes. For more information, see
Collect process metrics with the procstat plugin (p. 933).
The following is an example metrics section for use on Windows Server. In this example, many 
Windows metrics are collected, and the computer is also set to receive additional metrics from a StatsD
client.
"metrics": { 
    "metrics_collected": { 
      "statsd": {}, 
      "Processor": { 
914Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
        "measurement": [ 
          {"name": "% Idle Time", "rename": "CPU_IDLE", "unit": "Percent"}, 
          "% Interrupt Time", 
          "% User Time", 
          "% Processor Time" 
        ], 
        "resources": [ 
          "*" 
        ], 
        "append_dimensions": { 
          "d1": "win_foo", 
          "d2": "win_bar" 
        } 
      }, 
      "LogicalDisk": { 
        "measurement": [ 
          {"name": "% Idle Time", "unit": "Percent"}, 
          {"name": "% Disk Read Time", "rename": "DISK_READ"}, 
          "% Disk Write Time" 
        ], 
        "resources": [ 
          "*" 
        ] 
      }, 
      "Memory": { 
        "metrics_collection_interval": 5, 
        "measurement": [ 
          "Available Bytes", 
          "Cache Faults/sec", 
          "Page Faults/sec", 
          "Pages/sec" 
        ], 
        "append_dimensions": { 
          "d3": "win_bo" 
        } 
      }, 
      "Network Interface": { 
        "metrics_collection_interval": 5, 
        "measurement": [ 
          "Bytes Received/sec", 
          "Bytes Sent/sec", 
          "Packets Received/sec", 
          "Packets Sent/sec" 
        ], 
        "resources": [ 
          "*" 
        ], 
        "append_dimensions": { 
          "d3": "win_bo" 
        } 
      }, 
      "System": { 
        "measurement": [ 
          "Context Switches/sec", 
          "System Calls/sec", 
          "Processor Queue Length" 
        ], 
        "append_dimensions": { 
          "d1": "win_foo", 
          "d2": "win_bar" 
        } 
      } 
    }, 
    "append_dimensions": { 
      "ImageId": "${aws:ImageId}", 
      "InstanceId": "${aws:InstanceId}", 
915Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
      "InstanceType": "${aws:InstanceType}", 
      "AutoScalingGroupName": "${aws:AutoScalingGroupName}" 
    }, 
    "aggregation_dimensions" : [["ImageId"], ["InstanceId", "InstanceType"], ["d1"],[]] 
    } 
  }
CloudWatch agent conﬁguration ﬁle: Logs section
The logs section includes the following ﬁelds:
•logs_collected  – Required if the logs section is included. Speciﬁes which log ﬁles and Windows 
event logs are to be collected from the server. It can include two ﬁelds, files  and windows_events .
•files – Speciﬁes which regular log ﬁles the CloudWatch agent is to collect. It contains one ﬁeld,
collect_list , which further deﬁnes these ﬁles.
•collect_list  – Required if files is included. Contains an array of entries, each of which 
speciﬁes one log ﬁle to collect. Each of these entries can include the following ﬁelds:
•file_path  – Speciﬁes the path of the log ﬁle to upload to CloudWatch Logs. Standard Unix 
glob matching rules are accepted, with the addition of ** as a super asterisk . For example, 
specifying /var/log/**.log  causes all .log  ﬁles in the /var/log  directory tree to be 
collected. For more examples, see Glob Library.
You can also use the standard asterisk as a standard wildcard. For example, /var/log/
system.log*  matches ﬁles such as system.log_1111 , system.log_2222 , and so on in /
var/log .
Only the latest ﬁle is pushed to CloudWatch Logs based on ﬁle modiﬁcation time. We 
recommend that you use wildcards to specify a series of ﬁles of the same type, such as
access_log.2018-06-01-01  and access_log.2018-06-01-02 , but not multiple kinds of 
ﬁles, such as access_log_80  and access_log_443 . To specify multiple kinds of ﬁles, add 
another log stream entry to the agent conﬁguration ﬁle so that each kind of log ﬁle goes to a 
diﬀerent log stream.
•auto_removal  – Optional. If this is true, the CloudWatch agent automatically deletes this log 
ﬁle after reading it and it has been rotated. Usually the log ﬁles are deleted after their entire 
contents are uploaded to CloudWatch Logs, but if the agent reaches the EOF (end of ﬁle) and 
also detects another newer log ﬁle that matches the same file_path , the log ﬁle is deleted 
even if the agent was unable to send all the logs from the older log ﬁle. This can result in log 
loss if the agent is stopped while it is trying to send logs.
The agent only removes complete ﬁles from logs that create multiple ﬁles, such as logs that 
create separate ﬁles for each date. If a log continuously writes to a single ﬁle, it is not removed.
If you already have a log ﬁle rotation or removal method in place, we recommend that you omit 
this ﬁeld or set it to false .
If you omit this ﬁeld, the default value of false  is used.
•log_group_name  – Optional. Speciﬁes what to use as the log group name in CloudWatch Logs. 
As part of the name, you can use {instance_id} , {hostname} , {local_hostname} , and
{ip_address}  as variables within the name. {hostname}  retrieves the hostname from the 
EC2 metadata, and {local_hostname}  uses the hostname from the network conﬁguration 
ﬁle.
If you use these variables to create many diﬀerent log groups, keep in mind the limit of 
1,000,000 log groups per Region per account.
Allowed characters include a–z, A–Z, 0–9, '_' (underscore), '-' (hyphen), '/' (forward slash), and 
'.' (period).
916Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
We recommend that you specify this ﬁeld to prevent confusion. If you omit this ﬁeld, the ﬁle 
path up to the ﬁnal dot is used as the log group name. For example, if the ﬁle path is /tmp/
TestLogFile.log.2017-07-11-14 , the log group name is /tmp/TestLogFile.log .
•log_stream_name  – Optional. Speciﬁes what to use as the log stream name in CloudWatch 
Logs. As part of the name, you can use {instance_id} , {hostname} , {local_hostname} , 
and {ip_address}  as variables within the name. {hostname}  retrieves the hostname from 
the EC2 metadata, and {local_hostname}  uses the hostname from the network conﬁguration 
ﬁle.
If you omit this ﬁeld, the value of the log_stream_name  parameter in the global logs section 
is used. If that is also omitted, the default value of {instance_id}  is used.
If a log stream doesn't already exist, it's created automatically.
•retention_in_days  – Optional. Speciﬁes the number of days to retain the log events in the 
speciﬁed log group.
•If the agent is creating this log group now, and you omit this ﬁeld, the retention of this new 
log group is set to never expire.
•If this log group already exists and you specify this ﬁeld, the new retention that you specify is 
used. If you omit this ﬁeld for a log group that already exists, the log group's retention is not 
changed.
The CloudWatch agent wizard uses -1 as the default value for this ﬁeld when it is used 
to create the agent conﬁguration ﬁle and you don't specify a value for log retention. This
-1 value speciﬁes set by the wizard speciﬁes that the events in the log group don't expire. 
However, manually editing this value to -1 has no eﬀect.
Valid values are 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 2192, 2557, 
2922, 3288, and 3653.
If you conﬁgure the agent to write multiple log streams to the same log group, specifying the
retention_in_days  in one place will set the log retention for the entire log group. If you 
specify retention_in_days  for the same log group in multiple places, the retention is set if 
all of those values are equal. However, if diﬀerent retention_in_days  values are speciﬁed for 
the same log group in multiple places, the log retention will not be set and the agent will stop, 
returning an error.
Note
The agent's IAM role or IAM user must have the logs:PutRetentionPolicy  for it to 
be able to set retention policies. For more information, see Allowing the CloudWatch 
agent to set log retention policy (p. 865).
Warning
If you set retention_in_days  for a log group that already exists, all logs in that log 
group that were published before the number of days that you specify are deleted. For 
example, setting it to 3 would cause all logs from 3 days ago and before to be deleted.
•filters – Optional. Can contain an array of entries, each of which speciﬁes a regular 
expression and a ﬁlter type to specify whether to publish or drop log entries that match the 
ﬁlter. If you omit this ﬁeld, all logs in the log ﬁle are published to CloudWatch Logs. If you 
include this ﬁeld, the agent processes each log message with all of the ﬁlters that you specify, 
and only the log events that pass all of the ﬁlters are published to CloudWatch Logs. The log 
entries that don’t pass all of the ﬁlters will still remain in the host's log ﬁle, but will not be sent 
to CloudWatch Logs.
Each entry in the ﬁlters array can include the following ﬁelds:
917Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
•type– Denotes the type of ﬁlter. Valid values are include  and exclude . With include , the 
log entry must match the expression to be published to CloudWatch Logs. With exclude , 
each log entry that matches the ﬁlter is not sent to CloudWatch Logs.
•expression – A regular expression string that follows the RE2 Syntax.
Note
The CloudWatch agent doesn't check the performance of any regular expression 
that you supply, or restrict the run time of the evaluation of the regular expressions. 
We recommend that you are careful not to write an expression that is expensive to 
evaluate. For more information about possible issues, see Regular expression Denial 
of Service - ReDoS
For example, the following excerpt of the CloudWatch agent conﬁguration ﬁle publishes logs 
that are PUT and POST requests to CloudWatch Logs, but excluding logs that come from 
Firefox.
"collect_list": [  
  { 
    "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/test.log",  
    "log_group_name": "test.log",  
    "log_stream_name": "test.log", 
    "filters": [ 
      { 
        "type": "exclude", 
        "expression": "Firefox" 
      }, 
      { 
        "type": "include", 
        "expression": "P(UT|OST)" 
      } 
    ] 
  }, 
  .....
]
Note
The order of the ﬁlters in the conﬁguration ﬁle matters for performance. In the 
preceding example, the agent drops all the logs that match Firefox before it starts 
evaluating the second ﬁlter. To cause fewer log entries to be evaluated by more than 
one ﬁlter, put the ﬁlter that you expect to rule out more logs ﬁrst in the conﬁguration 
ﬁle.
•timezone  – Optional. Speciﬁes the time zone to use when putting timestamps on log events. 
The valid values are UTC and Local . The default value is Local .
This parameter is ignored if you don't specify a value for timestamp_format .
•timestamp_format  – Optional. Speciﬁes the timestamp format, using plaintext and special 
symbols that start with %. If you omit this ﬁeld, the current time is used. If you use this ﬁeld, 
you can use the symbols in the following list as part of the format.
If a single log entry contains two time stamps that match the format, the ﬁrst time stamp is 
used.
This list of symbols is diﬀerent than the list used by the older CloudWatch Logs agent. For a 
summary of these diﬀerences, see Timestamp diﬀerences between the uniﬁed CloudWatch 
agent and the earlier CloudWatch Logs agent (p. 977)
%y
Year without century as a zero-padded decimal number. For example, 19 to represent 2019.
918Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
%Y
Year with century as a decimal number. For example, 2019 .
%b
Month as the locale's abbreviated name
%B
Month as the locale's full name
%m
Month as a zero-padded decimal number
%-m
Month as a decimal number (not zero-padded)
%d
Day of the month as a zero-padded decimal number
%-d
Day of the month as a decimal number (not zero-padded)
%A
Full name of weekday, such as Monday
%a
Abbreviation of weekday, such as Mon
%H
Hour (in a 24-hour clock) as a zero-padded decimal number
%I
Hour (in a 12-hour clock) as a zero-padded decimal number
%-I
Hour (in a 12-hour clock) as a decimal number (not zero-padded)
%p
AM or PM
%M
Minutes as a zero-padded decimal number
%-M
Minutes as a decimal number (not zero-padded)
%S
Seconds as a zero-padded decimal number
%-S
Seconds as a decimal number (not zero padded)
%f
Fractional seconds as a decimal number (1-9 digits), zero-padded on the left.919Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
%Z
Time zone, for example PST
%z
Time zone, expressed as the oﬀset between the local time zone and UTC. For example,
-0700. Only this format is supported. For example, -07:00  isn't a valid format.
•multi_line_start_pattern  – Speciﬁes the pattern for identifying the start of a log 
message. A log message is made of a line that matches the pattern and any subsequent lines 
that don't match the pattern.
If you omit this ﬁeld, multi-line mode is disabled, and any line that begins with a non-
whitespace character closes the previous log message and starts a new log message.
If you include this ﬁeld, you can specify {timestamp_format}  to use the same regular 
expression as your timestamp format. Otherwise, you can specify a diﬀerent regular expression 
for CloudWatch Logs to use to determine the start lines of multi-line entries.
•encoding  – Speciﬁed the encoding of the log ﬁle so that it can be read correctly. If you specify 
an incorrect coding, there might be data loss because characters that can't be decoded are 
replaced with other characters.
The default value is utf-8. The following are all possible values:
ascii, big5, euc-jp, euc-kr, gbk, gb18030, ibm866, iso2022-jp, 
iso8859-2, iso8859-3, iso8859-4, iso8859-5, iso8859-6, iso8859-7, 
iso8859-8, iso8859-8-i, iso8859-10, iso8859-13, iso8859-14, iso8859-15, 
iso8859-16, koi8-r, koi8-u, macintosh, shift_jis, utf-8, utf-16, 
windows-874, windows-1250, windows-1251, windows-1252, windows-1253, 
windows-1254, windows-1255, windows-1256, windows-1257, windows-1258, x-
mac-cyrillic
•The windows_events  section speciﬁes the type of Windows events to collect from servers running 
Windows Server. It includes the following ﬁelds:
•collect_list  – Required if windows_events  is included. Speciﬁes the types and levels of 
Windows events to be collected. Each log to be collected has an entry in this section, which can 
include the following ﬁelds:
•event_name  – Speciﬁes the type of Windows events to log. This is equivalent to the Windows 
event log channel name: for example, System , Security , Application , and so on. This ﬁeld 
is required for each type of Windows event to log.
Note
When CloudWatch retrieves messages from a Windows log channel, it looks up the 
log channel based on its Full Name  property. Meanwhile, the Windows Event Viewer 
navigation pane displays the Log Name  property of log channels. The Full Name  and
Log Name  do not always match. To conﬁrm the Full Name  of a channel, right-click on 
it in the Windows Event viewer and open Properties.
•event_levels  – Speciﬁes the levels of event to log. You must specify each level to log. 
Possible values include INFORMATION , WARNING , ERROR , CRITICAL , and VERBOSE . This ﬁeld is 
required for each type of Windows event to log.
•log_group_name  – Required. Speciﬁes what to use as the log group name in CloudWatch Logs.
•log_stream_name  – Optional. Speciﬁes what to use as the log stream name in CloudWatch 
Logs. As part of the name, you can use {instance_id} , {hostname} , {local_hostname} , 
and {ip_address}  as variables within the name. {hostname}  retrieves the hostname from 
the EC2 metadata, and {local_hostname}  uses the hostname from the network conﬁguration 
ﬁle.
920Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
If you omit this ﬁeld, the value of the log_stream_name  parameter in the global logs section 
is used. If that is also omitted, the default value of {instance_id}  is used.
If a log stream doesn't already exist, it's created automatically.
•event_format  – Optional. Speciﬁes the format to use when storing Windows events in 
CloudWatch Logs. xml uses the XML format as in Windows Event Viewer. text uses the legacy 
CloudWatch Logs agent format.
•retention_in_days  – Optional. Speciﬁes the number of days to retain the Windows events in 
the speciﬁed log group.
•If the agent is creating this log group now, and you omit this ﬁeld, the retention of this new 
log group is set to never expire.
•If this log group already exists and you specify this ﬁeld, the new retention that you specify is 
used. If you omit this ﬁeld for a log group that already exists, the log group's retention is not 
changed.
The CloudWatch agent wizard uses -1 as the default value for this ﬁeld when it is used 
to create the agent conﬁguration ﬁle and you don't specify a value for log retention. This
-1 value speciﬁes set by the wizard speciﬁes that the events in the log group don't expire. 
However, manually editing this value to -1 has no eﬀect.
Valid values are 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 2192, 2557, 
2922, 3288, and 3653.
If you conﬁgure the agent to write multiple log streams to the same log group, specifying the
retention_in_days  in one place will set the log retention for the entire log group. If you 
specify retention_in_days  for the same log group in multiple places, the retention is set if 
all of those values are equal. However, if diﬀerent retention_in_days  values are speciﬁed for 
the same log group in multiple places, the log retention will not be set and the agent will stop, 
returning an error.
Note
The agent's IAM role or IAM user must have the logs:PutRetentionPolicy  for it to 
be able to set retention policies. For more information, see Allowing the CloudWatch 
agent to set log retention policy (p. 865).
Warning
If you set retention_in_days  for a log group that already exists, all logs in that log 
group that were published before the number of days that you specify are deleted. For 
example, setting it to 3 would cause all logs from 3 days ago and before to be deleted.
•log_stream_name  – Required. Speciﬁes the default log stream name to be used for any logs or 
Windows events that don't have individual log stream names deﬁned in the log_stream_name
parameter within their entry in collect_list .
•endpoint_override  – Speciﬁes a FIPS endpoint or private link to use as the endpoint where the 
agent sends logs. Specifying this ﬁeld and setting a private link enables you to send the logs to an 
Amazon VPC endpoint. For more information, see What Is Amazon VPC?.
The value of endpoint_override  must be a string that is a URL.
For example, the following part of the logs section of the conﬁguration ﬁle sets the agent to use a VPC 
Endpoint when sending logs.
{ 
  "logs": { 
    "endpoint_override": "vpce-XXXXXXXXXXXXXXXXXXXXXXXXX.logs.us-
east-1.vpce.amazonaws.com", 
   ...... 
   },
921Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
} 
•force_flush_interval  – Speciﬁes in seconds the maximum amount of time that logs remain in the 
memory buﬀer before being sent to the server. No matter the setting for this ﬁeld, if the size of the 
logs in the buﬀer reaches 1 MB, the logs are immediately sent to the server. The default value is 5.
If you are using the agent to report high-resolution metrics in embedded metric format, and you are 
setting alarms on those metrics, keep this parameter set to the default value of 5. Otherwise, the 
metrics are reported with a delay that can cause alarming on partial or incomplete data.
•credentials  – Speciﬁes an IAM role to use when sending logs to a diﬀerent AWS account. If 
speciﬁed, this ﬁeld contains one parameter, role_arn .
•role_arn  – Speciﬁes the ARN of an IAM role to use for authentication when sending logs to 
a diﬀerent AWS account. For more information, see Sending metrics and logs to a diﬀerent 
account (p. 976). If speciﬁed here, this overrides the role_arn  speciﬁed in the agent section of 
the conﬁguration ﬁle, if any.
•metrics_collected  – This is a legacy ﬁeld that speciﬁed that the agent is to collect logs that are 
in embedded metric format. You can generate metric data from these logs. It contained the emf ﬁeld 
which speciﬁed that the agent is to collect metrics embedded in logs. To collect metrics embedded in 
logs it is no longer necessary to include either the metrics_collected  ﬁeld or the emf ﬁeld.
•emf – To collect metrics embedded in logs, it is no longer necessary to add this emf ﬁeld. This is 
a legacy ﬁeld that speciﬁed that the agent is to collect logs that are in embedded metric format. 
You can generate metric data from these logs. For more information, see Embedding metrics within 
logs (p. 985).
The following is an example of a logs section.
"logs": 
   { 
       "logs_collected": { 
           "files": { 
               "collect_list": [ 
                   { 
                       "file_path": "c:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\
\amazon-cloudwatch-agent.log", 
                       "log_group_name": "amazon-cloudwatch-agent.log", 
                       "log_stream_name": "my_log_stream_name_1", 
                       "timestamp_format": "%H: %M: %S%y%b%-d" 
                   }, 
                   { 
                       "file_path": "c:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\
\test.log", 
                       "log_group_name": "test.log", 
                       "log_stream_name": "my_log_stream_name_2" 
                   } 
               ] 
           }, 
           "windows_events": { 
               "collect_list": [ 
                   { 
                       "event_name": "System", 
                       "event_levels": [ 
                           "INFORMATION", 
                           "ERROR" 
                       ], 
                       "log_group_name": "System", 
                       "log_stream_name": "System" 
                   }, 
                   { 
                       "event_name": "CustomizedName", 
                       "event_levels": [ 
922Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
                           "INFORMATION", 
                           "ERROR" 
                       ], 
                       "log_group_name": "CustomizedLogGroup", 
                       "log_stream_name": "CustomizedLogStream" 
                   } 
               ] 
           } 
       }, 
       "log_stream_name": "my_log_stream_name"
}
How the CloudWatch agent handles sparse log ﬁles
Sparse ﬁles are ﬁles with both empty blocks and real contents. A sparse ﬁle uses disk space more 
eﬃciently by writing brief information representing the empty blocks to disk instead of the actual null 
bytes which makes up the block. This makes the actual size of a sparse ﬁle usually much smaller than its 
apparent size.
However, the CloudWatch agent doesn’t treat sparse ﬁles diﬀerently than it treats normal ﬁles. When the 
agent reads a sparse ﬁle, the empty blocks are treated as "real" blocks ﬁlled with null bytes. Because of 
this, the CloudWatch agent publishes as many bytes as the apparent size of a sparse ﬁle to CloudWatch.
Conﬁguring the CloudWatch agent to publish a sparse ﬁle can cause higher than expected CloudWatch 
costs, so we recommend not to do so. For example, /var/logs/lastlog  in Linux is usually a very 
sparse ﬁle, and we recommend that you don't publish it to CloudWatch.
CloudWatch agent conﬁguration ﬁle: Complete examples
The following is an example of a complete CloudWatch agent conﬁguration ﬁle for a Linux server.
The items listed in the measurement  sections for the metrics you want to collect can either specify the 
complete metric name such or just the part of the metric name that will be appended to the type of 
resource. For example, specifying either reads  or diskio_reads  in the measurement  section of the
diskio section will cause the diskio_reads  metric to be collected.
This example includes both ways of specifying metrics in the measurement  section.
    { 
      "agent": { 
        "metrics_collection_interval": 10, 
        "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log" 
      }, 
      "metrics": { 
        "namespace": "MyCustomNamespace", 
        "metrics_collected": { 
          "cpu": { 
            "resources": [ 
              "*" 
            ], 
            "measurement": [ 
              {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"}, 
              {"name": "cpu_usage_nice", "unit": "Percent"}, 
              "cpu_usage_guest" 
            ], 
            "totalcpu": false, 
            "metrics_collection_interval": 10, 
            "append_dimensions": { 
              "customized_dimension_key_1": "customized_dimension_value_1", 
              "customized_dimension_key_2": "customized_dimension_value_2" 
            } 
923Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
          }, 
          "disk": { 
            "resources": [ 
              "/", 
              "/tmp" 
            ], 
            "measurement": [ 
              {"name": "free", "rename": "DISK_FREE", "unit": "Gigabytes"}, 
              "total", 
              "used" 
            ], 
             "ignore_file_system_types": [ 
              "sysfs", "devtmpfs" 
            ], 
            "metrics_collection_interval": 60, 
            "append_dimensions": { 
              "customized_dimension_key_3": "customized_dimension_value_3", 
              "customized_dimension_key_4": "customized_dimension_value_4" 
            } 
          }, 
          "diskio": { 
            "resources": [ 
              "*" 
            ], 
            "measurement": [ 
              "reads", 
              "writes", 
              "read_time", 
              "write_time", 
              "io_time" 
            ], 
            "metrics_collection_interval": 60 
          }, 
          "swap": { 
            "measurement": [ 
              "swap_used", 
              "swap_free", 
              "swap_used_percent" 
            ] 
          }, 
          "mem": { 
            "measurement": [ 
              "mem_used", 
              "mem_cached", 
              "mem_total" 
            ], 
            "metrics_collection_interval": 1 
          }, 
          "net": { 
            "resources": [ 
              "eth0" 
            ], 
            "measurement": [ 
              "bytes_sent", 
              "bytes_recv", 
              "drop_in", 
              "drop_out" 
            ] 
          }, 
          "netstat": { 
            "measurement": [ 
              "tcp_established", 
              "tcp_syn_sent", 
              "tcp_close" 
            ], 
            "metrics_collection_interval": 60 
924Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
          }, 
          "processes": { 
            "measurement": [ 
              "running", 
              "sleeping", 
              "dead" 
            ] 
          } 
        }, 
        "append_dimensions": { 
          "ImageId": "${aws:ImageId}", 
          "InstanceId": "${aws:InstanceId}", 
          "InstanceType": "${aws:InstanceType}", 
          "AutoScalingGroupName": "${aws:AutoScalingGroupName}" 
        }, 
        "aggregation_dimensions" : [["ImageId"], ["InstanceId", "InstanceType"], ["d1"],
[]], 
        "force_flush_interval" : 30 
      }, 
      "logs": { 
        "logs_collected": { 
          "files": { 
            "collect_list": [ 
              { 
                "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-
agent.log", 
                "log_group_name": "amazon-cloudwatch-agent.log", 
                "log_stream_name": "amazon-cloudwatch-agent.log", 
                "timezone": "UTC" 
              }, 
              { 
                "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/test.log", 
                "log_group_name": "test.log", 
                "log_stream_name": "test.log", 
                "timezone": "Local" 
              } 
            ] 
          } 
        }, 
        "log_stream_name": "my_log_stream_name", 
        "force_flush_interval" : 15 
      } 
    }
The following is an example of a complete CloudWatch agent conﬁguration ﬁle for a server running 
Windows Server.
{ 
      "agent": { 
        "metrics_collection_interval": 60, 
        "logfile": "c:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\\amazon-
cloudwatch-agent.log" 
      }, 
      "metrics": { 
        "namespace": "MyCustomNamespace", 
        "metrics_collected": { 
          "Processor": { 
            "measurement": [ 
              {"name": "% Idle Time", "rename": "CPU_IDLE", "unit": "Percent"}, 
              "% Interrupt Time", 
              "% User Time", 
              "% Processor Time" 
            ], 
            "resources": [ 
925Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
              "*" 
            ], 
            "append_dimensions": { 
              " customized_dimension_key_1 ": "customized_dimension_value_1 ", 
              " customized_dimension_key_2 ": "customized_dimension_value_2 " 
            } 
          }, 
          "LogicalDisk": { 
            "measurement": [ 
              {"name": "% Idle Time", "unit": "Percent"}, 
              {"name": "% Disk Read Time", "rename": "DISK_READ"}, 
              "% Disk Write Time" 
            ], 
            "resources": [ 
              "*" 
            ] 
          }, 
          " customizedObjectName ": { 
            "metrics_collection_interval": 60, 
            " customizedCounterName ": [ 
              " metric1", 
              " metric2" 
            ], 
            "resources": [ 
              " customizedInstances " 
            ] 
          }, 
          "Memory": { 
            "metrics_collection_interval": 5, 
            "measurement": [ 
              "Available Bytes", 
              "Cache Faults/sec", 
              "Page Faults/sec", 
              "Pages/sec" 
            ] 
          }, 
          "Network Interface": { 
            "metrics_collection_interval": 5, 
            "measurement": [ 
              "Bytes Received/sec", 
              "Bytes Sent/sec", 
              "Packets Received/sec", 
              "Packets Sent/sec" 
            ], 
            "resources": [ 
              "*" 
            ], 
            "append_dimensions": { 
              " customized_dimension_key_3 ": "customized_dimension_value_3 " 
            } 
          }, 
          "System": { 
            "measurement": [ 
              "Context Switches/sec", 
              "System Calls/sec", 
              "Processor Queue Length" 
            ] 
          } 
        }, 
        "append_dimensions": { 
          "ImageId": "${aws:ImageId}", 
          "InstanceId": "${aws:InstanceId}", 
          "InstanceType": "${aws:InstanceType}", 
          "AutoScalingGroupName": "${aws:AutoScalingGroupName}" 
        }, 
        "aggregation_dimensions" : [["ImageId"], ["InstanceId", "InstanceType"], ["d1"],[]] 
926Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
      }, 
      "logs": { 
        "logs_collected": { 
          "files": { 
            "collect_list": [ 
              { 
                "file_path": "c:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\\amazon-
cloudwatch-agent.log", 
                "log_group_name": "amazon-cloudwatch-agent.log", 
                "timezone": "UTC" 
              }, 
              { 
                "file_path": "c:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\
\test.log", 
                "log_group_name": "test.log", 
                "timezone": "Local" 
              } 
            ] 
          }, 
          "windows_events": { 
            "collect_list": [ 
              { 
                "event_name": "System", 
                "event_levels": [ 
                  "INFORMATION", 
                  "ERROR" 
                ], 
                "log_group_name": "System", 
                "log_stream_name": "System", 
                "event_format": "xml" 
              }, 
              { 
                "event_name": "CustomizedName", 
                "event_levels": [ 
                  "WARNING", 
                  "ERROR" 
                ], 
                "log_group_name": " CustomizedLogGroup ", 
                "log_stream_name": " CustomizedLogStream ", 
                "event_format": "xml" 
              } 
            ] 
          } 
        }, 
        "log_stream_name": "example_log_stream_name" 
      } 
    }
Save the CloudWatch agent conﬁguration ﬁle manually
If you create or edit the CloudWatch agent conﬁguration ﬁle manually, you can give it any name. For 
simplicity in troubleshooting, we recommend that you name it /opt/aws/amazon-cloudwatch-
agent/etc/amazon-cloudwatch-agent.json  on a Linux server and $Env:ProgramData\Amazon
\AmazonCloudWatchAgent\amazon-cloudwatch-agent.json  on servers running Windows Server. 
After you have created the ﬁle, you can copy it to other servers where you want to run the agent.
Uploading the CloudWatch agent conﬁguration ﬁle to Systems 
Manager Parameter Store
If you plan to use the SSM Agent to install the CloudWatch agent on servers, after you manually edit the 
CloudWatch agent conﬁguration ﬁle, you can upload it to Systems Manager Parameter Store. To do so, 
use the Systems Manager put-parameter  command.
927Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
To be able to store the ﬁle in Parameter Store, you must use an IAM role with suﬃcient permissions. For 
more information, see Create IAM roles and users for use with the CloudWatch agent (p. 874).
Use the following command, where parameter name  is the name to be used for this ﬁle in Parameter 
Store and configuration_file_pathname  is the path and ﬁle name of the conﬁguration ﬁle that you 
edited.
aws ssm put-parameter --name " parameter name " --type "String" --value 
 file:// configuration_file_pathname
Collect network performance metrics
EC2 instances running on Linux that use the Elastic Network Adapter (ENA) publish network performance 
metrics. Version 1.246396.0 and later of the CloudWatch agent enable you to import these network 
performance metrics into CloudWatch. When you import these network performance metrics into 
CloudWatch, they are charged as CloudWatch custom metrics.
For more information about the ENA driver, see  Enabling enhanced networking with the Elastic Network 
Adapter (ENA) on Linux instances and  Enabling enhanced networking with the Elastic Network Adapter 
(ENA) on Windows instances.
How you set up the collection of network performance metrics diﬀers on Linux servers and Windows 
servers.
The following table lists these network performance metrics enabled by the ENA adapter. When the 
CloudWatch agent imports these metrics into CloudWatch from Linux instances, it prepends ethtool_
at the beginning of each of these metric names.
Metric Description
Name on Linux servers:
bw_in_allowance_exceeded
Name on Windows servers: Aggregate 
inbound BW allowance exceededThe number of packets queued and/or dropped because 
the inbound aggregate bandwidth exceeded the 
maximum for the instance..
This metric is collected only if you have listed it in the
ethtool subsection of the metrics_collected
section of the CloudWatch agent conﬁguration ﬁle. For 
more information, see Collect network performance 
metrics  (p. 928)
Unit: None
Name on Linux servers:
bw_out_allowance_exceeded
Name on Windows servers: Aggregate 
outbound BW allowance exceededThe number of packets queued and/or dropped because 
the outbound aggregate bandwidth exceeded the 
maximum for the instance.
This metric is collected only if you have listed it in the
ethtool subsection of the metrics_collected
section of the CloudWatch agent conﬁguration ﬁle. For 
more information, see Collect network performance 
metrics  (p. 928)
Unit: None
Name on Linux 
servers:conntrack_allowance_availableReports the number of tracked connections that 
can be established by the instance before hitting 
the Connections Tracked allowance of that instance 
928Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
Metric Description
type. This metric is available only on Nitro-based EC2 
instances using the Linux driver for Elastic Network 
Adapter (ENA) starting from version 2.8.1
This metric is collected only if you have listed it in the
ethtool subsection of the metrics_collected
section of the CloudWatch agent conﬁguration ﬁle. For 
more information, see Collect network performance 
metrics  (p. 928)
Unit: None
Name on Linux 
servers:conntrack_allowance_exceeded
Name on Windows servers: Connection 
tracking allowance exceededThe number of packets dropped because connection 
tracking exceeded the maximum for the instance and 
new connections could not be established. This can 
result in packet loss for traﬃc to or from the instance.
This metric is collected only if you have listed it in the
ethtool subsection of the metrics_collected
section of the CloudWatch agent conﬁguration ﬁle. For 
more information, see Collect network performance 
metrics  (p. 928)
Unit: None
Name on Linux servers:
linklocal_allowance_exceeded
Name on Windows servers: Link local 
packet rate allowance exceededThe number of packets dropped because the PPS of the 
traﬃc to local proxy services exceeded the maximum for 
the network interface. This impacts traﬃc to the DNS 
service, the Instance Metadata Service, and the Amazon 
Time Sync Service.
This metric is collected only if you have listed it in the
ethtool subsection of the metrics_collected
section of the CloudWatch agent conﬁguration ﬁle. For 
more information, see Collect network performance 
metrics  (p. 928)
Unit: None
Name on Linux servers:
pps_allowance_exceeded
Name on Windows servers: PPS 
allowance exceededThe number of packets queued and/or dropped because 
the bidirectional PPS exceeded the maximum for the 
instance.
This metric is collected only if you have listed it in the
ethtool subsection of the metrics_collected
section of the CloudWatch agent conﬁguration ﬁle. For 
more information, see Collect network performance 
metrics  (p. 928)
Unit: None
Linux setup
On Linux servers, the ethtool plugin  enables you to import the network performance metrics into 
CloudWatch.
929Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
ethtool is a standard Linux utility that can collect statistics about Ethernet devices on Linux servers. 
The statistics it collects depend on the network device and driver. Examples of these statistics include
tx_packets , rx_bytes , tx_errors , and align_errors . When you use the ethtool plugin with the 
CloudWatch agent, you can also import these statistics into CloudWatch, along with the EC2 network 
performance metrics listed earlier in this section.
When the CloudWatch agent imports metrics into CloudWatch, it adds an ethtool_  preﬁx to the names 
of all imported metrics. So the standard ethtool statistic rx_bytes  is called ethtool_rx_bytes
in CloudWatch, and the EC2 network performance metric bw_in_allowance_exceeded  is called
ethtool_bw_in_allowance_exceeded  in CloudWatch.
On Linux servers, to import ethtool metrics, add an ethtool section to the metrics_collected
section of the CloudWatch agent conﬁguration ﬁle. The ethtool section can include the following 
subsections:
•interface_include— Including this section causes the agent to collect metrics from only the interfaces 
that have names listed in this section. If you omit this section, metrics are collected from all Ethernet 
interfaces that aren't listed in interface_exclude .
The default ethernet interface is eth0 .
•interface_exclude— If you include this section, list the Ethernet interfaces that you don't want to 
collect metrics from.
The ethtool plugin always ignores loopback interfaces.
•metrics_include — This section lists the metrics to import into CloudWatch. It can include both 
standard statistics collected by ethtool and Amazon EC2 high-resolution network metrics.
The following example displays part of the CloudWatch agent conﬁguration ﬁle. This conﬁguration 
collects the standard ethtool metrics rx_packets  and tx_packets , and the Amazon EC2 network 
performance metrics from only the eth1 interface.
For more information about the CloudWatch agent conﬁguration ﬁle, see  Manually create or edit the 
CloudWatch agent conﬁguration ﬁle (p. 903).
"metrics": { 
    "append_dimensions": { 
      "InstanceId": "${aws:InstanceId}" 
    }, 
    "metrics_collected": { 
      "ethtool": { 
        "interface_include": [ 
          "eth1" 
        ], 
        "metrics_include": [ 
          "rx_packets", 
          "tx_packets", 
          "bw_in_allowance_exceeded", 
          "bw_out_allowance_exceeded", 
          "conntrack_allowance_exceeded", 
          "linklocal_allowance_exceeded", 
          "pps_allowance_exceeded" 
         ] 
      } 
   }
}
930Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
Windows setup
On Windows servers, the network performance metrics are available through Windows Performance 
Counters, which the CloudWatch agent already collects metrics from. So you do not need a plugin to 
collect these metrics from Windows servers.
The following is a sample conﬁguration ﬁle to collect network performance metrics from Windows. For 
more information about editing the CloudWatch agent conﬁguration ﬁle, see  Manually create or edit the 
CloudWatch agent conﬁguration ﬁle (p. 903).
{ 
    "metrics": { 
        "append_dimensions": { 
            "InstanceId": "${aws:InstanceId}" 
        }, 
        "metrics_collected": { 
            "ENA Packets Shaping": { 
                "measurement": [ 
                    "Aggregate inbound BW allowance exceeded", 
                    "Aggregate outbound BW allowance exceeded", 
                    "Connection tracking allowance exceeded", 
                    "Link local packet rate allowance exceeded", 
                    "PPS allowance exceeded" 
                ], 
                "metrics_collection_interval": 60, 
                "resources": [ 
                    "*" 
                ] 
            } 
        } 
    }
}
Viewing network performance metrics
After importing network performance metrics into CloudWatch, you can view these metrics as time 
series graphs, and create alarms that can watch these metrics and notify you if they breach a threshold 
that you specify. The following procedure shows how to view ethtool metrics as a time series graph. For 
more information about setting alarms, see  Using Amazon CloudWatch alarms (p. 180).
Because all of these metrics are aggregate counters, you can use CloudWatch metric math functions such 
as RATE(METRICS())  to calculate the rate for these metrics in graphs or use them to set alarms. For 
more information about metric math functions, see Use metric math  (p. 136).
To view network performance metrics in the CloudWatch console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. Choose the namespace for the metrics collected by the agent. By default, this is CWAgent, but you 
may have speciﬁed a diﬀerent namespace in the CloudWatch agent conﬁguration ﬁle.
4. Choose a metric dimension (for example, Per-Instance Metrics).
5. The All metrics  tab displays all metrics for that dimension in the namespace. You can do the 
following:
a. To graph a metric, select the check box next to the metric. To select all metrics, select the check 
box in the heading row of the table.
b. To sort the table, use the column heading.
c. To ﬁlter by resource, choose the resource ID, and then choose Add to search .
931Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
d. To ﬁlter by metric, choose the metric name, and then choose Add to search .
6. (Optional) To add this graph to a CloudWatch dashboard, choose Actions, and then choose Add to 
dashboard .
Collect NVIDIA GPU metrics
You can use the CloudWatch agent to collect NVIDIA GPU metrics from Linux servers. To set this up, add 
a nvidia_gpu  section inside the metrics_collected  section of the CloudWatch agent conﬁguration 
ﬁle. For more information, see Linux section (p. 906).
The following metrics can be collected. All of these metrics are collected with no CloudWatch Unit , but 
you can specify a unit for each metric by adding a parameter to the CloudWatch agent conﬁguration ﬁle. 
For more information, see Linux section (p. 906).
Metric Metric name in CloudWatch Description
utilization_gpu nvidia_smi_utilization_gpu The percentage of time over the past sample period 
during which one or more kernals on the GPU was 
running.
temperature_gpu nvidia_smi_temperature_gpu The core GPU temperature in degrees Celsius.
power_draw nvidia_smi_power_draw The last measured power draw for the entire board, in 
watts.
utilization_memory nvidia_smi_utilization_memory The percentage of time over the past sample period 
during which global (device) memory was being read 
or written.
fan_speed nvidia_smi_fan_speed The percentage of maximum fan speed that the 
device's fan is currently intended to run at.
memory_total nvidia_smi_memory_total Reported total memory, in MB.
memory_used nvidia_smi_memory_used Memory used, in MB.
memory_free nvidia_smi_memory_free Memory free, in MB.
pcie_link_gen_current nvidia_smi_pcie_link_gen_current The current link generation.
pcie_link_width_current nvidia_smi_pcie_link_width_current The current link width.
encoder_stats_session_count nvidia_smi_encoder_stats_session_count Current number of encoder sessions.
encoder_stats_average_fps nvidia_smi_encoder_stats_average_fps The moving average of the encode frames per second.
encoder_stats_average_latency nvidia_smi_encoder_stats_average_latency The moving average of the encode latency in 
microseconds.
clocks_current_graphics nvidia_smi_clocks_current_graphics The current frequency of the graphics (shader) clock.
clocks_current_sm nvidia_smi_clocks_current_sm The current frequency of the Streaming 
Multiprocessor (SM) clock.
clocks_current_memory nvidia_smi_clocks_current_memory The current frequency of the memory clock.
clocks_current_video nvidia_smi_clocks_current_video The current frequency of the video (encoder plus 
decoder) clocks.
932Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
All of these metrics are collected with the following dimensions:
Dimension Description
index A unique 
identiﬁer for 
the GPU on 
this server. 
Represents 
the NVIDIA 
Management 
Library (NVML) 
index of the 
device.
name The type of GPU. 
For example,
NVIDIA Tesla 
A100
host The server host 
name.
Collect process metrics with the procstat plugin
The procstat  plugin enables you to collect metrics from individual processes. It is supported on Linux 
servers and on servers running Windows Server 2012 or later.
Topics
•Conﬁguring the CloudWatch agent for procstat (p. 933)
•Metrics collected by procstat (p. 935)
•Viewing process metrics imported by the CloudWatch agent (p. 944)
Conﬁguring the CloudWatch agent for procstat
To use the procstat plugin, add a procstat  section in the metrics_collected  section of the 
CloudWatch agent conﬁguration ﬁle. There are three ways to specify the processes to monitor. You 
can use only one of these methods, but you can use that method to specify one or more processes to 
monitor.
•pid_file : Selects processes by the names of the process identiﬁcation number (PID) ﬁles they create.
•exe: Selects the processes that have process names that match the string that you specify, using 
regular expression matching rules. The match is a "contains" match, meaning that if you specify
agent as the term to match, processes with names like cloudwatchagent  match the term. For more 
information, see Syntax.
•pattern: Selects processes by the command lines used to start the processes. All processes are 
selected that have command lines matching the speciﬁed string using regular expression matching 
rules. The entire command line is checked, including parameters and options used with the command.
The match is a "contains" match, meaning that if you specify -c as the term to match, processes with 
parameters like -config  match the term.
•drop_original_metrics  – Optional. If you are using the aggregation_dimensions  ﬁeld in the
metrics section to roll up metrics into aggregated results, then by default the agent sends both the 
aggregated metrics and the original metrics that are separated for each value of the dimension. If 
933Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
you don't want the original metrics to be sent to CloudWatch, you can specify this parameter with a 
list of metrics. The metrics speciﬁed along with this parameter don't have their metrics by dimension 
reported to CloudWatch. Instead, only the aggregated metrics are reported. This reduces the number 
of metrics that the agent collects, reducing your costs.
The CloudWatch agent uses only one of these methods, even if you include more than one of the above 
sections. If you specify more than one section, the CloudWatch agent uses the pid_file  section if it is 
present. If not, it uses the exe section.
On Linux servers, the strings that you specify in an exe or pattern section are evaluated as regular 
expressions. On servers running Windows Server, these strings are evaluated as WMI queries. An example 
would be pattern: "%apache%" . For more information, see LIKE Operator .
Whichever method you use, you can include an optional metrics_collection_interval  parameter, 
which speciﬁes how often in seconds to collect those metrics. If you omit this parameter, the default 
value of 60 seconds is used.
In the examples in the following sections, the procstat  section is the only section included in the
metrics_collected  section of the agent conﬁguration ﬁle. Actual conﬁguration ﬁles can also 
include other sections in metrics_collected . For more information, see  Manually create or edit the 
CloudWatch agent conﬁguration ﬁle (p. 903).
Conﬁguring with pid_ﬁle
The following example procstat  section monitors the processes that create the PID ﬁles
example1.pid  and example2.pid . Diﬀerent metrics are collected from each process. Metrics collected 
from the process that creates example2.pid  are collected every 10 seconds, and the metrics collected 
from the example1.pid  process are collected every 60 seconds, the default value.
{ 
    "metrics": { 
        "metrics_collected": { 
            "procstat": [ 
                { 
                    "pid_file": "/var/run/example1.pid", 
                    "measurement": [ 
                        "cpu_usage", 
                        "memory_rss" 
                    ] 
                }, 
                { 
                    "pid_file": "/var/run/example2.pid", 
                    "measurement": [ 
                        "read_bytes", 
                        "read_count", 
                        "write_bytes" 
                    ], 
                    "metrics_collection_interval": 10 
                } 
            ] 
        } 
    }
}
Conﬁguring with exe
The following example procstat  section monitors all processes with names that match the strings
agent  or plugin. The same metrics are collected from each process.
{ 
    "metrics": { 
934Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
        "metrics_collected": { 
            "procstat": [ 
                { 
                    "exe": "agent", 
                    "measurement": [ 
                        "cpu_time", 
                        "cpu_time_system", 
                        "cpu_time_user" 
                    ] 
                }, 
                { 
                    "exe": "plugin", 
                    "measurement": [ 
                        "cpu_time", 
                        "cpu_time_system", 
                        "cpu_time_user" 
                    ] 
                } 
            ] 
        } 
    }
}
Conﬁguring with pattern
The following example procstat  section monitors all processes with command lines that match the 
strings config  or -c. The same metrics are collected from each process.
{ 
    "metrics": { 
        "metrics_collected": { 
            "procstat": [ 
                { 
                    "pattern": "config", 
                    "measurement": [ 
                        "rlimit_memory_data_hard", 
                        "rlimit_memory_data_soft", 
                        "rlimit_memory_stack_hard", 
                        "rlimit_memory_stack_soft" 
                    ] 
                }, 
                { 
                    "pattern": "-c", 
                    "measurement": [ 
                        "rlimit_memory_data_hard", 
                        "rlimit_memory_data_soft", 
                        "rlimit_memory_stack_hard", 
                        "rlimit_memory_stack_soft" 
                    ] 
                } 
            ] 
        } 
    }
}
Metrics collected by procstat
The following table lists the metrics that you can collect with the procstat  plugin.
The CloudWatch agent adds procstat  to the beginning of the following metric names. There is a 
diﬀerent syntax depending on whether it was collected from a Linux server or a server running Windows 
Server. For example, the cpu_time  metric appears as procstat_cpu_time  when collected from Linux 
and as procstat cpu_time  when collected from Windows Server.
935Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
Metric name Available on Description
cpu_time Linux The amount of 
time that the 
process uses the 
CPU. This metric 
is measured in 
hundredths of a 
second.
Unit: Count
cpu_time_guest Linux The amount of 
time that the 
process is in 
guest mode. 
This metric is 
measured in 
hundredths of a 
second.
Type: Float
Unit: None
cpu_time_guest_nice Linux The amount 
of time that 
the process is 
running in a 
niced guest. 
This metric is 
measured in 
hundredths of a 
second.
Type: Float
Unit: None
cpu_time_idle Linux The amount 
of time that 
the process is 
in idle mode. 
This metric is 
measured in 
hundredths of a 
second.
Type: Float
Unit: None
cpu_time_iowait Linux The amount 
of time that 
the process is 
waiting for I/
O operations 
to complete. 
936Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
Metric name Available on Description
This metric is 
measured in 
hundredths of a 
second.
Type: Float
Unit: None
cpu_time_irq Linux The amount 
of time that 
the process 
is servicing 
interrupts. 
This metric is 
measured in 
hundredths of a 
second.
Type: Float
Unit: None
cpu_time_nice Linux The amount 
of time that 
the process is 
in nice mode. 
This metric is 
measured in 
hundredths of a 
second.
Type: Float
Unit: None
cpu_time_soft_irq Linux The amount 
of time that 
the process 
is servicing 
software 
interrupts. 
This metric is 
measured in 
hundredths of a 
second.
Type: Float
Unit: None
937Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
Metric name Available on Description
cpu_time_steal Linux The amount 
of time spent 
running in 
other operating 
systems when 
running in a 
virtualized 
environment. 
This metric is 
measured in 
hundredths of a 
second.
Type: Float
Unit: None
cpu_time_stolen Linux, Windows Server The amount 
of time that 
the process 
is in stolen 
time , which is 
time spent in 
other operating 
systems in a 
virtualized 
environment. 
This metric is 
measured in 
hundredths of a 
second.
Type: Float
Unit: None
cpu_time_system Linux, Windows Server, macOS The amount of 
time that the 
process is in 
system mode. 
This metric is 
measured in 
hundredths of a 
second.
Type: Float
Unit: Count
938Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
Metric name Available on Description
cpu_time_user Linux, Windows Server, macOS The amount 
of time that 
the process is 
in user mode. 
This metric is 
measured in 
hundredths of a 
second.
Unit: Count
cpu_usage Linux, Windows Server, macOSThe percentage 
of time that the 
process is active 
in any capacity.
Unit: Percent
memory_data Linux, macOS The amount of 
memory that the 
process uses for 
data.
Unit: Bytes
memory_locked Linux, macOS The amount of 
memory that 
the process has 
locked.
Unit: Bytes
memory_rss Linux, Windows Server, macOS The amount of 
real memory 
(resident set) 
that the process 
is using.
Unit: Bytes
memory_stack Linux, macOS The amount of 
stack memory 
that the process 
is using.
Unit: Bytes
memory_swap Linux, macOS The amount of 
swap memory 
that the process 
is using.
Unit: Bytes
939Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
Metric name Available on Description
memory_vms Linux, Windows Server, macOS The amount of 
virtual memory 
that the process 
is using.
Unit: Bytes
num_fds Linux The number of 
ﬁle descriptors 
that this process 
has open.
Unit: None
num_threads Linux, Windows, macOS The number of 
threads in this 
process.
Unit: None
pid Linux, Windows Server, macOSProcess 
identiﬁer (ID).
Unit: None
pid_count Linux, Windows Server. macOS The number 
of process IDs 
associated with 
the process.
On Linux servers 
and macOS 
computers the 
full name of 
this metric is
procstat_lookup_pid_count
and on Windows 
Server it is
procstat_lookup 
pid_count .
Unit: None
read_bytes Linux, Windows Server The number of 
bytes that the 
process has read 
from disks.
Unit: Bytes
write_bytes Linux, Windows Server The number 
of bytes that 
the process has 
written to disks.
Unit: Bytes
940Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
Metric name Available on Description
read_count Linux, Windows Server The number 
of disk read 
operations that 
the process has 
executed.
Unit: None
rlimit_realtime_priority_hard Linux The hard limit 
on the real-time 
priority that can 
be set for this 
process.
Unit: None
rlimit_realtime_priority_soft Linux The soft limit 
on the real-time 
priority that can 
be set for this 
process.
Unit: None
rlimit_signals_pending_hard Linux The hard limit 
on maximum 
number of 
signals that can 
be queued by 
this process.
Unit: None
rlimit_signals_pending_soft Linux The soft limit 
on maximum 
number of 
signals that can 
be queued by 
this process.
Unit: None
rlimit_nice_priority_hard Linux The hard limit 
on the maximum 
nice priority that 
can be set by 
this process.
Unit: None
rlimit_nice_priority_soft Linux The soft limit on 
the maximum 
nice priority that 
can be set by 
this process.
Unit: None
941Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
Metric name Available on Description
rlimit_num_fds_hard Linux The hard limit 
on the maximum 
number of ﬁle 
descriptors that 
this process can 
have open.
Unit: None
rlimit_num_fds_soft Linux The soft limit on 
the maximum 
number of ﬁle 
descriptors that 
this process can 
have open.
Unit: None
write_count Linux, Windows Server The number 
of disk write 
operations that 
the process has 
executed.
Unit: None
involuntary_context_switches Linux The number 
of times that 
the process was 
involuntarily 
context-
switched.
Unit: None
voluntary_context_switches Linux The number 
of times that 
the process 
was context-
switched 
voluntarily.
Unit: None
realtime_priority Linux The current 
usage of real-
time priority for 
the process.
Unit: None
nice_priority Linux The current 
usage of nice 
priority for the 
process.
Unit: None
942Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
Metric name Available on Description
signals_pending Linux The number of 
signals pending 
to be handled by 
the process.
Unit: None
rlimit_cpu_time_hard Linux The hard CPU 
time resource 
limit for the 
process.
Unit: None
rlimit_cpu_time_soft Linux The soft CPU 
time resource 
limit for the 
process.
Unit: None
rlimit_file_locks_hard Linux The hard ﬁle 
locks resource 
limit for the 
process.
Unit: None
rlimit_file_locks_soft Linux The soft ﬁle 
locks resource 
limit for the 
process.
Unit: None
rlimit_memory_data_hard Linux The hard 
resource limit on 
the process for 
memory used 
for data.
Unit: Bytes
rlimit_memory_data_soft Linux The soft 
resource limit on 
the process for 
memory used 
for data.
Unit: Bytes
rlimit_memory_locked_hard Linux The hard 
resource limit on 
the process for 
locked memory.
Unit: Bytes
943Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
Metric name Available on Description
rlimit_memory_locked_soft Linux The soft 
resource limit on 
the process for 
locked memory.
Unit: Bytes
rlimit_memory_rss_hard Linux The hard 
resource limit 
on the process 
for physical 
memory.
Unit: Bytes
rlimit_memory_rss_soft Linux The soft 
resource limit 
on the process 
for physical 
memory.
Unit: Bytes
rlimit_memory_stack_hard Linux The hard 
resource limit 
on the process 
stack.
Unit: Bytes
rlimit_memory_stack_soft Linux The soft 
resource limit 
on the process 
stack.
Unit: Bytes
rlimit_memory_vms_hard Linux The hard 
resource limit on 
the process for 
virtual memory.
Unit: Bytes
rlimit_memory_vms_soft Linux The soft 
resource limit on 
the process for 
virtual memory.
Unit: Bytes
Viewing process metrics imported by the CloudWatch agent
After importing process metrics into CloudWatch, you can view these metrics as time series graphs, and 
create alarms that can watch these metrics and notify you if they breach a threshold that you specify. 
944Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
The following procedure shows how to view process metrics as a time series graph. For more information 
about setting alarms, see  Using Amazon CloudWatch alarms (p. 180).
To view process metrics in the CloudWatch console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. Choose the namespace for the metrics collected by the agent. By default, this is CWAgent, but you 
may have speciﬁed a diﬀerent namespace in the CloudWatch agent conﬁguration ﬁle.
4. Choose a metric dimension (for example, Per-Instance Metrics).
5. The All metrics  tab displays all metrics for that dimension in the namespace. You can do the 
following:
a. To graph a metric, select the check box next to the metric. To select all metrics, select the check 
box in the heading row of the table.
b. To sort the table, use the column heading.
c. To ﬁlter by resource, choose the resource ID and then choose Add to search .
d. To ﬁlter by metric, choose the metric name and then choose Add to search .
6. (Optional) To add this graph to a CloudWatch dashboard, choose Actions, Add to dashboard .
Retrieve custom metrics with StatsD
You can retrieve additional custom metrics from your applications or services using the CloudWatch 
agent with the StatsD protocol. StatsD is a popular open-source solution that can gather metrics from 
a wide variety of applications. StatsD is especially useful for instrumenting your own metrics. For an 
example of using the CloudWatch agent and StatsD together, see  How to better monitor your custom 
application metrics using Amazon CloudWatch Agent.
StatsD is supported on both Linux servers and servers running Windows Server. CloudWatch supports 
the following StatsD  format:
MetricName :value|type|@sample_rate |#tag1: 
   value,tag1...
•MetricName  – A string with no colons, bars, # characters, or @ characters.
•value  – This can be either integer or ﬂoat.
•type – Specify c for counter, g for gauge, ms for timer, h for histogram, or s for set.
•sample_rate  – (Optional) A ﬂoat between 0 and 1, inclusive. Use only for counter, histogram, and 
timer metrics. The default value is 1 (sampling 100% of the time).
•tags – (Optional) A comma-separated list of tags. StatsD tags are similar to dimensions in 
CloudWatch. Use colons for key/value tags, such as env:prod .
You can use any StatsD client that follows this format to send the metrics to the CloudWatch agent. For 
more information about some of the available StatsD  clients, see the StatsD client page on GitHub .
To collect these custom metrics, add a "statsd": {}  line to the metrics_collected  section 
of the agent conﬁguration ﬁle. You can add this line manually. If you use the wizard to create 
the conﬁguration ﬁle, it's done for you. For more information, see Create the CloudWatch agent 
conﬁguration ﬁle (p. 897).
The StatsD default conﬁguration works for most users. There are optional ﬁelds that you can add to the
statsd  section of the agent conﬁguration ﬁle as needed:
945Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
•service_address  – The service address to which the CloudWatch agent should listen. The format is
ip:port. If you omit the IP address, the agent listens on all available interfaces. Only the UDP format 
is supported, so you don't need to specify a UDP preﬁx.
The default value is :8125 .
•metrics_collection_interval  – How often in seconds that the StatsD plugin runs and collects 
metrics. The default value is 10 seconds. The range is 1–172,000.
•metrics_aggregation_interval  – How often in seconds CloudWatch aggregates metrics into 
single data points. The default value is 60 seconds.
For example, if metrics_collection_interval  is 10 and metrics_aggregation_interval
is 60, CloudWatch collects data every 10 seconds. After each minute, the six data readings from that 
minute are aggregated into a single data point, which is sent to CloudWatch.
The range is 0–172,000. Setting metrics_aggregation_interval  to 0 disables the aggregation of
StatsD  metrics.
•allowed_pending_messages  – The number of UDP messages that are allowed to queue up. When 
the queue is full, the StatsD server starts dropping packets. The default value is 10000.
•drop_original_metrics  – Optional. If you are using the aggregation_dimensions  ﬁeld in the
metrics section to roll up metrics into aggregated results, then by default the agent sends both the 
aggregated metrics and the original metrics that are separated for each value of the dimension. If 
you don't want the original metrics to be sent to CloudWatch, you can specify this parameter with a 
list of metrics. The metrics speciﬁed along with this parameter don't have their metrics by dimension 
reported to CloudWatch. Instead, only the aggregated metrics are reported. This reduces the number 
of metrics that the agent collects, reducing your costs.
The following is an example of the statsd  section of the agent conﬁguration ﬁle, using the default port 
and custom collection and aggregation intervals.
{ 
   "metrics":{ 
      "metrics_collected":{ 
         "statsd":{ 
            "service_address":":8125", 
            "metrics_collection_interval":60, 
            "metrics_aggregation_interval":300 
         } 
      } 
   }
}
Viewing StatsD metrics imported by the CloudWatch agent
After importing StatsD metrics into CloudWatch, you can view these metrics as time series graphs, and 
create alarms that can watch these metrics and notify you if they breach a threshold that you specify. 
The following procedure shows how to view StatsD metrics as a time series graph. For more information 
about setting alarms, see  Using Amazon CloudWatch alarms (p. 180).
To view StatsD metrics in the CloudWatch console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. Choose the namespace for the metrics collected by the agent. By default, this is CWAgent, but you 
may have speciﬁed a diﬀerent namespace in the CloudWatch agent conﬁguration ﬁle.
4. Choose a metric dimension (for example, Per-Instance Metrics).
946Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
5. The All metrics  tab displays all metrics for that dimension in the namespace. You can do the 
following:
a. To graph a metric, select the check box next to the metric. To select all metrics, select the check 
box in the heading row of the table.
b. To sort the table, use the column heading.
c. To ﬁlter by resource, choose the resource ID and then choose Add to search .
d. To ﬁlter by metric, choose the metric name and then choose Add to search .
6. (Optional) To add this graph to a CloudWatch dashboard, choose Actions, Add to dashboard .
Retrieve custom metrics with collectd
You can retrieve additional metrics from your applications or services using the CloudWatch agent 
with the collectd protocol, which is supported only on Linux servers. collectd is a popular open-source 
solution with plugins that can gather system statistics for a wide variety of applications. By combining 
the system metrics that the CloudWatch agent can already collect with the additional metrics from 
collectd, you can better monitor, analyze, and troubleshoot your systems and applications. For more 
information about collectd, see collectd - The system statistics collection daemon.
You use the collectd software to send the metrics to the CloudWatch agent. For the collectd metrics, the 
CloudWatch agent acts as the server while the collectd plugin acts as the client.
The collectd software is not installed automatically on every server. On a server running Amazon Linux 2, 
follow these steps to install collectd
sudo amazon-linux-extras install collectd
For information about installing collectd on other systems, see the Download page for collectd.
To collect these custom metrics, add a "collectd": {} line to the metrics_collected section of the agent 
conﬁguration ﬁle. You can add this line manually. If you use the wizard to create the conﬁguration ﬁle, it 
is done for you. For more information, see Create the CloudWatch agent conﬁguration ﬁle (p. 897).
Optional parameters are also available. If you are using collectd and you do not use /etc/collectd/
auth_file  as your collectd_auth_ﬁle, you must set some of these options.
•service_address: The service address to which the CloudWatch agent should listen. The format is
"udp://ip:port . The default is udp://127.0.0.1:25826 .
•name_preﬁx:  A preﬁx to attach to the beginning of the name of each collectd metric. The default is
collectd_ . The maximum length is 255 characters.
•collectd_security_level: Sets the security level for network communication. The default is encrypt.
encrypt speciﬁes that only encrypted data is accepted. sign speciﬁes that only signed and encrypted 
data is accepted. none  speciﬁes that all data is accepted. If you specify a value for collectd_auth_ﬁle, 
encrypted data is decrypted if possible.
For more information, see Client setup  and Possible interactions in the collectd Wiki.
•collectd_auth_ﬁle Sets a ﬁle in which user names are mapped to passwords. These passwords are used 
to verify signatures and to decrypt encrypted network packets. If given, signed data is veriﬁed and 
encrypted packets are decrypted. Otherwise, signed data is accepted without checking the signature 
and encrypted data cannot be decrypted.
The default is /etc/collectd/auth_file .
If collectd_security_level is set to none , this is optional. If you set collectd_security_level to encrypt
or sign, you must specify collectd_auth_ﬁle.
947Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
For the format of the auth ﬁle, each line is a user name followed by a colon and any number of spaces 
followed by the password. For example:
user1: user1_password
user2: user2_password
•collectd_typesdb: A list of one or more ﬁles that contain the dataset descriptions. The list must 
be surrounded by brackets, even if there is just one entry in the list. Each entry in the list must be 
surrounded by double quotes. If there are multiple entries, separate them with commas. The default 
on Linux servers is ["/usr/share/collectd/types.db"] . The default on macOs computers 
depends on the version of collectd. For example, ["/usr/local/Cellar/collectd/5.12.0/
share/collectd/types.db"] .
For more information, see https://collectd.org/documentation/manpages/types.db.5.shtml.
•metrics_aggregation_interval: How often in seconds CloudWatch aggregates metrics into single data 
points. The default is 60 seconds. The range is 0 to 172,000. Setting it to 0 disables the aggregation of 
collectd metrics.
The following is an example of the collectd section of the agent conﬁguration ﬁle.
{ 
   "metrics":{ 
      "metrics_collected":{ 
         "collectd":{ 
            "name_prefix":"My_collectd_metrics_", 
            "metrics_aggregation_interval":120 
         } 
      } 
   }
}
Viewing collectd metrics imported by the CloudWatch agent
After importing collectd metrics into CloudWatch, you can view these metrics as time series graphs, and 
create alarms that can watch these metrics and notify you if they breach a threshold that you specify. 
The following procedure shows how to view collectd metrics as a time series graph. For more information 
about setting alarms, see  Using Amazon CloudWatch alarms (p. 180).
To view collectd metrics in the CloudWatch console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. Choose the namespace for the metrics collected by the agent. By default, this is CWAgent, but you 
may have speciﬁed a diﬀerent namespace in the CloudWatch agent conﬁguration ﬁle.
4. Choose a metric dimension (for example, Per-Instance Metrics).
5. The All metrics  tab displays all metrics for that dimension in the namespace. You can do the 
following:
a. To graph a metric, select the check box next to the metric. To select all metrics, select the check 
box in the heading row of the table.
b. To sort the table, use the column heading.
c. To ﬁlter by resource, choose the resource ID and then choose Add to search .
d. To ﬁlter by metric, choose the metric name and then choose Add to search .
6. (Optional) To add this graph to a CloudWatch dashboard, choose Actions, Add to dashboard .
948Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
Set up and conﬁgure Prometheus metrics collection on Amazon 
EC2 instances
The following sections explain how to install the CloudWatch agent with Prometheus monitoring on 
EC2 instances, and how to conﬁgure the agent to scrape additional targets. It also provides tutorials for 
setting up sample workloads to use testing with Prometheus monitoring.
For information about the operating systems supported by the CloudWatch agent, see Collect metrics 
and logs from Amazon EC2 instances and on-premises servers with the CloudWatch agent (p. 857)
VPC security group requirements
If you are using a VPC, the following requirements apply.
•The ingress rules of the security groups for the Prometheus workloads must open the Prometheus 
ports to the CloudWatch agent for scraping the Prometheus metrics by the private IP.
•The egress rules of the security group for the CloudWatch agent must allow the CloudWatch agent to 
connect to the Prometheus workloads' port by private IP.
Topics
•Step 1: Install the CloudWatch agent (p. 949)
•Step 2: Scrape Prometheus sources and import metrics (p. 949)
•Example: Set up Java/JMX sample workloads for Prometheus metric testing (p. 953)
Step 1: Install the CloudWatch agent
The ﬁrst step is to install the CloudWatch agent on the EC2 instance. For instructions, see Installing the 
CloudWatch agent (p. 859).
Step 2: Scrape Prometheus sources and import metrics
The CloudWatch agent with Prometheus monitoring needs two conﬁgurations to scrape the Prometheus 
metrics. One is for the standard Prometheus conﬁgurations as documented in  <scrape_conﬁg>in the 
Prometheus documentation. The other is for the CloudWatch agent conﬁguration.
Prometheus scrape conﬁguration
The CloudWatch agent supports the standard Prometheus scrape conﬁgurations as documented 
in  <scrape_conﬁg> in the Prometheus documentation. You can edit this section to update the 
conﬁgurations that are already in this ﬁle, and add additional Prometheus scraping targets. A sample 
conﬁguration ﬁle contains the following global conﬁguration lines:
PS C:\ProgramData\Amazon\AmazonCloudWatchAgent> cat prometheus.yaml
global: 
  scrape_interval: 1m 
  scrape_timeout: 10s
scrape_configs:
- job_name: MY_JOB 
  sample_limit: 10000 
  file_sd_configs: 
    - files: ["C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\prometheus_sd_1.yaml", "C:\
\ProgramData\\Amazon\\AmazonCloudWatchAgent\\prometheus_sd_2.yaml"]
The global section speciﬁes parameters that are valid in all conﬁguration contexts. They also serve as 
defaults for other conﬁguration sections. It contains the following parameters:
949Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
•scrape_interval — Deﬁnes how frequently to scrape targets.
•scrape_timeout — Deﬁnes how long to wait before a scrape request times out.
The scrape_configs  section speciﬁes a set of targets and parameters that deﬁne how to scrape them. 
It contains the following parameters:
•job_name — The job name assigned to scraped metrics by default.
•sample_limit — Per-scrape limit on the number of scraped samples that will be accepted.
•file_sd_configs — List of ﬁle service discovery conﬁgurations. It reads a set of ﬁles containing a 
list of zero or more static conﬁgs. The file_sd_configs  section contains a files  parameter which 
deﬁnes patterns for ﬁles from which target groups are extracted.
The CloudWatch agent supports the following service discovery conﬁguration types.
static_config  Allows specifying a list of targets and a common label set for them. It is the canonical 
way to specify static targets in a scrape conﬁguration.
The following is a sample static conﬁg to scrape Prometheus metrics from a local host. Metrics can also 
be scraped from other servers if the Prometheus port is open to the server where the agent runs.
PS C:\ProgramData\Amazon\AmazonCloudWatchAgent> cat prometheus_sd_1.yaml
- targets: 
    - 127.0.0.1:9404 
  labels: 
    key1: value1 
    key2: value2
This example contains the following parameters:
•targets— The targets scraped by the static conﬁg.
•labels— Labels assigned to all metrics that are scraped from the targets.
ec2_sd_config  Allows retrieving scrape targets from Amazon EC2 instances. The following is a sample
ec2_sd_config  to scrape Prometheus metrics from a list of EC2 instances. The Prometheus ports of 
these instances have to open to the server where the CloudWatch agent runs. The IAM role for the EC2 
instance where the CloudWatch agent runs must include the ec2:DescribeInstance  permission. For 
example, you could attach the managed policy AmazonEC2ReadOnlyAccess to the instance running the 
CloudWatch agent.
PS C:\ProgramData\Amazon\AmazonCloudWatchAgent> cat prometheus.yaml
global: 
  scrape_interval: 1m 
  scrape_timeout: 10s
scrape_configs: 
  - job_name: MY_JOB 
    sample_limit: 10000 
    ec2_sd_configs: 
      - region: us-east-1 
        port: 9404 
        filters: 
          - name: instance-id 
            values: 
              - i-98765432109876543 
              - i-12345678901234567
This example contains the following parameters:
950Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
•region— The AWS Region where the target EC2 instance is. If you leave this blank, the Region from 
the instance metadata is used.
•port— The port to scrape metrics from.
•filters— Optional ﬁlters to use to ﬁlter the instance list. This example ﬁlters based on EC2 instance 
IDs. For more criteria that you can ﬁlter on, see  DescribeInstances.
CloudWatch agent conﬁguration for Prometheus
The CloudWatch agent conﬁguration ﬁle includes prometheus  sections under both logs  and
metrics_collected . It includes the following parameters.
•cluster_name — speciﬁes the cluster name to be added as a label in the log event. This ﬁeld is 
optional.
•log_group_name— speciﬁes the log group name for the scraped Prometheus metrics.
•prometheus_conﬁg_path— speciﬁes the Prometheus scrape conﬁguration ﬁle path.
•emf_processor— speciﬁes the embedded metric format processor conﬁguration. For more information 
about embedded metric format, see Embedding metrics within logs  (p. 985).
The emf_processor  section can contain the following parameters:
•metric_declaration_dedup — It set to true, the de-duplication function for the embedded metric 
format metrics is enabled.
•metric_namespace— Speciﬁes the metric namespace for the emitted CloudWatch metrics.
•metric_unit — Speciﬁes the metric name:metric unit map. For information about supported metrit 
units, see  MetricDatum .
•metric_declaration — are sections that specify the array of logs with embedded metric format 
to be generated. There are metric_declaration  sections for each Prometheus source that the 
CloudWatch agent imports from by default. These sections each include the following ﬁelds:
•source_labels  speciﬁes the value of the labels that are checked by the label_matcher  line.
•label_matcher  is a regular expression that checks the value of the labels listed in
source_labels . The metrics that match are enabled for inclusion in the embedded metric 
format sent to CloudWatch.
•metric_selectors  is a regular expression that speciﬁes the metrics to be collected and sent to 
CloudWatch.
•dimensions  is the list of labels to be used as CloudWatch dimensions for each selected metric.
The following is an example CloudWatch agent conﬁguration for Prometheus.
{ 
   "logs":{ 
      "metrics_collected":{ 
         "prometheus":{ 
            "cluster_name":"prometheus-cluster", 
            "log_group_name":"Prometheus", 
            "prometheus_config_path":"C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\
\prometheus.yaml", 
            "emf_processor":{ 
               "metric_declaration_dedup":true, 
               "metric_namespace":"CWAgent-Prometheus", 
               "metric_unit":{ 
                  "jvm_threads_current": "Count", 
                  "jvm_gc_collection_seconds_sum": "Milliseconds" 
               }, 
               "metric_declaration":[ 
                  { 
                     "source_labels":[ 
951Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
                        "job", "key2" 
                     ], 
                     "label_matcher":"MY_JOB;^value2", 
                     "dimensions":[ 
                        [ 
                           "key1", "key2" 
                        ], 
                        [ 
                           "key2" 
                        ] 
                     ], 
                     "metric_selectors":[ 
                        "^jvm_threads_current$", 
                        "^jvm_gc_collection_seconds_sum$" 
                     ] 
                  } 
               ] 
            } 
         } 
      } 
   }
}
The previous example conﬁgures an embedded metric format section to be sent as a log event if the 
following conditions are met:
•The value of the label job is MY_JOB
•The value of the label key2  is value2
•The Prometheus metrics jvm_threads_current  and jvm_gc_collection_seconds_sum  contains 
both job and key2  labels.
The log event that is sent includes the following highlighted section.
{ 
    "CloudWatchMetrics": [ 
        { 
            "Metrics": [ 
                { 
                    "Unit": "Count", 
                    "Name": "jvm_threads_current" 
                }, 
                { 
                    "Unit": "Milliseconds", 
                    "Name": "jvm_gc_collection_seconds_sum" 
                } 
            ], 
            "Dimensions": [ 
                [ 
                    "key1", 
                    "key2" 
                ], 
                [ 
                    "key2" 
                ] 
            ], 
            "Namespace": "CWAgent-Prometheus" 
        } 
    ],
    "ClusterName": "prometheus-cluster", 
    "InstanceId": "i-0e45bd06f196096c8", 
    "Timestamp": "1607966368109", 
    "Version": "0", 
952Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
    "host": "EC2AMAZ-PDDOIUM", 
    "instance": "127.0.0.1:9404", 
    "jvm_threads_current": 2, 
    "jvm_gc_collection_seconds_sum": 0.006000000000000002, 
    "prom_metric_type": "gauge", 
    ...
}
Example: Set up Java/JMX sample workloads for Prometheus metric testing
JMX Exporter is an oﬃcial Prometheus exporter that can scrape and expose JMX mBeans as Prometheus 
metrics. For more information, see prometheus/jmx_exporter.
The CloudWatch agent can collect predeﬁned Prometheus metrics from Java Virtual Machine (JVM), 
Hjava, and Tomcat (Catalina), from a JMX exporter on EC2 instances.
Step 1: Install the CloudWatch agent
The ﬁrst step is to install the CloudWatch agent on the EC2 instance. For instructions, see Installing the 
CloudWatch agent (p. 859).
Step 2: Start the Java/JMX workload
The next step is to start the Java/JMX workload.
First, download the latest JMX exporter jar ﬁle from the following location: prometheus/jmx_exporter.
Use the jar for your sample application
The example commands in the following sections use SampleJavaApplication-1.0-SNAPSHOT.jar
as the jar ﬁle. Replace these parts of the commands with the jar for your application.
Prepare the JMX exporter conﬁguration
The config.yaml  ﬁle is the JMX exporter conﬁguration ﬁle. For more information, see Conﬁguration  in 
the JMX exporter documentation.
Here is a sample conﬁguration for Java and Tomcat.
---
lowercaseOutputName: true
lowercaseOutputLabelNames: true
rules:
- pattern: 'java.lang<type=OperatingSystem><>(FreePhysicalMemorySize|
TotalPhysicalMemorySize|FreeSwapSpaceSize|TotalSwapSpaceSize|SystemCpuLoad|ProcessCpuLoad|
OpenFileDescriptorCount|AvailableProcessors)' 
  name: java_lang_OperatingSystem_$1 
  type: GAUGE
- pattern: 'java.lang<type=Threading><>(TotalStartedThreadCount|ThreadCount)' 
  name: java_lang_threading_$1 
  type: GAUGE
- pattern: 'Catalina<type=GlobalRequestProcessor, name=\"(\w+-\w+)-(\d+)\"><>(\w+)' 
  name: catalina_globalrequestprocessor_$3_total 
  labels: 
    port: "$2" 
    protocol: "$1" 
  help: Catalina global $3 
  type: COUNTER
953Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
- pattern: 'Catalina<j2eeType=Servlet, WebModule=//([-a-zA-Z0-9+&@#/%?=~_|!:.,;]*[-
a-zA-Z0-9+&@#/%=~_|]), name=([-a-zA-Z0-9+/$%~_-|!.]*), J2EEApplication=none, 
 J2EEServer=none><>(requestCount|maxTime|processingTime|errorCount)' 
  name: catalina_servlet_$3_total 
  labels: 
    module: "$1" 
    servlet: "$2" 
  help: Catalina servlet $3 total 
  type: COUNTER
- pattern: 'Catalina<type=ThreadPool, name="(\w+-\w+)-(\d+)"><>(currentThreadCount|
currentThreadsBusy|keepAliveCount|pollerThreadCount|connectionCount)' 
  name: catalina_threadpool_$3 
  labels: 
    port: "$2" 
    protocol: "$1" 
  help: Catalina threadpool $3 
  type: GAUGE
- pattern: 'Catalina<type=Manager, host=([-a-zA-Z0-9+&@#/%?=~_|!:.,;]*[-a-zA-
Z0-9+&@#/%=~_|]), context=([-a-zA-Z0-9+/$%~_-|!.]*)><>(processingTime|sessionCounter|
rejectedSessions|expiredSessions)' 
  name: catalina_session_$3_total 
  labels: 
    context: "$2" 
    host: "$1" 
  help: Catalina session $3 total 
  type: COUNTER
- pattern: ".*"
Start the Java application with the Prometheus exporter
Start the sample application. This will emit Prometheus metrics to port 9404. Be sure to replace 
the entry point com.gubupt.sample.app.App  with the correct infromation for your sample java 
application.
On Linux, enter the following command.
$ nohup java -javaagent:./jmx_prometheus_javaagent-0.14.0.jar=9404:./config.yaml -cp  ./
SampleJavaApplication-1.0-SNAPSHOT.jar com.gubupt.sample.app.App &
On Windows, enter the following command.
PS C:\> java -javaagent:.\jmx_prometheus_javaagent-0.14.0.jar=9404:.\config.yaml -cp  .
\SampleJavaApplication-1.0-SNAPSHOT.jar com.gubupt.sample.app.App
Verify the Prometheus metrics emission
Verify that Prometheus metrics are being emitted.
On Linux, enter the following command.
$ curl localhost:9404
On Windows, enter the following command.
PS C:\> curl  http://localhost:9404
Sample output on Linux:
954Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
StatusCode        : 200
StatusDescription : OK
Content           : # HELP jvm_classes_loaded The number of classes that are currently 
 loaded in the JVM 
                    # TYPE jvm_classes_loaded gauge 
                    jvm_classes_loaded 2526.0 
                    # HELP jvm_classes_loaded_total The total number of class...
RawContent        : HTTP/1.1 200 OK 
                    Content-Length: 71908 
                    Content-Type: text/plain; version=0.0.4; charset=utf-8 
                    Date: Fri, 18 Dec 2020 16:38:10 GMT 
                    # HELP jvm_classes_loaded The number of classes that are currentl...
Forms             : {}
Headers           : {[Content-Length, 71908], [Content-Type, text/plain; version=0.0.4; 
 charset=utf-8], [Date, Fri, 18 
                    Dec 2020 16:38:10 GMT]}
Images            : {}
InputFields       : {}
Links             : {}
ParsedHtml        : System.__ComObject
RawContentLength  : 71908
Step 3: Conﬁgure the CloudWatch agent to scrape Prometheus metrics
Next, set up the Prometheus scrape conﬁguration in the CloudWatch agent conﬁguration ﬁle.
To set up the Prometheus scrape conﬁguration for the Java/JMX example
1. Set up the conﬁguration for file_sd_config  and static_config .
On Linux, enter the following command.
$ cat /opt/aws/amazon-cloudwatch-agent/var/prometheus.yaml
global: 
  scrape_interval: 1m 
  scrape_timeout: 10s
scrape_configs: 
  - job_name: jmx 
    sample_limit: 10000 
    file_sd_configs: 
      - files: [ "/opt/aws/amazon-cloudwatch-agent/var/prometheus_file_sd.yaml" ]
On Windows, enter the following command.
PS C:\ProgramData\Amazon\AmazonCloudWatchAgent> cat prometheus.yaml
global: 
  scrape_interval: 1m 
  scrape_timeout: 10s
scrape_configs: 
  - job_name: jmx 
    sample_limit: 10000 
    file_sd_configs: 
      - files: [ "C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\
\prometheus_file_sd.yaml" ]
2. Set up the scrape targets conﬁguration.
On Linux, enter the following command.
$ cat /opt/aws/amazon-cloudwatch-agent/var/prometheus_file_sd.yaml
955Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
- targets: 
  - 127.0.0.1:9404 
  labels: 
    application: sample_java_app 
    os: linux
On Windows, enter the following command.
PS C:\ProgramData\Amazon\AmazonCloudWatchAgent> cat prometheus_file_sd.yaml
- targets: 
  - 127.0.0.1:9404 
  labels: 
    application: sample_java_app 
    os: windows
3. Set up the Prometheus scrape conﬁguration by ec2_sc_config . Replace your-ec2-instance-
id with the correct EC2 instance ID.
On Linux, enter the following command.
$ cat .\prometheus.yaml
global: 
  scrape_interval: 1m 
  scrape_timeout: 10s
scrape_configs: 
  - job_name: jmx 
    sample_limit: 10000 
    ec2_sd_configs: 
      - region: us-east-1 
        port: 9404 
        filters: 
          - name: instance-id 
            values: 
              - your-ec2-instance-id
On Windows, enter the following command.
PS C:\ProgramData\Amazon\AmazonCloudWatchAgent> cat prometheus_file_sd.yaml
- targets: 
  - 127.0.0.1:9404 
  labels: 
    application: sample_java_app 
    os: windows
4. Set up the CloudWatch agent conﬁguration. First, navigate to the correct directory. On Linux, it is
/opt/aws/amazon-cloudwatch-agent/var/cwagent-config.json . On Windows, it is C:
\ProgramData\Amazon\AmazonCloudWatchAgent\cwagent-config.json .
The following is a sample conﬁguration with Java/JHX Prometheus metrics deﬁned. Be sure to 
replace path-to-Prometheus-Scrape-Configuration-file  with the correct path.
{ 
  "agent": { 
    "region": "us-east-1" 
  }, 
  "logs": { 
    "metrics_collected": { 
      "prometheus": { 
        "cluster_name": "my-cluster", 
        "log_group_name": "prometheus-test", 
        "prometheus_config_path": " path-to-Prometheus-Scrape-Configuration-file ", 
956Amazon CloudWatch User Guide
Manually create or edit the 
CloudWatch agent conﬁguration ﬁle
        "emf_processor": { 
          "metric_declaration_dedup": true, 
          "metric_namespace": "PrometheusTest", 
          "metric_unit":{ 
            "jvm_threads_current": "Count", 
            "jvm_classes_loaded": "Count", 
            "java_lang_operatingsystem_freephysicalmemorysize": "Bytes", 
            "catalina_manager_activesessions": "Count", 
            "jvm_gc_collection_seconds_sum": "Seconds", 
            "catalina_globalrequestprocessor_bytesreceived": "Bytes", 
            "jvm_memory_bytes_used": "Bytes", 
            "jvm_memory_pool_bytes_used": "Bytes" 
          }, 
          "metric_declaration": [ 
            { 
              "source_labels": ["job"], 
              "label_matcher": "^jmx$", 
              "dimensions": [["instance"]], 
              "metric_selectors": [ 
                "^jvm_threads_current$", 
                "^jvm_classes_loaded$", 
                "^java_lang_operatingsystem_freephysicalmemorysize$", 
                "^catalina_manager_activesessions$", 
                "^jvm_gc_collection_seconds_sum$", 
                "^catalina_globalrequestprocessor_bytesreceived$" 
              ] 
            }, 
            { 
              "source_labels": ["job"], 
              "label_matcher": "^jmx$", 
              "dimensions": [["area"]], 
              "metric_selectors": [ 
                "^jvm_memory_bytes_used$" 
              ] 
            }, 
            { 
              "source_labels": ["job"], 
              "label_matcher": "^jmx$", 
              "dimensions": [["pool"]], 
              "metric_selectors": [ 
                "^jvm_memory_pool_bytes_used$" 
              ] 
            } 
          ] 
        } 
      } 
    }, 
    "force_flush_interval": 5 
  }
}
5. Restart the CloudWatch agent by entering one of the following commands.
On Linux, enter the following command.
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -
m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/var/cwagent-config.json
On Windows, enter the following command.
& "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a 
 fetch-config -m ec2 -s -c file:C:\ProgramData\Amazon\AmazonCloudWatchAgent\cwagent-
config.json
957Amazon CloudWatch User Guide
Metrics collected by the CloudWatch agent
Viewing the Prometheus metrics and logs
You can now view the Java/JMX metrics being collected.
To view the metrics for your sample Java/JMX workload
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the Region where your cluster is running, choose Metrics  in the left navigation pane. Find the
PrometheusTest namespace to see the metrics.
3. To see the CloudWatch Logs events, choose Log groups  in the navigation pane. The events are in the 
log group prometheus-test .
Metrics collected by the CloudWatch agent
You can collect metrics from servers by installing the CloudWatch agent on the server. You can install the 
agent on both Amazon EC2 instances and on-premises servers, and on computers running either Linux, 
Windows Server, or macOS. If you install the agent on an Amazon EC2 instance, the metrics it collects are 
in addition to the metrics enabled by default on Amazon EC2 instances.
For information about installing the CloudWatch agent on an instance, see Collect metrics and logs from 
Amazon EC2 instances and on-premises servers with the CloudWatch agent (p. 857).
All metrics discussed in this section are collected directly by the CloudWatch agent.
Metrics collected by the CloudWatch agent on 
Windows Server instances
On a server running Windows Server, installing the CloudWatch agent enables you to collect the metrics 
associated with the counters in Windows Performance Monitor. The CloudWatch metric names for these 
counters are created by putting a space between the object name and the counter name. For example, 
the % Interrupt Time  counter of the Processor  object is given the metric name Processor % 
Interrupt Time  in CloudWatch. For more information about Windows Performance Monitor counters, 
see the Microsoft Windows Server documentation.
The default namespace for metrics collected by the CloudWatch agent is CWAgent, although you can 
specify a diﬀerent namespace when you conﬁgure the agent.
Metrics collected by the CloudWatch agent on Linux 
and macOS instances
The following table lists the metrics that you can collect with the CloudWatch agent on Linux servers and 
macOS computers.
Metric Description
cpu_time_active The amount of time that the CPU is active in any 
capacity. This metric is measured in hundredths of a 
second.
Unit: None
958Amazon CloudWatch User Guide
Metrics collected by the CloudWatch 
agent on Linux and macOS instances
Metric Description
cpu_time_guest The amount of time that the CPU is running a virtual 
CPU for a guest operating system. This metric is 
measured in hundredths of a second.
Unit: None
cpu_time_guest_nice The amount of time that the CPU is running a virtual 
CPU for a guest operating system, which is low-priority 
and can be interrupted by other processes. This metric is 
measured in hundredths of a second.
Unit: None
cpu_time_idle The amount of time that the CPU is idle. This metric is 
measured in hundredths of a second.
Unit: None
cpu_time_iowait The amount of time that the CPU is waiting for I/O 
operations to complete. This metric is measured in 
hundredths of a second.
Unit: None
cpu_time_irq The amount of time that the CPU is servicing interrupts. 
This metric is measured in hundredths of a second.
Unit: None
cpu_time_nice The amount of time that the CPU is in user mode with 
low-priority processes, which can easily be interrupted 
by higher-priority processes. This metric is measured in 
hundredths of a second.
Unit: None
cpu_time_softirq The amount of time that the CPU is servicing software 
interrupts. This metric is measured in hundredths of a 
second.
Unit: None
cpu_time_steal The amount of time that the CPU is in stolen time , 
which is time spent in other operating systems in a 
virtualized environment. This metric is measured in 
hundredths of a second.
Unit: None
cpu_time_system The amount of time that the CPU is in system mode. 
This metric is measured in hundredths of a second.
Unit: None
cpu_time_user The amount of time that the CPU is in user mode. This 
metric is measured in hundredths of a second.
Unit: None
959Amazon CloudWatch User Guide
Metrics collected by the CloudWatch 
agent on Linux and macOS instances
Metric Description
cpu_usage_active The percentage of time that the CPU is active in any 
capacity.
Unit: Percent
cpu_usage_guest The percentage of time that the CPU is running a virtual 
CPU for a guest operating system.
Unit: Percent
cpu_usage_guest_nice The percentage of time that the CPU is running a virtual 
CPU for a guest operating system, which is low-priority 
and can be interrupted by other processes.
Unit: Percent
cpu_usage_idle The percentage of time that the CPU is idle.
Unit: Percent
cpu_usage_iowait The percentage of time that the CPU is waiting for I/O 
operations to complete.
Unit: Percent
cpu_usage_irq The percentage of time that the CPU is servicing 
interrupts.
Unit: Percent
cpu_usage_nice The percentage of time that the CPU is in user mode 
with low-priority processes, which higher-priority 
processes can easily interrupt.
Unit: Percent
cpu_usage_softirq The percentage of time that the CPU is servicing 
software interrupts.
Unit: Percent
cpu_usage_steal The percentage of time that the CPU is in stolen time , 
or time spent in other operating systems in a virtualized 
environment.
Unit: Percent
cpu_usage_system The percentage of time that the CPU is in system mode.
Unit: Percent
cpu_usage_user The percentage of time that the CPU is in user mode.
Unit: Percent
disk_free Free space on the disks.
Unit: Bytes
960Amazon CloudWatch User Guide
Metrics collected by the CloudWatch 
agent on Linux and macOS instances
Metric Description
disk_inodes_free The number of available index nodes on the disk.
Unit: Count
disk_inodes_total The total number of index nodes reserved on the disk.
Unit: Count
disk_inodes_used The number of used index nodes on the disk.
Unit: Count
disk_total Total space on the disks, including used and free.
Unit: Bytes
disk_used Used space on the disks.
Unit: Bytes
disk_used_percent The percentage of total disk space that is used.
Unit: Percent
diskio_iops_in_progress The number of I/O requests that have been issued to 
the device driver but have not yet completed.
Unit: Count
diskio_io_time The amount of time that the disk has had I/O requests 
queued.
Unit: Milliseconds
The only statistic that should be used for this metric is
Sum. Do not use Average .
diskio_reads The number of disk read operations.
Unit: Count
The only statistic that should be used for this metric is
Sum. Do not use Average .
diskio_read_bytes The number of bytes read from the disks.
Unit: Bytes
The only statistic that should be used for this metric is
Sum. Do not use Average .
961Amazon CloudWatch User Guide
Metrics collected by the CloudWatch 
agent on Linux and macOS instances
Metric Description
diskio_read_time The amount of time that read requests have waited on 
the disks. Multiple read requests waiting at the same 
time increase the number. For example, if 5 requests all 
wait for an average of 100 milliseconds, 500 is reported.
Unit: Milliseconds
The only statistic that should be used for this metric is
Sum. Do not use Average .
diskio_writes The number disk write operations.
Unit: Count
The only statistic that should be used for this metric is
Sum. Do not use Average .
diskio_write_bytes The number of bytes written to the disks.
Unit: Bytes
The only statistic that should be used for this metric is
Sum. Do not use Average .
diskio_write_time The amount of time that write requests have waited on 
the disks. Multiple write requests waiting at the same 
time increase the number. For example, if 8 requests 
all wait for an average of 1000 milliseconds, 8000 is 
reported.
Unit: Milliseconds
The only statistic that should be used for this metric is
Sum. Do not use Average .
ethtool_bw_in_allowance_exceeded The number of packets queued and/or dropped because 
the inbound aggregate bandwidth exceeded the 
maximum for the instance..
This metric is collected only if you have listed it in the
ethtool subsection of the metrics_collected
section of the CloudWatch agent conﬁguration ﬁle. For 
more information, see Collect network performance 
metrics  (p. 928)
Unit: None
962Amazon CloudWatch User Guide
Metrics collected by the CloudWatch 
agent on Linux and macOS instances
Metric Description
ethtool_bw_out_allowance_exceeded The number of packets queued and/or dropped because 
the outbound aggregate bandwidth exceeded the 
maximum for the instance..
This metric is collected only if you have listed it in the
ethtool subsection of the metrics_collected
section of the CloudWatch agent conﬁguration ﬁle. For 
more information, see Collect network performance 
metrics  (p. 928)
Unit: None
ethtool_conntrack_allowance_exceeded The number of packets dropped because connection 
tracking exceeded the maximum for the instance and 
new connections could not be established. This can 
result in packet loss for traﬃc to or from the instance.
This metric is collected only if you have listed it in the
ethtool subsection of the metrics_collected
section of the CloudWatch agent conﬁguration ﬁle. For 
more information, see Collect network performance 
metrics  (p. 928)
Unit: None
ethtool_linklocal_allowance_exceeded The number of packets dropped because the PPS of the 
traﬃc to local proxy services exceeded the maximum for 
the network interface. This impacts traﬃc to the DNS 
service, the Instance Metadata Service, and the Amazon 
Time Sync Service.
This metric is collected only if you have listed it in the
ethtool subsection of the metrics_collected
section of the CloudWatch agent conﬁguration ﬁle. For 
more information, see Collect network performance 
metrics  (p. 928)
Unit: None
ethtool_pps_allowance_exceeded The number of packets queued and/or dropped because 
the bidirectional PPS exceeded the maximum for the 
instance.
This metric is collected only if you have listed it in the
ethtool subsection of the metrics_collected
section of the CloudWatch agent conﬁguration ﬁle. For 
more information, see Collect network performance 
metrics  (p. 928).
Unit: None
mem_active The amount of memory that has been used in some way 
during the last sample period.
Unit: Bytes
963Amazon CloudWatch User Guide
Metrics collected by the CloudWatch 
agent on Linux and macOS instances
Metric Description
mem_available The amount of memory that is available and can be 
given instantly to processes.
Unit: Bytes
mem_available_percent The percentage of memory that is available and can be 
given instantly to processes.
Unit: Percent
mem_buffered The amount of memory that is being used for buﬀers.
Unit: Bytes
mem_cached The amount of memory that is being used for ﬁle 
caches.
Unit: Bytes
mem_free The amount of memory that isn't being used.
Unit: Bytes
mem_inactive The amount of memory that hasn't been used in some 
way during the last sample period
Unit: Bytes
mem_total The total amount of memory.
Unit: Bytes
mem_used The amount of memory currently in use.
Unit: Bytes
mem_used_percent The percentage of memory currently in use.
Unit: Percent
net_bytes_recv The number of bytes received by the network interface.
Unit: Bytes
The only statistic that should be used for this metric is
Sum. Do not use Average .
net_bytes_sent The number of bytes sent by the network interface.
Unit: Bytes
The only statistic that should be used for this metric is
Sum. Do not use Average .
964Amazon CloudWatch User Guide
Metrics collected by the CloudWatch 
agent on Linux and macOS instances
Metric Description
net_drop_in The number of packets received by this network 
interface that were dropped.
Unit: Count
The only statistic that should be used for this metric is
Sum. Do not use Average .
net_drop_out The number of packets transmitted by this network 
interface that were dropped.
Unit: Count
The only statistic that should be used for this metric is
Sum. Do not use Average .
net_err_in The number of receive errors detected by this network 
interface.
Unit: Count
The only statistic that should be used for this metric is
Sum. Do not use Average .
net_err_out The number of transmit errors detected by this network 
interface.
Unit: Count
The only statistic that should be used for this metric is
Sum. Do not use Average .
net_packets_sent The number of packets sent by this network interface.
Unit: Count
The only statistic that should be used for this metric is
Sum. Do not use Average .
net_packets_recv The number of packets received by this network 
interface.
Unit: Count
The only statistic that should be used for this metric is
Sum. Do not use Average .
netstat_tcp_close The number of TCP connections with no state.
Unit: Count
netstat_tcp_close_wait The number of TCP connections waiting for a 
termination request from the client.
Unit: Count
965Amazon CloudWatch User Guide
Metrics collected by the CloudWatch 
agent on Linux and macOS instances
Metric Description
netstat_tcp_closing The number of TCP connections that are waiting for a 
termination request with acknowledgement from the 
client.
Unit: Count
netstat_tcp_established The number of TCP connections established.
Unit: Count
netstat_tcp_fin_wait1 The number of TCP connections in the FIN_WAIT1  state 
during the process of closing a connection.
Unit: Count
netstat_tcp_fin_wait2 The number of TCP connections in the FIN_WAIT2  state 
during the process of closing a connection.
Unit: Count
netstat_tcp_last_ack The number of TCP connections waiting for the 
client to send acknowledgement of the connection 
termination message. This is the last state right before 
the connection is closed down.
Unit: Count
netstat_tcp_listen The number of TCP ports currently listening for a 
connection request.
Unit: Count
netstat_tcp_none The number of TCP connections with inactive clients.
Unit: Count
netstat_tcp_syn_sent The number of TCP connections waiting for a matching 
connection request after having sent a connection 
request.
Unit: Count
netstat_tcp_syn_recv The number of TCP connections waiting for connection 
request acknowledgement after having sent and 
received a connection request.
Unit: Count
netstat_tcp_time_wait The number of TCP connections currently waiting to 
ensure that the client received the acknowledgement of 
its connection termination request.
Unit: Count
netstat_udp_socket The number of current UDP connections.
Unit: Count
966Amazon CloudWatch User Guide
Metrics collected by the CloudWatch 
agent on Linux and macOS instances
Metric Description
processes_blocked The number of processes that are blocked.
Unit: Count
processes_dead The number of processes that are dead, indicated by the
X state code on Linux.
This metric is not collected on macOS computers.
Unit: Count
processes_idle The number of processes that are idle (sleeping for 
more than 20 seconds). Available only on FreeBSD 
instances.
Unit: Count
processes_paging The number of processes that are paging, indicated by 
the W state code on Linux.
This metric is not collected on macOS computers.
Unit: Count
processes_running The number of processes that are running, indicated by 
the R state code.
Unit: Count
processes_sleeping The number of processes that are sleeping, indicated by 
the S state code.
Unit: Count
processes_stopped The number of processes that are stopped, indicated by 
the T state code.
Unit: Count
processes_total The total number of processes on the instance.
Unit: Count
processes_total_threads The total number of threads making up the processes. 
This metric is available only on Linux instances.
This metric is not collected on macOS computers.
Unit: Count
processes_wait The number of processes that are paging, indicated by 
the W state code on FreeBSD instances. This metric is 
available only on FreeBSD instances, and is not available 
on Linux, Windows Server, or macOS instances.
Unit: Count
967Amazon CloudWatch User Guide
Memory metric deﬁnitions
Metric Description
processes_zombies The number of zombie processes, indicated by the Z
state code.
Unit: Count
swap_free The amount of swap space that isn't being used.
Unit: Bytes
swap_used The amount of swap space currently in use.
Unit: Bytes
swap_used_percent The percentage of swap space currently in use.
Unit: Percent
Deﬁnitions of memory metrics collected by the 
CloudWatch agent
When the CloudWatch agent collects memory metrics, the source is the host's memory management 
subsystem. For example, the Linux kernel exposes OS-maintained data in /proc. For memory, the data is 
in /proc/meminfo .
Each diﬀerent operating system and architecture has diﬀerent calculations of the resources that are used 
by processes. For more information, see the following sections.
During each collection interval, the CloudWatch agent on each instance collects the instance resources 
and calculates the resources being used by all processes which are running in that instance. This 
information is reported back to CloudWatch metrics. You can conﬁgure the length of the collection 
interval in the CloudWatch agent conﬁguration ﬁle. For more information, see  CloudWatch agent 
conﬁguration ﬁle: Agent section (p. 903).
The following list explains how the memory metrics that the CloudWatch agent collects are deﬁned.
•Active Memory– Memory that is being used by a process. In other words, the memory used by current 
running apps.
•Available Memory– The memory that can be instantly given to the processes without the system 
going into swap (also known as virtual memory).
•Buﬀer Memory– The data area shared by hardware devices or program processes that operate at 
diﬀerent speeds and priorities.
•Cached Memory– Stores program instructions and data that are used repeatedly in the operation of 
programs that the CPU is likely to need next.
•Free Memory– Memory that is not being used at all and is readily available. It is completely free for 
the system to be used when needed.
•Inactive Memory– Pages that have not been accessed "recently".
•Total Memory– The size of the actual physical memory RAM.
•Used Memory– Memory that is currently in use by programs and processes.
Topics
•Linux: Metrics collected and calculations used (p. 969)
968Amazon CloudWatch User Guide
Memory metric deﬁnitions
•macOS: Metrics collected and calculations used (p. 969)
•Windows: Metrics collected (p. 969)
•Example: Calculating memory metrics on Linux (p. 970)
Linux: Metrics collected and calculations used
Metrics collected and units:
•Active (Bytes)
•Available (Bytes)
•Available Percent (Percent)
•Buﬀered (Bytes)
•Cached (Bytes)
•Free (Bytes)
•Inactive (Bytes)
•Total (Bytes)
•Used (Bytes)
•Used Percent (Percent)
Used memory = Total Memory - Free Memory - Cached memory - Buﬀer memory
Total memory = Used Memory + Free Memory + Cached memory + Buﬀer memory
macOS: Metrics collected and calculations used
Metrics collected and units:
•Active (Bytes)
•Available (Bytes)
•Available Percent (Percent)
•Free (Bytes)
•Inactive (Bytes)
•Total (Bytes)
•Used (Bytes)
•Used Percent (Percent)
Available memory = Free Memory + Inactive memory
Used memory = Total Memory - Available memory
Total memory = Available Memory + Used Memory
Windows: Metrics collected
The metrics collected on Windows hosts are listed below. All of these metrics have None  for Unit .
•Available bytes
•Cache Faults/sec
•Page Faults/sec
969Amazon CloudWatch User Guide
Use the AWS OpenTelemetry 
Collector with the CloudWatch agent
•Pages/sec
There are no calculations used for Windows metrics becuase the CloudWatch agent parses events from 
performance counters.
Example: Calculating memory metrics on Linux
As an example, suppose that entering the free -m command on a Linux host shows the following 
results:
             total       used       free     shared    buff/cache     Available
Mem:         7441         117       6592          0           732          7101
Swap:           0           0          0
In this example, the CloudWatch agent will collect the following values:
•mem_total : 7441.92 MB
•mem_available : 7101.85 MB (free + cache)
•mem_free : 6592.85 MB
•mem_cached : 2.64 MB
•mem_used : 116.84 MB (total - free -buﬀ/cache)
•mem_buffered : 729.59 MB
•mem_available_percent : 95.43%
•mem_used_percent : 1.56%
Use the AWS OpenTelemetry Collector with the 
CloudWatch agent
The AWS OpenTelemetry Collector complements the CloudWatch agent when you install them side-by-
side, and then use the OpenTelemetry SDKs to collect application traces in addition to metrics and logs 
from your workloads running on Amazon EC2, Amazon ECS, and Amazon EKS. For general information 
about AWS OpenTelemetry, see AWS Distro for OpenTelemetry.
For information about installing the AWS OpenTelemetry Collector, see AWS Distro for OpenTelemetry
on GitHub.
Beginning with CloudWatch agent version 1.247356, the OpenTelemetry Collector is not embedded in 
the CloudWatch agent.
Generating OpenTelemetry traces
AWS provides OpenTelemetry SDKs and a Java auto instrumentation agent for your applications to use 
to generate OpenTelemetry traces and feed them to an OpenTelemetry Collector. For more information, 
see the following:
•Getting Started with the Java SDK on Traces and Metrics Instrumentation
•Tracing with the AWS Distro for OpenTelemetry Go SDK
•Getting Started with the Python SDK
•Getting Started with the JavaScript SDK on Traces and Metrics Instrumentation
970Amazon CloudWatch User Guide
Common scenarios with the CloudWatch agent
Common scenarios with the CloudWatch agent
The following sections outline how to complete common conﬁguration and customization tasks for the 
CloudWatch agent.
Topics
•Running the CloudWatch agent as a diﬀerent user (p. 971)
•Adding custom dimensions to metrics collected by the CloudWatch agent (p. 972)
•Multiple CloudWatch agent conﬁguration ﬁles (p. 973)
•Aggregating or rolling up metrics collected by the CloudWatch agent (p. 974)
•Collecting high-resolution metrics with the CloudWatch agent (p. 975)
•Sending metrics and logs to a diﬀerent account (p. 976)
•Timestamp diﬀerences between the uniﬁed CloudWatch agent and the earlier CloudWatch Logs 
agent  (p. 977)
Running the CloudWatch agent as a diﬀerent user
On Linux servers, the CloudWatch runs as the root user by default. To have the agent run as a diﬀerent 
user, use the run_as_user  parameter in the agent section in the CloudWatch agent conﬁguration ﬁle. 
This option is available only on Linux servers.
If you're already running the agent with the root user and want to change to using a diﬀerent user, use 
one of the following procedures.
To run the CloudWatch agent as a diﬀerent user on an EC2 instance running Linux
1. Download and install a new CloudWatch agent package. For more information, see Download the 
CloudWatch agent package (p. 859).
2. Create a new Linux user or use the default user named cwagent that the RPM or DEB ﬁle created.
3. Provide credentials for this user in one of these ways:
• If the ﬁle .aws/credentials  exists in the home directory of the root user, you must 
create a credentials ﬁle for the user you are going to use to run the CloudWatch agent. This 
credentials ﬁle will be /home/username /.aws/credentials . Then set the value of the
shared_credential_file  parameter in common-config.toml  to the pathname of the 
credential ﬁle. For more information, see (Optional) Modify the common conﬁguration for proxy 
or Region information (p. 872).
• If the ﬁle .aws/credentials  does not exist in the home directory of the root user, you can do 
one of the following:
• Create a credentials ﬁle for the user you are going to use to run the CloudWatch agent. This 
credentials ﬁle will be /home/username /.aws/credentials . Then set the value of the
shared_credential_file  parameter in common-config.toml  to the pathname of the 
credential ﬁle. For more information, see (Optional) Modify the common conﬁguration for 
proxy or Region information (p. 872).
• Instead of creating a credentials ﬁle, attach an IAM role to the instance. The agent uses this 
role as the credential provider.
4. In the CloudWatch agent conﬁguration ﬁle, add the following line in the agent section:
"run_as_user": " username "
Make other modiﬁcations to the conﬁguration ﬁle as needed. For more information, see Create the 
CloudWatch agent conﬁguration ﬁle (p. 897)
971Amazon CloudWatch User Guide
Adding custom dimensions to metrics 
collected by the CloudWatch agent
5. Give the user the required permissions. The user must have Read (r) permissions for the log ﬁles to 
be collected, and must have Execute (x) permission on every directory in the log ﬁles' path.
6. Start the agent with the conﬁguration ﬁle that you just modiﬁed.
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -
m ec2 -s -c file: configuration-file-path
To run the CloudWatch agent as a diﬀerent user on an on-premises server running Linux
1. Download and install a new CloudWatch agent package. For more information, see Download the 
CloudWatch agent package (p. 859).
2. Create a new Linux user or use the default user named cwagent that the RPM or DEB ﬁle created.
3. Store the credentials of this user to a path that the user can access, such as /
home/username /.aws/credentials .
4. Set the value of the shared_credential_file  parameter in common-config.toml  to 
the pathname of the credential ﬁle. For more information, see (Optional) Modify the common 
conﬁguration for proxy or Region information (p. 872).
5. In the CloudWatch agent conﬁguration ﬁle, add the following line in the agent section:
"run_as_user": " username "
Make other modiﬁcations to the conﬁguration ﬁle as needed. For more information, see Create the 
CloudWatch agent conﬁguration ﬁle (p. 897)
6. Give the user required permissions. The user must have Read (r) permissions for the log ﬁles to be 
collected, and must have Execute (x) permission on every directory in the log ﬁles' path.
7. Start the agent with the conﬁguration ﬁle that you just modiﬁed.
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -
m ec2 -s -c file: configuration-file-path
Adding custom dimensions to metrics collected by 
the CloudWatch agent
To add custom dimensions such as tags to metrics collected by the agent, add the append_dimensions
ﬁeld to the section of the agent conﬁguration ﬁle that lists those metrics.
For example, the following example section of the conﬁguration ﬁle adds a custom dimension named
stackName  with a value of Prod  to the cpu and disk metrics collected by the agent.
"cpu":{   
  "resources":[   
    "*" 
  ], 
  "measurement":[   
    "cpu_usage_guest", 
    "cpu_usage_nice", 
    "cpu_usage_idle" 
  ], 
  "totalcpu":false, 
  "append_dimensions":{   
    "stackName":"Prod" 
  }
972Amazon CloudWatch User Guide
Multiple CloudWatch agent conﬁguration ﬁles
},
"disk":{   
  "resources":[   
    "/", 
    "/tmp" 
  ], 
  "measurement":[   
    "total", 
    "used" 
  ], 
  "append_dimensions":{   
    "stackName":"Prod" 
  }
}
Remember that any time you change the agent conﬁguration ﬁle, you must restart the agent to have the 
changes take eﬀect.
Multiple CloudWatch agent conﬁguration ﬁles
You can set up the CloudWatch agent to use multiple conﬁguration ﬁles. For example, you can use a 
common conﬁguration ﬁle that collects a set of metrics and logs that you always want to collect from all 
servers in your infrastructure. You can then use additional conﬁguration ﬁles that collect metrics from 
certain applications or in certain situations.
To set this up, ﬁrst create the conﬁguration ﬁles that you want to use. Any conﬁguration ﬁles that will be 
used together on the same server must have diﬀerent ﬁle names. You can store the conﬁguration ﬁles on 
servers or in Parameter Store.
Start the CloudWatch agent using the fetch-config  option and specify the ﬁrst conﬁguration ﬁle. 
To append the second conﬁguration ﬁle to the running agent, use the same command but with the
append-config  option. All metrics and logs listed in either conﬁguration ﬁle are collected. The 
following example Linux commands illustrate this scenario using conﬁgurations stores as ﬁles. The ﬁrst 
line starts the agent using the infrastructure.json  conﬁguration ﬁle, and the second line appends 
the app.json  conﬁguration ﬁle.
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s 
 -c file:/tmp/infrastructure.json
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a append-config -m ec2 -s 
 -c file:/tmp/app.json
The following example conﬁguration ﬁles illustrate a use for this feature. The ﬁrst conﬁguration ﬁle is 
used for all servers in the infrastructure, and the second collects only logs from a certain application and 
is appended to servers running that application.
infrastructure.json
{ 
  "metrics": { 
    "metrics_collected": { 
      "cpu": { 
        "resources": [ 
          "*" 
        ], 
        "measurement": [ 
          "usage_active" 
        ], 
973Amazon CloudWatch User Guide
Aggregating or rolling up metrics 
collected by the CloudWatch agent
        "totalcpu": true 
      }, 
      "mem": { 
         "measurement": [ 
           "used_percent" 
        ] 
      } 
    } 
  }, 
  "logs": { 
    "logs_collected": { 
      "files": { 
        "collect_list": [ 
          { 
            "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-
agent.log", 
            "log_group_name": "amazon-cloudwatch-agent.log" 
          }, 
          { 
            "file_path": "/var/log/messages", 
            "log_group_name": "/var/log/messages" 
          } 
        ] 
      } 
    } 
  }
}
app.json
{ 
    "logs": { 
        "logs_collected": { 
            "files": { 
                "collect_list": [ 
                    { 
                        "file_path": "/app/app.log*", 
                        "log_group_name": "/app/app.log" 
                    } 
                ] 
            } 
        } 
    }
}
Any conﬁguration ﬁles appended to the conﬁguration must have diﬀerent ﬁle names from each other 
and from the initial conﬁguration ﬁle. If you use append-config  with a conﬁguration ﬁle with the 
same ﬁle name as a conﬁguration ﬁle that the agent is already using, the append command overwrites 
the information from the ﬁrst conﬁguration ﬁle instead of appending to it. This is true even if the two 
conﬁguration ﬁles with the same ﬁle name are on diﬀerent ﬁle paths.
The preceding example shows the use of two conﬁguration ﬁles, but there is no limit to the number 
of conﬁguration ﬁles that you can append to the agent conﬁguration. You can also mix the use of 
conﬁguration ﬁles located on servers and conﬁgurations located in Parameter Store.
Aggregating or rolling up metrics collected by the 
CloudWatch agent
To aggregate or roll up metrics collected by the agent, add an aggregation_dimensions  ﬁeld to the 
section for that metric in the agent conﬁguration ﬁle.
974Amazon CloudWatch User Guide
Collecting high-resolution metrics 
with the CloudWatch agent
For example, the following conﬁguration ﬁle snippet rolls up metrics on the AutoScalingGroupName
dimension. The metrics from all instances in each Auto Scaling group are aggregated and can be viewed 
as a whole.
"metrics": { 
  "cpu":{...} 
  "disk":{...} 
  "aggregation_dimensions" : [["AutoScalingGroupName"]]
}
To roll up along the combination of each InstanceId  and InstanceType  dimensions in addition to 
rolling up on the Auto Scaling group name, add the following.
"metrics": { 
  "cpu":{...} 
  "disk":{...} 
  "aggregation_dimensions" : [["AutoScalingGroupName"], ["InstanceId", "InstanceType"]]
}
To roll up metrics into one collection instead, use [].
"metrics": { 
  "cpu":{...} 
  "disk":{...} 
  "aggregation_dimensions" : [[]]
}
Remember that any time you change the agent conﬁguration ﬁle, you must restart the agent to have the 
changes take eﬀect.
Collecting high-resolution metrics with the 
CloudWatch agent
The metrics_collection_interval  ﬁeld speciﬁes the time interval for the metrics collected, in 
seconds. By specifying a value of less than 60 for this ﬁeld, the metrics are collected as high-resolution 
metrics.
For example, if your metrics should all be high-resolution and collected every 10 seconds, specify 10 as 
the value for metrics_collection_interval  under the agent section as a global metrics collection 
interval.
"agent": { 
  "metrics_collection_interval": 10
}
Alternatively, the following example sets the cpu metrics to be collected every second, and all other 
metrics are collected every minute.
"agent":{   
  "metrics_collection_interval": 60
},
"metrics":{   
  "metrics_collected":{   
    "cpu":{   
      "resources":[   
975Amazon CloudWatch User Guide
Sending metrics and logs to a diﬀerent account
        "*" 
      ], 
      "measurement":[   
        "cpu_usage_guest" 
      ], 
      "totalcpu":false, 
      "metrics_collection_interval": 1 
    }, 
    "disk":{   
      "resources":[   
        "/", 
        "/tmp" 
      ], 
      "measurement":[   
        "total", 
        "used" 
      ] 
    } 
  }
}
Remember that any time you change the agent conﬁguration ﬁle, you must restart the agent to have the 
changes take eﬀect.
Sending metrics and logs to a diﬀerent account
To have the CloudWatch agent send the metrics, logs, or both to a diﬀerent account, specify a role_arn
parameter in the agent conﬁguration ﬁle on the sending server. The role_arn  value speciﬁes an IAM 
role in the target account that the agent uses when sending data to the target account. This role enables 
the sending account to assume a corresponding role in the target account when delivering the metrics or 
logs to the target account.
You can also specify two separate role_arn  strings in the agent conﬁguration ﬁle: one to use when 
sending metrics and another for sending logs.
The following example of part of the agent section of the conﬁguration ﬁle sets the agent to use
CrossAccountAgentRole  when sending metrics and logs to a diﬀerent account.
{ 
  "agent": { 
    "credentials": { 
      "role_arn": "arn:aws:iam::123456789012:role/CrossAccountAgentRole" 
    } 
  }, 
  .....
}
Alternatively, the following example sets diﬀerent roles for the sending account to use for sending 
metrics and logs:
"metrics": { 
    "credentials": { 
     "role_arn": "RoleToSendMetrics" 
    }, 
    "metrics_collected": {....
"logs": { 
976Amazon CloudWatch User Guide
Timestamp diﬀerences between the uniﬁed CloudWatch 
agent and the earlier CloudWatch Logs agent
    "credentials": { 
    "role_arn": "RoleToSendLogs" 
    }, 
    ....
Policies needed
When you specify a role_arn  in the agent conﬁguration ﬁle, you must also make sure the IAM roles of 
the sending and target accounts have certain policies. The roles in both the sending and target accounts 
should have CloudWatchAgentServerPolicy . For more information about assigning this policy to a 
role, see Create IAM roles to use with the CloudWatch agent on Amazon EC2 instances (p. 874).
The role in the sending account also must include the following policy. You add this policy on the
Permissions tab in the IAM console when you edit the role.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "sts:AssumeRole" 
            ], 
            "Resource": [ 
                "arn:aws:iam:: target-account-ID :role/agent-role-in-target-account " 
            ] 
        } 
    ]
}
The role in the target account must include the following policy so that it recognizes the IAM role used 
by the sending account. You add this policy on the Trust relationships tab in the IAM console when you 
edit the role. The role in the target account where you add this policy is the role you created in Create 
IAM roles and users for use with CloudWatch agent (p. 864). This role is the role speciﬁed in agent-
role-in-target-account  in the policy used by the sending account.
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Principal": { 
        "AWS": [ 
          "arn:aws:iam:: sending-account-ID :role/role-in-sender-account " 
        ] 
      }, 
      "Action": "sts:AssumeRole" 
    } 
  ]
}
Timestamp diﬀerences between the uniﬁed 
CloudWatch agent and the earlier CloudWatch Logs 
agent
The CloudWatch agent supports a diﬀerent set of symbols for timestamp formats, compared to the 
earlier CloudWatch Logs agent. These diﬀerences are shown in the following table.
977Amazon CloudWatch User Guide
Troubleshooting the CloudWatch agent
Symbols supported by both 
agentsSymbols supported only by 
uniﬁed CloudWatch agentSymbols supported only by 
earlier CloudWatch Logs agent
%A, %a, %b, %B, %d, %f, %H, 
%l, %m, %M, %p, %S, %y, %Y, 
%Z, %z%-d, %-l, %-m, %-M, %-S %c,%j, %U, %W, %w
For more information about the meanings of the symbols supported by the new CloudWatch agent, 
see  CloudWatch Agent Conﬁguration File: Logs Section in the Amazon CloudWatch User Guide. For 
information about symbols supported by the CloudWatch Logs agent, see Agent Conﬁguration File in the
Amazon CloudWatch Logs User Guide.
Troubleshooting the CloudWatch agent
Use the following information to help troubleshoot problems with the CloudWatch agent.
Topics
•CloudWatch agent command line parameters (p. 978)
•Installing the CloudWatch agent using Run Command fails (p. 978)
•The CloudWatch agent won't start (p. 979)
•Verify that the CloudWatch agent is running (p. 979)
•The CloudWatch agent won't start, and the error mentions an Amazon EC2 Region (p. 980)
•The CloudWatch agent won't start on Windows Server (p. 980)
•Unable to ﬁnd credentials on Windows Server (p. 980)
•Where are the metrics? (p. 981)
•The CloudWatch agent takes a long time to run in a container or logs a hop limit error (p. 981)
•I updated my agent conﬁguration but don’t see the new metrics or logs in the CloudWatch 
console (p. 981)
•CloudWatch agent ﬁles and locations (p. 981)
•Finding information about CloudWatch agent versions (p. 983)
•Logs generated by the CloudWatch agent (p. 983)
•Stopping and restarting the CloudWatch agent (p. 984)
CloudWatch agent command line parameters
To see the full list of parameters supported by the CloudWatch agent, enter the following at the 
command line at a computer where you have it installed:
amazon-cloudwatch-agent-ctl -help
Installing the CloudWatch agent using Run Command 
fails
To install the CloudWatch agent using Systems Manager Run Command, the SSM Agent on the target 
server must be version 2.2.93.0 or later. If your SSM Agent isn't the correct version, you might see errors 
that include the following messages:
978Amazon CloudWatch User Guide
The CloudWatch agent won't start
no latest version found for package AmazonCloudWatchAgent on platform linux
failed to download installation package reliably
For information about updating your SSM Agent version, see Installing and Conﬁguring SSM Agent in the
AWS Systems Manager User Guide.
The CloudWatch agent won't start
If the CloudWatch agent fails to start, there might be an issue in your conﬁguration. Conﬁguration 
information is logged in the configuration-validation.log  ﬁle. This ﬁle is located in /opt/aws/
amazon-cloudwatch-agent/logs/configuration-validation.log  on Linux servers and in
$Env:ProgramData\Amazon\AmazonCloudWatchAgent\Logs\configuration-validation.log
on servers running Windows Server.
Verify that the CloudWatch agent is running
You can query the CloudWatch agent to ﬁnd whether it's running or stopped. You can use AWS Systems 
Manager to do this remotely. You can also use the command line, but only to check the local server.
To query the status of the CloudWatch agent using Run Command
1. Open the Systems Manager console at https://console.aws.amazon.com/systems-manager/.
2. In the navigation pane, choose Run Command .
-or-
If the AWS Systems Manager home page opens, scroll down and choose Explore Run Command.
3. Choose Run command.
4. In the Command document  list, choose the button next to AmazonCloudWatch-ManageAgent.
5. In the Action list, choose status .
6. For Optional Conﬁguration Source choose default  and keep Optional Conﬁguration Location
blank.
7. In the Target area, choose the instance to check.
8. Choose Run.
If the agent is running, the output resembles the following.
{ 
       "status": "running", 
       "starttime": "2017-12-12T18:41:18", 
       "version": "1.73.4"
}
If the agent is stopped, the "status"  ﬁeld displays "stopped" .
To query the status of the CloudWatch agent locally using the command line
• On a Linux server, enter the following:
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a status
On a server running Windows Server, enter the following in PowerShell as an administrator:
979Amazon CloudWatch User Guide
The CloudWatch agent won't start, and 
the error mentions an Amazon EC2 Region
& $Env:ProgramFiles\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1 -m ec2 
 -a status
The CloudWatch agent won't start, and the error 
mentions an Amazon EC2 Region
If the agent doesn't start and the error message mentions an Amazon EC2 Region endpoint, you might 
have conﬁgured the agent to need access to the Amazon EC2 endpoint without granting that access.
For example, if you specify a value for the append_dimensions  parameter in the agent conﬁguration 
ﬁle that depends on Amazon EC2 metadata and you use proxies, you must make sure that the server can 
access the endpoint for Amazon EC2. For more information about these endpoints, see Amazon Elastic 
Compute Cloud (Amazon EC2) in the Amazon Web Services General Reference.
The CloudWatch agent won't start on Windows 
Server
On Windows Server, you might see the following error:
Start-Service : Service 'Amazon CloudWatch Agent (AmazonCloudWatchAgent)' cannot be started 
 due to the following
error: Cannot start service AmazonCloudWatchAgent on computer '.'.
At C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1:113 
 char:12
+     $svc | Start-Service
+            ~~~~~~~~~~~~~ 
    + CategoryInfo          : OpenError: 
 (System.ServiceProcess.ServiceController:ServiceController) [Start-Service], 
   ServiceCommandException 
    + FullyQualifiedErrorId : 
 CouldNotStartService,Microsoft.PowerShell.Commands.StartServiceCommand
To ﬁx this, ﬁrst make sure that the server service is running. This error can be seen if the agent tries to 
start when the server service isn't running.
If the server service is already running, the following may be the issue. On some Windows Server 
installations, the CloudWatch agent takes more than 30 seconds to start. Because Windows Server, by 
default, allows only 30 seconds for services to start, this causes the agent to fail with an error similar to 
the following:
To ﬁx this issue, increase the service timeout value. For more information, see  A service does not start, 
and events 7000 and 7011 are logged in the Windows event log.
Unable to ﬁnd credentials on Windows Server
On Windows Server, if you have credentials in a location other than $SystemDrive\\Users\
\Administrator\\.aws  on Windows Server 2012, or “$SystemDrive\\Documents and Settings
\\Administrator\\.aws  on Windows Server 2003, you can specify your own credential path by using 
the shared_credential_file  option in common.toml .
If you don’t have a credential ﬁle, you must create one. For more information, see (Optional) Modify the 
common conﬁguration for proxy or Region information (p. 872).
980Amazon CloudWatch User Guide
Where are the metrics?
Where are the metrics?
If the CloudWatch agent has been running but you can't ﬁnd metrics collected by it in the AWS 
Management Console or the AWS CLI, conﬁrm that you're using the correct namespace. By default, the 
namespace for metrics collected by the agent is CWAgent. You can customize this namespace using the
namespace  ﬁeld in the metrics section of the agent conﬁguration ﬁle. If you don't see the metrics that 
you expect, check the conﬁguration ﬁle to conﬁrm the namespace being used.
When you ﬁrst download the CloudWatch agent package, the agent conﬁguration ﬁle is amazon-
cloudwatch-agent.json . This ﬁle is in the directory where you ran the conﬁguration wizard, or you 
might have moved it to a diﬀerent directory. If you use the conﬁguration wizard, the agent conﬁguration 
ﬁle output from the wizard is named config.json . For more information about the conﬁguration ﬁle, 
including the namespace  ﬁeld, see  CloudWatch agent conﬁguration ﬁle: Metrics section (p. 905).
The CloudWatch agent takes a long time to run in a 
container or logs a hop limit error
When you run the CloudWatch agent as a container service and want to add Amazon EC2 metric 
dimensions to all metrics collected by the agent, you might see the following errors in version 
v1.247354.0 of the agent:
2022-06-07T03:36:11Z E! [processors.ec2tagger] ec2tagger: Unable to retrieve Instance 
 Metadata Tags. This plugin must only be used on an EC2 instance.
2022-06-07T03:36:11Z E! [processors.ec2tagger] ec2tagger: Please increase hop limit to 2 by 
 following this document https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-
instance-metadata-options.html#configuring-IMDS-existing-instances.
2022-06-07T03:36:11Z E! [telegraf] Error running agent: could not initialize processor 
 ec2tagger: EC2MetadataRequestError: failed to get EC2 instance identity document
caused by: EC2MetadataError: failed to make EC2Metadata request 
        status code: 401, request id:  
caused by:
You might see this error if the agent tries to get metadata from IMDSv2 inside a container without an 
appropriate hop limit. In versions of the agent earlier than v1.247354.0, you can experience this issue 
without seeing the log message.
To solve this, increase the hop limit to 2 by following the instructions in  Conﬁgure the instance 
metadata options .
I updated my agent conﬁguration but don’t see the 
new metrics or logs in the CloudWatch console
If you update your CloudWatch agent conﬁguration ﬁle, the next time that you start the agent, you need 
to use the fetch-config  option. For example, if you stored the updated ﬁle on the local computer, 
enter the following command:
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -s -m 
 ec2 -c file: configuration-file-path
CloudWatch agent ﬁles and locations
The following table lists the ﬁles installed by and used with the CloudWatch agent, along with their 
locations on servers running Linux or Windows Server.
981Amazon CloudWatch User Guide
CloudWatch agent ﬁles and locations
File Linux location Windows Server location
The control script that controls 
starting, stopping, and 
restarting the agent./opt/aws/amazon-
cloudwatch-agent/bin/
amazon-cloudwatch-agent-
ctl or /usr/bin/amazon-
cloudwatch-agent-ctl$Env:ProgramFiles\Amazon
\AmazonCloudWatchAgent
\amazon-cloudwatch-
agent-ctl.ps1
The log ﬁle the agent writes to. 
You might need to attach this 
when contacting AWS Support./opt/aws/amazon-
cloudwatch-agent/logs/
amazon-cloudwatch-
agent.log  or /var/
log/amazon/amazon-
cloudwatch-agent/amazon-
cloudwatch-agent.log$Env:ProgramData\Amazon
\AmazonCloudWatchAgent
\Logs\amazon-cloudwatch-
agent.log
Agent conﬁguration validation 
ﬁle./opt/aws/amazon-
cloudwatch-agent/
logs/configuration-
validation.log  or
/var/log/amazon/
amazon-cloudwatch-
agent/configuration-
validation.log$Env:ProgramData\Amazon
\AmazonCloudWatchAgent
\Logs\configuration-
validation.log
The JSON ﬁle used to conﬁgure 
the agent immediately after 
the wizard creates it. For more 
information, see Create the 
CloudWatch agent conﬁguration 
ﬁle (p. 897)./opt/aws/amazon-
cloudwatch-agent/bin/
config.json$Env:ProgramFiles\Amazon
\AmazonCloudWatchAgent
\config.json
The JSON ﬁle used to conﬁgure 
the agent if this conﬁguration 
ﬁle has been downloaded from 
Parameter Store./opt/aws/amazon-
cloudwatch-agent/etc/
amazon-cloudwatch-
agent.json  or /etc/amazon/
amazon-cloudwatch-agent/
amazon-cloudwatch-
agent.json$Env:ProgramData\Amazon
\AmazonCloudWatchAgent
\amazon-cloudwatch-
agent.json
The TOML ﬁle used to 
specify Region and credential 
information to be used by 
the agent, overriding system 
defaults./opt/aws/amazon-
cloudwatch-agent/etc/
common-config.toml  or
/etc/amazon/amazon-
cloudwatch-agent/common-
config.toml$Env:ProgramData\Amazon
\AmazonCloudWatchAgent
\common-config.toml
The TOML ﬁle that contains the 
converted contents of the JSON 
conﬁguration ﬁle. The amazon-
cloudwatch-agent-ctl  script 
generates this ﬁle. Users should 
not directly modify this ﬁle. It 
can be useful for verifying that 
JSON to TOML translation was 
successful./opt/aws/amazon-
cloudwatch-agent/etc/
amazon-cloudwatch-
agent.toml  or /etc/amazon/
amazon-cloudwatch-agent/
amazon-cloudwatch-
agent.toml$Env:ProgramData\Amazon
\AmazonCloudWatchAgent
\amazon-cloudwatch-
agent.toml
982Amazon CloudWatch User Guide
Finding information about CloudWatch agent versions
File Linux location Windows Server location
The YAML ﬁle that contains 
the converted contents of the 
JSON conﬁguration ﬁle. The
amazon-cloudwatch-agent-
ctl script generates this ﬁle. 
You should not directly modify 
this ﬁle. This ﬁle can be useful 
for verifying that the JSON to 
YAML translation was successful./opt/aws/amazon-
cloudwatch-agent/etc/
amazon-cloudwatch-
agent.yaml or /
etc/amazon/amazon-
cloudwatch-agent/amazon-
cloudwatch-agent.yaml$Env:ProgramData\Amazon
\AmazonCloudWatchAgent
\amazon-cloudwatch-
agent.yaml
Finding information about CloudWatch agent 
versions
To ﬁnd the version number of the CloudWatch agent on a Linux server, enter the following command:
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a status
To ﬁnd the version number of the CloudWatch agent on Windows Server, enter the following command:
& $Env:ProgramFiles\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1 -m ec2 -a 
 status
Note
Using this command is the correct way to ﬁnd the version of the CloudWatch agent. If you use
Programs and Features in the Control Panel, you will see an incorrect version number.
You can also download a README ﬁle about the latest changes to the agent, and a ﬁle that indicates the 
version number that is currently available for download. These ﬁles are in the follow;ing locations:
•https://s3.amazonaws.com/amazoncloudwatch-agent/info/latest/RELEASE_NOTES  or
https://s3. region.amazonaws.com/amazoncloudwatch-agent- Region/info/latest/
RELEASE_NOTES
•https://s3.amazonaws.com/amazoncloudwatch-agent/info/latest/CWAGENT_VERSION
or https://s3. region.amazonaws.com/amazoncloudwatch-agent- Region/info/latest/
CWAGENT_VERSION
Logs generated by the CloudWatch agent
The agent generates a log while it runs. This log includes troubleshooting information. This log is the
amazon-cloudwatch-agent.log  ﬁle. This ﬁle is located in /opt/aws/amazon-cloudwatch-
agent/logs/amazon-cloudwatch-agent.log  on Linux servers and in $Env:ProgramData\Amazon
\AmazonCloudWatchAgent\Logs\amazon-cloudwatch-agent.log  on servers running Windows 
Server.
You can conﬁgure the agent to log additional details in the amazon-cloudwatch-agent.log  ﬁle. In 
the agent conﬁguration ﬁle, in the agent section, set the debug  ﬁeld to true, then reconﬁgure and 
restart the CloudWatch agent. To disable the logging of this extra information, set the debug  ﬁeld to
false. Then, reconﬁgure and restart the agent. For more information, see  Manually create or edit the 
CloudWatch agent conﬁguration ﬁle (p. 903).
983Amazon CloudWatch User Guide
Stopping and restarting the CloudWatch agent
In versions 1.247350.0 and later of the CloudWatch agent, you can optionally set the
aws_sdk_log_level  ﬁeld in the agent section of the agent conﬁguration ﬁle to one or more of the 
following options. Separate multiple options with the | character.
•LogDebug
•LogDebugWithSigning
•LogDebugWithHTTPBody
•LogDebugRequestRetries
•LogDebugWithEventStreamBody
For more information about these options, see LogLevelType.
Stopping and restarting the CloudWatch agent
You can manually stop the CloudWatch agent using either AWS Systems Manager or the command line.
To stop the CloudWatch agent using Run Command
1. Open the Systems Manager console at https://console.aws.amazon.com/systems-manager/.
2. In the navigation pane, choose Run Command .
-or-
If the AWS Systems Manager home page opens, scroll down and choose Explore Run Command.
3. Choose Run command.
4. In the Command document  list, choose AmazonCloudWatch-ManageAgent.
5. In the Targets area, choose the instance where you installed the CloudWatch agent.
6. In the Action list, choose stop .
7. Keep Optional Conﬁguration Source and Optional Conﬁguration Location  blank.
8. Choose Run.
To stop the CloudWatch agent locally using the command line
• On a Linux server, enter the following:
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a stop
On a server running Windows Server, enter the following in PowerShell as an administrator:
& $Env:ProgramFiles\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1 -m ec2 
 -a stop
To restart the agent, follow the instructions in Start the CloudWatch agent (p. 881).
984Amazon CloudWatch User Guide
Publishing logs with the embedded metric format
Embedding metrics within logs
The CloudWatch embedded metric format allows you to generate custom metrics asynchronously in the 
form of logs written to CloudWatch Logs. You can embed custom metrics alongside detailed log event 
data, and CloudWatch automatically extracts the custom metrics so that you can visualize and alarm on 
them, for real-time incident detection. Additionally, the detailed log events associated with the extracted 
metrics can be queried using CloudWatch Logs Insights to provide deep insights into the root causes of 
operational events.
Embedded metric format helps you generate actionable custom metrics from ephemeral resources 
such as Lambda functions and containers. By using the embedded metric format to send logs from 
these ephemeral resources, you can now easily create custom metrics without having to instrument or 
maintain separate code, while gaining powerful analytical capabilities on your log data.
No setup is required to use the embedded metric format. Either structure your logs by following the
Embedded metric format speciﬁcation  (p. 986), or generate them using our client libraries and send 
them to CloudWatch Logs using the PutLogEvents API or the CloudWatch agent.
Charges are incurred for logs ingestion and archival, and custom metrics that are generated. For more 
information, see Amazon CloudWatch Pricing.
Note
Be careful when conﬁguring your metric extraction as it impacts your custom metric usage and 
corresponding bill. If you unintentionally create metrics based on high-cardinality dimensions 
(such as requestId ), the embedded metric format will by design create a custom metric 
corresponding to each unique dimension combination. For more information, see Dimensions .
Topics
•Publishing logs with the embedded metric format  (p. 985)
•Viewing your metrics and logs in the console (p. 998)
•Setting alarms on metrics created with the embedded metric format (p. 999)
Publishing logs with the embedded metric format
You can generate embedded metric format logs with the following methods:
•Generate and send the logs by using the open-sourced client libraries.
•Manually generate the logs using the embedded metric format speciﬁcation , and then use the
CloudWatch agent or the PutLogEvents API to send the logs.
Topics
•Creating logs in embedded metric format using the client libraries (p. 986)
•Speciﬁcation: Embedded metric format  (p. 986)
•Using the PutLogEvents API to send manually-created embedded metric format logs (p. 992)
•Using the CloudWatch agent to send embedded metric format logs (p. 993)
•Using the embedded metric format with AWS Distro for OpenTelemetry (p. 998)
985Amazon CloudWatch User Guide
Using the client libraries
Creating logs in embedded metric format using the 
client libraries
Amazon provides open-sourced client libraries, which you can use to create embedded metric format 
logs. Currently those libraries are available for the languages in the following list. Full examples for 
diﬀerent setups can be found in our client libraries under /examples .
The libraries and the instructions for how to use them are located on Github. Use the following links.
•Node.Js
•Python
•Java
•C#
Client libraries are meant to work out of the box with the CloudWatch agent. Generated embedded 
metric format logs are sent to the CloudWatch agent, which then aggregates and publishes them to 
CloudWatch Logs for you.
Note
When using Lambda, no agent is required to send the logs to CloudWatch. Anything logged to 
STDOUT is sent to CloudWatch Logs via the Lambda Logging Agent.
Speciﬁcation: Embedded metric format
The CloudWatch embedded metric format is a JSON speciﬁcation used to instruct CloudWatch Logs 
to automatically extract metric values embedded in structured log events. You can use CloudWatch to 
graph and create alarms on the extracted metric values.
Embedded metric format speciﬁcation conventions
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, 
“RECOMMENDED”, “MAY”, and “OPTIONAL” in this format speciﬁcation are to be interpreted as described 
in Key Words RFC2119.
The terms "JSON", "JSON text", "JSON value", "member", "element", "object", "array", "number", "string", 
"boolean", "true", "false", and "null" in this format speciﬁcation are to be interpreted as deﬁned in
JavaScript Object Notation RFC8259.
Note
If you plan to create alarms on metrics created using embedded metric format, see Setting 
alarms on metrics created with the embedded metric format (p. 999) for recommendations.
Embedded metric format document structure
This section describes the structure of an embedded metric format document. Embedded metric format 
documents are deﬁned in JavaScript Object Notation RFC8259.
Unless otherwise noted, objects deﬁned by this speciﬁcation MUST NOT contain any additional 
members. Members not recognized by this speciﬁcation MUST be ignored. Members deﬁned in this 
speciﬁcation are case-sensitive.
The embedded metric format is subject to the same limits as standard CloudWatch Logs events and are 
limited to a maximum size of 256 KB.
With the embedded metric format, you can track the processing of your EMF logs by metrics that 
are published in the AWS/Logs  namespace of your account. These can be used to track failed metric 
986Amazon CloudWatch User Guide
Speciﬁcation: Embedded metric format 
generation from EMF, as well as whether failures happen due to parsing or validation. For more details 
see Monitoring with CloudWatch metrics.
Root node
The LogEvent message MUST be a valid JSON object with no additional data at the beginning or end of 
the LogEvent message string. For more information about the LogEvent structure, see InputLogEvent.
Embedded metric format documents MUST contain the following top-level member on the root node. 
This is a Metadata object (p. 987) object.
{ 
 "_aws": { 
    "CloudWatchMetrics": [ ... ] 
  }
}
The root node MUST contain all Target members (p. 989) members deﬁned by the references in the
MetricDirective object (p. 987).
The root node MAY contain any other members that are not included in the above requirements. The 
values of these members MUST be valid JSON types.
Metadata object
The _aws member can be used to represent metadata about the payload that informs downstream 
services how they should process the LogEvent. The value MUST be an object and MUST contain the 
following members:
•CloudWatchMetrics— An array of MetricDirective object (p. 987) used to instruct CloudWatch to 
extract metrics from the root node of the LogEvent.
{ 
  "_aws": { 
    "CloudWatchMetrics": [ ... ] 
  }
}
•Timestamp — A number representing the time stamp used for metrics extracted from the event. 
Values MUST be expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
{ 
  "_aws": { 
    "Timestamp": 1559748430481 
  }
}
MetricDirective object
The MetricDirective object instructs downstream services that the LogEvent contains metrics that will be 
extracted and published to CloudWatch. MetricDirectives MUST contain the following members:
•Namespace— A string representing the CloudWatch namespace for the metric.
•Dimensions — A DimensionSet array (p. 988).
•Metrics — An array of MetricDeﬁnition  (p. 988) objects. This array MUST NOT contain more than 100 
MetricDeﬁnition objects.
987Amazon CloudWatch User Guide
Speciﬁcation: Embedded metric format 
DimensionSet array
A DimensionSet is an array of strings containing the dimension keys that will be applied to all metrics in 
the document. The values within this array MUST also be members on the root-node—referred to as the
Target members (p. 989)
A DimensionSet MUST NOT contain more than 30 dimension keys. A DimensionSet MAY be empty.
The target member MUST have a string value. This value MUST NOT contain more than 1024 characters. 
The target member deﬁnes a dimension that will be published as part of the metric identity. Every 
DimensionSet used creates a new metric in CloudWatch. For more information about dimensions, see
Dimension  and Dimensions .
{ 
 "_aws": { 
   "CloudWatchMetrics": [ 
     { 
       "Dimensions": [ [ "functionVersion" ] ], 
       ... 
     } 
   ] 
 }, 
 "functionVersion": "$LATEST"
}
Note
Be careful when conﬁguring your metric extraction as it impacts your custom metric usage and 
corresponding bill. If you unintentionally create metrics based on high-cardinality dimensions 
(such as requestId ), the embedded metric format will by design create a custom metric 
corresponding to each unique dimension combination. For more information, see Dimensions .
MetricDeﬁnition object
A MetricDeﬁnition is an object that MUST contain the following member:
•Name — A string Reference values (p. 989) to a metric Target members (p. 989). Metric targets 
MUST be either a numeric value or an array of numeric values.
A MetricDeﬁnition object MAY contain the following members:
•Unit — An OPTIONAL string value representing the unit of measure for the corresponding metric. 
Values SHOULD be valid CloudWatch metric units. For information about valid units, see MetricDatum . 
If a value is not provided, then a default value of NONE is assumed.
•StorageResolution— An OPTIONAL integer value representing the storage resolution for the 
corresponding metric. Setting this to 1 speciﬁes this metric as a high-resolution metric, so that 
CloudWatch stores the metric with sub-minute resolution down to one second. Setting this to 60 
speciﬁes this metric as standard-resolution, which CloudWatch stores at 1-minute resolution. Values 
SHOULD be valid CloudWatch supported resolutions, 1 or 60. If a value is not provided, then a default 
value of 60 is assumed.
For more information about high-resolution metrics, see High-resolution metrics (p. 176).
Note
If you plan to create alarms on metrics created using embedded metric format, see Setting 
alarms on metrics created with the embedded metric format (p. 999) for recommendations.
{ 
988Amazon CloudWatch User Guide
Speciﬁcation: Embedded metric format 
  "_aws": { 
    "CloudWatchMetrics": [ 
      { 
        "Metrics": [ 
          { 
            "Name": "Time", 
            "Unit": "Milliseconds", 
            "StorageResolution": 60 
          } 
        ], 
        ... 
      } 
    ] 
  }, 
  "Time": 1
}
Reference values
Reference values are string values that reference Target members (p. 989) members on the root node. 
These references should NOT be confused with the JSON Pointers described in RFC6901. Target values 
cannot be nested.
Target members
Valid targets MUST be members on the root node and cannot be nested objects. For example, a 
_reference_ value of "A.a" MUST match the following member:
{ "A.a" }
It MUST NOT match the nested member:
{ "A": { "a" } }
Valid values of target members depend on what is referencing them. A metric target MUST be a numeric 
value or an array of numeric values. Numeric array metric targets MUST NOT have more than 100 
members. A dimension target MUST have a string value.
Embedded metric format example and JSON schema
The following is a valid example of embedded metric format.
{ 
  "_aws": { 
    "Timestamp": 1574109732004, 
    "CloudWatchMetrics": [ 
      { 
        "Namespace": "lambda-function-metrics", 
        "Dimensions": [["functionVersion"]], 
        "Metrics": [ 
          { 
            "Name": "time", 
            "Unit": "Milliseconds", 
            "StorageResolution": 60 
          } 
        ] 
      } 
    ] 
  }, 
  "functionVersion": "$LATEST", 
  "time": 100, 
989Amazon CloudWatch User Guide
Speciﬁcation: Embedded metric format 
  "requestId": "989ffbf8-9ace-4817-a57c-e4dd734019ee"
}
You can use the following schema to validate embedded metric format documents.
{ 
    "type": "object", 
    "title": "Root Node", 
    "required": [ 
        "_aws" 
    ], 
    "properties": { 
        "_aws": { 
            "$id": "#/properties/_aws", 
            "type": "object", 
            "title": "Metadata", 
            "required": [ 
                "Timestamp", 
                "CloudWatchMetrics" 
            ], 
            "properties": { 
                "Timestamp": { 
                    "$id": "#/properties/_aws/properties/Timestamp", 
                    "type": "integer", 
                    "title": "The Timestamp Schema", 
                    "examples": [ 
                        1565375354953 
                    ] 
                }, 
                "CloudWatchMetrics": { 
                    "$id": "#/properties/_aws/properties/CloudWatchMetrics", 
                    "type": "array", 
                    "title": "MetricDirectives", 
                    "items": { 
                        "$id": "#/properties/_aws/properties/CloudWatchMetrics/items", 
                        "type": "object", 
                        "title": "MetricDirective", 
                        "required": [ 
                            "Namespace", 
                            "Dimensions", 
                            "Metrics" 
                        ], 
                        "properties": { 
                            "Namespace": { 
                                "$id": "#/properties/_aws/properties/CloudWatchMetrics/
items/properties/Namespace", 
                                "type": "string", 
                                "title": "CloudWatch Metrics Namespace", 
                                "examples": [ 
                                    "MyApp" 
                                ], 
                                "pattern": "^(.*)$", 
                                "minLength": 1, 
                                "maxLength": 1024 
                            }, 
                            "Dimensions": { 
                                "$id": "#/properties/_aws/properties/CloudWatchMetrics/
items/properties/Dimensions", 
                                "type": "array", 
                                "title": "The Dimensions Schema", 
                                "minItems": 1, 
                                "items": { 
                                    "$id": "#/properties/_aws/properties/CloudWatchMetrics/
items/properties/Dimensions/items", 
                                    "type": "array", 
990Amazon CloudWatch User Guide
Speciﬁcation: Embedded metric format 
                                    "title": "DimensionSet", 
                                    "minItems": 0, 
                                    "maxItems": 30, 
                                    "items": { 
                                        "$id": "#/properties/_aws/properties/
CloudWatchMetrics/items/properties/Dimensions/items/items", 
                                        "type": "string", 
                                        "title": "DimensionReference", 
                                        "examples": [ 
                                            "Operation" 
                                        ], 
                                        "pattern": "^(.*)$", 
                                        "minLength": 1, 
                                        "maxLength": 250
} 
                                } 
                            }, 
                            "Metrics": { 
                                "$id": "#/properties/_aws/properties/CloudWatchMetrics/
items/properties/Metrics", 
                                "type": "array", 
                                "title": "MetricDefinitions", 
                                "items": { 
                                    "$id": "#/properties/_aws/properties/CloudWatchMetrics/
items/properties/Metrics/items", 
                                    "type": "object", 
                                    "title": "MetricDefinition", 
                                    "required": [ 
                                        "Name" 
                                    ], 
                                    "properties": { 
                                        "Name": { 
                                            "$id": "#/properties/_aws/properties/
CloudWatchMetrics/items/properties/Metrics/items/properties/Name", 
                                            "type": "string", 
                                            "title": "MetricName", 
                                            "examples": [ 
                                                "ProcessingLatency" 
                                            ], 
                                            "pattern": "^(.*)$", 
                                            "minLength": 1, 
                                            "maxLength": 1024 
                                        }, 
                                        "Unit": { 
                                            "$id": "#/properties/_aws/properties/
CloudWatchMetrics/items/properties/Metrics/items/properties/Unit", 
                                            "type": "string", 
                                            "title": "MetricUnit", 
                                            "examples": [ 
                                                "Milliseconds" 
                                            ], 
                                            "pattern": "^(Seconds|Microseconds|
Milliseconds|Bytes|Kilobytes|Megabytes|Gigabytes|Terabytes|Bits|Kilobits|Megabits|Gigabits|
Terabits|Percent|Count|Bytes\\/Second|Kilobytes\\/Second|Megabytes\\/Second|Gigabytes\\/
Second|Terabytes\\/Second|Bits\\/Second|Kilobits\\/Second|Megabits\\/Second|Gigabits\\/
Second|Terabits\\/Second|Count\\/Second|None)$" 
                                         }, 
                                         "StorageResolution": { 
                                            "$id": "#/properties/_aws/properties/
CloudWatchMetrics/items/properties/Metrics/items/properties/StorageResolution", 
                                            "type": "integer", 
                                            "title": "StorageResolution", 
                                            "examples": [ 
                                                60 
                                            ] 
                                         } 
991Amazon CloudWatch User Guide
Using the PutLogEvents API to send manually-
created embedded metric format logs
                                    } 
                                } 
                            } 
                        } 
                    } 
                } 
            } 
        } 
    }
}
Using the PutLogEvents API to send manually-
created embedded metric format logs
You can send embedded metric format logs to CloudWatch Logs using the CloudWatch Logs 
PutLogEvents API. When calling PutLogEvents, you may optionally include the following HTTP header to 
instruct CloudWatch Logs that the metrics should be extracted, but it is no longer necessary.
x-amzn-logs-format: json/emf
The following is a full example using the AWS SDK for Java 2.x:
package org.example.basicapp;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.cloudwatchlogs.CloudWatchLogsClient;
import software.amazon.awssdk.services.cloudwatchlogs.model.DescribeLogStreamsRequest;
import software.amazon.awssdk.services.cloudwatchlogs.model.DescribeLogStreamsResponse;
import software.amazon.awssdk.services.cloudwatchlogs.model.InputLogEvent;
import software.amazon.awssdk.services.cloudwatchlogs.model.PutLogEventsRequest;
import java.util.Collections;
public class EmbeddedMetricsExample { 
        public static void main(String[] args) { 
                final String usage = "To run this example, supply a Region code (eg. us-
east-1), log group, and stream name as command line arguments" 
                                + "Ex: PutLogEvents <region-id> <log-group-name> <stream-
name>"; 
                if (args.length != 3) { 
                        System.out.println(usage); 
                        System.exit(1); 
                } 
                String regionId = args[0]; 
                String logGroupName = args[1]; 
                String logStreamName = args[2]; 
                CloudWatchLogsClient logsClient = 
 CloudWatchLogsClient.builder().region(Region.of(regionId)).build(); 
                // Build a JSON log using the EmbeddedMetricFormat. 
                long timestamp = System.currentTimeMillis(); 
                String message = "{" + 
                                "  \"_aws\": {" + 
                                "    \"Timestamp\": " + timestamp  + "," + 
                                "    \"CloudWatchMetrics\": [" + 
                                "      {" + 
                                "        \"Namespace\": \"MyApp\"," + 
992Amazon CloudWatch User Guide
Using the CloudWatch agent to 
send embedded metric format logs
                                "        \"Dimensions\": [[\"Operation\"], [\"Operation\", 
 \"Cell\"]]," + 
                                "        \"Metrics\": [{ \"Name\": \"ProcessingLatency\", 
 \"Unit\": \"Milliseconds\", \"StorageResolution\": 60 }]" + 
                                "      }" + 
                                "    ]" + 
                                "  }," + 
                                "  \"Operation\": \"Aggregator\"," + 
                                "  \"Cell\": \"001\"," + 
                                "  \"ProcessingLatency\": 100" + 
                                "}"; 
                InputLogEvent inputLogEvent = InputLogEvent.builder() 
                        .message(message) 
                        .timestamp(timestamp) 
                        .build(); 
                // Specify the request parameters. 
                PutLogEventsRequest putLogEventsRequest = PutLogEventsRequest.builder() 
                        .logEvents(Collections.singletonList(inputLogEvent)) 
                        .logGroupName(logGroupName) 
                        .logStreamName(logStreamName) 
                        .build(); 
                logsClient.putLogEvents(putLogEventsRequest); 
                System.out.println("Successfully put CloudWatch log event"); 
        }
}
Note
With the embedded metric format, you can track the processing of your EMF logs by metrics 
that are published in the AWS/Logs  namespace of your account. These can be used to track 
failed metric generation from EMF, as well as whether failures happen due to parsing or 
validation. For more details see Monitoring with CloudWatch metrics.
Using the CloudWatch agent to send embedded 
metric format logs
To use this method, ﬁrst install the CloudWatch agent for the services you want to send embedded 
metric format logs from, and then you can begin sending the events.
The CloudWatch agent must be version 1.230621.0 or later.
Note
You do not need to install the CloudWatch agent to send logs from Lambda functions.
Lambda function timeouts are not handled automatically. This means that if your function times 
out before the metrics get ﬂushed, then the metrics for that invocation will not be captured.
Installing the CloudWatch agent
Install the CloudWatch agent for each service which is to send embedded metric format logs.
Installing the CloudWatch agent on EC2
First, install the CloudWatch agent on the instance. For more information, see Installing the CloudWatch 
agent  (p. 859).
Once you have installed the agent, conﬁgure the agent to listen on a UDP or TCP port for the embedded 
metric format logs. The following is an example of this conﬁguration that listens on the default 
993Amazon CloudWatch User Guide
Using the CloudWatch agent to 
send embedded metric format logs
socket tcp:25888 . For more information about agent conﬁguration, see  Manually create or edit the 
CloudWatch agent conﬁguration ﬁle (p. 903).
{ 
  "logs": { 
    "metrics_collected": { 
      "emf": { } 
    } 
  }
}
Installing the CloudWatch agent on Amazon ECS
The easiest way to deploy the CloudWatch agent on Amazon ECS is to run it as a sidecar, deﬁning it in 
the same task deﬁnition as your application.
Create agent conﬁguration ﬁle
Create your CloudWatch agent conﬁguration ﬁle locally. In this example, the relative ﬁle path will be
amazon-cloudwatch-agent.json .
For more information about agent conﬁguration, see  Manually create or edit the CloudWatch agent 
conﬁguration ﬁle (p. 903).
{ 
  "logs": { 
    "metrics_collected": { 
      "emf": { } 
    } 
  }
}
Push conﬁguration to SSM Parameter Store
Enter the following command to push the CloudWatch agent conﬁguration ﬁle to the AWS Systems 
Manager (SSM) Parameter Store.
aws ssm put-parameter \ 
    --name "cwagentconfig" \ 
    --type "String" \ 
    --value "`cat amazon-cloudwatch-agent.json`" \ 
    --region "{{region}}"
Conﬁgure the task deﬁnition
Conﬁgure your task deﬁnition to use the CloudWatch Agent and expose the TCP or UDP port. The sample 
task deﬁnition that you should use depends on your networking mode.
Notice that the webapp  speciﬁes the AWS_EMF_AGENT_ENDPOINT  environment variable. This is used by 
the library and should point to the endpoint that the agent is listening on. Additionally, the cwagent
speciﬁes the CW_CONFIG_CONTENT  as a “valueFrom” parameter that points to the SSM conﬁguration 
that you created in the previous step.
This section contains one example for bridge mode and one example for host or awsvpc mode. For more 
examples of how you can conﬁgure the CloudWatch agent on Amazon ECS, see the Github samples 
repository
The following is an example for bridge mode. When bridge mode networking is enabled, the agent needs 
to be linked to your application using the links parameter and must be addressed using the container 
name.
994Amazon CloudWatch User Guide
Using the CloudWatch agent to 
send embedded metric format logs
{ 
  "containerDefinitions": [ 
          { 
              "name": "webapp", 
              "links": [ "cwagent" ], 
              "image": "my-org/web-app:latest", 
              "memory": 256, 
              "cpu": 256, 
              "environment": [{ 
                "name": "AWS_EMF_AGENT_ENDPOINT", 
                "value": "tcp://cwagent:25888" 
              }], 
          }, 
          { 
              "name": "cwagent", 
              "mountPoints": [], 
              "image": "public.ecr.aws/cloudwatch-agent/cloudwatch-agent:latest", 
              "memory": 256, 
              "cpu": 256, 
              "portMappings": [{ 
                  "protocol": "tcp", 
                  "containerPort": 25888 
              }], 
              "environment": [{ 
                "name": "CW_CONFIG_CONTENT", 
                "valueFrom": "cwagentconfig" 
              }], 
          } 
      ],
}
The following is an example for host mode or awsvpc mode. When running on these network modes, the 
agent can be addressed over localhost .
{ 
  "containerDefinitions": [ 
          { 
              "name": "webapp", 
              "image": "my-org/web-app:latest", 
              "memory": 256, 
              "cpu": 256, 
              "environment": [{ 
                "name": "AWS_EMF_AGENT_ENDPOINT", 
                "value": "tcp://127.0.0.1:25888" 
              }], 
          }, 
          { 
              "name": "cwagent", 
              "mountPoints": [], 
              "image": "public.ecr.aws/cloudwatch-agent/cloudwatch-agent:latest", 
              "memory": 256, 
              "cpu": 256, 
              "portMappings": [{ 
                  "protocol": "tcp", 
                  "containerPort": 25888 
              }], 
              "environment": [{ 
                "name": "CW_CONFIG_CONTENT", 
                "valueFrom": "cwagentconfig" 
              }], 
          } 
      ],
}
995Amazon CloudWatch User Guide
Using the CloudWatch agent to 
send embedded metric format logs
Note
In awsvpc mode, you must either give a public IP address to the VPC (Fargate only), set up a 
NAT gateway, or set up a CloudWatch Logs VPC endpoint. For more information about setting 
up a NAT, see NAT Gateways. For more information about setting up a CloudWatch Logs VPC 
endpoint, see Using CloudWatch Logs with Interface VPC Endpoints.
The following is an example of how to assign a public IP address to a task that uses the Fargate 
launch type.
aws ecs run-task \  
--cluster {{cluster-name}} \
--task-definition cwagent-fargate \
--region {{region}} \
--launch-type FARGATE \
--network-configuration 
 "awsvpcConfiguration={subnets=[{{subnetId}}],securityGroups=[{{sgId}}],assignPublicIp=ENABLED}"
Ensure permissions
Ensure the IAM role executing your tasks has permission to read from the SSM Parameter Store. You can 
add this permission by attaching the AmazonSSMReadOnlyAccess policy. To do so, enter the following 
command.
aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess \
--role-name CWAgentECSExecutionRole
Installing the CloudWatch agent on Amazon EKS
Parts of this process can be skipped if you have already installed CloudWatch Container Insights on this 
cluster.
Permissions
If you have not already installed Container Insights, then ﬁrst ensure that your Amazon EKS nodes have 
the appropriate IAM permissions. They should have the CloudWatchAgentServerPolicy attached. For 
more information, see Verify prerequisites (p. 480).
Create ConﬁgMap
Create a ConﬁgMap for the agent. The ConﬁgMap also tells the agent to listen on a TCP or UDP port. Use 
the following ConﬁgMap.
# cwagent-emf-configmap.yaml
apiVersion: v1
data: 
  # Any changes here must not break the JSON format 
  cwagentconfig.json: | 
    { 
      "agent": { 
        "omit_hostname": true 
      }, 
      "logs": { 
        "metrics_collected": { 
          "emf": { } 
        } 
      } 
    }
kind: ConfigMap
metadata: 
  name: cwagentemfconfig 
996Amazon CloudWatch User Guide
Using the CloudWatch agent to 
send embedded metric format logs
  namespace: default
If you have already installed Container Insights, add the following "emf": { }  line to your existing 
ConﬁgMap.
Apply the ConﬁgMap
Enter the following command to apply the ConﬁgMap.
kubectl apply -f cwagent-emf-configmap.yaml
Deploy the agent
To deploy the CloudWatch agent as a sidecar, add the agent to your pod deﬁnition, as in the following 
example.
apiVersion: v1
kind: Pod
metadata: 
  name: myapp 
  namespace: default
spec: 
  containers: 
    # Your container definitions go here 
    - name: web-app 
      image: my-org/web-app:latest 
    # CloudWatch Agent configuration 
    - name: cloudwatch-agent 
      image: public.ecr.aws/cloudwatch-agent/cloudwatch-agent:latest 
      imagePullPolicy: Always 
      resources: 
        limits: 
          cpu: 200m 
          memory: 100Mi 
        requests: 
          cpu: 200m 
          memory: 100Mi 
      volumeMounts: 
        - name: cwagentconfig 
          mountPath: /etc/cwagentconfig 
      ports: 
  # this should match the port configured in the ConfigMap 
        - protocol: TCP 
          hostPort: 25888 
          containerPort: 25888 
  volumes: 
    - name: cwagentconfig 
      configMap: 
        name: cwagentemfconfig
Using the CloudWatch agent to send embedded metric format 
logs
When you have the CloudWatch agent installed and running, you can send the embedded metric format 
logs over TCP or UDP. There are two requirements when sending the logs over the agent:
•The logs must contain a LogGroupName  key that tells the agent which log group to use.
•Each log event must be on a single line. In other words, a log event cannot contain the newline (\n) 
character.
997Amazon CloudWatch User Guide
Using the embedded metric format 
with AWS Distro for OpenTelemetry
The log events must also follow the embedded metric format speciﬁcation. For more information, see
Speciﬁcation: Embedded metric format  (p. 986).
If you plan to create alarms on metrics created using embedded metric format, see Setting alarms on 
metrics created with the embedded metric format (p. 999) for recommendations.
The following is an example of sending log events manually from a Linux bash shell. You can instead use 
the UDP socket interfaces provided by your programming language of choice.
echo '{"_aws":{"Timestamp":1574109732004,"LogGroupName":"Foo","CloudWatchMetrics":
[{"Namespace":"MyApp","Dimensions":[["Operation"]],"Metrics":
[{"Name":"ProcessingLatency","Unit":"Milliseconds","StorageResolution":60}]}]},"Operation":"Aggregator","ProcessingLatency":100}' 
 \
> /dev/udp/0.0.0.0/25888
Note
With the embedded metric format, you can track the processing of your EMF logs by metrics 
that are published in the AWS/Logs  namespace of your account. These can be used to track 
failed metric generation from EMF, as well as whether failures happen due to parsing or 
validation. For more details see Monitoring with CloudWatch metrics.
Using the embedded metric format with AWS Distro 
for OpenTelemetry
You can use the embedded metric format as a part of the OpenTelemetry project. OpenTelemetry is an 
open-source initiative that removes boundaries and restrictions between vendor-speciﬁc formats for 
tracing, logs, and metrics by oﬀering a single set of speciﬁcations and APIs. For more information, see
OpenTelemetry.
Using embedded metric format with OpenTelemetry requires two components: an OpenTelemetry-
compliant data source, and the AWS Distro for OpenTelemetry Collector enabled for use with 
CloudWatch embedded metric format logs.
We have preconﬁgured redistributions of the OpenTelemetry components, maintained by AWS, to make 
onboarding as easy as possible. For more information about using OpenTelemetry with embedded 
metric format, in addition to other AWS services, see AWS Distro for OpenTelemetry.
For additional information regarding language support and usage, see AWS Observability on Github.
Viewing your metrics and logs in the console
After you generate embedded metric format logs that extract metrics, you can use the CloudWatch 
console to view the metrics. Embedded metrics have the dimensions that you speciﬁed when you 
generated the logs. Also, embedded metrics that you generated using the client libraries have the 
following default dimensions:
•ServiceType
•ServiceName
•LogGroup
To view metrics that were generated from embedded metric format logs
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
998Amazon CloudWatch User Guide
Setting alarms on metrics created 
with the embedded metric format
2. In the navigation pane, choose Metrics .
3. Select a namespace that you speciﬁed for your embedded metrics when you generated them. If you 
used the client libraries to generate the metrics and did not specify a namespace, then select aws-
embedded-metrics . This is the default namespace for embedded metrics generated using the client 
libraries.
4. Select a metric dimension (for example, ServiceName).
5. The All metrics  tab displays all metrics for that dimension in the namespace. You can do the 
following:
a. To sort the table, use the column heading.
b. To graph a metric, select the check box next to the metric. To select all metrics, select the check 
box in the heading row of the table.
c. To ﬁlter by resource, choose the resource ID and then choose Add to search .
d. To ﬁlter by metric, choose the metric name and then choose Add to search .
Querying logs using CloudWatch Logs Insights
You can query the detailed log events associated with the extracted metrics by using CloudWatch Logs 
Insights to provide deep insights into the root causes of operational events. One of the beneﬁts of 
extracting metrics from your logs is that you can ﬁlter your logs later by the unique metric (metric name 
plus unique dimension set) and metric values, to get context on the events that contributed to the 
aggregated metric value
For example, to get an impacted request id or x-ray trace id, you could run the following query in 
CloudWatch Logs Insights.
filter Latency > 1000 and Operation = "Aggregator"
| fields RequestId, TraceId
You can also perform query-time aggregation on high-cardinality keys, such as ﬁnding the customers 
impacted by an event. The following example illustrates this.
filter Latency > 1000 and Operation = "Aggregator"
| stats count() by CustomerId
For more information, see Analyzing Log Data with CloudWatch Logs Insights
Setting alarms on metrics created with the 
embedded metric format
In general, creating alarms on metrics generated by embedded metric format follows the same 
pattern as creating alarms on any other metrics. For more information, see  Using Amazon CloudWatch 
alarms  (p. 180).
Embedded metric format metric generation depends on your log publishing ﬂow, because the logs have 
to be processed by CloudWatch Logs to be transformed into metrics. So it’s important for you to publish 
logs in a timely manner so that your metric datapoints are created within the period of time in which 
alarms are evaluated.
If you plan use embedded metric format to send high-resolution metrics and create alarms on these 
metrics, we recommended that you ﬂush logs to CloudWatch Logs at an interval of 5 seconds or less to 
avoid introducing additional delay that can cause alarming on partial or missing data. If you are using the 
999Amazon CloudWatch User Guide
Setting alarms on metrics created 
with the embedded metric format
CloudWatch agent, you can adjust the ﬂush interval by setting the force_flush_interval  parameter 
in the CloudWatch agent conﬁguration ﬁle. This value defaults to 5 seconds.
If you are using Lambda on other platforms where you can’t control the log ﬂush interval, consider 
using “M out of N” alarms to control the number of datapoints used to alarm. For more information, see
Evaluating an alarm  (p. 181).
1000Amazon CloudWatch User Guide
AWS services that publish 
CloudWatch metrics
The following AWS services publish metrics to CloudWatch. For information about the metrics and 
dimensions, see the speciﬁed documentation.
Service Namespace Documentation
AWS AmplifyAWS/
AmplifyHostingMonitoring
Amazon API 
GatewayAWS/ApiGateway Monitor API Execution with Amazon CloudWatch
Amazon AppFlowAWS/AppFlow Monitoring Amazon AppFlow with Amazon CloudWatch
AWS Application 
Migration ServiceAWS/MGN Monitoring Application Migration Service with Amazon 
CloudWatch
AWS App RunnerAWS/AppRunner Viewing App Runner service metrics reported to CloudWatch
AppStream 2.0AWS/AppStream Monitoring Amazon AppStream 2.0 Resources
AWS AppSyncAWS/AppSync CloudWatch Metrics
Amazon AthenaAWS/Athena Monitoring Athena Queries with CloudWatch Metrics
Amazon AuroraAWS/RDS Amazon Aurora metrics
AWS BackupAWS/Backup Monitoring AWS Backup Metrics with CloudWatch
AWS Billing and 
Cost ManagementAWS/Billing Monitoring Charges with Alerts and Notiﬁcations
Amazon BraketAWS/Braket/By 
DeviceMonitoring Amazon Braket with Amazon CloudWatch
AWS Certiﬁcate 
ManagerAWS/
CertificateManagerSupported CloudWatch Metrics
AWS Private CAAWS/
ACMPrivateCASupported CloudWatch Metrics
AWS ChatbotAWS/Chatbot Monitoring AWS Chatbot with Amazon CloudWatch
Amazon ChimeAWS/
ChimeVoiceConnectorMonitoring Amazon Chime with Amazon CloudWatch
Amazon Chime 
SDKAWS/ChimeSDK Service metrics
AWS Client VPNAWS/ClientVPN Monitoring with Amazon CloudWatch
Amazon 
CloudFrontAWS/CloudFront Monitoring CloudFront Activity Using CloudWatch
1001Amazon CloudWatch User Guide
ServiceNamespace Documentation
AWS CloudHSMAWS/CloudHSMGetting CloudWatch Metrics
Amazon 
CloudSearchAWS/
CloudSearchMonitoring an Amazon CloudSearch Domain with Amazon 
CloudWatch
AWS CloudTrailAWS/CloudTrailSupported CloudWatch metrics
CloudWatch agentCWAgent
or a custom 
namespaceMetrics collected by the CloudWatch agent
CloudWatch 
metric streamsAWS/
CloudWatch/
MetricStreamsMonitoring your metric streams with CloudWatch metrics
CloudWatch RUMAWS/RUMCloudWatch metrics that you can collect with CloudWatch 
RUM
CloudWatch 
SyntheticsCloudWatchSyntheticsCloudWatch metrics published by canaries
Amazon 
CloudWatch LogsAWS/LogsMonitoring Usage with CloudWatch Metrics
AWS CodeBuildAWS/CodeBuildMonitoring AWS CodeBuild
Amazon CodeGuru 
ReviewerMonitoring CodeGuru Reviewer with Amazon CloudWatch
Amazon Kendra Monitoring Amazon Kendra with Amazon CloudWatch
Amazon 
CodeWhispererAWS/
CodeWhispererMonitoring Amazon CodeWhisperer with Amazon 
CloudWatch
Amazon CognitoAWS/CognitoMonitoring Amazon Cognito
Amazon 
ComprehendAWS/ComprehendMonitoring Amazon Comprehend endpoints
Amazon ConnectAWS/ConnectMonitoring Amazon Connect in Amazon CloudWatch Metrics
Amazon Data 
Lifecycle ManagerAWS/
DataLifecycleManagerMonitor your policies using Amazon CloudWatch
AWS DataSyncAWS/DataSyncMonitoring Your Task
Amazon DataZone Monitoring Amazon DataZone with Amazon CloudWatch
Amazon 
DevOps GuruAWS/DevOps-
GuruMonitoring Amazon DevOps Guru with Amazon CloudWatch
AWS Database 
Migration ServiceAWS/DMSMonitoring AWS DMS Tasks
AWS Direct 
ConnectAWS/DXMonitoring with Amazon CloudWatch
AWS Directory 
ServiceAWS/
DirectoryServiceUse Amazon CloudWatch metrics to determine when to add 
domain controllers
1002Amazon CloudWatch User Guide
ServiceNamespace Documentation
Amazon 
DocumentDBAWS/DocDBAmazon DocumentDB Metrics
Amazon 
DynamoDBAWS/DynamoDB DynamoDB Metrics and Dimensions
DynamoDB 
Accelerator (DAX)AWS/DAXViewing DAX Metrics and Dimensions
Amazon EC2AWS/EC2Monitoring Your Instances Using CloudWatch
Amazon EC2 
Elastic GraphicsAWS/
ElasticGPUsUsing CloudWatch metrics to monitor Elastic Graphics
Amazon EC2 Spot 
FleetAWS/EC2SpotCloudWatch Metrics for Spot Fleet
Amazon EC2 Auto 
ScalingAWS/
AutoScalingMonitoring Your Auto Scaling Groups and Instances Using 
CloudWatch
AWS Elastic 
BeanstalkAWS/
ElasticBeanstalkPublishing Amazon CloudWatch Custom Metrics for an 
Environment
Amazon Elastic 
Block StoreAWS/EBSAmazon CloudWatch Metrics for Amazon EBS
Amazon Elastic 
Container RegistryAWS/ECRAmazon ECR repository metrics
Amazon Elastic 
Container ServiceAWS/ECSAmazon ECS CloudWatch Metrics
Amazon 
ECS through 
CloudWatch 
Container InsightsECS/
ContainerInsightsAmazon ECS Container Insights metrics
Amazon ECS 
Cluster auto 
scalingAWS/ECS/
ManagedScalingAmazon ECS cluster auto scaling
AWS Elastic 
Disaster RecoveryCloudWatch Metrics for DRS
Amazon Elastic 
File SystemAWS/EFSMonitoring with CloudWatch
Amazon Elastic 
InferenceAWS/
ElasticInferenceUsing CloudWatch Metrics to Monitor Amazon EI
Amazon 
EKS through 
CloudWatch 
Container InsightsContainerInsightsAmazon EKS and Kubernetes Container Insights metrics
Elastic Load 
BalancingAWS/
ApplicationELBCloudWatch Metrics for your Application Load Balancer
1003Amazon CloudWatch User Guide
ServiceNamespace Documentation
Elastic Load 
BalancingAWS/NetworkELBCloudWatch Metrics for your Network Load Balancer
Elastic Load 
BalancingAWS/GatewayELBCloudWatch Metrics for your Gateway Load Balancer
Elastic Load 
BalancingAWS/ELBCloudWatch Metrics for your Classic Load Balancer
Amazon Elastic 
TranscoderAWS/
ElasticTranscoderMonitoring with Amazon CloudWatch
Amazon 
ElastiCache for 
MemcachedAWS/
ElastiCacheMonitoring Use with CloudWatch Metrics
Amazon 
ElastiCache for 
RedisAWS/
ElastiCacheMonitoring Use with CloudWatch Metrics
Amazon 
OpenSearch 
ServiceAWS/ESMonitoring OpenSearch cluster metrics with Amazon 
CloudWatch
Amazon EMRAWS/
ElasticMapReduceMonitor Metrics with CloudWatch
AWS Elemental 
MediaConnectAWS/
MediaConnectMonitoring MediaConnect with Amazon CloudWatch
AWS Elemental 
MediaConvertAWS/
MediaConvertUsing CloudWatch Metrics to View Metrics for AWS 
Elemental MediaConvert Resources
AWS Elemental 
MediaLiveAWS/MediaLiveMonitoring activity using Amazon CloudWatch metrics
AWS Elemental 
MediaPackageAWS/
MediaPackageMonitoring AWS Elemental MediaPackage with Amazon 
CloudWatch Metrics
AWS Elemental 
MediaStoreAWS/MediaStoreMonitoring AWS Elemental MediaStore with Amazon 
CloudWatch Metrics
AWS Elemental 
MediaTailorAWS/
MediaTailorMonitoring AWS Elemental MediaTailor with Amazon 
CloudWatch
Amazon 
EventBridgeAWS/EventsMonitoring Amazon EventBridge
Amazon FinSpace Logging and monitoring
Amazon Forecast CloudWatch Metrics for Amazon Forecast
Amazon Fraud 
DetectorMonitoring Amazon Fraud Detector with Amazon 
CloudWatch
Amazon FSx for 
LustreAWS/FSxMonitoring Amazon FSx for Lustre
1004Amazon CloudWatch User Guide
ServiceNamespace Documentation
Amazon FSx for 
OpenZFSAWS/FSxMonitoring with Amazon CloudWatch
Amazon FSx for 
Windows File 
ServerAWS/FSxMonitoring Amazon FSx for Windows File Server
Amazon FSx for 
NetApp ONTAPAWS/FSxMonitoring with Amazon CloudWatch
Amazon FSx for 
OpenZFSAWS/FSxMonitoring with Amazon CloudWatch
Amazon GameLiftAWS/GameLiftMonitor Amazon GameLift with CloudWatch
AWS Global 
AcceleratorAWS/
GlobalAcceleratorUsing Amazon CloudWatch with AWS Global Accelerator
AWS Glue GlueMonitoring AWS Glue Using CloudWatch Metrics
AWS Ground 
StationAWS/
GroundStationMetrics Using Amazon CloudWatch
AWS HealthLakeAWS/HealthLakeMonitoring HealthLake with CloudWatch
Amazon InspectorAWS/InspectorMonitoring Amazon Inspector Using CloudWatch
Amazon 
Interactive Video 
ServiceAWS/IVSMonitoring Amazon IVS with Amazon CloudWatch
Amazon 
Interactive Video 
Service ChatAWS/IVSChatMonitoring Amazon IVS with Amazon CloudWatch
AWS IoT AWS/IoTAWS IoT Metrics and Dimensions
AWS IoT AnalyticsAWS/
IoTAnalyticsNamespace, Metrics, and Dimensions
AWS IoT FleetWiseAWS/
IoTFleetWiseMonitoring AWS IoT FleetWise with Amazon CloudWatch
AWS IoT SiteWiseAWS/
IoTSiteWiseMonitoring AWS IoT SiteWise with Amazon CloudWatch 
metrics
AWS IoT Things 
GraphAWS/
ThingsGraphMetrics
AWS IoT 
TwinMakerAWS/
IoTTwinMakerMonitoring AWS IoT TwinMaker with Amazon CloudWatch 
metrics
AWS IoT 1-Click Monitoring AWS IoT 1-Click with Amazon CloudWatch
AWS Key 
Management 
ServiceAWS/KMSMonitoring with CloudWatch
1005Amazon CloudWatch User Guide
ServiceNamespace Documentation
Amazon Keyspaces 
(for Apache 
Cassandra)AWS/CassandraAmazon Keyspaces Metrics and Dimensions
Amazon Kendra Monitoring Amazon Kendra with Amazon CloudWatch
Amazon Kinesis 
Data AnalyticsAWS/
KinesisAnalyticsKinesis Data Analytics for SQL Applications: Monitoring with 
CloudWatch
Kinesis Data Analytics for Apache Flink: Viewing Amazon 
Kinesis Data Analytics Metrics and Dimensions
Amazon Kinesis 
Data FirehoseAWS/FirehoseMonitoring Kinesis Data Firehose Using CloudWatch Metrics
Amazon Kinesis 
Data StreamsAWS/KinesisMonitoring Amazon Kinesis Data Streams with Amazon 
CloudWatch
Amazon Kinesis 
Video StreamsAWS/
KinesisVideoMonitoring Kinesis Video Streams Metrics with CloudWatch
AWS LambdaAWS/LambdaAWS Lambda Metrics
Amazon Lex AWS/LexMonitoring Amazon Lex with Amazon CloudWatch
AWS License 
ManagerAWSLicenseManager/
licenseUsage
AWS/
LicenseManager/
LinuxSubscriptionsMonitoring license usage with Amazon CloudWatch
Usage metrics and Amazon CloudWatch alarms for Linux 
subscriptions
Amazon Location 
ServiceAWS/LocationAmazon Location Service metrics exported to Amazon 
CloudWatch
Amazon Lookout 
for EquipmentAWS/
lookoutequipmentMonitoring Lookout for Equipment with Amazon 
CloudWatch
Amazon Lookout 
for MetricsAWS/
LookoutMetricsMonitoring Lookout for Metrics with Amazon CloudWatch
Amazon Lookout 
for VisionAWS/
LookoutVisionMonitoring Lookout for Vision with Amazon CloudWatch
AWS Mainframe 
ModernizationMonitoring AWS Mainframe Modernization with Amazon 
CloudWatch
Amazon Machine 
LearningAWS/MLMonitoring Amazon ML with CloudWatch Metrics
Amazon Managed 
BlockchainAWS/
managedblockchainUse Hyperledger Fabric Peer Node Metrics on Amazon 
Managed Blockchain
Amazon Managed 
Service for 
PrometheusAWS/PrometheusAmazon CloudWatch metrics
1006Amazon CloudWatch User Guide
ServiceNamespace Documentation
Amazon Managed 
Streaming for 
Apache KafkaAWS/KafkaMonitoring Amazon MSK with Amazon CloudWatch
Amazon Managed 
Streaming for 
Apache KafkaConnectorNameMonitoring MSK Connect
Amazon 
MemoryDB for 
RedisAWS/MemoryDBMonitoring CloudWatch metrics
Amazon MQ AWS/AmazonMQMonitoring Amazon MQ Brokers Using Amazon CloudWatch
Amazon NeptuneAWS/NeptuneMonitoring Neptune with CloudWatch
AWS Network 
FirewallAWS/
NetworkFirewallAWS Network Firewall metrics in Amazon CloudWatch
AWS Network 
ManagerAWS/
NetworkManagerCloudWatch metrics for on-premises resources
Amazon Nimble 
StudioAWS/
NimbleStudioMonitoring Nimble Studio with Amazon CloudWatch
AWS HealthOmicsAWS/OmicsMonitoring AWS HealthOmics with Amazon CloudWatch
AWS OpsWorksAWS/OpsWorksMonitoring Stacks using Amazon CloudWatch
AWS OutpostsAWS/OutpostsCloudWatch metrics for AWS Outposts
AWS PanoramaAWS/
PanoramaDeviceMetricsMonitoring appliances and applications with Amazon 
CloudWatch
Amazon 
PersonalizeAWS/
PersonalizeCloudWatch metrics for Amazon Personalize
Amazon PinpointAWS/PinpointView Amazon Pinpoint metrics in CloudWatch
Amazon PollyAWS/PollyIntegrating CloudWatch with Amazon Polly
AWS PrivateLinkAWS/
PrivateLinkEndpointsCloudWatch metrics for AWS PrivateLink
AWS PrivateLinkAWS/
PrivateLinkServicesCloudWatch metrics for AWS PrivateLink
AWS Private 5GAWS/Private5GAmazon CloudWatch metrics
Amazon QLDBAWS/QLDBMonitoring data in Amazon QuickSight
Amazon 
QuickSightAWS/QuickSightMonitoring with Amazon CloudWatch
Amazon RedshiftAWS/RedshiftAmazon Redshift Performance Data
Amazon Relational 
Database ServiceAWS/RDSMonitoring Amazon RDS metrics with Amazon CloudWatch
1007Amazon CloudWatch User Guide
ServiceNamespace Documentation
Amazon 
RekognitionAWS/
RekognitionMonitoring Rekognition with Amazon CloudWatch
AWS RoboMakerAWS/RobomakerMonitoring AWS RoboMaker with Amazon CloudWatch
Amazon Route 53AWS/Route53Monitoring Amazon Route 53
Route 53 
Application 
Recovery 
ControllerAWS/
Route53RecoveryReadinessUsing Amazon CloudWatch with Application Recovery 
Controller
Amazon 
SageMakerAWS/SageMakerMonitoring SageMaker with CloudWatch
Amazon 
SageMaker Model 
Building PipelinesAWS/SageMaker/
ModelBuildingPipelineSageMaker Pipelines Metrics
AWS Secrets 
ManagerAWS/
SecretsManagerMonitoring Secrets Manager with Amazon CloudWatch
Amazon Security 
LakeAWS/
SecurityLakeCloudWatch metrics for Amazon Security Lake
Service CatalogAWS/
ServiceCatalogService Catalog CloudWatch Metrics
AWS Shield 
AdvancedAWS/
DDoSProtectionMonitoring with CloudWatch
Amazon Simple 
Email ServiceAWS/SESRetrieving Amazon SES Event Data from CloudWatch
AWS SimSpace 
WeaverAWS/
simspaceweaverMonitoring AWS SimSpace Weaver with Amazon CloudWatch
Amazon Simple 
Notiﬁcation 
ServiceAWS/SNSMonitoring Amazon SNS with CloudWatch
Amazon Simple 
Queue ServiceAWS/SQSMonitoring Amazon SQS Queues Using CloudWatch
Amazon S3 AWS/S3Monitoring Metrics with Amazon CloudWatch
S3 Storage Lens AWS/S3/
Storage-LensMonitor S3 Storage Lens metrics in CloudWatch
Amazon Simple 
Workﬂow ServiceAWS/SWFAmazon SWF Metrics for CloudWatch
AWS Step 
FunctionsAWS/StatesMonitoring Step Functions Using CloudWatch
AWS Storage 
GatewayAWS/
StorageGatewayUsing Amazon CloudWatch metrics
1008Amazon CloudWatch User Guide
ServiceNamespace Documentation
AWS Systems 
Manager Run 
CommandAWS/SSM-
RunCommandMonitoring Run Command Metrics Using CloudWatch
Amazon TextractAWS/TextractCloudWatch Metrics for Amazon Textract
Amazon 
TimestreamAWS/TimestreamTimestream Metrics and Dimensions
AWS Transfer for 
SFTPAWS/TransferAWS SFTP CloudWatch Metrics
Amazon 
TranscribeAWS/TranscribeMonitoring Amazon Transcribe with Amazon CloudWatch
Amazon TranslateAWS/TranslateCloudWatch Metrics and Dimensions for Amazon Translate
AWS Trusted 
AdvisorAWS/
TrustedAdvisorCreating Trusted Advisor Alarms Using CloudWatch
Amazon VPCAWS/NATGatewayMonitoring Your NAT Gateway with CloudWatch
Amazon VPCAWS/
TransitGatewayCloudWatch Metrics for Your Transit Gateways
Amazon VPCAWS/VPNMonitoring with CloudWatch
Amazon VPC IP 
Address ManagerAWS/IPAMCreate alarms with Amazon CloudWatch
AWS WAF AWS/WAFV2
for AWS WAF 
resources
WAF for AWS WAF 
classic resourcesMonitoring with CloudWatch
Amazon WorkMailAWS/WorkMailMonitoring Amazon WorkMail with Amazon CloudWatch
Amazon 
WorkSpacesAWS/WorkSpacesMonitor Your WorkSpaces Using CloudWatch Metrics
Amazon 
WorkSpaces WebAWS/
WorkSpacesWebMonitoring Amazon WorkSpaces Web with Amazon 
CloudWatch
1009Amazon CloudWatch User Guide
Visualizing your service quotas and setting alarms
AWS usage metrics
CloudWatch collects metrics that track the usage of some AWS resources and APIs. These metrics are 
published in the AWS/Usage  namespace. Usage metrics in CloudWatch allow you to proactively manage 
usage by visualizing metrics in the CloudWatch console, creating custom dashboards, detecting changes 
in activity with CloudWatch anomaly detection, and conﬁguring alarms that alert you when usage 
approaches a threshold.
Some AWS services integrate these usage metrics with Service Quotas. For these services, you can use 
CloudWatch to manage your account's use of your service quotas. For more information, see Visualizing 
your service quotas and setting alarms (p. 1010 ).
Topics
•Visualizing your service quotas and setting alarms (p. 1010 )
•AWS API usage metrics (p. 1011 )
•CloudWatch usage metrics (p. 1017 )
Visualizing your service quotas and setting alarms
For some AWS services, you can use the usage metrics to visualize your current service usage on 
CloudWatch graphs and dashboards. You can use a CloudWatch metric math function to display the 
service quotas for those resources on your graphs. You can also conﬁgure alarms that alert you when 
your usage approaches a service quota. For more information about service quotas, see What Is Service 
Quotas  in the Service Quotas User Guide.
If you are signed in to an account that is set up as a monitoring account in CloudWatch cross-account 
observability, you can use that monitoring account to visualize service quotas and set alarms for metrics 
in the source accounts that are linked to that monitoring account. For more information, see CloudWatch 
cross-account observability (p. 846).
Currently, the following services integrate their usage metrics with Service Quotas:
•AWS CloudHSM
•Amazon Chime SDK
•Amazon CloudWatch
•Amazon CloudWatch Logs
•Amazon DynamoDB
•Amazon EC2
•Amazon Elastic Container Registry
•AWS Fargate
•AWS Fault Injection Simulator
•AWS Interactive Video Service
•AWS Key Management Service
•Amazon Kinesis Data Firehose
•Amazon Location Service
•AWS RoboMaker
•Amazon SageMaker
1010Amazon CloudWatch User Guide
AWS API usage metrics
To visualize a service quota and optionally set an alarm
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. On the All metrics  tab, choose Usage , and then choose By AWS Resource.
The list of service quota usage metrics appears.
4. Select the check box next to one of the metrics.
The graph displays your current usage of that AWS resource.
5. To add your service quota to the graph, do the following:
a. Choose the Graphed metrics  tab.
b. Choose Math expression , Start with an empty expression. In the new row, under Details , enter
SERVICE_QUOTA(m1) .
A new line is added to the graph, displaying the service quota for the resource represented in 
the metric.
6. To see your current usage as a percentage of the quota, add a new expression or change the current
SERVICE_QUOTA expression. The new expression to use is m1/SERVICE_QUOTA(m1)*100 .
7. (Optional) To set an alarm that notiﬁes you if you approach the service quota, do the following:
a. On the row with m1/SERVICE_QUOTA(m1)*100 , under Actions, choose the alarm icon. It looks 
like a bell.
The alarm creation page appears.
b. Under Conditions , ensure that Threshold type is Static  and Whenever Expression1 is is set 
to Greater . Under than , enter 80. This creates an alarm that goes into ALARM state when your 
usage exceeds 80 percent of the quota.
c. Choose Next.
d. On the next page, select an Amazon SNS topic or create a new one, and then choose Next. The 
topic you select is notiﬁed when the alarm goes to ALARM state.
e. On the next page, enter a name and description for the alarm, and then choose Next.
f.Choose Create alarm .
AWS API usage metrics
Most APIs that support AWS CloudTrail logging also report usage metrics to CloudWatch. API usage 
metrics in CloudWatch allow you to proactively manage API usage by visualizing metrics in the 
CloudWatch console, creating custom dashboards, detecting changes in activity with CloudWatch 
Anomaly Detection, and conﬁguring alarms that alert when usage approaches a threshold.
The following table lists the services that report API usage metrics to CloudWatch, and the value to use 
for the Service dimension to see the usage metrics from that service.
Service Value for the Service  dimension
AWS Identity and Access Management Access 
AnalyzerAccess Analyzer
AWS Account Management Account Management
Alexa for Business A4B
1011Amazon CloudWatch User Guide
AWS API usage metrics
Service Value for the Service  dimension
Amazon API Gateway API Gateway
AWS App Mesh App Mesh
AWS AppConﬁg AWS AppConfig
Amazon AppFlow AppFlow
Application Auto Scaling Application Auto Scaling
Application Discovery Service Application Discovery Service
Amazon AppStream AppStream
AppStream 2.0 Image Builder Image Builder
Amazon Athena Athena
AWS Audit Manager Audit Manager
AWS Backup Backup
AWS Batch Batch
Amazon Braket Braket
AWS Budgets Budgets
AWS Certiﬁcate Manager Certificate Manager
Amazon Chime SDK ChimeSDK
Amazon Cloud Directory Cloud Directory
AWS Cloud Map Cloud Map
AWS CloudFormation CloudFormation
AWS CloudHSM CloudHSM
Amazon CloudSearch CloudSearch
AWS CloudShell CloudShell
AWS CloudTrail CloudTrail
Amazon CloudWatch CloudWatch
Amazon CloudWatch Logs Logs
Amazon CloudWatch Application Insights CloudWatch Application Insights
AWS CodeBuild CodeBuild
AWS CodeCommit CodeCommit
Amazon CodeGuru Proﬁler CodeGuru Profiler
AWS CodePipeline CodePipeline
AWS CodeStar CodeStar
1012Amazon CloudWatch User Guide
AWS API usage metrics
Service Value for the Service  dimension
AWS CodeStar Notiﬁcations CodeStar Notifications
AWS CodeStar Connections CodeStar Connections
Amazon Cognito Identity pools Cognito Identity Pools
Amazon Cognito Sync Cognito Sync
Amazon Comprehend Comprehend
Amazon Comprehend Medical Comprehend Medical
AWS Compute Optimizer ComputeOptimzier
Amazon Connect Connect
Amazon Connect Customer Proﬁles Customer Profiles
AWS Cost and Usage Reports Cost and Usage Report
AWS Cost Explorer Cost Explorer
AWS Data Exchange Data Exchange
AWS Data Lifecycle Manager Data Lifecycle Manager
AWS Database Migration Service Database Migration Service
AWS DataSync DataSync
AWS DeepLens AWS DeepLens
Amazon Detective Detective
Device Advisor Device Advisor
AWS Direct Connect Direct Connect
AWS Directory Service Directory Service
DynamoDB Accelerator DynamoDBAccelerator
Amazon EC2 EC2
EC2 Auto Scaling EC2 Auto Scaling
Amazon Elastic Container Registry ECR Public
Amazon Elastic Container Service ECS
Amazon Elastic File System EFS
Amazon Elastic Kubernetes Service EKS
AWS Elastic Beanstalk Elastic Beanstalk
Amazon Elastic Inference Elastic Inference
Elastic Load Balancing Elastic Load Balancing
Amazon EMR EMR Containers
1013Amazon CloudWatch User Guide
AWS API usage metrics
Service Value for the Service  dimension
AWS Firewall Manager Firewall Manager
Amazon FSx FSx
Amazon GameLift GameLift
AWS Glue DataBrew DataBrew
Amazon Managed Grafana Grafana
AWS IoT Greengrass Greengrass
AWS Ground Station Ground Station
AWS Health APIs And Notiﬁcations AWS Health APIs And Notifications
Amazon Interactive Video Service IVS
AWS IoT Core IoT
AWS IoT 1-Click IoT 1-Click
AWS IoT Events IoT Events
AWS IoT RoboRunner IoT RoboRunner
AWS IoT SiteWise IoT Sitewise
AWS IoT Wireless IoT Wireless
Amazon Kendra Kendra
Amazon Keyspaces (for Apache Cassandra) Keyspaces
Amazon Kinesis Data Analytics Kinesis Analytics
Amazon Kinesis Data Firehose Firehose
Kinesis Video Streams Kinesis Video Streams
AWS Key Management Service KMS
AWS Lambda Lambda
AWS Launch Wizard Launch Wizard
Amazon Lex Amazon Lex
Amazon Lightsail Lightsail
Amazon Location Service Location
Amazon Lookout for Vision Lookout for Vision
Amazon Machine Learning Amazon Machine Learning
Amazon Macie Macie
AWS Managed Services AWS Managed Services
AWS Marketplace Commerce Analytics Marketplace Analytics Service
1014Amazon CloudWatch User Guide
AWS API usage metrics
Service Value for the Service  dimension
AWS Elemental MediaConnect MediaConnect
AWS Elemental MediaConvert MediaConvert
AWS Elemental MediaLive MediaLive
AWS Elemental MediaStore Mediastore
AWS Elemental MediaTailor MediaTailor
AWS Mobile Hub Mobile Hub
AWS Network Firewall Network Firewall
AWS OpsWorks OpsWorks
AWS OpsWorks for Conﬁguration ManagementOPsWorks CM
AWS Outposts Outposts
AWS Organizations Organizations
Amazon RDS Performance Insights Performance Insights
Amazon Pinpoint Pinpoint
AWS Private Certiﬁcate Authority Private Certificate Authority
Amazon Managed Service for Prometheus Prometheus
AWS Proton Proton
Amazon Quantum Ledger Database (Amazon 
QLDB)QLDB
Amazon RDS RDS
Amazon Redshift Redshift Data API
Amazon Rekognition Rekognition
AWS Resource Access Manager Resource Access Manager
AWS Resource Groups Resource Groups
AWS Resource Groups Tagging API Resource Groups Tagging API
AWS RoboMaker RoboMaker
Amazon Route 53 Domains Route 53 Domains
Amazon Route 53 Resolver Route 53 Resolver
Amazon S3 S3
Amazon S3 Glacier Amazon S3 Glacier
Amazon SageMaker Sagemaker
Savings Plans Savings Plans
1015Amazon CloudWatch User Guide
AWS API usage metrics
Service Value for the Service  dimension
AWS Secrets Manager Secrets Manager
AWS Security Hub Security Hub
AWS Server Migration Service AWS Server Migration Service
AWS Service Catalog AppRegistry Service Catalog AppRegistry
Service Quotas Service Quotas
AWS Shield Shield
AWS Signer Signer
Amazon Simple Notiﬁcation Service SNS
Amazon Simple Email Service SES
Amazon Simple Queue Service SQS
Identity Store Identity Store
Storage Gateway Storage Gateway
AWS Support Support
Amazon Simple Workﬂow Service SWF
Amazon Textract Textract
AWS IoT Things Graph ThingsGraph
Amazon Timestream Timestream
Amazon Transcribe Transcribe
Amazon Translate Translate
Amazon Transcribe streaming transcription Transcribe Streaming
AWS Transfer Family Transfer
AWS WAF WAF
Amazon WorkDocs Amazon WorkDocs
Amazon WorkLink WorkLink
Amazon WorkMail Amazon WorkMail
Amazon WorkSpaces Workspaces
AWS X-Ray X-Ray
Some services report usage metrics for additional APIs as well. To see whether an API reports usage 
metrics to CloudWatch, use the CloudWatch console to see the metrics reported by that service in the
AWS/Usage  namespace.
1016Amazon CloudWatch User Guide
CloudWatch usage metrics
To see the list of a service's APIs that report usage metrics to CloudWatch
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Metrics .
3. On the All metrics  tab, choose Usage , and then choose By AWS Resource.
4. In the search box near the list of metrics, enter the name of the service. The metrics are ﬁltered by 
the service you entered.
CloudWatch usage metrics
CloudWatch collects metrics that track the usage of some AWS resources. These metrics correspond 
to AWS service quotas. Tracking these metrics can help you proactively manage your quotas. For more 
information, see Visualizing your service quotas and setting alarms (p. 1010 ).
Service quota usage metrics are in the AWS/Usage  namespace and are collected every minute.
Currently, the only metric name in this namespace that CloudWatch publishes is CallCount . This metric 
is published with the dimensions Resource , Service , and Type . The Resource  dimension speciﬁes 
the name of the API operation being tracked. For example, the CallCount  metric with the dimensions
"Service": "CloudWatch" , "Type": "API"  and "Resource": "PutMetricData"  indicates the 
number of times the CloudWatch PutMetricData  API operation has been called in your account.
The CallCount  metric does not have a speciﬁed unit. The most useful statistic for the metric is SUM, 
which represents the total operation count for the 1-minute period.
Metrics
Metric Description
CallCount The number of speciﬁed operations performed in your account.
Dimensions
Dimension Description
Service The name of the AWS service containing the resource. For CloudWatch usage 
metrics, the value for this dimension is CloudWatch .
Class The class of resource being tracked. CloudWatch API usage metrics use this 
dimension with a value of None .
Type The type of resource being tracked. Currently, when the Service  dimension 
is CloudWatch , the only valid value for Type  is API.
Resource The name of the API operation. Valid values include the following:
DeleteAlarms , DeleteDashboards , DescribeAlarmHistory ,
DescribeAlarms , GetDashboard , GetMetricData ,
GetMetricStatistics , ListMetrics , PutDashboard , and
PutMetricData
1017Amazon CloudWatch User Guide
Scenario: Monitor estimated charges
CloudWatch tutorials
The following scenarios illustrate uses of Amazon CloudWatch. In the ﬁrst scenario, you use the 
CloudWatch console to create a billing alarm that tracks your AWS usage and lets you know when you 
have exceeded a certain spending threshold. In the second, more advanced scenario, you use the AWS 
Command Line Interface (AWS CLI) to publish a single metric for a hypothetical application named
GetStarted.
Scenarios
•Monitor your estimated charges (p. 1018 )
•Publish metrics  (p. 1021 )
Scenario: Monitor your estimated charges using 
CloudWatch
In this scenario, you create an Amazon CloudWatch alarm to monitor your estimated charges. When you 
enable the monitoring of estimated charges for your AWS account, the estimated charges are calculated 
and sent several times daily to CloudWatch as metric data.
Billing metric data is stored in the US East (N. Virginia) Region and reﬂects worldwide charges. This data 
includes the estimated charges for every service in AWS that you use, as well as the estimated overall 
total of your AWS charges.
You can choose to receive alerts by email when charges have exceeded a certain threshold. These alerts 
are triggered by CloudWatch and messages are sent using Amazon Simple Notiﬁcation Service (Amazon 
SNS).
Note
For information about analyzing CloudWatch charges that you have already been billed for, see
CloudWatch billing and cost (p. 18).
Tasks
•Step 1: Enable billing alerts (p. 1018 )
•Step 2: Create a billing alarm  (p. 1019 )
•Step 3: Check the alarm status  (p. 1020 )
•Step 4: Edit a billing alarm (p. 1020 )
•Step 5: Delete a billing alarm  (p. 1021 )
Step 1: Enable billing alerts
Before you can create an alarm for your estimated charges, you must enable billing alerts, so that you 
can monitor your estimated AWS charges and create an alarm using billing metric data. After you enable 
billing alerts, you cannot disable data collection, but you can delete any billing alarms that you created.
After you enable billing alerts for the ﬁrst time, it takes about 15 minutes before you can view billing 
data and set billing alarms.
1018Amazon CloudWatch User Guide
Step 2: Create a billing alarm 
Requirements
•You must be signed in using root user credentials or as a user who has been given permission to view 
billing information.
•For consolidated billing accounts, billing data for each linked account can be found by logging in as the 
paying account. You can view billing data for total estimated charges and estimated charges by service 
for each linked account, in addition to the consolidated account.
•In a consolidated billing account, member linked account metrics are captured only if the payer 
account enables the Receive Billing Alerts preference. If you change which account is your 
management/payer account, you must enable the billing alerts in the new management/payer 
account.
•The account must not be part of the Amazon Partner Network (APN) because billing metrics are not 
published to CloudWatch for APN accounts. For more information, see AWS Partner Network.
To enable the monitoring of estimated charges
1. Open the AWS Billing console at https://console.aws.amazon.com/billing/.
2. In the navigation pane, choose Billing Preferences.
3. By Alert preferences choose Edit.
4. Choose Receive CloudWatch Billing Alerts.
5. Choose Save preferences.
Step 2: Create a billing alarm
Important
Before you create a billing alarm, you must set your Region to US East (N. Virginia). Billing 
metric data is stored in this Region and represents worldwide charges. You also must 
enable billing alerts for your account or in the management/payer account (if you are using 
consolidated billing). For more information, see Step 1: Enable billing alerts.
In this procedure, you create an alarm that sends a notiﬁcation when your estimated charges for AWS 
exceed a deﬁned threshold.
To create a billing alarm using the CloudWatch console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Alarms , and then choose All alarms .
3. Choose Create alarm .
4. Choose Select metric. In Browse, choose Billing , and then choose Total Estimated Charge.
Note
If you don't see the Billing /Total Estimated Charge metric, enable billing alerts, and 
change your Region to US East (N. Virginia). For more information, see Enabling billing 
alerts (p. 217).
5. Select the box for the EstimatedCharges  metric, and then choose Select metric.
6. For Statistic , choose Maximum .
7. For Period, choose 6 hours .
8. For Threshold type, choose Static .
9. For Whenever EstimatedCharges is . . ., choose Greater .
10. For than . . . , deﬁne the value that you want to cause your alarm to trigger. For example, 200 USD.
The EstimatedCharges  metric values are only in US dollars (USD), and the currency conversion is 
provided by Amazon Services LLC. For more information, see  What is AWS Billing?.
1019Amazon CloudWatch User Guide
Step 3: Check the alarm status
Note
After you deﬁne a threshold value, the preview graph displays your estimated charges for 
the current month.
11. Choose Additional Conﬁguration  and do the following:
•For Datapoints to alarm , specify 1 out of 1 .
•For Missing data treatment , choose Treat missing data as missing.
12. Choose Next.
13. Under Notiﬁcation , ensure that In alarm  is selected. Then specify an Amazon SNS topic to be 
notiﬁed when your alarm is in the ALARM state. The Amazon SNS topic can include your email 
address so that you recieve email when the billing amount crosses the threshold that you speciﬁed.
You can select an existing Amazon SNS topic, create a new Amazon SNS topic, or use a topic ARN to 
notify other account. If you want your alarm to send multiple notiﬁcations for the same alarm state 
or for diﬀerent alarm states, choose Add notiﬁcation .
14. Choose Next.
15. Under Name and description , enter a name for your alarm.
• (Optional) Enter a description of your alarm.
16. Choose Next.
17. Under Preview and create , make sure that your conﬁguration is correct, and then choose Create 
alarm .
Step 3: Check the alarm status
Now, check the status of the billing alarm that you just created.
To check the alarm status
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. If necessary, change the Region to US East (N. Virginia). Billing metric data is stored in this Region 
and reﬂects worldwide charges.
3. In the navigation pane, choose Alarms .
4. Select the check box next to the alarm. Until the subscription is conﬁrmed, it is shown as "Pending 
conﬁrmation". After the subscription is conﬁrmed, refresh the console to show the updated status.
Step 4: Edit a billing alarm
For example, you may want to increase the amount of money you spend with AWS each month from 
$200 to $400. You can edit your existing billing alarm and increase the monetary amount that must be 
exceeded before the alarm is triggered.
To edit a billing alarm
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. If necessary, change the Region to US East (N. Virginia). Billing metric data is stored in this Region 
and reﬂects worldwide charges.
3. In the navigation pane, choose Alarms .
4. Select the check box next to the alarm and choose Actions, Modify.
5. For Whenever my total AWS charges for the month exceed, specify the new amount that must be 
exceeded to trigger the alarm and send an email notiﬁcation.
1020Amazon CloudWatch User Guide
Step 5: Delete a billing alarm
6. Choose Save Changes.
Step 5: Delete a billing alarm
If you no longer need your billing alarm, you can delete it.
To delete a billing alarm
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. If necessary, change the Region to US East (N. Virginia). Billing metric data is stored in this Region 
and reﬂects worldwide charges.
3. In the navigation pane, choose Alarms .
4. Select the check box next to the alarm and choose Actions, Delete.
5. When prompted for conﬁrmation, choose Yes, Delete.
Scenario: Publish metrics to CloudWatch
In this scenario, you use the AWS Command Line Interface (AWS CLI) to publish a single metric for a 
hypothetical application named GetStarted. If you haven't already installed and conﬁgured the AWS 
CLI, see Getting Set Up with the AWS Command Line Interface in the AWS Command Line Interface User 
Guide .
Tasks
•Step 1: Deﬁne the data conﬁguration (p. 1021 )
•Step 2: Add metrics to CloudWatch (p. 1022 )
•Step 3: Get statistics from CloudWatch (p. 1022 )
•Step 4: View graphs with the console (p. 1023 )
Step 1: Deﬁne the data conﬁguration
In this scenario, you publish data points that track the request latency for the application. Choose 
names for your metric and namespace that make sense to you. For this example, name the metric
RequestLatency and place all of the data points into the GetStarted namespace.
You publish several data points that collectively represent three hours of latency data. The raw data 
comprises 15 request latency readings distributed over three hours. Each reading is in milliseconds:
•Hour one: 87, 51, 125, 235
•Hour two: 121, 113, 189, 65, 89
•Hour three: 100, 47, 133, 98, 100, 328
You can publish data to CloudWatch as single data points or as an aggregated set of data points called 
a statistic set . You can aggregate metrics to a granularity as low as one minute. You can publish the 
aggregated data points to CloudWatch as a set of statistics with four predeﬁned keys: Sum, Minimum ,
Maximum , and SampleCount .
You publish the data points from hour one as single data points. For the data from hours two and three, 
you aggregate the data points and publish a statistic set for each hour. The key values are shown in the 
following table.
1021Amazon CloudWatch User Guide
Step 2: Add metrics to CloudWatch
HourRaw data Sum Minimum MaximumSampleCount
187
151
1125
1235
2121, 113, 189, 65, 89 57765 189 5
3100, 47, 133, 98, 100, 328 80647 328 6
Step 2: Add metrics to CloudWatch
After you have deﬁned your data conﬁguration, you are ready to add data.
To publish data points to CloudWatch
1. At a command prompt, run the following put-metric-data commands to add data for the ﬁrst 
hour. Replace the example timestamp with a timestamp that is two hours in the past, in Universal 
Coordinated Time (UTC).
aws cloudwatch put-metric-data --metric-name RequestLatency --namespace GetStarted \
--timestamp 2016-10-14T20:30:00Z  --value 87 --unit Milliseconds
aws cloudwatch put-metric-data --metric-name RequestLatency --namespace GetStarted \
--timestamp 2016-10-14T20:30:00Z  --value 51 --unit Milliseconds
aws cloudwatch put-metric-data --metric-name RequestLatency --namespace GetStarted \
--timestamp 2016-10-14T20:30:00Z  --value 125 --unit Milliseconds
aws cloudwatch put-metric-data --metric-name RequestLatency --namespace GetStarted \
--timestamp 2016-10-14T20:30:00Z  --value 235 --unit Milliseconds
2. Add data for the second hour, using a timestamp that is one hour later than the ﬁrst hour.
aws cloudwatch put-metric-data --metric-name RequestLatency --namespace GetStarted \
--timestamp 2016-10-14T21:30:00Z  --statistic-values 
 Sum=577,Minimum=65,Maximum=189,SampleCount=5 --unit Milliseconds
3. Add data for the third hour, omitting the timestamp to default to the current time.
aws cloudwatch put-metric-data --metric-name RequestLatency --namespace GetStarted \
--statistic-values Sum=806,Minimum=47,Maximum=328,SampleCount=6 --unit Milliseconds
Step 3: Get statistics from CloudWatch
Now that you have published metrics to CloudWatch, you can retrieve statistics based on those metrics 
using the get-metric-statistics command as follows. Be sure to specify --start-time  and --end-time
far enough in the past to cover the earliest timestamp that you published.
aws cloudwatch get-metric-statistics --namespace GetStarted --metric-name RequestLatency --
statistics Average \
--start-time 2016-10-14T00:00:00Z  --end-time 2016-10-15T00:00:00Z  --period 60
The following is example output:
1022Amazon CloudWatch User Guide
Step 4: View graphs with the console
{ 
 "Datapoints": [], 
 "Label": "Request:Latency"
}
Step 4: View graphs with the console
After you have published metrics to CloudWatch, you can use the CloudWatch console to view statistical 
graphs.
To view graphs of your statistics on the console
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the Navigation pane, choose Metrics .
3. On the All metrics  tab, in the search box, type RequestLatency and press Enter.
4. Select the check box for the RequestLatency metric. A graph of the metric data is displayed in the 
upper pane.
For more information, see Graphing metrics  (p. 121).
1023Amazon CloudWatch User Guide
Using CloudWatch with an AWS SDK
AWS software development kits (SDKs) are available for many popular programming languages. Each 
SDK provides an API, code examples, and documentation that make it easier for developers to build 
applications in their preferred language.
SDK documentation Code examples
AWS SDK for C++ AWS SDK for C++ code examples
AWS SDK for Go AWS SDK for Go code examples
AWS SDK for Java AWS SDK for Java code examples
AWS SDK for JavaScript AWS SDK for JavaScript code examples
AWS SDK for Kotlin AWS SDK for Kotlin code examples
AWS SDK for .NET AWS SDK for .NET code examples
AWS SDK for PHP AWS SDK for PHP code examples
AWS SDK for Python (Boto3) AWS SDK for Python (Boto3) code examples
AWS SDK for Ruby AWS SDK for Ruby code examples
AWS SDK for Rust AWS SDK for Rust code examples
AWS SDK for Swift AWS SDK for Swift code examples
For examples speciﬁc to CloudWatch, see Code examples for CloudWatch using AWS SDKs (p. 1025 ).
Example availability
Can't ﬁnd what you need? Request a code example by using the Provide feedback link at the 
bottom of this page.
1024Amazon CloudWatch User Guide
Code examples for CloudWatch 
using AWS SDKs
The following code examples show how to use CloudWatch with an AWS software development kit 
(SDK).
Actions  are code excerpts from larger programs and must be run in context. While actions show you how 
to call individual service functions, you can see actions in context in their related scenarios and cross-
service examples.
Scenarios  are code examples that show you how to accomplish a speciﬁc task by calling multiple 
functions within the same service.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Get started
Hello CloudWatch
The following code examples show how to get started using CloudWatch.
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
using Microsoft.Extensions.Hosting;
using Amazon.CloudWatch;
using Amazon.CloudWatch.Model;
using Microsoft.Extensions.DependencyInjection;
namespace CloudWatchActions;
public static class HelloCloudWatch
{ 
    static async Task Main(string[] args) 
    { 
        // Use the AWS .NET Core Setup package to set up dependency injection for 
 the Amazon CloudWatch service. 
        // Use your AWS profile name, or leave it blank to use the default profile. 
        using var host = Host.CreateDefaultBuilder(args) 
            .ConfigureServices((_, services) => 
                services.AddAWSService<IAmazonCloudWatch>() 
            ).Build(); 
        // Now the client is available for injection. 
        var cloudWatchClient = 
 host.Services.GetRequiredService<IAmazonCloudWatch>(); 
        // You can use await and any of the async methods to get a response. 
1025Amazon CloudWatch User Guide
        var metricNamespace = "AWS/Billing"; 
        var response = await cloudWatchClient.ListMetricsAsync(new 
 ListMetricsRequest 
        { 
            Namespace = metricNamespace 
        }); 
        Console.WriteLine($"Hello Amazon CloudWatch! Following are some metrics 
 available in the {metricNamespace} namespace:"); 
        Console.WriteLine(); 
        foreach (var metric in response.Metrics.Take(5)) 
        { 
            Console.WriteLine($"\tMetric: {metric.MetricName}"); 
            Console.WriteLine($"\tNamespace: {metric.Namespace}"); 
            Console.WriteLine($"\tDimensions: {string.Join(", ", 
 metric.Dimensions.Select(m => $"{m.Name}:{m.Value}"))}"); 
            Console.WriteLine(); 
        } 
    }
}
•For API details, see ListMetrics  in AWS SDK for .NET API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
/** 
 * Before running this Java V2 code example, set up your development environment, 
 including your credentials. 
 * 
 * For more information, see the following documentation topic: 
 * 
 * https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/get-started.html 
 */
public class HelloService { 
    public static void main(String[] args) { 
        final String usage = "\n" + 
            "Usage:\n" + 
            "  <namespace> \n\n" + 
            "Where:\n" + 
            "  namespace - The namespace to filter against (for example, AWS/EC2). 
 \n" ; 
        if (args.length != 1) { 
            System.out.println(usage); 
            System.exit(1); 
        } 
        String namespace = args[0]; 
        Region region = Region.US_EAST_1; 
        CloudWatchClient cw = CloudWatchClient.builder() 
            .region(region) 
            .credentialsProvider(ProfileCredentialsProvider.create()) 
            .build(); 
        listMets(cw, namespace); 
1026Amazon CloudWatch User Guide
        cw.close(); 
    } 
    public static void listMets( CloudWatchClient cw, String namespace) { 
        try { 
            ListMetricsRequest request = ListMetricsRequest.builder() 
                .namespace(namespace) 
                .build(); 
            ListMetricsIterable listRes = cw.listMetricsPaginator(request); 
            listRes.stream() 
                .flatMap(r -> r.metrics().stream()) 
                .forEach(metrics -> System.out.println(" Retrieved metric is: " + 
 metrics.metricName())); 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } 
    }
}
•For API details, see ListMetrics  in AWS SDK for Java 2.x API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
/**
Before running this Kotlin code example, set up your development environment,
including your credentials.
For more information, see the following documentation topic:
https://docs.aws.amazon.com/sdk-for-kotlin/latest/developer-guide/setup.html 
 */
suspend fun main(args: Array<String>) { 
    val usage = """ 
        Usage: 
           <namespace>  
        Where: 
           namespace - The namespace to filter against (for example, AWS/EC2).  
    """ 
    if (args.size != 1) { 
        println(usage) 
        exitProcess(0) 
    } 
    val namespace = args[0] 
    listAllMets(namespace)
}
suspend fun listAllMets(namespaceVal: String?) { 
1027Amazon CloudWatch User Guide
Actions
    val request = ListMetricsRequest { 
        namespace = namespaceVal 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.listMetricsPaginated(request) 
            .transform { it.metrics?.forEach { obj -> emit(obj) } } 
            .collect { obj -> 
                println("Name is ${obj.metricName}") 
                println("Namespace is ${obj.namespace}") 
            } 
    }
}
•For API details, see ListMetrics  in AWS SDK for Kotlin API reference.
Code examples
•Actions for CloudWatch using AWS SDKs (p. 1028 )
•Create a CloudWatch dashboard (p. 1029 )
•Create a CloudWatch metric alarm using an AWS SDK (p. 1032 )
•Create a CloudWatch anomaly detector (p. 1039 )
•Delete CloudWatch alarms using an AWS SDK (p. 1041 )
•Delete a CloudWatch anomaly detector using an AWS SDK (p. 1046 )
•Delete CloudWatch dashboards using an AWS SDK (p. 1048 )
•Describe CloudWatch alarm history using an AWS SDK (p. 1049 )
•Describe CloudWatch alarms using an AWS SDK (p. 1052 )
•Describe CloudWatch alarms for a metric using an AWS SDK (p. 1054 )
•Describe CloudWatch anomaly detectors using an AWS SDK (p. 1059 )
•Disable CloudWatch alarm actions using an AWS SDK (p. 1061 )
•Enable CloudWatch alarm actions using an AWS SDK (p. 1066 )
•Get a CloudWatch metric data image (p. 1071 )
•Get the details of a CloudWatch dashboard (p. 1074 )
•Get values of CloudWatch metric data (p. 1075 )
•Get CloudWatch metric statistics using an AWS SDK (p. 1078 )
•List CloudWatch dashboards (p. 1082 )
•List CloudWatch metrics using an AWS SDK (p. 1083 )
•Put a set of data into a CloudWatch metric using an AWS SDK (p. 1089 )
•Put data into a CloudWatch metric using an AWS SDK (p. 1091 )
•Scenarios for CloudWatch using AWS SDKs (p. 1097 )
•Get started with CloudWatch alarms using an AWS SDK (p. 1097 )
•Get started with CloudWatch metrics, dashboards, and alarms using an AWS SDK (p. 1099 )
•Manage CloudWatch metrics and alarms using an AWS SDK (p. 1146 )
Actions for CloudWatch using AWS SDKs
The following code examples demonstrate how to perform individual CloudWatch actions with AWS 
SDKs. These excerpts call the CloudWatch API and are code excerpts from larger programs that must be 
run in context. Each example includes a link to GitHub, where you can ﬁnd instructions for setting up and 
running the code.
1028Amazon CloudWatch User Guide
Create a dashboard
The following examples include only the most commonly used actions. For a complete list, see the
Amazon CloudWatch API Reference.
Examples
•Create a CloudWatch dashboard (p. 1029 )
•Create a CloudWatch metric alarm using an AWS SDK (p. 1032 )
•Create a CloudWatch anomaly detector (p. 1039 )
•Delete CloudWatch alarms using an AWS SDK (p. 1041 )
•Delete a CloudWatch anomaly detector using an AWS SDK (p. 1046 )
•Delete CloudWatch dashboards using an AWS SDK (p. 1048 )
•Describe CloudWatch alarm history using an AWS SDK (p. 1049 )
•Describe CloudWatch alarms using an AWS SDK (p. 1052 )
•Describe CloudWatch alarms for a metric using an AWS SDK (p. 1054 )
•Describe CloudWatch anomaly detectors using an AWS SDK (p. 1059 )
•Disable CloudWatch alarm actions using an AWS SDK (p. 1061 )
•Enable CloudWatch alarm actions using an AWS SDK (p. 1066 )
•Get a CloudWatch metric data image (p. 1071 )
•Get the details of a CloudWatch dashboard (p. 1074 )
•Get values of CloudWatch metric data (p. 1075 )
•Get CloudWatch metric statistics using an AWS SDK (p. 1078 )
•List CloudWatch dashboards (p. 1082 )
•List CloudWatch metrics using an AWS SDK (p. 1083 )
•Put a set of data into a CloudWatch metric using an AWS SDK (p. 1089 )
•Put data into a CloudWatch metric using an AWS SDK (p. 1091 )
Create a CloudWatch dashboard
The following code examples show how to create an Amazon CloudWatch dashboard.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code example:
•Get started with metrics, dashboards, and alarms (p. 1099 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Set up a dashboard using a call to the wrapper class. 
    /// </summary> 
    /// <param name="customMetricNamespace">The metric namespace.</param> 
    /// <param name="customMetricName">The metric name.</param> 
    /// <param name="dashboardName">The name of the dashboard.</param> 
    /// <returns>A list of validation messages.</returns> 
    private static async Task<List<DashboardValidationMessage>> SetupDashboard( 
1029Amazon CloudWatch User Guide
Create a dashboard
        string customMetricNamespace, string customMetricName, string 
 dashboardName) 
    { 
        // Get the dashboard model from configuration. 
        var newDashboard = new DashboardModel(); 
        _configuration.GetSection("dashboardExampleBody").Bind(newDashboard); 
        // Add a new metric to the dashboard. 
        newDashboard.Widgets.Add(new Widget 
        { 
            Height = 8, 
            Width = 8, 
            Y = 8, 
            X = 0, 
            Type = "metric", 
            Properties = new Properties 
            { 
                Metrics = new List<List<object>> 
                    { new() { customMetricNamespace, customMetricName } }, 
                View = "timeSeries", 
                Region = "us-east-1", 
                Stat = "Sum", 
                Period = 86400, 
                YAxis = new YAxis { Left = new Left { Min = 0, Max = 100 } }, 
                Title = "Custom Metric Widget", 
                LiveData = true, 
                Sparkline = true, 
                Trend = true, 
                Stacked = false, 
                SetPeriodToTimeRange = false 
            } 
        }); 
        var newDashboardString = JsonSerializer.Serialize(newDashboard, 
            new JsonSerializerOptions 
            { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull }); 
        var validationMessages = 
            await _cloudWatchWrapper.PutDashboard(dashboardName, 
 newDashboardString); 
        return validationMessages; 
    } 
    /// <summary> 
    /// Wrapper to create or add to a dashboard with metrics. 
    /// </summary> 
    /// <param name="dashboardName">The name for the dashboard.</param> 
    /// <param name="dashboardBody">The metric data in JSON for the dashboard.</
param> 
    /// <returns>A list of validation messages for the dashboard.</returns> 
    public async Task<List<DashboardValidationMessage>> PutDashboard(string 
 dashboardName, 
        string dashboardBody) 
    { 
        // Updating a dashboard replaces all contents. 
        // Best practice is to include a text widget indicating this dashboard was 
 created programmatically. 
        var dashboardResponse = await _amazonCloudWatch.PutDashboardAsync( 
            new PutDashboardRequest() 
            { 
                DashboardName = dashboardName, 
                DashboardBody = dashboardBody 
            }); 
        return dashboardResponse.DashboardValidationMessages; 
    }
1030Amazon CloudWatch User Guide
Create a dashboard
•For API details, see PutDashboard in AWS SDK for .NET API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static void createDashboardWithMetrics(CloudWatchClient cw, String 
 dashboardName, String fileName) { 
        try { 
            PutDashboardRequest dashboardRequest = PutDashboardRequest.builder() 
                .dashboardName(dashboardName) 
                .dashboardBody(readFileAsString(fileName)) 
                .build(); 
            PutDashboardResponse response = cw.putDashboard(dashboardRequest); 
            System.out.println(dashboardName +" was successfully created."); 
            List<DashboardValidationMessage> messages = 
 response.dashboardValidationMessages(); 
            if (messages.isEmpty()) { 
                System.out.println("There are no messages in the new Dashboard"); 
            } else { 
                for (DashboardValidationMessage message : messages) { 
                    System.out.println("Message is: " + message.message()); 
                } 
            } 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see PutDashboard in AWS SDK for Java 2.x API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun createDashboardWithMetrics(dashboardNameVal: String, fileNameVal: 
 String) { 
    val dashboardRequest = PutDashboardRequest { 
        dashboardName = dashboardNameVal 
        dashboardBody = readFileAsString(fileNameVal) 
1031Amazon CloudWatch User Guide
Create a metric alarm
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.putDashboard(dashboardRequest) 
        println("$dashboardNameVal was successfully created.") 
        val messages = response.dashboardValidationMessages 
        if (messages != null) { 
            if (messages.isEmpty()) { 
                println("There are no messages in the new Dashboard") 
            } else { 
                for (message in messages) { 
                    println("Message is: ${message.message}") 
                } 
            } 
        } 
    }
}
•For API details, see PutDashboard in AWS SDK for Kotlin API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Create a CloudWatch metric alarm using an AWS SDK
The following code examples show how to create or update an Amazon CloudWatch alarm and associate 
it with the speciﬁed metric, metric math expression, anomaly detection model, or Metrics Insights query.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code examples:
•Get started with alarms (p. 1097 )
•Get started with metrics, dashboards, and alarms (p. 1099 )
•Manage metrics and alarms  (p. 1146 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Add a metric alarm to send an email when the metric passes a threshold. 
    /// </summary> 
    /// <param name="alarmDescription">A description of the alarm.</param> 
    /// <param name="alarmName">The name for the alarm.</param> 
    /// <param name="comparison">The type of comparison to use.</param> 
    /// <param name="metricName">The name of the metric for the alarm.</param> 
    /// <param name="metricNamespace">The namespace of the metric.</param> 
    /// <param name="threshold">The threshold value for the alarm.</param> 
    /// <param name="alarmActions">Optional actions to execute when in an alarm 
 state.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> PutMetricEmailAlarm(string alarmDescription, string 
 alarmName, ComparisonOperator comparison, 
1032Amazon CloudWatch User Guide
Create a metric alarm
        string metricName, string metricNamespace, double threshold, List<string> 
 alarmActions = null) 
    { 
        try 
        { 
            var putEmailAlarmResponse = await 
 _amazonCloudWatch.PutMetricAlarmAsync( 
                new PutMetricAlarmRequest() 
                { 
                    AlarmActions = alarmActions, 
                    AlarmDescription = alarmDescription, 
                    AlarmName = alarmName, 
                    ComparisonOperator = comparison, 
                    Threshold = threshold, 
                    Namespace = metricNamespace, 
                    MetricName = metricName, 
                    EvaluationPeriods = 1, 
                    Period = 10, 
                    Statistic = new Statistic("Maximum"), 
                    DatapointsToAlarm = 1, 
                    TreatMissingData = "ignore" 
                }); 
            return putEmailAlarmResponse.HttpStatusCode == HttpStatusCode.OK; 
        } 
        catch (LimitExceededException lex) 
        { 
            _logger.LogError(lex, $"Unable to add alarm {alarmName}. Alarm quota 
 has already been reached."); 
        } 
        return false; 
    } 
    /// <summary> 
    /// Add specific email actions to a list of action strings for a CloudWatch 
 alarm. 
    /// </summary> 
    /// <param name="accountId">The AccountId for the alarm.</param> 
    /// <param name="region">The region for the alarm.</param> 
    /// <param name="emailTopicName">An Amazon Simple Notification Service (SNS) 
 topic for the alarm email.</param> 
    /// <param name="alarmActions">Optional list of existing alarm actions to 
 append to.</param> 
    /// <returns>A list of string actions for an alarm.</returns> 
    public List<string> AddEmailAlarmAction(string accountId, string region, 
        string emailTopicName, List<string>? alarmActions = null) 
    { 
        alarmActions ??= new List<string>(); 
        var snsAlarmAction = $"arn:aws:sns:{region}:{accountId}:{emailTopicName}"; 
        alarmActions.Add(snsAlarmAction); 
        return alarmActions; 
    }
•For API details, see PutMetricAlarm  in AWS SDK for .NET API Reference.
C++
SDK for C++
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
1033Amazon CloudWatch User Guide
Create a metric alarm
Include the required ﬁles.
#include <aws/core/Aws.h>
#include <aws/monitoring/CloudWatchClient.h>
#include <aws/monitoring/model/PutMetricAlarmRequest.h>
#include <iostream>
Create the alarm to watch the metric.
        Aws::CloudWatch::CloudWatchClient cw; 
        Aws::CloudWatch::Model::PutMetricAlarmRequest request; 
        request.SetAlarmName(alarm_name); 
        request.SetComparisonOperator( 
            Aws::CloudWatch::Model::ComparisonOperator::GreaterThanThreshold); 
        request.SetEvaluationPeriods(1); 
        request.SetMetricName("CPUUtilization"); 
        request.SetNamespace("AWS/EC2"); 
        request.SetPeriod(60); 
        request.SetStatistic(Aws::CloudWatch::Model::Statistic::Average); 
        request.SetThreshold(70.0); 
        request.SetActionsEnabled(false); 
        request.SetAlarmDescription("Alarm when server CPU exceeds 70%"); 
        request.SetUnit(Aws::CloudWatch::Model::StandardUnit::Seconds); 
        Aws::CloudWatch::Model::Dimension dimension; 
        dimension.SetName("InstanceId"); 
        dimension.SetValue(instanceId); 
        request.AddDimensions(dimension); 
        auto outcome = cw.PutMetricAlarm(request); 
        if (!outcome.IsSuccess()) 
        { 
            std::cout << "Failed to create CloudWatch alarm:" << 
                outcome.GetError().GetMessage() << std::endl; 
        } 
        else 
        { 
            std::cout << "Successfully created CloudWatch alarm " << alarm_name 
                << std::endl; 
        }
•For API details, see PutMetricAlarm  in AWS SDK for C++ API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static String createAlarm(CloudWatchClient cw, String fileName) { 
        try { 
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
1034Amazon CloudWatch User Guide
Create a metric alarm
            String customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText(); 
            String customMetricName = 
 rootNode.findValue("customMetricName").asText(); 
            String alarmName = rootNode.findValue("exampleAlarmName").asText(); 
            String emailTopic = rootNode.findValue("emailTopic").asText(); 
            String accountId = rootNode.findValue("accountId").asText(); 
            String region = rootNode.findValue("region").asText(); 
            // Create a List for alarm actions. 
            List<String> alarmActions = new ArrayList<>(); 
            alarmActions.add("arn:aws:sns:"+region+":"+accountId+":"+emailTopic); 
            PutMetricAlarmRequest alarmRequest = PutMetricAlarmRequest.builder() 
                .alarmActions(alarmActions) 
                .alarmDescription("Example metric alarm") 
                .alarmName(alarmName) 
                
 .comparisonOperator(ComparisonOperator.GREATER_THAN_OR_EQUAL_TO_THRESHOLD) 
                .threshold(100.00) 
                .metricName(customMetricName) 
                .namespace(customMetricNamespace) 
                .evaluationPeriods(1) 
                .period(10) 
                .statistic("Maximum") 
                .datapointsToAlarm(1) 
                .treatMissingData("ignore") 
                .build(); 
            cw.putMetricAlarm(alarmRequest); 
            System.out.println(alarmName +" was successfully created!"); 
            return alarmName; 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
        return ""; 
    }
•For API details, see PutMetricAlarm  in AWS SDK for Java 2.x API Reference.
JavaScript
SDK for JavaScript (v3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Create the client in a separate module and export it.
import { CloudWatchClient } from "@aws-sdk/client-cloudwatch";
import { DEFAULT_REGION } from "libs/utils/util-aws-sdk.js";
export const client = new CloudWatchClient({ region: DEFAULT_REGION });
Import the SDK and client modules and call the API.
import { PutMetricAlarmCommand } from "@aws-sdk/client-cloudwatch";
import { client } from "../libs/client.js";
1035Amazon CloudWatch User Guide
Create a metric alarm
const run = async () => { 
  // This alarm triggers when CPUUtilization exceeds 70% for one minute. 
  const command = new PutMetricAlarmCommand({ 
    AlarmName: process.env.CLOUDWATCH_ALARM_NAME, // Set the value of 
 CLOUDWATCH_ALARM_NAME to the name of an existing alarm. 
    ComparisonOperator: "GreaterThanThreshold", 
    EvaluationPeriods: 1, 
    MetricName: "CPUUtilization", 
    Namespace: "AWS/EC2", 
    Period: 60, 
    Statistic: "Average", 
    Threshold: 70.0, 
    ActionsEnabled: false, 
    AlarmDescription: "Alarm when server CPU exceeds 70%", 
    Dimensions: [ 
      { 
        Name: "InstanceId", 
        Value: process.env.EC2_INSTANCE_ID, // Set the value of EC_INSTANCE_ID to 
 the Id of an existing Amazon EC2 instance. 
      }, 
    ], 
    Unit: "Percent", 
  }); 
  try { 
    return await client.send(command); 
  } catch (err) { 
    console.error(err); 
  }
};
export default run();
•For more information, see AWS SDK for JavaScript Developer Guide.
•For API details, see PutMetricAlarm  in AWS SDK for JavaScript API Reference.
SDK for JavaScript (v2)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
// Load the AWS SDK for Node.js
var AWS = require('aws-sdk');
// Set the region  
AWS.config.update({region: 'REGION'});
// Create CloudWatch service object
var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});
var params = { 
  AlarmName: 'Web_Server_CPU_Utilization', 
  ComparisonOperator: 'GreaterThanThreshold', 
  EvaluationPeriods: 1, 
  MetricName: 'CPUUtilization', 
  Namespace: 'AWS/EC2', 
  Period: 60, 
  Statistic: 'Average', 
  Threshold: 70.0, 
  ActionsEnabled: false, 
  AlarmDescription: 'Alarm when server CPU exceeds 70%', 
  Dimensions: [ 
1036Amazon CloudWatch User Guide
Create a metric alarm
    { 
      Name: 'InstanceId', 
      Value: 'INSTANCE_ID' 
    }, 
  ], 
  Unit: 'Percent'
};
cw.putMetricAlarm(params, function(err, data) { 
  if (err) { 
    console.log("Error", err); 
  } else { 
    console.log("Success", data); 
  }
});
•For more information, see AWS SDK for JavaScript Developer Guide.
•For API details, see PutMetricAlarm  in AWS SDK for JavaScript API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun putMetricAlarm(alarmNameVal: String, instanceIdVal: String) { 
    val dimensionOb = Dimension { 
        name = "InstanceId" 
        value = instanceIdVal 
    } 
    val request = PutMetricAlarmRequest { 
        alarmName = alarmNameVal 
        comparisonOperator = ComparisonOperator.GreaterThanThreshold 
        evaluationPeriods = 1 
        metricName = "CPUUtilization" 
        namespace = "AWS/EC2" 
        period = 60 
        statistic = Statistic.fromValue("Average") 
        threshold = 70.0 
        actionsEnabled = false 
        alarmDescription = "An Alarm created by the Kotlin SDK when server CPU 
 utilization exceeds 70%" 
        unit = StandardUnit.fromValue("Seconds") 
        dimensions = listOf(dimensionOb) 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.putMetricAlarm(request) 
        println("Successfully created an alarm with name $alarmNameVal") 
    }
}
1037Amazon CloudWatch User Guide
Create a metric alarm
•For API details, see PutMetricAlarm  in AWS SDK for Kotlin API reference.
Python
SDK for Python (Boto3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
class CloudWatchWrapper: 
    """Encapsulates Amazon CloudWatch functions.""" 
    def __init__(self, cloudwatch_resource): 
        """ 
        :param cloudwatch_resource: A Boto3 CloudWatch resource. 
        """ 
        self.cloudwatch_resource = cloudwatch_resource 
    def create_metric_alarm( 
            self, metric_namespace, metric_name, alarm_name, stat_type, period, 
            eval_periods, threshold, comparison_op): 
        """ 
        Creates an alarm that watches a metric. 
        :param metric_namespace: The namespace of the metric. 
        :param metric_name: The name of the metric. 
        :param alarm_name: The name of the alarm. 
        :param stat_type: The type of statistic the alarm watches. 
        :param period: The period in which metric data are grouped to calculate 
                       statistics. 
        :param eval_periods: The number of periods that the metric must be over the 
                             alarm threshold before the alarm is set into an 
 alarmed 
                             state. 
        :param threshold: The threshold value to compare against the metric 
 statistic. 
        :param comparison_op: The comparison operation used to compare the 
 threshold 
                              against the metric. 
        :return: The newly created alarm. 
        """ 
        try: 
            metric = self.cloudwatch_resource.Metric(metric_namespace, metric_name) 
            alarm = metric.put_alarm( 
                AlarmName=alarm_name, 
                Statistic=stat_type, 
                Period=period, 
                EvaluationPeriods=eval_periods, 
                Threshold=threshold, 
                ComparisonOperator=comparison_op) 
            logger.info( 
                "Added alarm %s to track metric %s.%s.", alarm_name, 
 metric_namespace, 
                metric_name) 
        except ClientError: 
            logger.exception( 
                "Couldn't add alarm %s to metric %s.%s", alarm_name, 
 metric_namespace, 
                metric_name) 
            raise 
        else: 
            return alarm
1038Amazon CloudWatch User Guide
Create an anomaly detector
•For API details, see PutMetricAlarm  in AWS SDK for Python (Boto3) API Reference.
SAP ABAP
SDK for SAP ABAP
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    TRY. 
        lo_cwt->putmetricalarm( 
          iv_alarmname                 = iv_alarm_name 
          iv_comparisonoperator        = iv_comparison_operator 
          iv_evaluationperiods         = iv_evaluation_periods 
          iv_metricname                = iv_metric_name 
          iv_namespace                 = iv_namespace 
          iv_statistic                 = iv_statistic 
          iv_threshold                 = iv_threshold 
          iv_actionsenabled            = iv_actions_enabled 
          iv_alarmdescription          = iv_alarm_description 
          iv_unit                      = iv_unit 
          iv_period                    = iv_period 
          it_dimensions                = it_dimensions 
        ). 
        MESSAGE 'Alarm created.' TYPE 'I'. 
      CATCH /aws1/cx_cwtlimitexceededfault. 
        MESSAGE 'The request processing has exceeded the limit' TYPE 'E'. 
    ENDTRY.
•For API details, see PutMetricAlarm  in AWS SDK for SAP ABAP API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Create a CloudWatch anomaly detector
The following code examples show how to create an Amazon CloudWatch anomaly detector.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code example:
•Get started with metrics, dashboards, and alarms (p. 1099 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Add an anomaly detector for a single metric. 
1039Amazon CloudWatch User Guide
Create an anomaly detector
    /// </summary> 
    /// <param name="anomalyDetector">A single metric anomaly detector.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> PutAnomalyDetector(SingleMetricAnomalyDetector 
 anomalyDetector) 
    { 
        var putAlarmDetectorResult = await 
 _amazonCloudWatch.PutAnomalyDetectorAsync( 
            new PutAnomalyDetectorRequest() 
            { 
                SingleMetricAnomalyDetector = anomalyDetector 
            }); 
        return putAlarmDetectorResult.HttpStatusCode == HttpStatusCode.OK; 
    }
•For API details, see PutAnomalyDetector in AWS SDK for .NET API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static void addAnomalyDetector(CloudWatchClient cw, String fileName) { 
        try { 
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText(); 
            String customMetricName = 
 rootNode.findValue("customMetricName").asText(); 
            SingleMetricAnomalyDetector singleMetricAnomalyDetector = 
 SingleMetricAnomalyDetector.builder() 
                .metricName(customMetricName) 
                .namespace(customMetricNamespace) 
                .stat("Maximum") 
                .build(); 
            PutAnomalyDetectorRequest anomalyDetectorRequest = 
 PutAnomalyDetectorRequest.builder() 
                .singleMetricAnomalyDetector(singleMetricAnomalyDetector) 
                .build(); 
            cw.putAnomalyDetector(anomalyDetectorRequest); 
            System.out.println("Added anomaly detector for metric 
 "+customMetricName+"."); 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see PutAnomalyDetector in AWS SDK for Java 2.x API Reference.
1040Amazon CloudWatch User Guide
Delete alarms
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun addAnomalyDetector(fileName: String?) { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode = ObjectMapper().readTree<JsonNode>(parser) 
    val customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText() 
    val customMetricName = rootNode.findValue("customMetricName").asText() 
    val singleMetricAnomalyDetectorVal = SingleMetricAnomalyDetector { 
        metricName = customMetricName 
        namespace = customMetricNamespace 
        stat = "Maximum" 
    } 
    val anomalyDetectorRequest = PutAnomalyDetectorRequest { 
        singleMetricAnomalyDetector = singleMetricAnomalyDetectorVal 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.putAnomalyDetector(anomalyDetectorRequest) 
        println("Added anomaly detector for metric $customMetricName.") 
    }
}
•For API details, see PutAnomalyDetector in AWS SDK for Kotlin API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Delete CloudWatch alarms using an AWS SDK
The following code examples show how to delete Amazon CloudWatch alarms.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code examples:
•Get started with alarms (p. 1097 )
•Get started with metrics, dashboards, and alarms (p. 1099 )
•Manage metrics and alarms  (p. 1146 )
1041Amazon CloudWatch User Guide
Delete alarms
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Delete a list of alarms from CloudWatch. 
    /// </summary> 
    /// <param name="alarmNames">A list of names of alarms to delete.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> DeleteAlarms(List<string> alarmNames) 
    { 
        var deleteAlarmsResult = await _amazonCloudWatch.DeleteAlarmsAsync( 
            new DeleteAlarmsRequest() 
            { 
                AlarmNames = alarmNames 
            }); 
        return deleteAlarmsResult.HttpStatusCode == HttpStatusCode.OK; 
    }
•For API details, see DeleteAlarms  in AWS SDK for .NET API Reference.
C++
SDK for C++
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Include the required ﬁles.
#include <aws/core/Aws.h>
#include <aws/monitoring/CloudWatchClient.h>
#include <aws/monitoring/model/DeleteAlarmsRequest.h>
#include <iostream>
Delete the alarm.
        Aws::CloudWatch::CloudWatchClient cw; 
        Aws::CloudWatch::Model::DeleteAlarmsRequest request; 
        request.AddAlarmNames(alarm_name); 
        auto outcome = cw.DeleteAlarms(request); 
        if (!outcome.IsSuccess()) 
        { 
            std::cout << "Failed to delete CloudWatch alarm:" << 
                outcome.GetError().GetMessage() << std::endl; 
        } 
        else 
        { 
            std::cout << "Successfully deleted CloudWatch alarm " << alarm_name 
                << std::endl; 
        }
1042Amazon CloudWatch User Guide
Delete alarms
•For API details, see DeleteAlarms  in AWS SDK for C++ API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static void deleteCWAlarm(CloudWatchClient cw, String alarmName) { 
        try { 
            DeleteAlarmsRequest request = DeleteAlarmsRequest.builder() 
                .alarmNames(alarmName) 
                .build(); 
            cw.deleteAlarms(request); 
            System.out.printf("Successfully deleted alarm %s", alarmName); 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see DeleteAlarms  in AWS SDK for Java 2.x API Reference.
JavaScript
SDK for JavaScript (v3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Create the client in a separate module and export it.
import { CloudWatchClient } from "@aws-sdk/client-cloudwatch";
import { DEFAULT_REGION } from "libs/utils/util-aws-sdk.js";
export const client = new CloudWatchClient({ region: DEFAULT_REGION });
Import the SDK and client modules and call the API.
import { DeleteAlarmsCommand } from "@aws-sdk/client-cloudwatch";
import { client } from "../libs/client.js";
const run = async () => { 
  const command = new DeleteAlarmsCommand({ 
    AlarmNames: [process.env.CLOUDWATCH_ALARM_NAME], // Set the value of 
 CLOUDWATCH_ALARM_NAME to the name of an existing alarm. 
  }); 
  try { 
    return await client.send(command); 
  } catch (err) { 
    console.error(err); 
1043Amazon CloudWatch User Guide
Delete alarms
  }
};
export default run();
•For more information, see AWS SDK for JavaScript Developer Guide.
•For API details, see DeleteAlarms  in AWS SDK for JavaScript API Reference.
SDK for JavaScript (v2)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Import the SDK and client modules and call the API.
// Load the AWS SDK for Node.js
var AWS = require('aws-sdk');
// Set the region  
AWS.config.update({region: 'REGION'});
// Create CloudWatch service object
var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});
var params = { 
  AlarmNames: ['Web_Server_CPU_Utilization']
};
cw.deleteAlarms(params, function(err, data) { 
  if (err) { 
    console.log("Error", err); 
  } else { 
    console.log("Success", data); 
  }
});
•For more information, see AWS SDK for JavaScript Developer Guide.
•For API details, see DeleteAlarms  in AWS SDK for JavaScript API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun deleteAlarm(alarmNameVal: String) { 
    val request = DeleteAlarmsRequest { 
        alarmNames = listOf(alarmNameVal) 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.deleteAlarms(request) 
        println("Successfully deleted alarm $alarmNameVal") 
    }
1044Amazon CloudWatch User Guide
Delete alarms
}
•For API details, see DeleteAlarms  in AWS SDK for Kotlin API reference.
Python
SDK for Python (Boto3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
class CloudWatchWrapper: 
    """Encapsulates Amazon CloudWatch functions.""" 
    def __init__(self, cloudwatch_resource): 
        """ 
        :param cloudwatch_resource: A Boto3 CloudWatch resource. 
        """ 
        self.cloudwatch_resource = cloudwatch_resource 
    def delete_metric_alarms(self, metric_namespace, metric_name): 
        """ 
        Deletes all of the alarms that are currently watching the specified metric. 
        :param metric_namespace: The namespace of the metric. 
        :param metric_name: The name of the metric. 
        """ 
        try: 
            metric = self.cloudwatch_resource.Metric(metric_namespace, metric_name) 
            metric.alarms.delete() 
            logger.info( 
                "Deleted alarms for metric %s.%s.", metric_namespace, metric_name) 
        except ClientError: 
            logger.exception( 
                "Couldn't delete alarms for metric %s.%s.", metric_namespace, 
                metric_name) 
            raise
•For API details, see DeleteAlarms  in AWS SDK for Python (Boto3) API Reference.
SAP ABAP
SDK for SAP ABAP
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    TRY. 
        lo_cwt->deletealarms( 
          it_alarmnames = it_alarm_names 
        ). 
        MESSAGE 'Alarms deleted.' TYPE 'I'. 
      CATCH /aws1/cx_cwtresourcenotfound . 
        MESSAGE 'Resource being accessed is not found.' TYPE 'E'. 
    ENDTRY.
1045Amazon CloudWatch User Guide
Delete an anomaly detector
•For API details, see DeleteAlarms  in AWS SDK for SAP ABAP API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Delete a CloudWatch anomaly detector using an AWS 
SDK
The following code examples show how to delete an Amazon CloudWatch anomaly detector.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code example:
•Get started with metrics, dashboards, and alarms (p. 1099 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Delete a single metric anomaly detector. 
    /// </summary> 
    /// <param name="anomalyDetector">The anomaly detector to delete.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> DeleteAnomalyDetector(SingleMetricAnomalyDetector 
 anomalyDetector) 
    { 
        var deleteAnomalyDetectorResponse = await 
 _amazonCloudWatch.DeleteAnomalyDetectorAsync( 
            new DeleteAnomalyDetectorRequest() 
            { 
                SingleMetricAnomalyDetector = anomalyDetector 
            }); 
        return deleteAnomalyDetectorResponse.HttpStatusCode == HttpStatusCode.OK; 
    }
•For API details, see DeleteAnomalyDetector in AWS SDK for .NET API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static void deleteAnomalyDetector(CloudWatchClient cw, String fileName) 
 { 
        try { 
1046Amazon CloudWatch User Guide
Delete an anomaly detector
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText(); 
            String customMetricName = 
 rootNode.findValue("customMetricName").asText(); 
            SingleMetricAnomalyDetector singleMetricAnomalyDetector = 
 SingleMetricAnomalyDetector.builder() 
                .metricName(customMetricName) 
                .namespace(customMetricNamespace) 
                .stat("Maximum") 
                .build(); 
            DeleteAnomalyDetectorRequest request = 
 DeleteAnomalyDetectorRequest.builder() 
                .singleMetricAnomalyDetector(singleMetricAnomalyDetector) 
                .build(); 
            cw.deleteAnomalyDetector(request); 
            System.out.println("Successfully deleted the Anomaly Detector."); 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } catch (IOException e) { 
            e.printStackTrace(); 
        } 
    }
•For API details, see DeleteAnomalyDetector in AWS SDK for Java 2.x API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun deleteAnomalyDetector(fileName: String) { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode = ObjectMapper().readTree<JsonNode>(parser) 
    val customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText() 
    val customMetricName = rootNode.findValue("customMetricName").asText() 
    val singleMetricAnomalyDetectorVal = SingleMetricAnomalyDetector { 
        metricName = customMetricName 
        namespace = customMetricNamespace 
        stat = "Maximum" 
    } 
    val request = DeleteAnomalyDetectorRequest { 
        singleMetricAnomalyDetector = singleMetricAnomalyDetectorVal 
1047Amazon CloudWatch User Guide
Delete dashboards
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.deleteAnomalyDetector(request) 
        println("Successfully deleted the Anomaly Detector.") 
    }
}
•For API details, see DeleteAnomalyDetector in AWS SDK for Kotlin API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Delete CloudWatch dashboards using an AWS SDK
The following code examples show how to delete Amazon CloudWatch dashboards.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code example:
•Get started with metrics, dashboards, and alarms (p. 1099 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Delete a list of CloudWatch dashboards. 
    /// </summary> 
    /// <param name="dashboardNames">List of dashboard names to delete.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> DeleteDashboards(List<string> dashboardNames) 
    { 
        var deleteDashboardsResponse = await 
 _amazonCloudWatch.DeleteDashboardsAsync( 
            new DeleteDashboardsRequest() 
            { 
                DashboardNames = dashboardNames 
            }); 
        return deleteDashboardsResponse.HttpStatusCode == HttpStatusCode.OK; 
    }
•For API details, see DeleteDashboards in AWS SDK for .NET API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
1048Amazon CloudWatch User Guide
Describe alarm history
    public static void deleteDashboard(CloudWatchClient cw, String dashboardName) { 
        try { 
            DeleteDashboardsRequest dashboardsRequest = 
 DeleteDashboardsRequest.builder() 
                .dashboardNames(dashboardName) 
                .build(); 
            cw.deleteDashboards(dashboardsRequest); 
            System.out.println(dashboardName + " was successfully deleted."); 
        } catch (CloudWatchException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see DeleteDashboards in AWS SDK for Java 2.x API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun deleteDashboard(dashboardName: String) { 
    val dashboardsRequest = DeleteDashboardsRequest { 
        dashboardNames = listOf(dashboardName) 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.deleteDashboards(dashboardsRequest) 
        println("$dashboardName was successfully deleted.") 
    }
}
•For API details, see DeleteDashboards in AWS SDK for Kotlin API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Describe CloudWatch alarm history using an AWS 
SDK
The following code examples show how to describe an Amazon CloudWatch alarm history.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code example:
•Get started with metrics, dashboards, and alarms (p. 1099 )
1049Amazon CloudWatch User Guide
Describe alarm history
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Describe the history of an alarm for a number of days in the past. 
    /// </summary> 
    /// <param name="alarmName">The name of the alarm.</param> 
    /// <param name="historyDays">The number of days in the past.</param> 
    /// <returns>The list of alarm history data.</returns> 
    public async Task<List<AlarmHistoryItem>> DescribeAlarmHistory(string 
 alarmName, int historyDays) 
    { 
        List<AlarmHistoryItem> alarmHistory = new List<AlarmHistoryItem>(); 
        var paginatedAlarmHistory = 
 _amazonCloudWatch.Paginators.DescribeAlarmHistory( 
            new DescribeAlarmHistoryRequest() 
            { 
                AlarmName = alarmName, 
                EndDateUtc = DateTime.UtcNow, 
                HistoryItemType = HistoryItemType.StateUpdate, 
                StartDateUtc = DateTime.UtcNow.AddDays(-historyDays) 
            }); 
        await foreach (var data in paginatedAlarmHistory.AlarmHistoryItems) 
        { 
            alarmHistory.Add(data); 
        } 
        return alarmHistory; 
    }
•For API details, see DescribeAlarmHistory in AWS SDK for .NET API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static void getAlarmHistory(CloudWatchClient cw, String fileName, String 
 date) { 
        try { 
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String alarmName = rootNode.findValue("exampleAlarmName").asText(); 
            Instant start = Instant.parse(date); 
            Instant endDate = Instant.now(); 
            DescribeAlarmHistoryRequest historyRequest = 
 DescribeAlarmHistoryRequest.builder() 
                .startDate(start) 
1050Amazon CloudWatch User Guide
Describe alarm history
                .endDate(endDate) 
                .alarmName(alarmName) 
                .historyItemType(HistoryItemType.ACTION) 
                .build(); 
            DescribeAlarmHistoryResponse response = 
 cw.describeAlarmHistory(historyRequest); 
            List<AlarmHistoryItem>historyItems = response.alarmHistoryItems(); 
            if (historyItems.isEmpty()) { 
                System.out.println("No alarm history data found for "+alarmName 
 +"."); 
            } else { 
                for (AlarmHistoryItem item: historyItems) { 
                    System.out.println("History summary: "+item.historySummary()); 
                    System.out.println("Time stamp: "+item.timestamp()); 
                } 
            } 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see DescribeAlarmHistory in AWS SDK for Java 2.x API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun getAlarmHistory(fileName: String, date: String) { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode = ObjectMapper().readTree<JsonNode>(parser) 
    val alarmNameVal = rootNode.findValue("exampleAlarmName").asText() 
    val start = Instant.parse(date) 
    val endDateVal = Instant.now() 
    val historyRequest = DescribeAlarmHistoryRequest { 
        startDate = aws.smithy.kotlin.runtime.time.Instant(start) 
        endDate = aws.smithy.kotlin.runtime.time.Instant(endDateVal) 
        alarmName = alarmNameVal 
        historyItemType = HistoryItemType.Action 
    } 
    CloudWatchClient { credentialsProvider = EnvironmentCredentialsProvider(); 
 region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.describeAlarmHistory(historyRequest) 
        val historyItems = response.alarmHistoryItems 
        if (historyItems != null) { 
            if (historyItems.isEmpty()) { 
                println("No alarm history data found for $alarmNameVal.") 
            } else { 
1051Amazon CloudWatch User Guide
Describe alarms
                for (item in historyItems) { 
                    println("History summary ${item.historySummary}") 
                    println("Time stamp: ${item.timestamp}") 
                } 
            } 
        } 
    }
}
•For API details, see DescribeAlarmHistory in AWS SDK for Kotlin API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Describe CloudWatch alarms using an AWS SDK
The following code examples show how to describe Amazon CloudWatch alarms.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code examples:
•Get started with alarms (p. 1097 )
•Get started with metrics, dashboards, and alarms (p. 1099 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Describe the current alarms, optionally filtered by state. 
    /// </summary> 
    /// <param name="stateValue">Optional filter for alarm state.</param> 
    /// <returns>The list of alarm data.</returns> 
    public async Task<List<MetricAlarm>> DescribeAlarms(StateValue? stateValue = 
 null) 
    { 
        List<MetricAlarm> alarms = new List<MetricAlarm>(); 
        var paginatedDescribeAlarms = _amazonCloudWatch.Paginators.DescribeAlarms( 
            new DescribeAlarmsRequest() 
            { 
                StateValue = stateValue 
            }); 
        await foreach (var data in paginatedDescribeAlarms.MetricAlarms) 
        { 
            alarms.Add(data); 
        } 
        return alarms; 
    }
•For API details, see DescribeAlarms  in AWS SDK for .NET API Reference.
1052Amazon CloudWatch User Guide
Describe alarms
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static void describeAlarms(CloudWatchClient cw) { 
        try { 
            List<AlarmType> typeList = new ArrayList<>(); 
            typeList.add(AlarmType.METRIC_ALARM); 
            DescribeAlarmsRequest alarmsRequest = DescribeAlarmsRequest.builder() 
                .alarmTypes(typeList) 
                .maxRecords(10) 
                .build(); 
            DescribeAlarmsResponse response = cw.describeAlarms(alarmsRequest); 
            List<MetricAlarm> alarmList = response.metricAlarms(); 
            for (MetricAlarm alarm: alarmList) { 
                System.out.println("Alarm name: " + alarm.alarmName()); 
                System.out.println("Alarm description: " + 
 alarm.alarmDescription()); 
            } 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see DescribeAlarms  in AWS SDK for Java 2.x API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun describeAlarms() { 
    val typeList = ArrayList<AlarmType>() 
    typeList.add(AlarmType.MetricAlarm) 
    val alarmsRequest = DescribeAlarmsRequest { 
        alarmTypes = typeList 
        maxRecords = 10 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.describeAlarms(alarmsRequest) 
        response.metricAlarms?.forEach { alarm -> 
            println("Alarm name: ${alarm.alarmName}") 
            println("Alarm description: ${alarm.alarmDescription}") 
        } 
    }
1053Amazon CloudWatch User Guide
Describe alarms for a metric
}
•For API details, see DescribeAlarms  in AWS SDK for Kotlin API reference.
SAP ABAP
SDK for SAP ABAP
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    TRY. 
        oo_result = lo_cwt->describealarms(                 " oo_result is returned 
 for testing purposes. " 
          it_alarmnames = it_alarm_names 
        ). 
        MESSAGE 'Alarms retrieved.' TYPE 'I'. 
      CATCH /aws1/cx_rt_service_generic INTO DATA(lo_exception). 
        DATA(lv_error) = |"{ lo_exception->av_err_code }" - { lo_exception-
>av_err_msg }|. 
        MESSAGE lv_error TYPE 'E'. 
    ENDTRY.
•For API details, see DescribeAlarms  in AWS SDK for SAP ABAP API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Describe CloudWatch alarms for a metric using an 
AWS SDK
The following code examples show how to describe Amazon CloudWatch alarms for a metric.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code examples:
•Get started with metrics, dashboards, and alarms (p. 1099 )
•Manage metrics and alarms  (p. 1146 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Describe the current alarms for a specific metric. 
    /// </summary> 
1054Amazon CloudWatch User Guide
Describe alarms for a metric
    /// <param name="metricNamespace">The namespace of the metric.</param> 
    /// <param name="metricName">The name of the metric.</param> 
    /// <returns>The list of alarm data.</returns> 
    public async Task<List<MetricAlarm>> DescribeAlarmsForMetric(string 
 metricNamespace, string metricName) 
    { 
        var alarmsResult = await _amazonCloudWatch.DescribeAlarmsForMetricAsync( 
            new DescribeAlarmsForMetricRequest() 
            { 
                Namespace = metricNamespace, 
                MetricName = metricName 
            }); 
        return alarmsResult.MetricAlarms; 
    }
•For API details, see DescribeAlarmsForMetric in AWS SDK for .NET API Reference.
C++
SDK for C++
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Include the required ﬁles.
#include <aws/core/Aws.h>
#include <aws/monitoring/CloudWatchClient.h>
#include <aws/monitoring/model/DescribeAlarmsRequest.h>
#include <aws/monitoring/model/DescribeAlarmsResult.h>
#include <iomanip>
#include <iostream>
Describe the alarms.
        Aws::CloudWatch::CloudWatchClient cw; 
        Aws::CloudWatch::Model::DescribeAlarmsRequest request; 
        request.SetMaxRecords(1); 
        bool done = false; 
        bool header = false; 
        while (!done) 
        { 
            auto outcome = cw.DescribeAlarms(request); 
            if (!outcome.IsSuccess()) 
            { 
                std::cout << "Failed to describe CloudWatch alarms:" << 
                    outcome.GetError().GetMessage() << std::endl; 
                break; 
            } 
            if (!header) 
            { 
                std::cout << std::left << 
                    std::setw(32) << "Name" << 
                    std::setw(64) << "Arn" << 
                    std::setw(64) << "Description" << 
                    std::setw(20) << "LastUpdated" << 
1055Amazon CloudWatch User Guide
Describe alarms for a metric
                    std::endl; 
                header = true; 
            } 
            const auto &alarms = outcome.GetResult().GetMetricAlarms(); 
            for (const auto &alarm : alarms) 
            { 
                std::cout << std::left << 
                    std::setw(32) << alarm.GetAlarmName() << 
                    std::setw(64) << alarm.GetAlarmArn() << 
                    std::setw(64) << alarm.GetAlarmDescription() << 
                    std::setw(20) << 
                    alarm.GetAlarmConfigurationUpdatedTimestamp().ToGmtString( 
                        SIMPLE_DATE_FORMAT_STR) << 
                    std::endl; 
            } 
            const auto &next_token = outcome.GetResult().GetNextToken(); 
            request.SetNextToken(next_token); 
            done = next_token.empty(); 
        }
•For API details, see DescribeAlarmsForMetric in AWS SDK for C++ API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static void checkForMetricAlarm(CloudWatchClient cw, String fileName) { 
        try { 
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText(); 
            String customMetricName = 
 rootNode.findValue("customMetricName").asText(); 
            boolean hasAlarm = false; 
            int retries = 10; 
            DescribeAlarmsForMetricRequest metricRequest = 
 DescribeAlarmsForMetricRequest.builder() 
                .metricName(customMetricName) 
                .namespace(customMetricNamespace) 
                .build(); 
            while (!hasAlarm && retries > 0) { 
                DescribeAlarmsForMetricResponse response = 
 cw.describeAlarmsForMetric(metricRequest); 
                hasAlarm = response.hasMetricAlarms(); 
                retries--; 
                Thread.sleep(20000); 
                System.out.println("."); 
            } 
            if (!hasAlarm) 
                System.out.println("No Alarm state found for "+ customMetricName +" 
 after 10 retries."); 
1056Amazon CloudWatch User Guide
Describe alarms for a metric
            else 
               System.out.println("Alarm state found for "+ customMetricName +"."); 
        } catch (CloudWatchException | IOException | InterruptedException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see DescribeAlarmsForMetric in AWS SDK for Java 2.x API Reference.
JavaScript
SDK for JavaScript (v3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Create the client in a separate module and export it.
import { CloudWatchClient } from "@aws-sdk/client-cloudwatch";
import { DEFAULT_REGION } from "libs/utils/util-aws-sdk.js";
export const client = new CloudWatchClient({ region: DEFAULT_REGION });
Import the SDK and client modules and call the API.
import { DescribeAlarmsCommand } from "@aws-sdk/client-cloudwatch";
import { client } from "../libs/client.js";
const run = async () => { 
  const command = new DescribeAlarmsCommand({ 
    AlarmNames: [process.env.CLOUDWATCH_ALARM_NAME], // Set the value of 
 CLOUDWATCH_ALARM_NAME to the name of an existing alarm. 
  }); 
  try { 
    return await client.send(command); 
  } catch (err) { 
    console.error(err); 
  }
};
export default run();
•For more information, see AWS SDK for JavaScript Developer Guide.
•For API details, see DescribeAlarmsForMetric in AWS SDK for JavaScript API Reference.
SDK for JavaScript (v2)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
// Load the AWS SDK for Node.js
1057Amazon CloudWatch User Guide
Describe alarms for a metric
var AWS = require('aws-sdk');
// Set the region  
AWS.config.update({region: 'REGION'});
// Create CloudWatch service object
var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});
cw.describeAlarms({StateValue: 'INSUFFICIENT_DATA'}, function(err, data) { 
  if (err) { 
    console.log("Error", err); 
  } else { 
    // List the names of all current alarms in the console 
    data.MetricAlarms.forEach(function (item, index, array) { 
       console.log(item.AlarmName); 
    }); 
  }
});
•For more information, see AWS SDK for JavaScript Developer Guide.
•For API details, see DescribeAlarmsForMetric in AWS SDK for JavaScript API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun checkForMetricAlarm(fileName: String?) { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode = ObjectMapper().readTree<JsonNode>(parser) 
    val customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText() 
    val customMetricName = rootNode.findValue("customMetricName").asText() 
    var hasAlarm = false 
    var retries = 10 
    val metricRequest = DescribeAlarmsForMetricRequest { 
        metricName = customMetricName 
        namespace = customMetricNamespace 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        while (!hasAlarm && retries > 0) { 
            val response = cwClient.describeAlarmsForMetric(metricRequest) 
            if (response.metricAlarms?.count()!! > 0) { 
                hasAlarm = true 
            } 
            retries-- 
            delay(20000) 
            println(".") 
        } 
        if (!hasAlarm) println("No Alarm state found for $customMetricName after 10 
 retries.") else println("Alarm state found for $customMetricName.") 
    }
}
1058Amazon CloudWatch User Guide
Describe anomaly detectors
•For API details, see DescribeAlarmsForMetric in AWS SDK for Kotlin API reference.
Python
SDK for Python (Boto3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
class CloudWatchWrapper: 
    """Encapsulates Amazon CloudWatch functions.""" 
    def __init__(self, cloudwatch_resource): 
        """ 
        :param cloudwatch_resource: A Boto3 CloudWatch resource. 
        """ 
        self.cloudwatch_resource = cloudwatch_resource 
    def get_metric_alarms(self, metric_namespace, metric_name): 
        """ 
        Gets the alarms that are currently watching the specified metric. 
        :param metric_namespace: The namespace of the metric. 
        :param metric_name: The name of the metric. 
        :returns: An iterator that yields the alarms. 
        """ 
        metric = self.cloudwatch_resource.Metric(metric_namespace, metric_name) 
        alarm_iter = metric.alarms.all() 
        logger.info("Got alarms for metric %s.%s.", metric_namespace, metric_name) 
        return alarm_iter
•For API details, see DescribeAlarmsForMetric in AWS SDK for Python (Boto3) API Reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Describe CloudWatch anomaly detectors using an 
AWS SDK
The following code examples show how to describe Amazon CloudWatch anomaly detectors.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code example:
•Get started with metrics, dashboards, and alarms (p. 1099 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
1059Amazon CloudWatch User Guide
Describe anomaly detectors
    /// <summary> 
    /// Describe anomaly detectors for a metric and namespace. 
    /// </summary> 
    /// <param name="metricNamespace">The namespace of the metric.</param> 
    /// <param name="metricName">The metric of the anomaly detectors.</param> 
    /// <returns>The list of detectors.</returns> 
    public async Task<List<AnomalyDetector>> DescribeAnomalyDetectors(string 
 metricNamespace, string metricName) 
    { 
        List<AnomalyDetector> detectors = new List<AnomalyDetector>(); 
        var paginatedDescribeAnomalyDetectors = 
 _amazonCloudWatch.Paginators.DescribeAnomalyDetectors( 
            new DescribeAnomalyDetectorsRequest() 
            { 
                MetricName = metricName, 
                Namespace = metricNamespace 
            }); 
        await foreach (var data in 
 paginatedDescribeAnomalyDetectors.AnomalyDetectors) 
        { 
            detectors.Add(data); 
        } 
        return detectors; 
    }
•For API details, see DescribeAnomalyDetectors in AWS SDK for .NET API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static void describeAnomalyDetectors(CloudWatchClient cw, String 
 fileName) { 
        try { 
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText(); 
            String customMetricName = 
 rootNode.findValue("customMetricName").asText(); 
            DescribeAnomalyDetectorsRequest detectorsRequest = 
 DescribeAnomalyDetectorsRequest.builder() 
                .maxResults(10) 
                .metricName(customMetricName) 
                .namespace(customMetricNamespace) 
                .build(); 
            DescribeAnomalyDetectorsResponse response = 
 cw.describeAnomalyDetectors(detectorsRequest) ; 
            List<AnomalyDetector> anomalyDetectorList = 
 response.anomalyDetectors(); 
            for (AnomalyDetector detector: anomalyDetectorList) { 
1060Amazon CloudWatch User Guide
Disable alarm actions
                System.out.println("Metric name: 
 "+detector.singleMetricAnomalyDetector().metricName()); 
                System.out.println("State: "+detector.stateValue()); 
            } 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see DescribeAnomalyDetectors in AWS SDK for Java 2.x API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun describeAnomalyDetectors(fileName: String) { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode = ObjectMapper().readTree<JsonNode>(parser) 
    val customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText() 
    val customMetricName = rootNode.findValue("customMetricName").asText() 
    val detectorsRequest = DescribeAnomalyDetectorsRequest { 
        maxResults = 10 
        metricName = customMetricName 
        namespace = customMetricNamespace 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.describeAnomalyDetectors(detectorsRequest) 
        response.anomalyDetectors?.forEach { detector -> 
            println("Metric name: 
 ${detector.singleMetricAnomalyDetector?.metricName}") 
            println("State: ${detector.stateValue}") 
        } 
    }
}
•For API details, see DescribeAnomalyDetectors in AWS SDK for Kotlin API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Disable CloudWatch alarm actions using an AWS SDK
The following code examples show how to disable Amazon CloudWatch alarm actions.
1061Amazon CloudWatch User Guide
Disable alarm actions
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code examples:
•Get started with alarms (p. 1097 )
•Manage metrics and alarms  (p. 1146 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Disable the actions for a list of alarms from CloudWatch. 
    /// </summary> 
    /// <param name="alarmNames">A list of names of alarms.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> DisableAlarmActions(List<string> alarmNames) 
    { 
        var disableAlarmActionsResult = await 
 _amazonCloudWatch.DisableAlarmActionsAsync( 
            new DisableAlarmActionsRequest() 
            { 
                AlarmNames = alarmNames 
            }); 
        return disableAlarmActionsResult.HttpStatusCode == HttpStatusCode.OK; 
    }
•For API details, see DisableAlarmActions in AWS SDK for .NET API Reference.
C++
SDK for C++
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Include the required ﬁles.
#include <aws/core/Aws.h>
#include <aws/monitoring/CloudWatchClient.h>
#include <aws/monitoring/model/DisableAlarmActionsRequest.h>
#include <iostream>
Disable the alarm actions.
        Aws::CloudWatch::CloudWatchClient cw; 
        Aws::CloudWatch::Model::DisableAlarmActionsRequest 
 disableAlarmActionsRequest; 
        disableAlarmActionsRequest.AddAlarmNames(alarm_name); 
1062Amazon CloudWatch User Guide
Disable alarm actions
        auto disableAlarmActionsOutcome = 
 cw.DisableAlarmActions(disableAlarmActionsRequest); 
        if (!disableAlarmActionsOutcome.IsSuccess()) 
        { 
            std::cout << "Failed to disable actions for alarm " << alarm_name << 
                ": " << disableAlarmActionsOutcome.GetError().GetMessage() << 
                std::endl; 
        } 
        else 
        { 
            std::cout << "Successfully disabled actions for alarm " << 
                alarm_name << std::endl; 
        }
•For API details, see DisableAlarmActions in AWS SDK for C++ API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static void disableActions(CloudWatchClient cw, String alarmName) { 
        try { 
            DisableAlarmActionsRequest request = 
 DisableAlarmActionsRequest.builder() 
                .alarmNames(alarmName) 
                .build(); 
            cw.disableAlarmActions(request); 
            System.out.printf("Successfully disabled actions on alarm %s", 
 alarmName); 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see DisableAlarmActions in AWS SDK for Java 2.x API Reference.
JavaScript
SDK for JavaScript (v3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Create the client in a separate module and export it.
import { CloudWatchClient } from "@aws-sdk/client-cloudwatch";
import { DEFAULT_REGION } from "libs/utils/util-aws-sdk.js";
export const client = new CloudWatchClient({ region: DEFAULT_REGION });
1063Amazon CloudWatch User Guide
Disable alarm actions
Import the SDK and client modules and call the API.
import { DisableAlarmActionsCommand } from "@aws-sdk/client-cloudwatch";
import { client } from "../libs/client.js";
const run = async () => { 
  const command = new DisableAlarmActionsCommand({ 
    AlarmNames: process.env.CLOUDWATCH_ALARM_NAME, // Set the value of 
 CLOUDWATCH_ALARM_NAME to the name of an existing alarm. 
  }); 
  try { 
    return await client.send(command); 
  } catch (err) { 
    console.error(err); 
  }
};
export default run();
•For more information, see AWS SDK for JavaScript Developer Guide.
•For API details, see DisableAlarmActions in AWS SDK for JavaScript API Reference.
SDK for JavaScript (v2)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Import the SDK and client modules and call the API.
// Load the AWS SDK for Node.js
var AWS = require('aws-sdk');
// Set the region  
AWS.config.update({region: 'REGION'});
// Create CloudWatch service object
var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});
cw.disableAlarmActions({AlarmNames: ['Web_Server_CPU_Utilization']}, function(err, 
 data) { 
  if (err) { 
    console.log("Error", err); 
  } else { 
    console.log("Success", data); 
  }
});
•For more information, see AWS SDK for JavaScript Developer Guide.
•For API details, see DisableAlarmActions in AWS SDK for JavaScript API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
1064Amazon CloudWatch User Guide
Disable alarm actions
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun disableActions(alarmName: String) { 
    val request = DisableAlarmActionsRequest { 
        alarmNames = listOf(alarmName) 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.disableAlarmActions(request) 
        println("Successfully disabled actions on alarm $alarmName") 
    }
}
•For API details, see DisableAlarmActions in AWS SDK for Kotlin API reference.
Python
SDK for Python (Boto3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
class CloudWatchWrapper: 
    """Encapsulates Amazon CloudWatch functions.""" 
    def __init__(self, cloudwatch_resource): 
        """ 
        :param cloudwatch_resource: A Boto3 CloudWatch resource. 
        """ 
        self.cloudwatch_resource = cloudwatch_resource 
    def enable_alarm_actions(self, alarm_name, enable): 
        """ 
        Enables or disables actions on the specified alarm. Alarm actions can be 
        used to send notifications or automate responses when an alarm enters a 
        particular state. 
        :param alarm_name: The name of the alarm. 
        :param enable: When True, actions are enabled for the alarm. Otherwise, 
 they 
                       disabled. 
        """ 
        try: 
            alarm = self.cloudwatch_resource.Alarm(alarm_name) 
            if enable: 
                alarm.enable_actions() 
            else: 
                alarm.disable_actions() 
            logger.info( 
                "%s actions for alarm %s.", "Enabled" if enable else "Disabled", 
                alarm_name) 
        except ClientError: 
            logger.exception( 
                "Couldn't %s actions alarm %s.", "enable" if enable else "disable", 
                alarm_name) 
            raise
1065Amazon CloudWatch User Guide
Enable alarm actions
•For API details, see DisableAlarmActions in AWS SDK for Python (Boto3) API Reference.
SAP ABAP
SDK for SAP ABAP
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    "Disables actions on the specified alarm. " 
    TRY. 
        lo_cwt->disablealarmactions( 
          it_alarmnames = it_alarm_names 
        ). 
        MESSAGE 'Alarm actions disabled.' TYPE 'I'. 
      CATCH /aws1/cx_rt_service_generic INTO DATA(lo_exception). 
        DATA(lv_error) = |"{ lo_exception->av_err_code }" - { lo_exception-
>av_err_msg }|. 
        MESSAGE lv_error TYPE 'E'. 
    ENDTRY.
•For API details, see DisableAlarmActions in AWS SDK for SAP ABAP API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Enable CloudWatch alarm actions using an AWS SDK
The following code examples show how to enable Amazon CloudWatch alarm actions.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code example:
•Manage metrics and alarms  (p. 1146 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Enable the actions for a list of alarms from CloudWatch. 
    /// </summary> 
    /// <param name="alarmNames">A list of names of alarms.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> EnableAlarmActions(List<string> alarmNames) 
    { 
        var enableAlarmActionsResult = await 
 _amazonCloudWatch.EnableAlarmActionsAsync( 
            new EnableAlarmActionsRequest() 
            { 
1066Amazon CloudWatch User Guide
Enable alarm actions
                AlarmNames = alarmNames 
            }); 
        return enableAlarmActionsResult.HttpStatusCode == HttpStatusCode.OK; 
    }
•For API details, see EnableAlarmActions in AWS SDK for .NET API Reference.
C++
SDK for C++
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Include the required ﬁles.
#include <aws/core/Aws.h>
#include <aws/monitoring/CloudWatchClient.h>
#include <aws/monitoring/model/EnableAlarmActionsRequest.h>
#include <aws/monitoring/model/PutMetricAlarmRequest.h>
#include <iostream>
Enable the alarm actions.
    Aws::CloudWatch::CloudWatchClient cw; 
    Aws::CloudWatch::Model::PutMetricAlarmRequest request; 
    request.SetAlarmName(alarm_name); 
    request.SetComparisonOperator( 
        Aws::CloudWatch::Model::ComparisonOperator::GreaterThanThreshold); 
    request.SetEvaluationPeriods(1); 
    request.SetMetricName("CPUUtilization"); 
    request.SetNamespace("AWS/EC2"); 
    request.SetPeriod(60); 
    request.SetStatistic(Aws::CloudWatch::Model::Statistic::Average); 
    request.SetThreshold(70.0); 
    request.SetActionsEnabled(false); 
    request.SetAlarmDescription("Alarm when server CPU exceeds 70%"); 
    request.SetUnit(Aws::CloudWatch::Model::StandardUnit::Seconds); 
    request.AddAlarmActions(actionArn); 
    Aws::CloudWatch::Model::Dimension dimension; 
    dimension.SetName("InstanceId"); 
    dimension.SetValue(instanceId); 
    request.AddDimensions(dimension); 
    auto outcome = cw.PutMetricAlarm(request); 
    if (!outcome.IsSuccess()) 
    { 
        std::cout << "Failed to create CloudWatch alarm:" << 
            outcome.GetError().GetMessage() << std::endl; 
        return; 
    } 
    Aws::CloudWatch::Model::EnableAlarmActionsRequest enable_request; 
    enable_request.AddAlarmNames(alarm_name); 
    auto enable_outcome = cw.EnableAlarmActions(enable_request); 
    if (!enable_outcome.IsSuccess()) 
1067Amazon CloudWatch User Guide
Enable alarm actions
    { 
        std::cout << "Failed to enable alarm actions:" << 
            enable_outcome.GetError().GetMessage() << std::endl; 
        return; 
    } 
    std::cout << "Successfully created alarm " << alarm_name << 
        " and enabled actions on it." << std::endl;
•For API details, see EnableAlarmActions in AWS SDK for C++ API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static void enableActions(CloudWatchClient cw, String alarm) { 
        try { 
            EnableAlarmActionsRequest request = EnableAlarmActionsRequest.builder() 
                .alarmNames(alarm) 
                .build(); 
            cw.enableAlarmActions(request); 
            System.out.printf("Successfully enabled actions on alarm %s", alarm); 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } 
   }
•For API details, see EnableAlarmActions in AWS SDK for Java 2.x API Reference.
JavaScript
SDK for JavaScript (v3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Create the client in a separate module and export it.
import { CloudWatchClient } from "@aws-sdk/client-cloudwatch";
import { DEFAULT_REGION } from "libs/utils/util-aws-sdk.js";
export const client = new CloudWatchClient({ region: DEFAULT_REGION });
Import the SDK and client modules and call the API.
import { EnableAlarmActionsCommand } from "@aws-sdk/client-cloudwatch";
import { client } from "../libs/client.js";
1068Amazon CloudWatch User Guide
Enable alarm actions
const run = async () => { 
  const command = new EnableAlarmActionsCommand({ 
    AlarmNames: [process.env.CLOUDWATCH_ALARM_NAME], // Set the value of 
 CLOUDWATCH_ALARM_NAME to the name of an existing alarm. 
  }); 
  try { 
    return await client.send(command); 
  } catch (err) { 
    console.error(err); 
  }
};
export default run();
•For more information, see AWS SDK for JavaScript Developer Guide.
•For API details, see EnableAlarmActions in AWS SDK for JavaScript API Reference.
SDK for JavaScript (v2)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Import the SDK and client modules and call the API.
// Load the AWS SDK for Node.js
var AWS = require('aws-sdk');
// Set the region  
AWS.config.update({region: 'REGION'});
// Create CloudWatch service object
var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});
var params = { 
  AlarmName: 'Web_Server_CPU_Utilization', 
  ComparisonOperator: 'GreaterThanThreshold', 
  EvaluationPeriods: 1, 
  MetricName: 'CPUUtilization', 
  Namespace: 'AWS/EC2', 
  Period: 60, 
  Statistic: 'Average', 
  Threshold: 70.0, 
  ActionsEnabled: true, 
  AlarmActions: ['ACTION_ARN'], 
  AlarmDescription: 'Alarm when server CPU exceeds 70%', 
  Dimensions: [ 
    { 
      Name: 'InstanceId', 
      Value: 'INSTANCE_ID' 
    }, 
  ], 
  Unit: 'Percent'
};
cw.putMetricAlarm(params, function(err, data) { 
  if (err) { 
    console.log("Error", err); 
  } else { 
    console.log("Alarm action added", data); 
    var paramsEnableAlarmAction = { 
      AlarmNames: [params.AlarmName] 
    }; 
    cw.enableAlarmActions(paramsEnableAlarmAction, function(err, data) { 
1069Amazon CloudWatch User Guide
Enable alarm actions
      if (err) { 
        console.log("Error", err); 
      } else { 
        console.log("Alarm action enabled", data); 
      } 
    }); 
  }
});
•For more information, see AWS SDK for JavaScript Developer Guide.
•For API details, see EnableAlarmActions in AWS SDK for JavaScript API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun enableActions(alarm: String) { 
    val request = EnableAlarmActionsRequest { 
        alarmNames = listOf(alarm) 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.enableAlarmActions(request) 
        println("Successfully enabled actions on alarm $alarm") 
    }
}
•For API details, see EnableAlarmActions in AWS SDK for Kotlin API reference.
Python
SDK for Python (Boto3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
class CloudWatchWrapper: 
    """Encapsulates Amazon CloudWatch functions.""" 
    def __init__(self, cloudwatch_resource): 
        """ 
        :param cloudwatch_resource: A Boto3 CloudWatch resource. 
        """ 
        self.cloudwatch_resource = cloudwatch_resource 
    def enable_alarm_actions(self, alarm_name, enable): 
        """ 
        Enables or disables actions on the specified alarm. Alarm actions can be 
1070Amazon CloudWatch User Guide
Get a metric data image
        used to send notifications or automate responses when an alarm enters a 
        particular state. 
        :param alarm_name: The name of the alarm. 
        :param enable: When True, actions are enabled for the alarm. Otherwise, 
 they 
                       disabled. 
        """ 
        try: 
            alarm = self.cloudwatch_resource.Alarm(alarm_name) 
            if enable: 
                alarm.enable_actions() 
            else: 
                alarm.disable_actions() 
            logger.info( 
                "%s actions for alarm %s.", "Enabled" if enable else "Disabled", 
                alarm_name) 
        except ClientError: 
            logger.exception( 
                "Couldn't %s actions alarm %s.", "enable" if enable else "disable", 
                alarm_name) 
            raise
•For API details, see EnableAlarmActions in AWS SDK for Python (Boto3) API Reference.
SAP ABAP
SDK for SAP ABAP
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    "Enable actions on the specified alarm." 
    TRY. 
        lo_cwt->enablealarmactions( 
          it_alarmnames = it_alarm_names 
        ). 
        MESSAGE 'Alarm actions enabled.' TYPE 'I'. 
      CATCH /aws1/cx_rt_service_generic INTO DATA(lo_exception). 
        DATA(lv_error) = |"{ lo_exception->av_err_code }" - { lo_exception-
>av_err_msg }|. 
        MESSAGE lv_error TYPE 'E'. 
    ENDTRY.
•For API details, see EnableAlarmActions in AWS SDK for SAP ABAP API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Get a CloudWatch metric data image
The following code examples show how to get an Amazon CloudWatch metric data image.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code example:
1071Amazon CloudWatch User Guide
Get a metric data image
•Get started with metrics, dashboards, and alarms (p. 1099 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Get an image for a metric graphed over time. 
    /// </summary> 
    /// <param name="metricNamespace">The namespace of the metric.</param> 
    /// <param name="metric">The name of the metric.</param> 
    /// <param name="stat">The name of the stat to chart.</param> 
    /// <param name="period">The period to use for the chart.</param> 
    /// <returns>A memory stream for the chart image.</returns> 
    public async Task<MemoryStream> GetTimeSeriesMetricImage(string 
 metricNamespace, string metric, string stat, int period) 
    { 
        var metricImageWidget = new 
        { 
            title = "Example Metric Graph", 
            view = "timeSeries", 
            stacked = false, 
            period = period, 
            width = 1400, 
            height = 600, 
            metrics = new List<List<object>> 
                { new() { metricNamespace, metric, new { stat } } } 
        }; 
        var metricImageWidgetString = JsonSerializer.Serialize(metricImageWidget); 
        var imageResponse = await _amazonCloudWatch.GetMetricWidgetImageAsync( 
            new GetMetricWidgetImageRequest() 
            { 
                MetricWidget = metricImageWidgetString 
            }); 
        return imageResponse.MetricWidgetImage; 
    } 
    /// <summary> 
    /// Save a metric image to a file. 
    /// </summary> 
    /// <param name="memoryStream">The MemoryStream for the metric image.</param> 
    /// <param name="metricName">The name of the metric.</param> 
    /// <returns>The path to the file.</returns> 
    public string SaveMetricImage(MemoryStream memoryStream, string metricName) 
    { 
        var metricFileName = $"{metricName}_{DateTime.Now.Ticks}.png"; 
        using var sr = new StreamReader(memoryStream); 
        // Writes the memory stream to a file. 
        File.WriteAllBytes(metricFileName, memoryStream.ToArray()); 
        var filePath = Path.Join(AppDomain.CurrentDomain.BaseDirectory, 
            metricFileName); 
        return filePath; 
    }
•For API details, see GetMetricWidgetImage  in AWS SDK for .NET API Reference.
1072Amazon CloudWatch User Guide
Get a metric data image
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static void getAndOpenMetricImage(CloudWatchClient cw, String fileName) 
 { 
        System.out.println("Getting Image data for custom metric."); 
        try { 
              String myJSON = "{\n" + 
                "  \"title\": \"Example Metric Graph\",\n" + 
                "  \"view\": \"timeSeries\",\n" + 
                "  \"stacked \": false,\n" + 
                "  \"period\": 10,\n" + 
                "  \"width\": 1400,\n" + 
                "  \"height\": 600,\n" + 
                "  \"metrics\": [\n" + 
                "    [\n" + 
                "      \"AWS/Billing\",\n" + 
                "      \"EstimatedCharges\",\n" + 
                "      \"Currency\",\n" + 
                "      \"USD\"\n" + 
                "    ]\n" + 
                "  ]\n" + 
                "}"; 
            GetMetricWidgetImageRequest imageRequest = 
 GetMetricWidgetImageRequest.builder() 
                .metricWidget(myJSON) 
                .build(); 
            GetMetricWidgetImageResponse response = 
 cw.getMetricWidgetImage(imageRequest); 
            SdkBytes sdkBytes = response.metricWidgetImage(); 
            byte[] bytes = sdkBytes.asByteArray(); 
            File outputFile = new File(fileName); 
            try (FileOutputStream outputStream = new FileOutputStream(outputFile)) 
 { 
                outputStream.write(bytes); 
            } 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see GetMetricWidgetImage  in AWS SDK for Java 2.x API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
1073Amazon CloudWatch User Guide
Get dashboard details
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun getAndOpenMetricImage(fileName: String) { 
    println("Getting Image data for custom metric.") 
    val myJSON = """{ 
        "title": "Example Metric Graph", 
        "view": "timeSeries", 
        "stacked ": false, 
        "period": 10, 
        "width": 1400, 
        "height": 600, 
        "metrics": [ 
            [ 
            "AWS/Billing", 
            "EstimatedCharges", 
            "Currency", 
            "USD" 
            ] 
        ] 
        }""" 
    val imageRequest = GetMetricWidgetImageRequest { 
        metricWidget = myJSON 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.getMetricWidgetImage(imageRequest) 
        val bytes = response.metricWidgetImage 
        if (bytes != null) { 
            File(fileName).writeBytes(bytes) 
        } 
    } 
    println("You have successfully written data to $fileName")
}
•For API details, see GetMetricWidgetImage  in AWS SDK for Kotlin API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Get the details of a CloudWatch dashboard
The following code example shows how to get Amazon CloudWatch dashboard details.
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Get information on a dashboard. 
    /// </summary> 
1074Amazon CloudWatch User Guide
Get metric data
    /// <param name="dashboardName">The name of the dashboard.</param> 
    /// <returns>A JSON object with dashboard information.</returns> 
    public async Task<string> GetDashboard(string dashboardName) 
    { 
        var dashboardResponse = await _amazonCloudWatch.GetDashboardAsync( 
            new GetDashboardRequest() 
            { 
                DashboardName = dashboardName 
            }); 
        return dashboardResponse.DashboardBody; 
    }
•For API details, see GetDashboard in AWS SDK for .NET API Reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Get values of CloudWatch metric data
The following code examples show how to get Amazon CloudWatch metric data.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code example:
•Get started with metrics, dashboards, and alarms (p. 1099 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Get data for CloudWatch metrics. 
    /// </summary> 
    /// <param name="minutesOfData">The number of minutes of data to include.</
param> 
    /// <param name="useDescendingTime">True to return the data descending by 
 time.</param> 
    /// <param name="endDateUtc">The end date for the data, in UTC.</param> 
    /// <param name="maxDataPoints">The maximum data points to include.</param> 
    /// <param name="dataQueries">Optional data queries to include.</param> 
    /// <returns>A list of the requested metric data.</returns> 
    public async Task<List<MetricDataResult>> GetMetricData(int minutesOfData, bool 
 useDescendingTime, DateTime? endDateUtc = null, 
        int maxDataPoints = 0, List<MetricDataQuery>? dataQueries = null) 
    { 
        var metricData = new List<MetricDataResult>(); 
        // If no end time is provided, use the current time for the end time. 
        endDateUtc ??= DateTime.UtcNow; 
        var timeZoneOffset = 
 TimeZoneInfo.Local.GetUtcOffset(endDateUtc.Value.ToLocalTime()); 
        var startTimeUtc = endDateUtc.Value.AddMinutes(-minutesOfData); 
1075Amazon CloudWatch User Guide
Get metric data
        // The timezone string should be in the format +0000, so use the timezone 
 offset to format it correctly. 
        var timeZoneString = $"{timeZoneOffset.Hours:D2}
{timeZoneOffset.Minutes:D2}"; 
        var paginatedMetricData = _amazonCloudWatch.Paginators.GetMetricData( 
            new GetMetricDataRequest() 
            { 
                StartTimeUtc = startTimeUtc, 
                EndTimeUtc = endDateUtc.Value, 
                LabelOptions = new LabelOptions { Timezone = timeZoneString }, 
                ScanBy = useDescendingTime ? ScanBy.TimestampDescending : 
 ScanBy.TimestampAscending, 
                MaxDatapoints = maxDataPoints, 
                MetricDataQueries = dataQueries, 
            }); 
        await foreach (var data in paginatedMetricData.MetricDataResults) 
        { 
            metricData.Add(data); 
        } 
        return metricData; 
    }
•For API details, see GetMetricData  in AWS SDK for .NET API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static void getCustomMetricData(CloudWatchClient cw, String fileName) { 
        try { 
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText(); 
            String customMetricName = 
 rootNode.findValue("customMetricName").asText(); 
            // Set the date. 
            Instant nowDate = Instant.now(); 
            long hours = 1; 
            long minutes = 30; 
            Instant date2 = nowDate.plus(hours, ChronoUnit.HOURS).plus(minutes, 
                ChronoUnit.MINUTES); 
            Metric met = Metric.builder() 
                .metricName(customMetricName) 
                .namespace(customMetricNamespace) 
                .build(); 
            MetricStat metStat = MetricStat.builder() 
                .stat("Maximum") 
                .period(1) 
                .metric(met) 
                .build(); 
1076Amazon CloudWatch User Guide
Get metric data
            MetricDataQuery dataQUery = MetricDataQuery.builder() 
                .metricStat(metStat) 
                .id("foo2") 
                .returnData(true) 
                .build(); 
            List<MetricDataQuery> dq = new ArrayList<>(); 
            dq.add(dataQUery); 
            GetMetricDataRequest getMetReq = GetMetricDataRequest.builder() 
                .maxDatapoints(10) 
                .scanBy(ScanBy.TIMESTAMP_DESCENDING) 
                .startTime(nowDate) 
                .endTime(date2) 
                .metricDataQueries(dq) 
                .build(); 
            GetMetricDataResponse response = cw.getMetricData(getMetReq); 
            List<MetricDataResult> data = response.metricDataResults(); 
            for (MetricDataResult item : data) { 
                System.out.println("The label is " + item.label()); 
                System.out.println("The status code is " + 
 item.statusCode().toString()); 
            } 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see GetMetricData  in AWS SDK for Java 2.x API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun getCustomMetricData(fileName: String) { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode = ObjectMapper().readTree<JsonNode>(parser) 
    val customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText() 
    val customMetricName = rootNode.findValue("customMetricName").asText() 
    // Set the date. 
    val nowDate = Instant.now() 
    val hours: Long = 1 
    val minutes: Long = 30 
    val date2 = nowDate.plus(hours, ChronoUnit.HOURS).plus( 
        minutes, 
        ChronoUnit.MINUTES 
    ) 
1077Amazon CloudWatch User Guide
Get metric statistics
    val met = Metric { 
        metricName = customMetricName 
        namespace = customMetricNamespace 
    } 
    val metStat = MetricStat { 
        stat = "Maximum" 
        period = 1 
        metric = met 
    } 
    val dataQUery = MetricDataQuery { 
        metricStat = metStat 
        id = "foo2" 
        returnData = true 
    } 
    val dq = ArrayList<MetricDataQuery>() 
    dq.add(dataQUery) 
    val getMetReq = GetMetricDataRequest { 
        maxDatapoints = 10 
        scanBy = ScanBy.TimestampDescending 
        startTime = aws.smithy.kotlin.runtime.time.Instant(nowDate) 
        endTime = aws.smithy.kotlin.runtime.time.Instant(date2) 
        metricDataQueries = dq 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.getMetricData(getMetReq) 
        response.metricDataResults?.forEach { item -> 
            println("The label is ${item.label}") 
            println("The status code is ${item.statusCode}") 
        } 
    }
}
•For API details, see GetMetricData  in AWS SDK for Kotlin API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Get CloudWatch metric statistics using an AWS SDK
The following code examples show how to get Amazon CloudWatch metric statistics.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code examples:
•Get started with metrics, dashboards, and alarms (p. 1099 )
•Manage metrics and alarms  (p. 1146 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
1078Amazon CloudWatch User Guide
Get metric statistics
    /// <summary> 
    /// Get billing statistics using a call to a wrapper class. 
    /// </summary> 
    /// <returns>A collection of billing statistics.</returns> 
    private static async Task<List<Datapoint>> SetupBillingStatistics() 
    { 
        // Make a request for EstimatedCharges with a period of one day for the 
 past seven days. 
        var billingStatistics = await _cloudWatchWrapper.GetMetricStatistics( 
            "AWS/Billing", 
            "EstimatedCharges", 
            new List<string>() { "Maximum" }, 
            new List<Dimension>() { new Dimension { Name = "Currency", Value = 
 "USD" } }, 
            7, 
            86400); 
        billingStatistics = billingStatistics.OrderBy(n => n.Timestamp).ToList(); 
        return billingStatistics; 
    } 
    /// <summary> 
    /// Wrapper to get statistics for a specific CloudWatch metric. 
    /// </summary> 
    /// <param name="metricNamespace">The namespace of the metric.</param> 
    /// <param name="metricName">The name of the metric.</param> 
    /// <param name="statistics">The list of statistics to include.</param> 
    /// <param name="dimensions">The list of dimensions to include.</param> 
    /// <param name="days">The number of days in the past to include.</param> 
    /// <param name="period">The period for the data.</param> 
    /// <returns>A list of DataPoint objects for the statistics.</returns> 
    public async Task<List<Datapoint>> GetMetricStatistics(string metricNamespace, 
        string metricName, List<string> statistics, List<Dimension> dimensions, int 
 days, int period) 
    { 
        var metricStatistics = await _amazonCloudWatch.GetMetricStatisticsAsync( 
            new GetMetricStatisticsRequest() 
            { 
                Namespace = metricNamespace, 
                MetricName = metricName, 
                Dimensions = dimensions, 
                Statistics = statistics, 
                StartTimeUtc = DateTime.UtcNow.AddDays(-days), 
                EndTimeUtc = DateTime.UtcNow, 
                Period = period 
            }); 
        return metricStatistics.Datapoints; 
    }
•For API details, see GetMetricStatistics  in AWS SDK for .NET API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
1079Amazon CloudWatch User Guide
Get metric statistics
    public static void getAndDisplayMetricStatistics( CloudWatchClient cw, String 
 nameSpace, String metVal, String metricOption, String date, Dimension myDimension) 
 { 
        try { 
            Instant start = Instant.parse(date); 
            Instant endDate = Instant.now(); 
            GetMetricStatisticsRequest statisticsRequest = 
 GetMetricStatisticsRequest.builder() 
                .endTime(endDate) 
                .startTime(start) 
                .dimensions(myDimension) 
                .metricName(metVal) 
                .namespace(nameSpace) 
                .period(86400) 
                .statistics(Statistic.fromValue(metricOption)) 
                .build(); 
            GetMetricStatisticsResponse response = 
 cw.getMetricStatistics(statisticsRequest); 
            List<Datapoint> data = response.datapoints(); 
            if (!data.isEmpty()) { 
                for (Datapoint datapoint: data) { 
                    System.out.println("Timestamp: " + datapoint.timestamp() + " 
 Maximum value: " + datapoint.maximum()); 
                } 
            } else { 
                System.out.println("The returned data list is empty"); 
            } 
        } catch (CloudWatchException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see GetMetricStatistics  in AWS SDK for Java 2.x API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun getAndDisplayMetricStatistics(nameSpaceVal: String, metVal: String, 
 metricOption: String, date: String, myDimension: Dimension) { 
    val start = Instant.parse(date) 
    val endDate = Instant.now() 
    val statisticsRequest = GetMetricStatisticsRequest { 
        endTime = aws.smithy.kotlin.runtime.time.Instant(endDate) 
        startTime = aws.smithy.kotlin.runtime.time.Instant(start) 
        dimensions = listOf(myDimension) 
        metricName = metVal 
        namespace = nameSpaceVal 
        period = 86400 
1080Amazon CloudWatch User Guide
Get metric statistics
        statistics = listOf(Statistic.fromValue(metricOption)) 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.getMetricStatistics(statisticsRequest) 
        val data = response.datapoints 
        if (data != null) { 
            if (data.isNotEmpty()) { 
                for (datapoint in data) { 
                    println("Timestamp: ${datapoint.timestamp} Maximum value: 
 ${datapoint.maximum}") 
                } 
            } else { 
                println("The returned data list is empty") 
            } 
        } 
    }
}
•For API details, see GetMetricStatistics  in AWS SDK for Kotlin API reference.
Python
SDK for Python (Boto3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
class CloudWatchWrapper: 
    """Encapsulates Amazon CloudWatch functions.""" 
    def __init__(self, cloudwatch_resource): 
        """ 
        :param cloudwatch_resource: A Boto3 CloudWatch resource. 
        """ 
        self.cloudwatch_resource = cloudwatch_resource 
    def get_metric_statistics(self, namespace, name, start, end, period, 
 stat_types): 
        """ 
        Gets statistics for a metric within a specified time span. Metrics are 
 grouped 
        into the specified period. 
        :param namespace: The namespace of the metric. 
        :param name: The name of the metric. 
        :param start: The UTC start time of the time span to retrieve. 
        :param end: The UTC end time of the time span to retrieve. 
        :param period: The period, in seconds, in which to group metrics. The 
 period 
                       must match the granularity of the metric, which depends on 
                       the metric's age. For example, metrics that are older than 
                       three hours have a one-minute granularity, so the period 
 must 
                       be at least 60 and must be a multiple of 60. 
        :param stat_types: The type of statistics to retrieve, such as average 
 value 
                           or maximum value. 
        :return: The retrieved statistics for the metric. 
        """ 
        try: 
            metric = self.cloudwatch_resource.Metric(namespace, name) 
1081Amazon CloudWatch User Guide
List dashboards
            stats = metric.get_statistics( 
                StartTime=start, EndTime=end, Period=period, Statistics=stat_types) 
            logger.info( 
                "Got %s statistics for %s.", len(stats['Datapoints']), 
 stats['Label']) 
        except ClientError: 
            logger.exception("Couldn't get statistics for %s.%s.", namespace, name) 
            raise 
        else: 
            return stats
•For API details, see GetMetricStatistics  in AWS SDK for Python (Boto3) API Reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
List CloudWatch dashboards
The following code examples show how to list Amazon CloudWatch dashboards.
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Get a list of dashboards. 
    /// </summary> 
    /// <returns>A list of DashboardEntry objects.</returns> 
    public async Task<List<DashboardEntry>> ListDashboards() 
    { 
        var results = new List<DashboardEntry>(); 
        var paginateDashboards = _amazonCloudWatch.Paginators.ListDashboards( 
            new ListDashboardsRequest()); 
        // Get the entire list using the paginator. 
        await foreach (var data in paginateDashboards.DashboardEntries) 
        { 
            results.Add(data); 
        } 
        return results; 
    }
•For API details, see ListDashboards in AWS SDK for .NET API Reference.
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
1082Amazon CloudWatch User Guide
List metrics
    public static void listDashboards(CloudWatchClient cw) { 
        try { 
            ListDashboardsIterable listRes = cw.listDashboardsPaginator(); 
            listRes.stream() 
                .flatMap(r -> r.dashboardEntries().stream()) 
                .forEach(entry ->{ 
                    System.out.println("Dashboard name is: " + 
 entry.dashboardName()); 
                    System.out.println("Dashboard ARN is: " + 
 entry.dashboardArn()); 
                }); 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see ListDashboards in AWS SDK for Java 2.x API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun listDashboards() { 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.listDashboardsPaginated({}) 
            .transform { it.dashboardEntries?.forEach { obj -> emit(obj) } } 
            .collect { obj -> 
                println("Name is ${obj.dashboardName}") 
                println("Dashboard ARN is ${obj.dashboardArn}") 
            } 
    }
}
•For API details, see ListDashboards in AWS SDK for Kotlin API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
List CloudWatch metrics using an AWS SDK
The following code examples show how to list the metadata for Amazon CloudWatch metrics. To get 
data for a metric, use the GetMetricData or GetMetricStatistics actions.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code examples:
1083Amazon CloudWatch User Guide
List metrics
•Get started with metrics, dashboards, and alarms (p. 1099 )
•Manage metrics and alarms  (p. 1146 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// List metrics available, optionally within a namespace. 
    /// </summary> 
    /// <param name="metricNamespace">Optional CloudWatch namespace to use when 
 listing metrics.</param> 
    /// <param name="filter">Optional dimension filter.</param> 
    /// <param name="metricName">Optional metric name filter.</param> 
    /// <returns>The list of metrics.</returns> 
    public async Task<List<Metric>> ListMetrics(string? metricNamespace = null, 
 DimensionFilter? filter = null, string? metricName = null) 
    { 
        var results = new List<Metric>(); 
        var paginateMetrics = _amazonCloudWatch.Paginators.ListMetrics( 
            new ListMetricsRequest 
            { 
                Namespace = metricNamespace, 
                Dimensions = filter != null ? new List<DimensionFilter> 
 { filter } : null, 
                MetricName = metricName 
            }); 
        // Get the entire list using the paginator. 
        await foreach (var metric in paginateMetrics.Metrics) 
        { 
            results.Add(metric); 
        } 
        return results; 
    }
•For API details, see ListMetrics  in AWS SDK for .NET API Reference.
C++
SDK for C++
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Include the required ﬁles.
#include <aws/core/Aws.h>
#include <aws/monitoring/CloudWatchClient.h>
#include <aws/monitoring/model/ListMetricsRequest.h>
#include <aws/monitoring/model/ListMetricsResult.h>
#include <iomanip>
#include <iostream>
1084Amazon CloudWatch User Guide
List metrics
List the metrics.
        Aws::CloudWatch::CloudWatchClient cw; 
        Aws::CloudWatch::Model::ListMetricsRequest request; 
        if (argc > 1) 
        { 
            request.SetMetricName(argv[1]); 
        } 
        if (argc > 2) 
        { 
            request.SetNamespace(argv[2]); 
        } 
        bool done = false; 
        bool header = false; 
        while (!done) 
        { 
            auto outcome = cw.ListMetrics(request); 
            if (!outcome.IsSuccess()) 
            { 
                std::cout << "Failed to list CloudWatch metrics:" << 
                    outcome.GetError().GetMessage() << std::endl; 
                break; 
            } 
            if (!header) 
            { 
                std::cout << std::left << std::setw(48) << "MetricName" << 
                    std::setw(32) << "Namespace" << "DimensionNameValuePairs" << 
                    std::endl; 
                header = true; 
            } 
            const auto &metrics = outcome.GetResult().GetMetrics(); 
            for (const auto &metric : metrics) 
            { 
                std::cout << std::left << std::setw(48) << 
                    metric.GetMetricName() << std::setw(32) << 
                    metric.GetNamespace(); 
                const auto &dimensions = metric.GetDimensions(); 
                for (auto iter = dimensions.cbegin(); 
                    iter != dimensions.cend(); ++iter) 
                { 
                    const auto &dimkv = *iter; 
                    std::cout << dimkv.GetName() << " = " << dimkv.GetValue(); 
                    if (iter + 1 != dimensions.cend()) 
                    { 
                        std::cout << ", "; 
                    } 
                } 
                std::cout << std::endl; 
            } 
            const auto &next_token = outcome.GetResult().GetNextToken(); 
            request.SetNextToken(next_token); 
            done = next_token.empty(); 
        }
•For API details, see ListMetrics  in AWS SDK for C++ API Reference.
1085Amazon CloudWatch User Guide
List metrics
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static void listMets( CloudWatchClient cw, String namespace) { 
        boolean done = false; 
        String nextToken = null; 
        try { 
            while(!done) { 
                ListMetricsResponse response; 
                if (nextToken == null) { 
                    ListMetricsRequest request = ListMetricsRequest.builder() 
                        .namespace(namespace) 
                        .build(); 
                    response = cw.listMetrics(request); 
                } else { 
                    ListMetricsRequest request = ListMetricsRequest.builder() 
                        .namespace(namespace) 
                        .nextToken(nextToken) 
                        .build(); 
                    response = cw.listMetrics(request); 
                } 
            for (Metric metric : response.metrics()) { 
                System.out.printf("Retrieved metric %s", metric.metricName()); 
                System.out.println(); 
            } 
            if(response.nextToken() == null) { 
                done = true; 
            } else { 
                nextToken = response.nextToken(); 
            } 
        } 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see ListMetrics  in AWS SDK for Java 2.x API Reference.
JavaScript
SDK for JavaScript (v3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Create the client in a separate module and export it.
1086Amazon CloudWatch User Guide
List metrics
import { CloudWatchClient } from "@aws-sdk/client-cloudwatch";
import { DEFAULT_REGION } from "libs/utils/util-aws-sdk.js";
export const client = new CloudWatchClient({ region: DEFAULT_REGION });
Import the SDK and client modules and call the API.
import { ListMetricsCommand } from "@aws-sdk/client-cloudwatch";
import { client } from "../libs/client.js";
export const run = async () => { 
  // Use the AWS console to see available namespaces and metric names. Custom 
 metrics can also be created. 
  // https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/
viewing_metrics_with_cloudwatch.html 
  const command = new ListMetricsCommand({ 
    Dimensions: [ 
      { 
        Name: "LogGroupName", 
      }, 
    ], 
    MetricName: "IncomingLogEvents", 
    Namespace: "AWS/Logs", 
  }); 
  try { 
    return await client.send(command); 
  } catch (err) { 
    console.error(err); 
  }
};
export default run();
•For more information, see AWS SDK for JavaScript Developer Guide.
•For API details, see ListMetrics  in AWS SDK for JavaScript API Reference.
SDK for JavaScript (v2)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
// Load the AWS SDK for Node.js
var AWS = require('aws-sdk');
// Set the region  
AWS.config.update({region: 'REGION'});
// Create CloudWatch service object
var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});
var params = { 
  Dimensions: [ 
    { 
      Name: 'LogGroupName', /* required */ 
    }, 
  ], 
  MetricName: 'IncomingLogEvents', 
  Namespace: 'AWS/Logs'
};
1087Amazon CloudWatch User Guide
List metrics
cw.listMetrics(params, function(err, data) { 
  if (err) { 
    console.log("Error", err); 
  } else { 
    console.log("Metrics", JSON.stringify(data.Metrics)); 
  }
});
•For more information, see AWS SDK for JavaScript Developer Guide.
•For API details, see ListMetrics  in AWS SDK for JavaScript API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun listMets(namespaceVal: String?): ArrayList<String>? { 
    val metList = ArrayList<String>() 
    val request = ListMetricsRequest { 
        namespace = namespaceVal 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val reponse = cwClient.listMetrics(request) 
        reponse.metrics?.forEach { metrics -> 
            val data = metrics.metricName 
            if (!metList.contains(data)) { 
                metList.add(data!!) 
            } 
        } 
    } 
    return metList
}
•For API details, see ListMetrics  in AWS SDK for Kotlin API reference.
Python
SDK for Python (Boto3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
class CloudWatchWrapper: 
    """Encapsulates Amazon CloudWatch functions.""" 
    def __init__(self, cloudwatch_resource): 
        """ 
        :param cloudwatch_resource: A Boto3 CloudWatch resource. 
        """ 
        self.cloudwatch_resource = cloudwatch_resource 
1088Amazon CloudWatch User Guide
Put a set of data into a metric
    def list_metrics(self, namespace, name, recent=False): 
        """ 
        Gets the metrics within a namespace that have the specified name. 
        If the metric has no dimensions, a single metric is returned. 
        Otherwise, metrics for all dimensions are returned. 
        :param namespace: The namespace of the metric. 
        :param name: The name of the metric. 
        :param recent: When True, only metrics that have been active in the last 
                       three hours are returned. 
        :return: An iterator that yields the retrieved metrics. 
        """ 
        try: 
            kwargs = {'Namespace': namespace, 'MetricName': name} 
            if recent: 
                kwargs['RecentlyActive'] = 'PT3H'  # List past 3 hours only 
            metric_iter = self.cloudwatch_resource.metrics.filter(**kwargs) 
            logger.info("Got metrics for %s.%s.", namespace, name) 
        except ClientError: 
            logger.exception("Couldn't get metrics for %s.%s.", namespace, name) 
            raise 
        else: 
            return metric_iter
•For API details, see ListMetrics  in AWS SDK for Python (Boto3) API Reference.
SAP ABAP
SDK for SAP ABAP
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    "The following list-metrics example displays the metrics for Amazon 
 CloudWatch." 
    TRY. 
        oo_result = lo_cwt->listmetrics(            " oo_result is returned for 
 testing purposes. " 
          iv_namespace = iv_namespace 
        ). 
        DATA(lt_metrics) = oo_result->get_metrics( ). 
        MESSAGE 'Metrics retrieved.' TYPE 'I'. 
      CATCH /aws1/cx_cwtinvparamvalueex . 
        MESSAGE 'The specified argument was not valid.' TYPE 'E'. 
    ENDTRY.
•For API details, see ListMetrics  in AWS SDK for SAP ABAP API reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Put a set of data into a CloudWatch metric using an 
AWS SDK
The following code example shows how to put a set of data into an Amazon CloudWatch metric.
1089Amazon CloudWatch User Guide
Put a set of data into a metric
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code examples:
•Get started with metrics, dashboards, and alarms (p. 1099 )
•Manage metrics and alarms  (p. 1146 )
•Put data into a metric  (p. 1091 )
Python
SDK for Python (Boto3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
class CloudWatchWrapper: 
    """Encapsulates Amazon CloudWatch functions.""" 
    def __init__(self, cloudwatch_resource): 
        """ 
        :param cloudwatch_resource: A Boto3 CloudWatch resource. 
        """ 
        self.cloudwatch_resource = cloudwatch_resource 
    def put_metric_data_set(self, namespace, name, timestamp, unit, data_set): 
        """ 
        Sends a set of data to CloudWatch for a metric. All of the data in the set 
        have the same timestamp and unit. 
        :param namespace: The namespace of the metric. 
        :param name: The name of the metric. 
        :param timestamp: The UTC timestamp for the metric. 
        :param unit: The unit of the metric. 
        :param data_set: The set of data to send. This set is a dictionary that 
                         contains a list of values and a list of corresponding 
 counts. 
                         The value and count lists must be the same length. 
        """ 
        try: 
            metric = self.cloudwatch_resource.Metric(namespace, name) 
            metric.put_data( 
                Namespace=namespace, 
                MetricData=[{ 
                    'MetricName': name, 
                    'Timestamp': timestamp, 
                    'Values': data_set['values'], 
                    'Counts': data_set['counts'], 
                    'Unit': unit}]) 
            logger.info("Put data set for metric %s.%s.", namespace, name) 
        except ClientError: 
            logger.exception("Couldn't put data set for metric %s.%s.", namespace, 
 name) 
            raise
•For API details, see PutMetricData  in AWS SDK for Python (Boto3) API Reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
1090Amazon CloudWatch User Guide
Put data into a metric
Put data into a CloudWatch metric using an AWS SDK
The following code examples show how to publish metric data points to Amazon CloudWatch.
Action examples are code excerpts from larger programs and must be run in context. You can see this 
action in context in the following code examples:
•Get started with metrics, dashboards, and alarms (p. 1099 )
•Manage metrics and alarms  (p. 1146 )
•Put a set of data into a metric  (p. 1089 )
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    /// <summary> 
    /// Add some metric data using a call to a wrapper class. 
    /// </summary> 
    /// <param name="customMetricName">The metric name.</param> 
    /// <param name="customMetricNamespace">The metric namespace.</param> 
    /// <returns></returns> 
    private static async Task<List<MetricDatum>> PutRandomMetricData(string 
 customMetricName, 
        string customMetricNamespace) 
    { 
        List<MetricDatum> customData = new List<MetricDatum>(); 
        Random rnd = new Random(); 
        // Add 10 random values up to 100, starting with a timestamp 15 minutes in 
 the past. 
        var utcNowMinus15 = DateTime.UtcNow.AddMinutes(-15); 
        for (int i = 0; i < 10; i++) 
        { 
            var metricValue = rnd.Next(0, 100); 
            customData.Add( 
                new MetricDatum 
                { 
                    MetricName = customMetricName, 
                    Value = metricValue, 
                    TimestampUtc = utcNowMinus15.AddMinutes(i) 
                } 
            ); 
        } 
        await _cloudWatchWrapper.PutMetricData(customMetricNamespace, customData); 
        return customData; 
    } 
    /// <summary> 
    /// Wrapper to add metric data to a CloudWatch metric. 
    /// </summary> 
    /// <param name="metricNamespace">The namespace of the metric.</param> 
    /// <param name="metricData">A data object for the metric data.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> PutMetricData(string metricNamespace, 
        List<MetricDatum> metricData) 
1091Amazon CloudWatch User Guide
Put data into a metric
    { 
        var putDataResponse = await _amazonCloudWatch.PutMetricDataAsync( 
            new PutMetricDataRequest() 
            { 
                MetricData = metricData, 
                Namespace = metricNamespace, 
            }); 
        return putDataResponse.HttpStatusCode == HttpStatusCode.OK; 
    }
•For API details, see PutMetricData  in AWS SDK for .NET API Reference.
C++
SDK for C++
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Include the required ﬁles.
#include <aws/core/Aws.h>
#include <aws/monitoring/CloudWatchClient.h>
#include <aws/monitoring/model/PutMetricDataRequest.h>
#include <iostream>
Put data into the metric.
        Aws::CloudWatch::CloudWatchClient cw; 
        Aws::CloudWatch::Model::Dimension dimension; 
        dimension.SetName("UNIQUE_PAGES"); 
        dimension.SetValue("URLS"); 
        Aws::CloudWatch::Model::MetricDatum datum; 
        datum.SetMetricName("PAGES_VISITED"); 
        datum.SetUnit(Aws::CloudWatch::Model::StandardUnit::None); 
        datum.SetValue(data_point); 
        datum.AddDimensions(dimension); 
        Aws::CloudWatch::Model::PutMetricDataRequest request; 
        request.SetNamespace("SITE/TRAFFIC"); 
        request.AddMetricData(datum); 
        auto outcome = cw.PutMetricData(request); 
        if (!outcome.IsSuccess()) 
        { 
            std::cout << "Failed to put sample metric data:" << 
                outcome.GetError().GetMessage() << std::endl; 
        } 
        else 
        { 
            std::cout << "Successfully put sample metric data" << std::endl; 
        }
•For API details, see PutMetricData  in AWS SDK for C++ API Reference.
1092Amazon CloudWatch User Guide
Put data into a metric
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    public static void addMetricDataForAlarm(CloudWatchClient cw, String fileName) 
 { 
        try { 
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText(); 
            String customMetricName = 
 rootNode.findValue("customMetricName").asText(); 
            // Set an Instant object. 
            String time = 
 ZonedDateTime.now( ZoneOffset.UTC ).format( DateTimeFormatter.ISO_INSTANT ); 
            Instant instant = Instant.parse(time); 
            MetricDatum datum = MetricDatum.builder() 
                .metricName(customMetricName) 
                .unit(StandardUnit.NONE) 
                .value(1001.00) 
                .timestamp(instant) 
                .build(); 
            MetricDatum datum2 = MetricDatum.builder() 
                .metricName(customMetricName) 
                .unit(StandardUnit.NONE) 
                .value(1002.00) 
                .timestamp(instant) 
                .build(); 
            List<MetricDatum> metricDataList = new ArrayList<>(); 
            metricDataList.add(datum); 
            metricDataList.add(datum2); 
            PutMetricDataRequest request = PutMetricDataRequest.builder() 
                .namespace(customMetricNamespace) 
                .metricData(metricDataList) 
                .build(); 
            cw.putMetricData(request); 
            System.out.println("Added metric values for for metric " 
 +customMetricName); 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    }
•For API details, see PutMetricData  in AWS SDK for Java 2.x API Reference.
1093Amazon CloudWatch User Guide
Put data into a metric
JavaScript
SDK for JavaScript (v3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Create the client in a separate module and export it.
import { CloudWatchClient } from "@aws-sdk/client-cloudwatch";
import { DEFAULT_REGION } from "libs/utils/util-aws-sdk.js";
export const client = new CloudWatchClient({ region: DEFAULT_REGION });
Import the SDK and client modules and call the API.
import { PutMetricDataCommand } from "@aws-sdk/client-cloudwatch";
import { client } from "../libs/client.js";
const run = async () => { 
  // See https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/
API_PutMetricData.html#API_PutMetricData_RequestParameters 
  // and https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/
publishingMetrics.html 
  // for more information about the parameters in this command. 
  const command = new PutMetricDataCommand({ 
    MetricData: [ 
      { 
        MetricName: "PAGES_VISITED", 
        Dimensions: [ 
          { 
            Name: "UNIQUE_PAGES", 
            Value: "URLS", 
          }, 
        ], 
        Unit: "None", 
        Value: 1.0, 
      }, 
    ], 
    Namespace: "SITE/TRAFFIC", 
  }); 
  try { 
    return await client.send(command); 
  } catch (err) { 
    console.error(err); 
  }
};
export default run();
•For more information, see AWS SDK for JavaScript Developer Guide.
•For API details, see PutMetricData  in AWS SDK for JavaScript API Reference.
SDK for JavaScript (v2)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
1094Amazon CloudWatch User Guide
Put data into a metric
// Load the AWS SDK for Node.js
var AWS = require('aws-sdk');
// Set the region  
AWS.config.update({region: 'REGION'});
// Create CloudWatch service object
var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});
// Create parameters JSON for putMetricData
var params = { 
  MetricData: [ 
    { 
      MetricName: 'PAGES_VISITED', 
      Dimensions: [ 
        { 
          Name: 'UNIQUE_PAGES', 
          Value: 'URLS' 
        }, 
      ], 
      Unit: 'None', 
      Value: 1.0 
    }, 
  ], 
  Namespace: 'SITE/TRAFFIC'
};
cw.putMetricData(params, function(err, data) { 
  if (err) { 
    console.log("Error", err); 
  } else { 
    console.log("Success", JSON.stringify(data)); 
  }
});
•For more information, see AWS SDK for JavaScript Developer Guide.
•For API details, see PutMetricData  in AWS SDK for JavaScript API Reference.
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
suspend fun addMetricDataForAlarm(fileName: String?) { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode = ObjectMapper().readTree<JsonNode>(parser) 
    val customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText() 
    val customMetricName = rootNode.findValue("customMetricName").asText() 
    // Set an Instant object. 
    val time = 
 ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) 
    val instant = Instant.parse(time) 
1095Amazon CloudWatch User Guide
Put data into a metric
    val datum = MetricDatum { 
        metricName = customMetricName 
        unit = StandardUnit.None 
        value = 1001.00 
        timestamp = aws.smithy.kotlin.runtime.time.Instant(instant) 
    } 
    val datum2 = MetricDatum { 
        metricName = customMetricName 
        unit = StandardUnit.None 
        value = 1002.00 
        timestamp = aws.smithy.kotlin.runtime.time.Instant(instant) 
    } 
    val metricDataList = ArrayList<MetricDatum>() 
    metricDataList.add(datum) 
    metricDataList.add(datum2) 
    val request = PutMetricDataRequest { 
        namespace = customMetricNamespace 
        metricData = metricDataList 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.putMetricData(request) 
        println("Added metric values for for metric $customMetricName") 
    }
}
•For API details, see PutMetricData  in AWS SDK for Kotlin API reference.
Python
SDK for Python (Boto3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
class CloudWatchWrapper: 
    """Encapsulates Amazon CloudWatch functions.""" 
    def __init__(self, cloudwatch_resource): 
        """ 
        :param cloudwatch_resource: A Boto3 CloudWatch resource. 
        """ 
        self.cloudwatch_resource = cloudwatch_resource 
    def put_metric_data(self, namespace, name, value, unit): 
        """ 
        Sends a single data value to CloudWatch for a metric. This metric is given 
        a timestamp of the current UTC time. 
        :param namespace: The namespace of the metric. 
        :param name: The name of the metric. 
        :param value: The value of the metric. 
        :param unit: The unit of the metric. 
        """ 
        try: 
            metric = self.cloudwatch_resource.Metric(namespace, name) 
            metric.put_data( 
                Namespace=namespace, 
                MetricData=[{ 
1096Amazon CloudWatch User Guide
Scenarios
                    'MetricName': name, 
                    'Value': value, 
                    'Unit': unit 
                }] 
            ) 
            logger.info("Put data for metric %s.%s", namespace, name) 
        except ClientError: 
            logger.exception("Couldn't put data for metric %s.%s", namespace, name) 
            raise
•For API details, see PutMetricData  in AWS SDK for Python (Boto3) API Reference.
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Scenarios for CloudWatch using AWS SDKs
The following code examples show you how to implement common scenarios in CloudWatch with AWS 
SDKs. These scenarios show you how to accomplish speciﬁc tasks by calling multiple functions within 
CloudWatch. Each scenario includes a link to GitHub, where you can ﬁnd instructions on how to set up 
and run the code.
Examples
•Get started with CloudWatch alarms using an AWS SDK (p. 1097 )
•Get started with CloudWatch metrics, dashboards, and alarms using an AWS SDK (p. 1099 )
•Manage CloudWatch metrics and alarms using an AWS SDK (p. 1146 )
Get started with CloudWatch alarms using an AWS 
SDK
The following code example shows how to:
•Create an alarm.
•Disable alarm actions.
•Describe an alarm.
•Delete an alarm.
SAP ABAP
SDK for SAP ABAP
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
    DATA lt_alarmnames TYPE /aws1/cl_cwtalarmnames_w=>tt_alarmnames. 
    DATA lo_alarmname TYPE REF TO /aws1/cl_cwtalarmnames_w. 
    "Create an alarm" 
1097Amazon CloudWatch User Guide
Get started with alarms
    TRY. 
        lo_cwt->putmetricalarm( 
          iv_alarmname                 = iv_alarm_name 
          iv_comparisonoperator        = iv_comparison_operator 
          iv_evaluationperiods         = iv_evaluation_periods 
          iv_metricname                = iv_metric_name 
          iv_namespace                 = iv_namespace 
          iv_statistic                 = iv_statistic 
          iv_threshold                 = iv_threshold 
          iv_actionsenabled            = iv_actions_enabled 
          iv_alarmdescription          = iv_alarm_description 
          iv_unit                      = iv_unit 
          iv_period                    = iv_period 
          it_dimensions                = it_dimensions 
        ). 
        MESSAGE 'Alarm created' TYPE 'I'. 
      CATCH /aws1/cx_cwtlimitexceededfault. 
        MESSAGE 'The request processing has exceeded the limit' TYPE 'E'. 
    ENDTRY. 
    "Create an ABAP internal table for the created alarm." 
    CREATE OBJECT lo_alarmname EXPORTING iv_value = iv_alarm_name. 
    INSERT lo_alarmname INTO TABLE lt_alarmnames. 
    "Disable alarm actions." 
    TRY. 
        lo_cwt->disablealarmactions( 
          it_alarmnames                = lt_alarmnames 
        ). 
        MESSAGE 'Alarm actions disabled' TYPE 'I'. 
      CATCH /aws1/cx_rt_service_generic INTO DATA(lo_disablealarm_exception). 
        DATA(lv_disablealarm_error) = |"{ lo_disablealarm_exception->av_err_code }" 
 - { lo_disablealarm_exception->av_err_msg }|. 
        MESSAGE lv_disablealarm_error TYPE 'E'. 
    ENDTRY. 
    "Describe alarm using the same ABAP internal table." 
    TRY. 
        oo_result = lo_cwt->describealarms(                       " oo_result is 
 returned for testing purpose " 
          it_alarmnames                = lt_alarmnames 
        ). 
        MESSAGE 'Alarms retrieved' TYPE 'I'. 
      CATCH /aws1/cx_rt_service_generic INTO DATA(lo_describealarms_exception). 
        DATA(lv_describealarms_error) = |"{ lo_describealarms_exception-
>av_err_code }" - { lo_describealarms_exception->av_err_msg }|. 
        MESSAGE lv_describealarms_error TYPE 'E'. 
    ENDTRY. 
    "Delete alarm." 
    TRY. 
        lo_cwt->deletealarms( 
          it_alarmnames = lt_alarmnames 
        ). 
        MESSAGE 'Alarms deleted' TYPE 'I'. 
      CATCH /aws1/cx_cwtresourcenotfound . 
        MESSAGE 'Resource being access is not found.' TYPE 'E'. 
    ENDTRY.
•For API details, see the following topics in AWS SDK for SAP ABAP API reference.
•DeleteAlarms
•DescribeAlarms
•DisableAlarmActions
1098Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
•PutMetricAlarm
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Get started with CloudWatch metrics, dashboards, 
and alarms using an AWS SDK
The following code examples show how to:
•List CloudWatch namespaces and metrics.
•Get statistics for a metric and for estimated billing.
•Create and update a dashboard.
•Create and add data to a metric.
•Create and trigger an alarm, then view alarm history.
•Add an anomaly detector.
•Get a metric image, then clean up resources.
.NET
AWS SDK for .NET
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Run an interactive scenario at a command prompt.
public class CloudWatchScenario
{ 
    /* 
    Before running this .NET code example, set up your development environment, 
 including your credentials. 
    To enable billing metrics and statistics for this example, make sure billing 
 alerts are enabled for your account: 
    https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/
monitor_estimated_charges_with_cloudwatch.html#turning_on_billing_metrics 
    This .NET example performs the following tasks: 
        1. List and select a CloudWatch namespace. 
        2. List and select a CloudWatch metric. 
        3. Get statistics for a CloudWatch metric. 
        4. Get estimated billing statistics for the last week. 
        5. Create a new CloudWatch dashboard with two metrics. 
        6. List current CloudWatch dashboards. 
        7. Create a CloudWatch custom metric and add metric data. 
        8. Add the custom metric to the dashboard. 
        9. Create a CloudWatch alarm for the custom metric. 
       10. Describe current CloudWatch alarms. 
       11. Get recent data for the custom metric. 
       12. Add data to the custom metric to trigger the alarm. 
       13. Wait for an alarm state. 
       14. Get history for the CloudWatch alarm. 
       15. Add an anomaly detector. 
       16. Describe current anomaly detectors. 
1099Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
       17. Get and display a metric image. 
       18. Clean up resources. 
    */ 
    private static ILogger logger = null!; 
    private static CloudWatchWrapper _cloudWatchWrapper = null!; 
    private static IConfiguration _configuration = null!; 
    private static readonly List<string> _statTypes = new List<string> 
 { "SampleCount", "Average", "Sum", "Minimum", "Maximum" }; 
    private static SingleMetricAnomalyDetector? anomalyDetector = null!; 
    static async Task Main(string[] args) 
    { 
        // Set up dependency injection for the Amazon service. 
        using var host = Host.CreateDefaultBuilder(args) 
            .ConfigureLogging(logging => 
                logging.AddFilter("System", LogLevel.Debug) 
                    .AddFilter<DebugLoggerProvider>("Microsoft", 
 LogLevel.Information) 
                    .AddFilter<ConsoleLoggerProvider>("Microsoft", LogLevel.Trace)) 
            .ConfigureServices((_, services) => 
            services.AddAWSService<IAmazonCloudWatch>() 
            .AddTransient<CloudWatchWrapper>() 
        ) 
        .Build(); 
        _configuration = new ConfigurationBuilder() 
            .SetBasePath(Directory.GetCurrentDirectory()) 
            .AddJsonFile("settings.json") // Load settings from .json file. 
            .AddJsonFile("settings.local.json", 
                true) // Optionally, load local settings. 
            .Build(); 
        logger = LoggerFactory.Create(builder => { builder.AddConsole(); }) 
            .CreateLogger<CloudWatchScenario>(); 
        _cloudWatchWrapper = host.Services.GetRequiredService<CloudWatchWrapper>(); 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine("Welcome to the Amazon CloudWatch example scenario."); 
        Console.WriteLine(new string('-', 80)); 
        try 
        { 
            var selectedNamespace = await SelectNamespace(); 
            var selectedMetric = await SelectMetric(selectedNamespace); 
            await GetAndDisplayMetricStatistics(selectedNamespace, selectedMetric); 
            await GetAndDisplayEstimatedBilling(); 
            await CreateDashboardWithMetrics(); 
            await ListDashboards(); 
            await CreateNewCustomMetric(); 
            await AddMetricToDashboard(); 
            await CreateMetricAlarm(); 
            await DescribeAlarms(); 
            await GetCustomMetricData(); 
            await AddMetricDataForAlarm(); 
            await CheckForMetricAlarm(); 
            await GetAlarmHistory(); 
            anomalyDetector = await AddAnomalyDetector(); 
            await DescribeAnomalyDetectors(); 
            await GetAndOpenMetricImage(); 
            await CleanupResources(); 
        } 
        catch (Exception ex) 
        { 
            logger.LogError(ex, "There was a problem executing the scenario."); 
1100Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
            await CleanupResources(); 
        } 
    } 
    /// <summary> 
    /// Select a namespace. 
    /// </summary> 
    /// <returns>The selected namespace.</returns> 
    private static async Task<string> SelectNamespace() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"1. Select a CloudWatch Namespace from a list of 
 Namespaces."); 
        var metrics = await _cloudWatchWrapper.ListMetrics(); 
        // Get a distinct list of namespaces. 
        var namespaces = metrics.Select(m => m.Namespace).Distinct().ToList(); 
        for (int i = 0; i < namespaces.Count; i++) 
        { 
            Console.WriteLine($"\t{i + 1}. {namespaces[i]}"); 
        } 
        var namespaceChoiceNumber = 0; 
        while (namespaceChoiceNumber < 1 || namespaceChoiceNumber > 
 namespaces.Count) 
        { 
            Console.WriteLine( 
                "Select a namespace by entering a number from the preceding 
 list:"); 
            var choice = Console.ReadLine(); 
            Int32.TryParse(choice, out namespaceChoiceNumber); 
        } 
        var selectedNamespace = namespaces[namespaceChoiceNumber - 1]; 
        Console.WriteLine(new string('-', 80)); 
        return selectedNamespace; 
    } 
    /// <summary> 
    /// Select a metric from a namespace. 
    /// </summary> 
    /// <param name="metricNamespace">The namespace for metrics.</param> 
    /// <returns>The metric name.</returns> 
    private static async Task<Metric> SelectMetric(string metricNamespace) 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"2. Select a CloudWatch metric from a namespace."); 
        var namespaceMetrics = await 
 _cloudWatchWrapper.ListMetrics(metricNamespace); 
        for (int i = 0; i < namespaceMetrics.Count && i < 15; i++) 
        { 
            var dimensionsWithValues = namespaceMetrics[i].Dimensions 
                .Where(d => !string.Equals("None", d.Value)); 
            Console.WriteLine($"\t{i + 1}. {namespaceMetrics[i].MetricName} " + 
                              $"{string.Join(", :", dimensionsWithValues.Select(d 
 => d.Value))}"); 
        } 
        var metricChoiceNumber = 0; 
        while (metricChoiceNumber < 1 || metricChoiceNumber > 
 namespaceMetrics.Count) 
        { 
1101Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
            Console.WriteLine( 
                "Select a metric by entering a number from the preceding list:"); 
            var choice = Console.ReadLine(); 
            Int32.TryParse(choice, out metricChoiceNumber); 
        } 
        var selectedMetric = namespaceMetrics[metricChoiceNumber - 1]; 
        Console.WriteLine(new string('-', 80)); 
        return selectedMetric; 
    } 
    /// <summary> 
    /// Get and display metric statistics for a specific metric. 
    /// </summary> 
    /// <param name="metricNamespace">The namespace for metrics.</param> 
    /// <param name="metric">The CloudWatch metric.</param> 
    /// <returns>Async task.</returns> 
    private static async Task GetAndDisplayMetricStatistics(string metricNamespace, 
 Metric metric) 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"3. Get CloudWatch metric statistics for the last 
 day."); 
        for (int i = 0; i < _statTypes.Count; i++) 
        { 
            Console.WriteLine($"\t{i + 1}. {_statTypes[i]}"); 
        } 
        var statisticChoiceNumber = 0; 
        while (statisticChoiceNumber < 1 || statisticChoiceNumber > 
 _statTypes.Count) 
        { 
            Console.WriteLine( 
                "Select a metric statistic by entering a number from the preceding 
 list:"); 
            var choice = Console.ReadLine(); 
            Int32.TryParse(choice, out statisticChoiceNumber); 
        } 
        var selectedStatistic = _statTypes[statisticChoiceNumber - 1]; 
        var statisticsList = new List<string> { selectedStatistic }; 
        var metricStatistics = await 
 _cloudWatchWrapper.GetMetricStatistics(metricNamespace, metric.MetricName, 
 statisticsList, metric.Dimensions, 1, 60); 
        if (!metricStatistics.Any()) 
        { 
            Console.WriteLine($"No {selectedStatistic} statistics found for 
 {metric} in namespace {metricNamespace}."); 
        } 
        metricStatistics = metricStatistics.OrderBy(s => s.Timestamp).ToList(); 
        for (int i = 0; i < metricStatistics.Count && i < 10; i++) 
        { 
            var metricStat = metricStatistics[i]; 
            var statValue = 
 metricStat.GetType().GetProperty(selectedStatistic)!.GetValue(metricStat, null); 
            Console.WriteLine($"\t{i + 1}. Timestamp 
 {metricStatistics[i].Timestamp:G} {selectedStatistic}: {statValue}"); 
        } 
        Console.WriteLine(new string('-', 80)); 
1102Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    } 
    /// <summary> 
    /// Get and display estimated billing statistics. 
    /// </summary> 
    /// <param name="metricNamespace">The namespace for metrics.</param> 
    /// <param name="metric">The CloudWatch metric.</param> 
    /// <returns>Async task.</returns> 
    private static async Task GetAndDisplayEstimatedBilling() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"4. Get CloudWatch estimated billing for the last 
 week."); 
        var billingStatistics = await SetupBillingStatistics(); 
        for (int i = 0; i < billingStatistics.Count; i++) 
        { 
            Console.WriteLine($"\t{i + 1}. Timestamp 
 {billingStatistics[i].Timestamp:G} : {billingStatistics[i].Maximum}"); 
        } 
        Console.WriteLine(new string('-', 80)); 
    } 
    /// <summary> 
    /// Get billing statistics using a call to a wrapper class. 
    /// </summary> 
    /// <returns>A collection of billing statistics.</returns> 
    private static async Task<List<Datapoint>> SetupBillingStatistics() 
    { 
        // Make a request for EstimatedCharges with a period of one day for the 
 past seven days. 
        var billingStatistics = await _cloudWatchWrapper.GetMetricStatistics( 
            "AWS/Billing", 
            "EstimatedCharges", 
            new List<string>() { "Maximum" }, 
            new List<Dimension>() { new Dimension { Name = "Currency", Value = 
 "USD" } }, 
            7, 
            86400); 
        billingStatistics = billingStatistics.OrderBy(n => n.Timestamp).ToList(); 
        return billingStatistics; 
    } 
    /// <summary> 
    /// Create a dashboard with metrics. 
    /// </summary> 
    /// <param name="metricNamespace">The namespace for metrics.</param> 
    /// <param name="metric">The CloudWatch metric.</param> 
    /// <returns>Async task.</returns> 
    private static async Task CreateDashboardWithMetrics() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"5. Create a new CloudWatch dashboard with metrics."); 
        var dashboardName = _configuration["dashboardName"]; 
        var newDashboard = new DashboardModel(); 
        _configuration.GetSection("dashboardExampleBody").Bind(newDashboard); 
        var newDashboardString = JsonSerializer.Serialize( 
            newDashboard, 
            new JsonSerializerOptions 
            { 
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull 
            }); 
1103Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
        var validationMessages = 
            await _cloudWatchWrapper.PutDashboard(dashboardName, 
 newDashboardString); 
        Console.WriteLine(validationMessages.Any() ? $"\tValidation messages:" : 
 null); 
        for (int i = 0; i < validationMessages.Count; i++) 
        { 
            Console.WriteLine($"\t{i + 1}. {validationMessages[i].Message}"); 
        } 
        Console.WriteLine($"\tDashboard {dashboardName} was created."); 
        Console.WriteLine(new string('-', 80)); 
    } 
    /// <summary> 
    /// List dashboards. 
    /// </summary> 
    /// <returns>Async task.</returns> 
    private static async Task ListDashboards() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"6. List the CloudWatch dashboards in the current 
 account."); 
        var dashboards = await _cloudWatchWrapper.ListDashboards(); 
        for (int i = 0; i < dashboards.Count; i++) 
        { 
            Console.WriteLine($"\t{i + 1}. {dashboards[i].DashboardName}"); 
        } 
        Console.WriteLine(new string('-', 80)); 
    } 
    /// <summary> 
    /// Create and add data for a new custom metric. 
    /// </summary> 
    /// <returns>Async task.</returns> 
    private static async Task CreateNewCustomMetric() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"7. Create and add data for a new custom metric."); 
        var customMetricNamespace = _configuration["customMetricNamespace"]; 
        var customMetricName = _configuration["customMetricName"]; 
        var customData = await PutRandomMetricData(customMetricName, 
 customMetricNamespace); 
        var valuesString = string.Join(',', customData.Select(d => d.Value)); 
        Console.WriteLine($"\tAdded metric values for for metric 
 {customMetricName}: \n\t{valuesString}"); 
        Console.WriteLine(new string('-', 80)); 
    } 
    /// <summary> 
    /// Add some metric data using a call to a wrapper class. 
    /// </summary> 
    /// <param name="customMetricName">The metric name.</param> 
    /// <param name="customMetricNamespace">The metric namespace.</param> 
    /// <returns></returns> 
    private static async Task<List<MetricDatum>> PutRandomMetricData(string 
 customMetricName, 
        string customMetricNamespace) 
1104Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    { 
        List<MetricDatum> customData = new List<MetricDatum>(); 
        Random rnd = new Random(); 
        // Add 10 random values up to 100, starting with a timestamp 15 minutes in 
 the past. 
        var utcNowMinus15 = DateTime.UtcNow.AddMinutes(-15); 
        for (int i = 0; i < 10; i++) 
        { 
            var metricValue = rnd.Next(0, 100); 
            customData.Add( 
                new MetricDatum 
                { 
                    MetricName = customMetricName, 
                    Value = metricValue, 
                    TimestampUtc = utcNowMinus15.AddMinutes(i) 
                } 
            ); 
        } 
        await _cloudWatchWrapper.PutMetricData(customMetricNamespace, customData); 
        return customData; 
    } 
    /// <summary> 
    /// Add the custom metric to the dashboard. 
    /// </summary> 
    /// <returns>Async task.</returns> 
    private static async Task AddMetricToDashboard() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"8. Add the new custom metric to the dashboard."); 
        var dashboardName = _configuration["dashboardName"]; 
        var customMetricNamespace = _configuration["customMetricNamespace"]; 
        var customMetricName = _configuration["customMetricName"]; 
        var validationMessages = await SetupDashboard(customMetricNamespace, 
 customMetricName, dashboardName); 
        Console.WriteLine(validationMessages.Any() ? $"\tValidation messages:" : 
 null); 
        for (int i = 0; i < validationMessages.Count; i++) 
        { 
            Console.WriteLine($"\t{i + 1}. {validationMessages[i].Message}"); 
        } 
        Console.WriteLine($"\tDashboard {dashboardName} updated with metric 
 {customMetricName}."); 
        Console.WriteLine(new string('-', 80)); 
    } 
    /// <summary> 
    /// Set up a dashboard using a call to the wrapper class. 
    /// </summary> 
    /// <param name="customMetricNamespace">The metric namespace.</param> 
    /// <param name="customMetricName">The metric name.</param> 
    /// <param name="dashboardName">The name of the dashboard.</param> 
    /// <returns>A list of validation messages.</returns> 
    private static async Task<List<DashboardValidationMessage>> SetupDashboard( 
        string customMetricNamespace, string customMetricName, string 
 dashboardName) 
    { 
        // Get the dashboard model from configuration. 
        var newDashboard = new DashboardModel(); 
1105Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
        _configuration.GetSection("dashboardExampleBody").Bind(newDashboard); 
        // Add a new metric to the dashboard. 
        newDashboard.Widgets.Add(new Widget 
        { 
            Height = 8, 
            Width = 8, 
            Y = 8, 
            X = 0, 
            Type = "metric", 
            Properties = new Properties 
            { 
                Metrics = new List<List<object>> 
                    { new() { customMetricNamespace, customMetricName } }, 
                View = "timeSeries", 
                Region = "us-east-1", 
                Stat = "Sum", 
                Period = 86400, 
                YAxis = new YAxis { Left = new Left { Min = 0, Max = 100 } }, 
                Title = "Custom Metric Widget", 
                LiveData = true, 
                Sparkline = true, 
                Trend = true, 
                Stacked = false, 
                SetPeriodToTimeRange = false 
            } 
        }); 
        var newDashboardString = JsonSerializer.Serialize(newDashboard, 
            new JsonSerializerOptions 
            { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull }); 
        var validationMessages = 
            await _cloudWatchWrapper.PutDashboard(dashboardName, 
 newDashboardString); 
        return validationMessages; 
    } 
    /// <summary> 
    /// Create a CloudWatch alarm for the new metric. 
    /// </summary> 
    /// <returns>Async task.</returns> 
    private static async Task CreateMetricAlarm() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"9. Create a CloudWatch alarm for the new metric."); 
        var customMetricNamespace = _configuration["customMetricNamespace"]; 
        var customMetricName = _configuration["customMetricName"]; 
        var alarmName = _configuration["exampleAlarmName"]; 
        var accountId = _configuration["accountId"]; 
        var region = _configuration["region"]; 
        var emailTopic = _configuration["emailTopic"]; 
        var alarmActions = new List<string>(); 
        if (GetYesNoResponse( 
                $"\tAdd an email action for topic {emailTopic} to alarm 
 {alarmName}? (y/n)")) 
        { 
            _cloudWatchWrapper.AddEmailAlarmAction(accountId, region, emailTopic, 
 alarmActions); 
        } 
        await _cloudWatchWrapper.PutMetricEmailAlarm( 
            "Example metric alarm", 
1106Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
            alarmName, 
            ComparisonOperator.GreaterThanOrEqualToThreshold, 
            customMetricName, 
            customMetricNamespace, 
            100, 
            alarmActions); 
        Console.WriteLine($"\tAlarm {alarmName} added for metric 
 {customMetricName}."); 
        Console.WriteLine(new string('-', 80)); 
    } 
    /// <summary> 
    /// Describe Alarms. 
    /// </summary> 
    /// <returns>Async task.</returns> 
    private static async Task DescribeAlarms() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"10. Describe CloudWatch alarms in the current 
 account."); 
        var alarms = await _cloudWatchWrapper.DescribeAlarms(); 
        alarms = alarms.OrderByDescending(a => a.StateUpdatedTimestamp).ToList(); 
        for (int i = 0; i < alarms.Count && i < 10; i++) 
        { 
            var alarm = alarms[i]; 
            Console.WriteLine($"\t{i + 1}. {alarm.AlarmName}"); 
            Console.WriteLine($"\tState: {alarm.StateValue} for {alarm.MetricName} 
 {alarm.ComparisonOperator} {alarm.Threshold}"); 
        } 
        Console.WriteLine(new string('-', 80)); 
    } 
    /// <summary> 
    /// Get the recent data for the metric. 
    /// </summary> 
    /// <returns>Async task.</returns> 
    private static async Task GetCustomMetricData() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"11. Get current data for new custom metric."); 
        var customMetricNamespace = _configuration["customMetricNamespace"]; 
        var customMetricName = _configuration["customMetricName"]; 
        var accountId = _configuration["accountId"]; 
        var query = new List<MetricDataQuery> 
        { 
            new MetricDataQuery 
            { 
                AccountId = accountId, 
                Id = "m1", 
                Label = "Custom Metric Data", 
                MetricStat = new MetricStat 
                { 
                    Metric = new Metric 
                    { 
                        MetricName = customMetricName, 
                        Namespace = customMetricNamespace, 
                    }, 
                    Period = 1, 
                    Stat = "Maximum" 
                } 
1107Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
            } 
        }; 
        var metricData = await _cloudWatchWrapper.GetMetricData( 
            20, 
            true, 
            DateTime.UtcNow.AddMinutes(1), 
            20, 
            query); 
        for (int i = 0; i < metricData.Count; i++) 
        { 
            for (int j = 0; j < metricData[i].Values.Count; j++) 
            { 
                Console.WriteLine( 
                    $"\tTimestamp {metricData[i].Timestamps[j]:G} Value: 
 {metricData[i].Values[j]}"); 
            } 
        } 
        Console.WriteLine(new string('-', 80)); 
    } 
    /// <summary> 
    /// Add metric data to trigger an alarm. 
    /// </summary> 
    /// <returns>Async task.</returns> 
    private static async Task AddMetricDataForAlarm() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"12. Add metric data to the custom metric to trigger an 
 alarm."); 
        var customMetricNamespace = _configuration["customMetricNamespace"]; 
        var customMetricName = _configuration["customMetricName"]; 
        var nowUtc = DateTime.UtcNow; 
        List<MetricDatum> customData = new List<MetricDatum> 
        { 
            new MetricDatum 
            { 
                MetricName = customMetricName, 
                Value = 101, 
                TimestampUtc = nowUtc.AddMinutes(-2) 
            }, 
            new MetricDatum 
            { 
                MetricName = customMetricName, 
                Value = 101, 
                TimestampUtc = nowUtc.AddMinutes(-1) 
            }, 
            new MetricDatum 
            { 
                MetricName = customMetricName, 
                Value = 101, 
                TimestampUtc = nowUtc 
            } 
        }; 
        var valuesString = string.Join(',', customData.Select(d => d.Value)); 
        Console.WriteLine($"\tAdded metric values for for metric 
 {customMetricName}: \n\t{valuesString}"); 
        await _cloudWatchWrapper.PutMetricData(customMetricNamespace, customData); 
        Console.WriteLine(new string('-', 80)); 
    } 
    /// <summary> 
1108Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    /// Check for a metric alarm using the DescribeAlarmsForMetric action. 
    /// </summary> 
    /// <returns>Async task.</returns> 
    private static async Task CheckForMetricAlarm() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"13. Checking for an alarm state."); 
        var customMetricNamespace = _configuration["customMetricNamespace"]; 
        var customMetricName = _configuration["customMetricName"]; 
        var hasAlarm = false; 
        var retries = 10; 
        while (!hasAlarm && retries > 0) 
        { 
            var alarms = await 
 _cloudWatchWrapper.DescribeAlarmsForMetric(customMetricNamespace, 
 customMetricName); 
            hasAlarm = alarms.Any(a => a.StateValue == StateValue.ALARM); 
            retries--; 
            Thread.Sleep(20000); 
        } 
        Console.WriteLine(hasAlarm 
            ? $"\tAlarm state found for {customMetricName}." 
            : $"\tNo Alarm state found for {customMetricName} after 10 retries."); 
        Console.WriteLine(new string('-', 80)); 
    } 
    /// <summary> 
    /// Get history for an alarm. 
    /// </summary> 
    /// <returns>Async task.</returns> 
    private static async Task GetAlarmHistory() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"14. Get alarm history."); 
        var exampleAlarmName = _configuration["exampleAlarmName"]; 
        var alarmHistory = await 
 _cloudWatchWrapper.DescribeAlarmHistory(exampleAlarmName, 2); 
        for (int i = 0; i < alarmHistory.Count; i++) 
        { 
            var history = alarmHistory[i]; 
            Console.WriteLine($"\t{i + 1}. {history.HistorySummary}, time 
 {history.Timestamp:g}"); 
        } 
        if (!alarmHistory.Any()) 
        { 
            Console.WriteLine($"\tNo alarm history data found for 
 {exampleAlarmName}."); 
        } 
        Console.WriteLine(new string('-', 80)); 
    } 
    /// <summary> 
    /// Add an anomaly detector. 
    /// </summary> 
    /// <returns>Async task.</returns> 
    private static async Task<SingleMetricAnomalyDetector> AddAnomalyDetector() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"15. Add an anomaly detector."); 
1109Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
        var customMetricNamespace = _configuration["customMetricNamespace"]; 
        var customMetricName = _configuration["customMetricName"]; 
        var detector = new SingleMetricAnomalyDetector 
        { 
            MetricName = customMetricName, 
            Namespace = customMetricNamespace, 
            Stat = "Maximum" 
        }; 
        await _cloudWatchWrapper.PutAnomalyDetector(detector); 
        Console.WriteLine($"\tAdded anomaly detector for metric 
 {customMetricName}."); 
        Console.WriteLine(new string('-', 80)); 
        return detector; 
    } 
    /// <summary> 
    /// Describe anomaly detectors. 
    /// </summary> 
    /// <returns>Async task.</returns> 
    private static async Task DescribeAnomalyDetectors() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"16. Describe anomaly detectors in the current 
 account."); 
        var customMetricNamespace = _configuration["customMetricNamespace"]; 
        var customMetricName = _configuration["customMetricName"]; 
        var detectors = await 
 _cloudWatchWrapper.DescribeAnomalyDetectors(customMetricNamespace, 
 customMetricName); 
        for (int i = 0; i < detectors.Count; i++) 
        { 
            var detector = detectors[i]; 
            Console.WriteLine($"\t{i + 1}. 
 {detector.SingleMetricAnomalyDetector.MetricName}, state {detector.StateValue}"); 
        } 
        Console.WriteLine(new string('-', 80)); 
    } 
    /// <summary> 
    /// Fetch and open a metrics image for a CloudWatch metric and namespace. 
    /// </summary> 
    /// <returns>Async task.</returns> 
    private static async Task GetAndOpenMetricImage() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine("17. Get a metric image from CloudWatch."); 
        Console.WriteLine($"\tGetting Image data for custom metric."); 
        var customMetricNamespace = _configuration["customMetricNamespace"]; 
        var customMetricName = _configuration["customMetricName"]; 
        var memoryStream = await 
 _cloudWatchWrapper.GetTimeSeriesMetricImage(customMetricNamespace, 
 customMetricName, "Maximum", 10); 
        var file = _cloudWatchWrapper.SaveMetricImage(memoryStream, 
 "MetricImages"); 
        ProcessStartInfo info = new ProcessStartInfo(); 
1110Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
        Console.WriteLine($"\tFile saved as {Path.GetFileName(file)}."); 
        Console.WriteLine($"\tPress enter to open the image."); 
        Console.ReadLine(); 
        info.FileName = Path.Combine("ms-photos://", file); 
        info.UseShellExecute = true; 
        info.CreateNoWindow = true; 
        info.Verb = string.Empty; 
        Process.Start(info); 
        Console.WriteLine(new string('-', 80)); 
    } 
    /// <summary> 
    /// Clean up created resources. 
    /// </summary> 
    /// <param name="metricNamespace">The namespace for metrics.</param> 
    /// <param name="metric">The CloudWatch metric.</param> 
    /// <returns>Async task.</returns> 
    private static async Task CleanupResources() 
    { 
        Console.WriteLine(new string('-', 80)); 
        Console.WriteLine($"18. Clean up resources."); 
        var dashboardName = _configuration["dashboardName"]; 
        if (GetYesNoResponse($"\tDelete dashboard {dashboardName}? (y/n)")) 
        { 
            Console.WriteLine($"\tDeleting dashboard."); 
            var dashboardList = new List<string> { dashboardName }; 
            await _cloudWatchWrapper.DeleteDashboards(dashboardList); 
        } 
        var alarmName = _configuration["exampleAlarmName"]; 
        if (GetYesNoResponse($"\tDelete alarm {alarmName}? (y/n)")) 
        { 
            Console.WriteLine($"\tCleaning up alarms."); 
            var alarms = new List<string> { alarmName }; 
            await _cloudWatchWrapper.DeleteAlarms(alarms); 
        } 
        if (GetYesNoResponse($"\tDelete anomaly detector? (y/n)") && 
 anomalyDetector != null) 
        { 
            Console.WriteLine($"\tCleaning up anomaly detector."); 
            await _cloudWatchWrapper.DeleteAnomalyDetector( 
                anomalyDetector); 
        } 
        Console.WriteLine(new string('-', 80)); 
    } 
    /// <summary> 
    /// Get a yes or no response from the user. 
    /// </summary> 
    /// <param name="question">The question string to print on the console.</param> 
    /// <returns>True if the user responds with a yes.</returns> 
    private static bool GetYesNoResponse(string question) 
    { 
        Console.WriteLine(question); 
        var ynResponse = Console.ReadLine(); 
        var response = ynResponse != null && 
                       ynResponse.Equals("y", 
                           StringComparison.InvariantCultureIgnoreCase); 
        return response; 
    }
1111Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
}
Wrapper methods used by the scenario for CloudWatch actions.
/// <summary>
/// Wrapper class for Amazon CloudWatch methods.
/// </summary>
public class CloudWatchWrapper
{ 
    private readonly IAmazonCloudWatch _amazonCloudWatch; 
    private readonly ILogger<CloudWatchWrapper> _logger; 
    /// <summary> 
    /// Constructor for the CloudWatch wrapper. 
    /// </summary> 
    /// <param name="amazonCloudWatch">The injected CloudWatch client.</param> 
    /// <param name="logger">The injected logger for the wrapper.</param> 
    public CloudWatchWrapper(IAmazonCloudWatch amazonCloudWatch, 
 ILogger<CloudWatchWrapper> logger) 
    { 
        _logger = logger; 
        _amazonCloudWatch = amazonCloudWatch; 
    } 
    /// <summary> 
    /// List metrics available, optionally within a namespace. 
    /// </summary> 
    /// <param name="metricNamespace">Optional CloudWatch namespace to use when 
 listing metrics.</param> 
    /// <param name="filter">Optional dimension filter.</param> 
    /// <param name="metricName">Optional metric name filter.</param> 
    /// <returns>The list of metrics.</returns> 
    public async Task<List<Metric>> ListMetrics(string? metricNamespace = null, 
 DimensionFilter? filter = null, string? metricName = null) 
    { 
        var results = new List<Metric>(); 
        var paginateMetrics = _amazonCloudWatch.Paginators.ListMetrics( 
            new ListMetricsRequest 
            { 
                Namespace = metricNamespace, 
                Dimensions = filter != null ? new List<DimensionFilter> 
 { filter } : null, 
                MetricName = metricName 
            }); 
        // Get the entire list using the paginator. 
        await foreach (var metric in paginateMetrics.Metrics) 
        { 
            results.Add(metric); 
        } 
        return results; 
    } 
    /// <summary> 
    /// Wrapper to get statistics for a specific CloudWatch metric. 
    /// </summary> 
    /// <param name="metricNamespace">The namespace of the metric.</param> 
    /// <param name="metricName">The name of the metric.</param> 
    /// <param name="statistics">The list of statistics to include.</param> 
    /// <param name="dimensions">The list of dimensions to include.</param> 
    /// <param name="days">The number of days in the past to include.</param> 
    /// <param name="period">The period for the data.</param> 
    /// <returns>A list of DataPoint objects for the statistics.</returns> 
1112Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    public async Task<List<Datapoint>> GetMetricStatistics(string metricNamespace, 
        string metricName, List<string> statistics, List<Dimension> dimensions, int 
 days, int period) 
    { 
        var metricStatistics = await _amazonCloudWatch.GetMetricStatisticsAsync( 
            new GetMetricStatisticsRequest() 
            { 
                Namespace = metricNamespace, 
                MetricName = metricName, 
                Dimensions = dimensions, 
                Statistics = statistics, 
                StartTimeUtc = DateTime.UtcNow.AddDays(-days), 
                EndTimeUtc = DateTime.UtcNow, 
                Period = period 
            }); 
        return metricStatistics.Datapoints; 
    } 
    /// <summary> 
    /// Wrapper to create or add to a dashboard with metrics. 
    /// </summary> 
    /// <param name="dashboardName">The name for the dashboard.</param> 
    /// <param name="dashboardBody">The metric data in JSON for the dashboard.</
param> 
    /// <returns>A list of validation messages for the dashboard.</returns> 
    public async Task<List<DashboardValidationMessage>> PutDashboard(string 
 dashboardName, 
        string dashboardBody) 
    { 
        // Updating a dashboard replaces all contents. 
        // Best practice is to include a text widget indicating this dashboard was 
 created programmatically. 
        var dashboardResponse = await _amazonCloudWatch.PutDashboardAsync( 
            new PutDashboardRequest() 
            { 
                DashboardName = dashboardName, 
                DashboardBody = dashboardBody 
            }); 
        return dashboardResponse.DashboardValidationMessages; 
    } 
    /// <summary> 
    /// Get information on a dashboard. 
    /// </summary> 
    /// <param name="dashboardName">The name of the dashboard.</param> 
    /// <returns>A JSON object with dashboard information.</returns> 
    public async Task<string> GetDashboard(string dashboardName) 
    { 
        var dashboardResponse = await _amazonCloudWatch.GetDashboardAsync( 
            new GetDashboardRequest() 
            { 
                DashboardName = dashboardName 
            }); 
        return dashboardResponse.DashboardBody; 
    } 
    /// <summary> 
    /// Get a list of dashboards. 
    /// </summary> 
    /// <returns>A list of DashboardEntry objects.</returns> 
    public async Task<List<DashboardEntry>> ListDashboards() 
1113Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    { 
        var results = new List<DashboardEntry>(); 
        var paginateDashboards = _amazonCloudWatch.Paginators.ListDashboards( 
            new ListDashboardsRequest()); 
        // Get the entire list using the paginator. 
        await foreach (var data in paginateDashboards.DashboardEntries) 
        { 
            results.Add(data); 
        } 
        return results; 
    } 
    /// <summary> 
    /// Wrapper to add metric data to a CloudWatch metric. 
    /// </summary> 
    /// <param name="metricNamespace">The namespace of the metric.</param> 
    /// <param name="metricData">A data object for the metric data.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> PutMetricData(string metricNamespace, 
        List<MetricDatum> metricData) 
    { 
        var putDataResponse = await _amazonCloudWatch.PutMetricDataAsync( 
            new PutMetricDataRequest() 
            { 
                MetricData = metricData, 
                Namespace = metricNamespace, 
            }); 
        return putDataResponse.HttpStatusCode == HttpStatusCode.OK; 
    } 
    /// <summary> 
    /// Get an image for a metric graphed over time. 
    /// </summary> 
    /// <param name="metricNamespace">The namespace of the metric.</param> 
    /// <param name="metric">The name of the metric.</param> 
    /// <param name="stat">The name of the stat to chart.</param> 
    /// <param name="period">The period to use for the chart.</param> 
    /// <returns>A memory stream for the chart image.</returns> 
    public async Task<MemoryStream> GetTimeSeriesMetricImage(string 
 metricNamespace, string metric, string stat, int period) 
    { 
        var metricImageWidget = new 
        { 
            title = "Example Metric Graph", 
            view = "timeSeries", 
            stacked = false, 
            period = period, 
            width = 1400, 
            height = 600, 
            metrics = new List<List<object>> 
                { new() { metricNamespace, metric, new { stat } } } 
        }; 
        var metricImageWidgetString = JsonSerializer.Serialize(metricImageWidget); 
        var imageResponse = await _amazonCloudWatch.GetMetricWidgetImageAsync( 
            new GetMetricWidgetImageRequest() 
            { 
                MetricWidget = metricImageWidgetString 
            }); 
        return imageResponse.MetricWidgetImage; 
    } 
    /// <summary> 
1114Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    /// Save a metric image to a file. 
    /// </summary> 
    /// <param name="memoryStream">The MemoryStream for the metric image.</param> 
    /// <param name="metricName">The name of the metric.</param> 
    /// <returns>The path to the file.</returns> 
    public string SaveMetricImage(MemoryStream memoryStream, string metricName) 
    { 
        var metricFileName = $"{metricName}_{DateTime.Now.Ticks}.png"; 
        using var sr = new StreamReader(memoryStream); 
        // Writes the memory stream to a file. 
        File.WriteAllBytes(metricFileName, memoryStream.ToArray()); 
        var filePath = Path.Join(AppDomain.CurrentDomain.BaseDirectory, 
            metricFileName); 
        return filePath; 
    } 
    /// <summary> 
    /// Get data for CloudWatch metrics. 
    /// </summary> 
    /// <param name="minutesOfData">The number of minutes of data to include.</
param> 
    /// <param name="useDescendingTime">True to return the data descending by 
 time.</param> 
    /// <param name="endDateUtc">The end date for the data, in UTC.</param> 
    /// <param name="maxDataPoints">The maximum data points to include.</param> 
    /// <param name="dataQueries">Optional data queries to include.</param> 
    /// <returns>A list of the requested metric data.</returns> 
    public async Task<List<MetricDataResult>> GetMetricData(int minutesOfData, bool 
 useDescendingTime, DateTime? endDateUtc = null, 
        int maxDataPoints = 0, List<MetricDataQuery>? dataQueries = null) 
    { 
        var metricData = new List<MetricDataResult>(); 
        // If no end time is provided, use the current time for the end time. 
        endDateUtc ??= DateTime.UtcNow; 
        var timeZoneOffset = 
 TimeZoneInfo.Local.GetUtcOffset(endDateUtc.Value.ToLocalTime()); 
        var startTimeUtc = endDateUtc.Value.AddMinutes(-minutesOfData); 
        // The timezone string should be in the format +0000, so use the timezone 
 offset to format it correctly. 
        var timeZoneString = $"{timeZoneOffset.Hours:D2}
{timeZoneOffset.Minutes:D2}"; 
        var paginatedMetricData = _amazonCloudWatch.Paginators.GetMetricData( 
            new GetMetricDataRequest() 
            { 
                StartTimeUtc = startTimeUtc, 
                EndTimeUtc = endDateUtc.Value, 
                LabelOptions = new LabelOptions { Timezone = timeZoneString }, 
                ScanBy = useDescendingTime ? ScanBy.TimestampDescending : 
 ScanBy.TimestampAscending, 
                MaxDatapoints = maxDataPoints, 
                MetricDataQueries = dataQueries, 
            }); 
        await foreach (var data in paginatedMetricData.MetricDataResults) 
        { 
            metricData.Add(data); 
        } 
        return metricData; 
    } 
    /// <summary> 
    /// Add a metric alarm to send an email when the metric passes a threshold. 
    /// </summary> 
    /// <param name="alarmDescription">A description of the alarm.</param> 
    /// <param name="alarmName">The name for the alarm.</param> 
    /// <param name="comparison">The type of comparison to use.</param> 
1115Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    /// <param name="metricName">The name of the metric for the alarm.</param> 
    /// <param name="metricNamespace">The namespace of the metric.</param> 
    /// <param name="threshold">The threshold value for the alarm.</param> 
    /// <param name="alarmActions">Optional actions to execute when in an alarm 
 state.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> PutMetricEmailAlarm(string alarmDescription, string 
 alarmName, ComparisonOperator comparison, 
        string metricName, string metricNamespace, double threshold, List<string> 
 alarmActions = null) 
    { 
        try 
        { 
            var putEmailAlarmResponse = await 
 _amazonCloudWatch.PutMetricAlarmAsync( 
                new PutMetricAlarmRequest() 
                { 
                    AlarmActions = alarmActions, 
                    AlarmDescription = alarmDescription, 
                    AlarmName = alarmName, 
                    ComparisonOperator = comparison, 
                    Threshold = threshold, 
                    Namespace = metricNamespace, 
                    MetricName = metricName, 
                    EvaluationPeriods = 1, 
                    Period = 10, 
                    Statistic = new Statistic("Maximum"), 
                    DatapointsToAlarm = 1, 
                    TreatMissingData = "ignore" 
                }); 
            return putEmailAlarmResponse.HttpStatusCode == HttpStatusCode.OK; 
        } 
        catch (LimitExceededException lex) 
        { 
            _logger.LogError(lex, $"Unable to add alarm {alarmName}. Alarm quota 
 has already been reached."); 
        } 
        return false; 
    } 
    /// <summary> 
    /// Add specific email actions to a list of action strings for a CloudWatch 
 alarm. 
    /// </summary> 
    /// <param name="accountId">The AccountId for the alarm.</param> 
    /// <param name="region">The region for the alarm.</param> 
    /// <param name="emailTopicName">An Amazon Simple Notification Service (SNS) 
 topic for the alarm email.</param> 
    /// <param name="alarmActions">Optional list of existing alarm actions to 
 append to.</param> 
    /// <returns>A list of string actions for an alarm.</returns> 
    public List<string> AddEmailAlarmAction(string accountId, string region, 
        string emailTopicName, List<string>? alarmActions = null) 
    { 
        alarmActions ??= new List<string>(); 
        var snsAlarmAction = $"arn:aws:sns:{region}:{accountId}:{emailTopicName}"; 
        alarmActions.Add(snsAlarmAction); 
        return alarmActions; 
    } 
    /// <summary> 
    /// Describe the current alarms, optionally filtered by state. 
    /// </summary> 
    /// <param name="stateValue">Optional filter for alarm state.</param> 
    /// <returns>The list of alarm data.</returns> 
1116Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    public async Task<List<MetricAlarm>> DescribeAlarms(StateValue? stateValue = 
 null) 
    { 
        List<MetricAlarm> alarms = new List<MetricAlarm>(); 
        var paginatedDescribeAlarms = _amazonCloudWatch.Paginators.DescribeAlarms( 
            new DescribeAlarmsRequest() 
            { 
                StateValue = stateValue 
            }); 
        await foreach (var data in paginatedDescribeAlarms.MetricAlarms) 
        { 
            alarms.Add(data); 
        } 
        return alarms; 
    } 
    /// <summary> 
    /// Describe the current alarms for a specific metric. 
    /// </summary> 
    /// <param name="metricNamespace">The namespace of the metric.</param> 
    /// <param name="metricName">The name of the metric.</param> 
    /// <returns>The list of alarm data.</returns> 
    public async Task<List<MetricAlarm>> DescribeAlarmsForMetric(string 
 metricNamespace, string metricName) 
    { 
        var alarmsResult = await _amazonCloudWatch.DescribeAlarmsForMetricAsync( 
            new DescribeAlarmsForMetricRequest() 
            { 
                Namespace = metricNamespace, 
                MetricName = metricName 
            }); 
        return alarmsResult.MetricAlarms; 
    } 
    /// <summary> 
    /// Describe the history of an alarm for a number of days in the past. 
    /// </summary> 
    /// <param name="alarmName">The name of the alarm.</param> 
    /// <param name="historyDays">The number of days in the past.</param> 
    /// <returns>The list of alarm history data.</returns> 
    public async Task<List<AlarmHistoryItem>> DescribeAlarmHistory(string 
 alarmName, int historyDays) 
    { 
        List<AlarmHistoryItem> alarmHistory = new List<AlarmHistoryItem>(); 
        var paginatedAlarmHistory = 
 _amazonCloudWatch.Paginators.DescribeAlarmHistory( 
            new DescribeAlarmHistoryRequest() 
            { 
                AlarmName = alarmName, 
                EndDateUtc = DateTime.UtcNow, 
                HistoryItemType = HistoryItemType.StateUpdate, 
                StartDateUtc = DateTime.UtcNow.AddDays(-historyDays) 
            }); 
        await foreach (var data in paginatedAlarmHistory.AlarmHistoryItems) 
        { 
            alarmHistory.Add(data); 
        } 
        return alarmHistory; 
    } 
    /// <summary> 
    /// Delete a list of alarms from CloudWatch. 
    /// </summary> 
1117Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    /// <param name="alarmNames">A list of names of alarms to delete.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> DeleteAlarms(List<string> alarmNames) 
    { 
        var deleteAlarmsResult = await _amazonCloudWatch.DeleteAlarmsAsync( 
            new DeleteAlarmsRequest() 
            { 
                AlarmNames = alarmNames 
            }); 
        return deleteAlarmsResult.HttpStatusCode == HttpStatusCode.OK; 
    } 
    /// <summary> 
    /// Disable the actions for a list of alarms from CloudWatch. 
    /// </summary> 
    /// <param name="alarmNames">A list of names of alarms.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> DisableAlarmActions(List<string> alarmNames) 
    { 
        var disableAlarmActionsResult = await 
 _amazonCloudWatch.DisableAlarmActionsAsync( 
            new DisableAlarmActionsRequest() 
            { 
                AlarmNames = alarmNames 
            }); 
        return disableAlarmActionsResult.HttpStatusCode == HttpStatusCode.OK; 
    } 
    /// <summary> 
    /// Enable the actions for a list of alarms from CloudWatch. 
    /// </summary> 
    /// <param name="alarmNames">A list of names of alarms.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> EnableAlarmActions(List<string> alarmNames) 
    { 
        var enableAlarmActionsResult = await 
 _amazonCloudWatch.EnableAlarmActionsAsync( 
            new EnableAlarmActionsRequest() 
            { 
                AlarmNames = alarmNames 
            }); 
        return enableAlarmActionsResult.HttpStatusCode == HttpStatusCode.OK; 
    } 
    /// <summary> 
    /// Add an anomaly detector for a single metric. 
    /// </summary> 
    /// <param name="anomalyDetector">A single metric anomaly detector.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> PutAnomalyDetector(SingleMetricAnomalyDetector 
 anomalyDetector) 
    { 
        var putAlarmDetectorResult = await 
 _amazonCloudWatch.PutAnomalyDetectorAsync( 
            new PutAnomalyDetectorRequest() 
            { 
                SingleMetricAnomalyDetector = anomalyDetector 
            }); 
        return putAlarmDetectorResult.HttpStatusCode == HttpStatusCode.OK; 
    } 
    /// <summary> 
1118Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    /// Describe anomaly detectors for a metric and namespace. 
    /// </summary> 
    /// <param name="metricNamespace">The namespace of the metric.</param> 
    /// <param name="metricName">The metric of the anomaly detectors.</param> 
    /// <returns>The list of detectors.</returns> 
    public async Task<List<AnomalyDetector>> DescribeAnomalyDetectors(string 
 metricNamespace, string metricName) 
    { 
        List<AnomalyDetector> detectors = new List<AnomalyDetector>(); 
        var paginatedDescribeAnomalyDetectors = 
 _amazonCloudWatch.Paginators.DescribeAnomalyDetectors( 
            new DescribeAnomalyDetectorsRequest() 
            { 
                MetricName = metricName, 
                Namespace = metricNamespace 
            }); 
        await foreach (var data in 
 paginatedDescribeAnomalyDetectors.AnomalyDetectors) 
        { 
            detectors.Add(data); 
        } 
        return detectors; 
    } 
    /// <summary> 
    /// Delete a single metric anomaly detector. 
    /// </summary> 
    /// <param name="anomalyDetector">The anomaly detector to delete.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> DeleteAnomalyDetector(SingleMetricAnomalyDetector 
 anomalyDetector) 
    { 
        var deleteAnomalyDetectorResponse = await 
 _amazonCloudWatch.DeleteAnomalyDetectorAsync( 
            new DeleteAnomalyDetectorRequest() 
            { 
                SingleMetricAnomalyDetector = anomalyDetector 
            }); 
        return deleteAnomalyDetectorResponse.HttpStatusCode == HttpStatusCode.OK; 
    } 
    /// <summary> 
    /// Delete a list of CloudWatch dashboards. 
    /// </summary> 
    /// <param name="dashboardNames">List of dashboard names to delete.</param> 
    /// <returns>True if successful.</returns> 
    public async Task<bool> DeleteDashboards(List<string> dashboardNames) 
    { 
        var deleteDashboardsResponse = await 
 _amazonCloudWatch.DeleteDashboardsAsync( 
            new DeleteDashboardsRequest() 
            { 
                DashboardNames = dashboardNames 
            }); 
        return deleteDashboardsResponse.HttpStatusCode == HttpStatusCode.OK; 
    }
}
•For API details, see the following topics in AWS SDK for .NET API Reference.
•DeleteAlarms
1119Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
•DeleteAnomalyDetector
•DeleteDashboards
•DescribeAlarmHistory
•DescribeAlarms
•DescribeAlarmsForMetric
•DescribeAnomalyDetectors
•GetMetricData
•GetMetricStatistics
•GetMetricWidgetImage
•ListMetrics
•PutAnomalyDetector
•PutDashboard
•PutMetricAlarm
•PutMetricData
Java
SDK for Java 2.x
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
/** 
 * Before running this Java V2 code example, set up your development environment, 
 including your credentials. 
 * 
 * For more information, see the following documentation topic: 
 * 
 * https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/get-started.html 
 * 
 * To enable billing metrics and statistics for this example, make sure billing 
 alerts are enabled for your account: 
 * https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/
monitor_estimated_charges_with_cloudwatch.html#turning_on_billing_metrics 
 * 
 * This Java code example performs the following tasks: 
 * 
 * 1. List available namespaces from Amazon CloudWatch. 
 * 2. List available metrics within the selected Namespace. 
 * 3. Get statistics for the selected metric over the last day. 
 * 4. Get CloudWatch estimated billing for the last week. 
 * 5. Create a new CloudWatch dashboard with metrics. 
 * 6. List dashboards using a paginator. 
 * 7. Create a new custom metric by adding data for it. 
 * 8. Add the custom metric to the dashboard. 
 * 9. Create an alarm for the custom metric. 
 * 10. Describe current alarms. 
 * 11. Get current data for the new custom metric. 
 * 12. Push data into the custom metric to trigger the alarm. 
 * 13. Check the alarm state using the action DescribeAlarmsForMetric. 
 * 14. Get alarm history for the new alarm. 
 * 15. Add an anomaly detector for the custom metric. 
 * 16. Describe current anomaly detectors. 
 * 17. Get a metric image for the custom metric. 
 * 18. Clean up the Amazon CloudWatch resources. 
 */
1120Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
public class CloudWatchScenario { 
    public static final String DASHES = new String(new char[80]).replace("\0", 
 "-"); 
    public static void main(String[] args) throws IOException { 
        final String usage = "\n" + 
            "Usage:\n" + 
            "  <myDate> <costDateWeek> <dashboardName> <dashboardJson> 
 <dashboardAdd> <settings> <metricImage>  \n\n" + 
            "Where:\n" + 
            "  myDate - The start date to use to get metric statistics. (For 
 example, 2023-01-11T18:35:24.00Z.) \n" + 
            "  costDateWeek - The start date to use to get AWS/Billinget 
 statistics. (For example, 2023-01-11T18:35:24.00Z.) \n" + 
            "  dashboardName - The name of the dashboard to create. \n" + 
            "  dashboardJson - The location of a JSON file to use to create a 
 dashboard. (See Readme file.) \n" + 
            "  dashboardAdd - The location of a JSON file to use to update a 
 dashboard. (See Readme file.) \n" + 
            "  settings - The location of a JSON file from which various values are 
 read. (See Readme file.) \n" + 
            "  metricImage - The location of a BMP file that is used to create a 
 graph. \n" ; 
       if (args.length != 7) { 
           System.out.println(usage); 
           System.exit(1); 
       } 
        Region region = Region.US_EAST_1; 
        String myDate = args[0]; 
        String costDateWeek = args[1]; 
        String dashboardName = args[2]; 
        String dashboardJson = args[3]; 
        String dashboardAdd = args[4]; 
        String settings = args[5]; 
        String metricImage = args[6]; 
        Double dataPoint = Double.parseDouble("10.0"); 
        Scanner sc = new Scanner(System.in); 
        CloudWatchClient cw = CloudWatchClient.builder() 
            .region(region) 
            .credentialsProvider(ProfileCredentialsProvider.create()) 
            .build(); 
        System.out.println(DASHES); 
        System.out.println("Welcome to the Amazon CloudWatch example scenario."); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("1. List at least five available unique namespaces from 
 Amazon CloudWatch. Select one from the list."); 
        ArrayList<String> list = listNameSpaces(cw); 
        for (int z=0; z<5; z++) { 
            int index = z+1; 
            System.out.println("    " +index +". " +list.get(z)); 
        } 
        String selectedNamespace = ""; 
        String selectedMetrics = ""; 
        int num = Integer.parseInt(sc.nextLine()); 
        if (1 <= num && num <= 5){ 
            selectedNamespace = list.get(num-1); 
        } else { 
            System.out.println("You did not select a valid option."); 
1121Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
            System.exit(1); 
        } 
        System.out.println("You selected "+selectedNamespace); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("2. List available metrics within the selected namespace 
 and select one from the list."); 
        ArrayList<String> metList = listMets(cw, selectedNamespace); 
        for (int z=0; z<5; z++) { 
            int index = z+1; 
            System.out.println("    " +index +". " +metList.get(z)); 
        } 
        num = Integer.parseInt(sc.nextLine()); 
        if (1 <= num && num <= 5){ 
            selectedMetrics = metList.get(num-1); 
        } else { 
            System.out.println("You did not select a valid option."); 
            System.exit(1); 
        } 
        System.out.println("You selected "+selectedMetrics); 
        Dimension myDimension = getSpecificMet( cw, selectedNamespace); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("3. Get statistics for the selected metric over the last 
 day."); 
        String metricOption=""; 
        ArrayList<String> statTypes = new ArrayList<>(); 
        statTypes.add("SampleCount"); 
        statTypes.add("Average"); 
        statTypes.add("Sum"); 
        statTypes.add("Minimum"); 
        statTypes.add("Maximum"); 
        for (int t=0; t<5; t++){ 
            System.out.println("    " +(t+1) +". "+statTypes.get(t)); 
        } 
        System.out.println("Select a metric statistic by entering a number from the 
 preceding list:"); 
        num = Integer.parseInt(sc.nextLine()); 
        if (1 <= num && num <= 5){ 
            metricOption = statTypes.get(num-1); 
        } else { 
            System.out.println("You did not select a valid option."); 
            System.exit(1); 
        } 
        System.out.println("You selected "+metricOption); 
        getAndDisplayMetricStatistics(cw, selectedNamespace, selectedMetrics, 
 metricOption, myDate, myDimension); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("4. Get CloudWatch estimated billing for the last 
 week."); 
        getMetricStatistics(cw, costDateWeek); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("5. Create a new CloudWatch dashboard with metrics."); 
        createDashboardWithMetrics(cw, dashboardName, dashboardJson); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("6. List dashboards using a paginator."); 
        listDashboards(cw); 
1122Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("7. Create a new custom metric by adding data to it."); 
        createNewCustomMetric(cw, dataPoint); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("8. Add an additional metric to the dashboard."); 
        addMetricToDashboard(cw, dashboardAdd, dashboardName); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("9. Create an alarm for the custom metric."); 
        String alarmName = createAlarm(cw, settings); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("10. Describe ten current alarms."); 
        describeAlarms(cw); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("11. Get current data for new custom metric."); 
        getCustomMetricData(cw,settings); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("12. Push data into the custom metric to trigger the 
 alarm."); 
        addMetricDataForAlarm(cw, settings) ; 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("13. Check the alarm state using the action 
 DescribeAlarmsForMetric."); 
        checkForMetricAlarm(cw, settings); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("14. Get alarm history for the new alarm."); 
        getAlarmHistory(cw, settings, myDate); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("15. Add an anomaly detector for the custom metric."); 
        addAnomalyDetector(cw, settings); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("16. Describe current anomaly detectors."); 
        describeAnomalyDetectors(cw, settings); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("17. Get a metric image for the custom metric."); 
        getAndOpenMetricImage(cw, metricImage); 
        System.out.println(DASHES); 
        System.out.println(DASHES); 
        System.out.println("18. Clean up the Amazon CloudWatch resources."); 
        deleteDashboard(cw, dashboardName); 
        deleteCWAlarm(cw, alarmName); 
        deleteAnomalyDetector(cw, settings); 
        System.out.println(DASHES); 
1123Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
        System.out.println(DASHES); 
        System.out.println("The Amazon CloudWatch example scenario is complete."); 
        System.out.println(DASHES); 
        cw.close(); 
    } 
    public static void deleteAnomalyDetector(CloudWatchClient cw, String fileName) 
 { 
        try { 
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText(); 
            String customMetricName = 
 rootNode.findValue("customMetricName").asText(); 
            SingleMetricAnomalyDetector singleMetricAnomalyDetector = 
 SingleMetricAnomalyDetector.builder() 
                .metricName(customMetricName) 
                .namespace(customMetricNamespace) 
                .stat("Maximum") 
                .build(); 
            DeleteAnomalyDetectorRequest request = 
 DeleteAnomalyDetectorRequest.builder() 
                .singleMetricAnomalyDetector(singleMetricAnomalyDetector) 
                .build(); 
            cw.deleteAnomalyDetector(request); 
            System.out.println("Successfully deleted the Anomaly Detector."); 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } catch (IOException e) { 
            e.printStackTrace(); 
        } 
    } 
    public static void deleteCWAlarm(CloudWatchClient cw, String alarmName) { 
        try { 
            DeleteAlarmsRequest request = DeleteAlarmsRequest.builder() 
                .alarmNames(alarmName) 
                .build(); 
            cw.deleteAlarms(request); 
            System.out.println("Successfully deleted alarm " +alarmName); 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } 
    } 
    public static void deleteDashboard(CloudWatchClient cw, String dashboardName) { 
        try { 
            DeleteDashboardsRequest dashboardsRequest = 
 DeleteDashboardsRequest.builder() 
                .dashboardNames(dashboardName) 
                .build(); 
            cw.deleteDashboards(dashboardsRequest); 
            System.out.println(dashboardName + " was successfully deleted."); 
        } catch (CloudWatchException e) { 
1124Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    } 
    public static void getAndOpenMetricImage(CloudWatchClient cw, String fileName) 
 { 
        System.out.println("Getting Image data for custom metric."); 
        try { 
              String myJSON = "{\n" + 
                "  \"title\": \"Example Metric Graph\",\n" + 
                "  \"view\": \"timeSeries\",\n" + 
                "  \"stacked \": false,\n" + 
                "  \"period\": 10,\n" + 
                "  \"width\": 1400,\n" + 
                "  \"height\": 600,\n" + 
                "  \"metrics\": [\n" + 
                "    [\n" + 
                "      \"AWS/Billing\",\n" + 
                "      \"EstimatedCharges\",\n" + 
                "      \"Currency\",\n" + 
                "      \"USD\"\n" + 
                "    ]\n" + 
                "  ]\n" + 
                "}"; 
            GetMetricWidgetImageRequest imageRequest = 
 GetMetricWidgetImageRequest.builder() 
                .metricWidget(myJSON) 
                .build(); 
            GetMetricWidgetImageResponse response = 
 cw.getMetricWidgetImage(imageRequest); 
            SdkBytes sdkBytes = response.metricWidgetImage(); 
            byte[] bytes = sdkBytes.asByteArray(); 
            File outputFile = new File(fileName); 
            try (FileOutputStream outputStream = new FileOutputStream(outputFile)) 
 { 
                outputStream.write(bytes); 
            } 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    } 
    public static void describeAnomalyDetectors(CloudWatchClient cw, String 
 fileName) { 
        try { 
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText(); 
            String customMetricName = 
 rootNode.findValue("customMetricName").asText(); 
            DescribeAnomalyDetectorsRequest detectorsRequest = 
 DescribeAnomalyDetectorsRequest.builder() 
                .maxResults(10) 
                .metricName(customMetricName) 
                .namespace(customMetricNamespace) 
                .build(); 
1125Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
            DescribeAnomalyDetectorsResponse response = 
 cw.describeAnomalyDetectors(detectorsRequest) ; 
            List<AnomalyDetector> anomalyDetectorList = 
 response.anomalyDetectors(); 
            for (AnomalyDetector detector: anomalyDetectorList) { 
                System.out.println("Metric name: 
 "+detector.singleMetricAnomalyDetector().metricName()); 
                System.out.println("State: "+detector.stateValue()); 
            } 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    } 
    public static void addAnomalyDetector(CloudWatchClient cw, String fileName) { 
        try { 
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText(); 
            String customMetricName = 
 rootNode.findValue("customMetricName").asText(); 
            SingleMetricAnomalyDetector singleMetricAnomalyDetector = 
 SingleMetricAnomalyDetector.builder() 
                .metricName(customMetricName) 
                .namespace(customMetricNamespace) 
                .stat("Maximum") 
                .build(); 
            PutAnomalyDetectorRequest anomalyDetectorRequest = 
 PutAnomalyDetectorRequest.builder() 
                .singleMetricAnomalyDetector(singleMetricAnomalyDetector) 
                .build(); 
            cw.putAnomalyDetector(anomalyDetectorRequest); 
            System.out.println("Added anomaly detector for metric 
 "+customMetricName+"."); 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    } 
    public static void getAlarmHistory(CloudWatchClient cw, String fileName, String 
 date) { 
        try { 
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String alarmName = rootNode.findValue("exampleAlarmName").asText(); 
            Instant start = Instant.parse(date); 
            Instant endDate = Instant.now(); 
            DescribeAlarmHistoryRequest historyRequest = 
 DescribeAlarmHistoryRequest.builder() 
                .startDate(start) 
                .endDate(endDate) 
                .alarmName(alarmName) 
                .historyItemType(HistoryItemType.ACTION) 
1126Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
                .build(); 
            DescribeAlarmHistoryResponse response = 
 cw.describeAlarmHistory(historyRequest); 
            List<AlarmHistoryItem>historyItems = response.alarmHistoryItems(); 
            if (historyItems.isEmpty()) { 
                System.out.println("No alarm history data found for "+alarmName 
 +"."); 
            } else { 
                for (AlarmHistoryItem item: historyItems) { 
                    System.out.println("History summary: "+item.historySummary()); 
                    System.out.println("Time stamp: "+item.timestamp()); 
                } 
            } 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    } 
    public static void checkForMetricAlarm(CloudWatchClient cw, String fileName) { 
        try { 
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText(); 
            String customMetricName = 
 rootNode.findValue("customMetricName").asText(); 
            boolean hasAlarm = false; 
            int retries = 10; 
            DescribeAlarmsForMetricRequest metricRequest = 
 DescribeAlarmsForMetricRequest.builder() 
                .metricName(customMetricName) 
                .namespace(customMetricNamespace) 
                .build(); 
            while (!hasAlarm && retries > 0) { 
                DescribeAlarmsForMetricResponse response = 
 cw.describeAlarmsForMetric(metricRequest); 
                hasAlarm = response.hasMetricAlarms(); 
                retries--; 
                Thread.sleep(20000); 
                System.out.println("."); 
            } 
            if (!hasAlarm) 
                System.out.println("No Alarm state found for "+ customMetricName +" 
 after 10 retries."); 
            else 
               System.out.println("Alarm state found for "+ customMetricName +"."); 
        } catch (CloudWatchException | IOException | InterruptedException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    } 
    public static void addMetricDataForAlarm(CloudWatchClient cw, String fileName) 
 { 
        try { 
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
1127Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText(); 
            String customMetricName = 
 rootNode.findValue("customMetricName").asText(); 
            // Set an Instant object. 
            String time = 
 ZonedDateTime.now( ZoneOffset.UTC ).format( DateTimeFormatter.ISO_INSTANT ); 
            Instant instant = Instant.parse(time); 
            MetricDatum datum = MetricDatum.builder() 
                .metricName(customMetricName) 
                .unit(StandardUnit.NONE) 
                .value(1001.00) 
                .timestamp(instant) 
                .build(); 
            MetricDatum datum2 = MetricDatum.builder() 
                .metricName(customMetricName) 
                .unit(StandardUnit.NONE) 
                .value(1002.00) 
                .timestamp(instant) 
                .build(); 
            List<MetricDatum> metricDataList = new ArrayList<>(); 
            metricDataList.add(datum); 
            metricDataList.add(datum2); 
            PutMetricDataRequest request = PutMetricDataRequest.builder() 
                .namespace(customMetricNamespace) 
                .metricData(metricDataList) 
                .build(); 
            cw.putMetricData(request); 
            System.out.println("Added metric values for for metric " 
 +customMetricName); 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    } 
    public static void getCustomMetricData(CloudWatchClient cw, String fileName) { 
        try { 
            // Read values from the JSON file. 
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText(); 
            String customMetricName = 
 rootNode.findValue("customMetricName").asText(); 
            // Set the date. 
            Instant nowDate = Instant.now(); 
            long hours = 1; 
            long minutes = 30; 
            Instant date2 = nowDate.plus(hours, ChronoUnit.HOURS).plus(minutes, 
                ChronoUnit.MINUTES); 
            Metric met = Metric.builder() 
                .metricName(customMetricName) 
1128Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
                .namespace(customMetricNamespace) 
                .build(); 
            MetricStat metStat = MetricStat.builder() 
                .stat("Maximum") 
                .period(1) 
                .metric(met) 
                .build(); 
            MetricDataQuery dataQUery = MetricDataQuery.builder() 
                .metricStat(metStat) 
                .id("foo2") 
                .returnData(true) 
                .build(); 
            List<MetricDataQuery> dq = new ArrayList<>(); 
            dq.add(dataQUery); 
            GetMetricDataRequest getMetReq = GetMetricDataRequest.builder() 
                .maxDatapoints(10) 
                .scanBy(ScanBy.TIMESTAMP_DESCENDING) 
                .startTime(nowDate) 
                .endTime(date2) 
                .metricDataQueries(dq) 
                .build(); 
            GetMetricDataResponse response = cw.getMetricData(getMetReq); 
            List<MetricDataResult> data = response.metricDataResults(); 
            for (MetricDataResult item : data) { 
                System.out.println("The label is " + item.label()); 
                System.out.println("The status code is " + 
 item.statusCode().toString()); 
            } 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    } 
    public static void describeAlarms(CloudWatchClient cw) { 
        try { 
            List<AlarmType> typeList = new ArrayList<>(); 
            typeList.add(AlarmType.METRIC_ALARM); 
            DescribeAlarmsRequest alarmsRequest = DescribeAlarmsRequest.builder() 
                .alarmTypes(typeList) 
                .maxRecords(10) 
                .build(); 
            DescribeAlarmsResponse response = cw.describeAlarms(alarmsRequest); 
            List<MetricAlarm> alarmList = response.metricAlarms(); 
            for (MetricAlarm alarm: alarmList) { 
                System.out.println("Alarm name: " + alarm.alarmName()); 
                System.out.println("Alarm description: " + 
 alarm.alarmDescription()); 
            } 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } 
    } 
    public static String createAlarm(CloudWatchClient cw, String fileName) { 
        try { 
            // Read values from the JSON file. 
1129Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
            JsonParser parser = new JsonFactory().createParser(new File(fileName)); 
            com.fasterxml.jackson.databind.JsonNode rootNode = new 
 ObjectMapper().readTree(parser); 
            String customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText(); 
            String customMetricName = 
 rootNode.findValue("customMetricName").asText(); 
            String alarmName = rootNode.findValue("exampleAlarmName").asText(); 
            String emailTopic = rootNode.findValue("emailTopic").asText(); 
            String accountId = rootNode.findValue("accountId").asText(); 
            String region = rootNode.findValue("region").asText(); 
            // Create a List for alarm actions. 
            List<String> alarmActions = new ArrayList<>(); 
            alarmActions.add("arn:aws:sns:"+region+":"+accountId+":"+emailTopic); 
            PutMetricAlarmRequest alarmRequest = PutMetricAlarmRequest.builder() 
                .alarmActions(alarmActions) 
                .alarmDescription("Example metric alarm") 
                .alarmName(alarmName) 
                
 .comparisonOperator(ComparisonOperator.GREATER_THAN_OR_EQUAL_TO_THRESHOLD) 
                .threshold(100.00) 
                .metricName(customMetricName) 
                .namespace(customMetricNamespace) 
                .evaluationPeriods(1) 
                .period(10) 
                .statistic("Maximum") 
                .datapointsToAlarm(1) 
                .treatMissingData("ignore") 
                .build(); 
            cw.putMetricAlarm(alarmRequest); 
            System.out.println(alarmName +" was successfully created!"); 
            return alarmName; 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
        return ""; 
    } 
    public static void addMetricToDashboard(CloudWatchClient cw, String fileName, 
 String dashboardName) { 
        try { 
            PutDashboardRequest dashboardRequest = PutDashboardRequest.builder() 
                .dashboardName(dashboardName) 
                .dashboardBody(readFileAsString(fileName)) 
                .build(); 
            cw.putDashboard(dashboardRequest); 
            System.out.println(dashboardName +" was successfully updated."); 
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    } 
    public static void createNewCustomMetric(CloudWatchClient cw, Double dataPoint) 
 { 
        try { 
            Dimension dimension = Dimension.builder() 
                .name("UNIQUE_PAGES") 
                .value("URLS") 
                .build(); 
1130Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
            // Set an Instant object. 
            String time = 
 ZonedDateTime.now( ZoneOffset.UTC ).format( DateTimeFormatter.ISO_INSTANT ); 
            Instant instant = Instant.parse(time); 
            MetricDatum datum = MetricDatum.builder() 
                .metricName("PAGES_VISITED") 
                .unit(StandardUnit.NONE) 
                .value(dataPoint) 
                .timestamp(instant) 
                .dimensions(dimension) 
                .build(); 
            PutMetricDataRequest request = PutMetricDataRequest.builder() 
                .namespace("SITE/TRAFFIC") 
                .metricData(datum) 
                .build(); 
            cw.putMetricData(request); 
            System.out.println("Added metric values for for metric PAGES_VISITED"); 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } 
    } 
    public static void listDashboards(CloudWatchClient cw) { 
        try { 
            ListDashboardsIterable listRes = cw.listDashboardsPaginator(); 
            listRes.stream() 
                .flatMap(r -> r.dashboardEntries().stream()) 
                .forEach(entry ->{ 
                    System.out.println("Dashboard name is: " + 
 entry.dashboardName()); 
                    System.out.println("Dashboard ARN is: " + 
 entry.dashboardArn()); 
                }); 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } 
    } 
    public static void createDashboardWithMetrics(CloudWatchClient cw, String 
 dashboardName, String fileName) { 
        try { 
            PutDashboardRequest dashboardRequest = PutDashboardRequest.builder() 
                .dashboardName(dashboardName) 
                .dashboardBody(readFileAsString(fileName)) 
                .build(); 
            PutDashboardResponse response = cw.putDashboard(dashboardRequest); 
            System.out.println(dashboardName +" was successfully created."); 
            List<DashboardValidationMessage> messages = 
 response.dashboardValidationMessages(); 
            if (messages.isEmpty()) { 
                System.out.println("There are no messages in the new Dashboard"); 
            } else { 
                for (DashboardValidationMessage message : messages) { 
                    System.out.println("Message is: " + message.message()); 
                } 
            } 
1131Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
        } catch (CloudWatchException | IOException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    } 
    public static String readFileAsString(String file) throws IOException { 
        return new String(Files.readAllBytes(Paths.get(file))); 
    } 
    public static void getMetricStatistics(CloudWatchClient cw, String 
 costDateWeek) { 
        try { 
            Instant start = Instant.parse(costDateWeek); 
            Instant endDate = Instant.now(); 
            Dimension dimension = Dimension.builder() 
                .name("Currency") 
                .value("USD") 
                .build(); 
            List<Dimension> dimensionList = new ArrayList<>(); 
            dimensionList.add(dimension); 
            GetMetricStatisticsRequest statisticsRequest = 
 GetMetricStatisticsRequest.builder() 
                .metricName("EstimatedCharges") 
                .namespace("AWS/Billing") 
                .dimensions(dimensionList) 
                .statistics(Statistic.MAXIMUM) 
                .startTime(start) 
                .endTime(endDate) 
                .period(86400) 
                .build(); 
            GetMetricStatisticsResponse response = 
 cw.getMetricStatistics(statisticsRequest); 
            List<Datapoint> data = response.datapoints(); 
            if (!data.isEmpty()) { 
                for (Datapoint datapoint: data) { 
                    System.out.println("Timestamp: " + datapoint.timestamp() + " 
 Maximum value: " + datapoint.maximum()); 
                } 
            } else { 
                System.out.println("The returned data list is empty"); 
            } 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } 
    } 
    public static void getAndDisplayMetricStatistics( CloudWatchClient cw, String 
 nameSpace, String metVal, String metricOption, String date, Dimension myDimension) 
 { 
        try { 
            Instant start = Instant.parse(date); 
            Instant endDate = Instant.now(); 
            GetMetricStatisticsRequest statisticsRequest = 
 GetMetricStatisticsRequest.builder() 
                .endTime(endDate) 
                .startTime(start) 
                .dimensions(myDimension) 
                .metricName(metVal) 
                .namespace(nameSpace) 
                .period(86400) 
1132Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
                .statistics(Statistic.fromValue(metricOption)) 
                .build(); 
            GetMetricStatisticsResponse response = 
 cw.getMetricStatistics(statisticsRequest); 
            List<Datapoint> data = response.datapoints(); 
            if (!data.isEmpty()) { 
                for (Datapoint datapoint: data) { 
                    System.out.println("Timestamp: " + datapoint.timestamp() + " 
 Maximum value: " + datapoint.maximum()); 
                } 
            } else { 
                System.out.println("The returned data list is empty"); 
            } 
        } catch (CloudWatchException e) { 
            System.err.println(e.getMessage()); 
            System.exit(1); 
        } 
    } 
    public static Dimension getSpecificMet( CloudWatchClient cw, String namespace) 
 { 
        try { 
            ListMetricsRequest request = ListMetricsRequest.builder() 
                .namespace(namespace) 
                .build(); 
            ListMetricsResponse response = cw.listMetrics(request); 
            List<Metric> myList = response.metrics(); 
            Metric metric = myList.get(0); 
            return metric.dimensions().get(0); 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } 
        return null; 
    } 
    public static ArrayList<String> listMets( CloudWatchClient cw, String 
 namespace) { 
        try { 
            ArrayList<String> metList = new ArrayList<>(); 
            ListMetricsRequest request = ListMetricsRequest.builder() 
                .namespace(namespace) 
                .build(); 
            ListMetricsIterable listRes = cw.listMetricsPaginator(request); 
            listRes.stream() 
                .flatMap(r -> r.metrics().stream()) 
                .forEach(metrics -> metList.add(metrics.metricName())); 
            return metList; 
        } catch (CloudWatchException e) { 
            System.err.println(e.awsErrorDetails().errorMessage()); 
            System.exit(1); 
        } 
        return null; 
    } 
   public static ArrayList<String> listNameSpaces(CloudWatchClient cw) { 
       try { 
           ArrayList<String> nameSpaceList = new ArrayList<>(); 
           ListMetricsRequest request = ListMetricsRequest.builder() 
1133Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
               .build(); 
           ListMetricsIterable listRes = cw.listMetricsPaginator(request); 
           listRes.stream() 
               .flatMap(r -> r.metrics().stream()) 
               .forEach(metrics -> { 
                   String data = metrics.namespace(); 
                   if(!nameSpaceList.contains(data)) { 
                       nameSpaceList.add(data); 
                   } 
               }) ; 
           return nameSpaceList; 
           } catch (CloudWatchException e) { 
               System.err.println(e.awsErrorDetails().errorMessage()); 
               System.exit(1); 
           } 
       return null; 
   }
}
•For API details, see the following topics in AWS SDK for Java 2.x API Reference.
•DeleteAlarms
•DeleteAnomalyDetector
•DeleteDashboards
•DescribeAlarmHistory
•DescribeAlarms
•DescribeAlarmsForMetric
•DescribeAnomalyDetectors
•GetMetricData
•GetMetricStatistics
•GetMetricWidgetImage
•ListMetrics
•PutAnomalyDetector
•PutDashboard
•PutMetricAlarm
•PutMetricData
Kotlin
SDK for Kotlin
Note
This is prerelease documentation for a feature in preview release. It is subject to 
change.
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
/** 
 Before running this Kotlin code example, set up your development environment, 
 including your credentials. 
 For more information, see the following documentation topic: 
1134Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
 https://docs.aws.amazon.com/sdk-for-kotlin/latest/developer-guide/setup.html 
 To enable billing metrics and statistics for this example, make sure billing 
 alerts are enabled for your account: 
 https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/
monitor_estimated_charges_with_cloudwatch.html#turning_on_billing_metrics 
 This Kotlin code example performs the following tasks: 
 1. List available namespaces from Amazon CloudWatch. Select a namespace from the 
 list. 
 2. List available metrics within the selected namespace. 
 3. Get statistics for the selected metric over the last day. 
 4. Get CloudWatch estimated billing for the last week. 
 5. Create a new CloudWatch dashboard with metrics. 
 6. List dashboards using a paginator. 
 7. Create a new custom metric by adding data for it. 
 8. Add the custom metric to the dashboard. 
 9. Create an alarm for the custom metric. 
 10. Describe current alarms. 
 11. Get current data for the new custom metric. 
 12. Push data into the custom metric to trigger the alarm. 
 13. Check the alarm state using the action DescribeAlarmsForMetric. 
 14. Get alarm history for the new alarm. 
 15. Add an anomaly detector for the custom metric. 
 16. Describe current anomaly detectors. 
 17. Get a metric image for the custom metric. 
 18. Clean up the Amazon CloudWatch resources. 
 */
val DASHES: String? = String(CharArray(80)).replace("\u0000", "-")
suspend fun main(args: Array<String>) { 
    val usage = """ 
        Usage: 
            <myDate> <costDateWeek> <dashboardName> <dashboardJson> <dashboardAdd> 
 <settings> <metricImage>   
        Where: 
            myDate - The start date to use to get metric statistics. (For example, 
 2023-01-11T18:35:24.00Z.)  
            costDateWeek - The start date to use to get AWS Billing and Cost 
 Management statistics. (For example, 2023-01-11T18:35:24.00Z.)  
            dashboardName - The name of the dashboard to create.  
            dashboardJson - The location of a JSON file to use to create a 
 dashboard. (See Readme file.)  
            dashboardAdd - The location of a JSON file to use to update a 
 dashboard. (See Readme file.)  
            settings - The location of a JSON file from which various values are 
 read. (See Readme file.)  
            metricImage - The location of a BMP file that is used to create a 
 graph.  
    """ 
    if (args.size != 7) { 
        println(usage) 
        System.exit(1) 
    } 
    val myDate = args[0] 
    val costDateWeek = args[1] 
    val dashboardName = args[2] 
    val dashboardJson = args[3] 
    val dashboardAdd = args[4] 
    val settings = args[5] 
    var metricImage = args[6] 
    val dataPoint = "10.0".toDouble() 
1135Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    val inOb = Scanner(System.`in`) 
    println(DASHES) 
    println("Welcome to the Amazon CloudWatch example scenario.") 
    println(DASHES) 
    println(DASHES) 
    println("1. List at least five available unique namespaces from Amazon 
 CloudWatch. Select a CloudWatch namespace from the list.") 
    val list: ArrayList<String> = listNameSpaces() 
    for (z in 0..4) { 
        println("    ${z + 1}. ${list[z]}") 
    } 
    var selectedNamespace: String 
    var selectedMetrics = "" 
    var num = inOb.nextLine().toInt() 
    println("You selected $num") 
    if (1 <= num && num <= 5) { 
        selectedNamespace = list[num - 1] 
    } else { 
        println("You did not select a valid option.") 
        exitProcess(1) 
    } 
    println("You selected $selectedNamespace") 
    println(DASHES) 
    println(DASHES) 
    println("2. List available metrics within the selected namespace and select one 
 from the list.") 
    val metList = listMets(selectedNamespace) 
    for (z in 0..4) { 
        println("    ${ z + 1}. ${metList?.get(z)}") 
    } 
    num = inOb.nextLine().toInt() 
    if (1 <= num && num <= 5) { 
        selectedMetrics = metList!![num - 1] 
    } else { 
        println("You did not select a valid option.") 
        System.exit(1) 
    } 
    println("You selected $selectedMetrics") 
    val myDimension = getSpecificMet(selectedNamespace) 
    if (myDimension == null) { 
        println("Error - Dimension is null") 
        exitProcess(1) 
    } 
    println(DASHES) 
    println(DASHES) 
    println("3. Get statistics for the selected metric over the last day.") 
    val metricOption: String 
    val statTypes = ArrayList<String>() 
    statTypes.add("SampleCount") 
    statTypes.add("Average") 
    statTypes.add("Sum") 
    statTypes.add("Minimum") 
    statTypes.add("Maximum") 
    for (t in 0..4) { 
        println("    ${t + 1}. ${statTypes[t]}") 
    } 
    println("Select a metric statistic by entering a number from the preceding 
 list:") 
    num = inOb.nextLine().toInt() 
1136Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    if (1 <= num && num <= 5) { 
        metricOption = statTypes[num - 1] 
    } else { 
        println("You did not select a valid option.") 
        exitProcess(1) 
    } 
    println("You selected $metricOption") 
    getAndDisplayMetricStatistics(selectedNamespace, selectedMetrics, metricOption, 
 myDate, myDimension) 
    println(DASHES) 
    println(DASHES) 
    println("4. Get CloudWatch estimated billing for the last week.") 
    getMetricStatistics(costDateWeek) 
    println(DASHES) 
    println(DASHES) 
    println("5. Create a new CloudWatch dashboard with metrics.") 
    createDashboardWithMetrics(dashboardName, dashboardJson) 
    println(DASHES) 
    println(DASHES) 
    println("6. List dashboards using a paginator.") 
    listDashboards() 
    println(DASHES) 
    println(DASHES) 
    println("7. Create a new custom metric by adding data to it.") 
    createNewCustomMetric(dataPoint) 
    println(DASHES) 
    println(DASHES) 
    println("8. Add an additional metric to the dashboard.") 
    addMetricToDashboard(dashboardAdd, dashboardName) 
    println(DASHES) 
    println(DASHES) 
    println("9. Create an alarm for the custom metric.") 
    val alarmName: String = createAlarm(settings) 
    println(DASHES) 
    println(DASHES) 
    println("10. Describe 10 current alarms.") 
    describeAlarms() 
    println(DASHES) 
    println(DASHES) 
    println("11. Get current data for the new custom metric.") 
    getCustomMetricData(settings) 
    println(DASHES) 
    println(DASHES) 
    println("12. Push data into the custom metric to trigger the alarm.") 
    addMetricDataForAlarm(settings) 
    println(DASHES) 
    println(DASHES) 
    println("13. Check the alarm state using the action DescribeAlarmsForMetric.") 
    checkForMetricAlarm(settings) 
    println(DASHES) 
    println(DASHES) 
    println("14. Get alarm history for the new alarm.") 
    getAlarmHistory(settings, myDate) 
    println(DASHES) 
1137Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    println(DASHES) 
    println("15. Add an anomaly detector for the custom metric.") 
    addAnomalyDetector(settings) 
    println(DASHES) 
    println(DASHES) 
    println("16. Describe current anomaly detectors.") 
    describeAnomalyDetectors(settings) 
    println(DASHES) 
    println(DASHES) 
    println("17. Get a metric image for the custom metric.") 
    getAndOpenMetricImage(metricImage) 
    println(DASHES) 
    println(DASHES) 
    println("18. Clean up the Amazon CloudWatch resources.") 
    deleteDashboard(dashboardName) 
    deleteAlarm(alarmName) 
    deleteAnomalyDetector(settings) 
    println(DASHES) 
    println(DASHES) 
    println("The Amazon CloudWatch example scenario is complete.") 
    println(DASHES)
}
suspend fun deleteAnomalyDetector(fileName: String) { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode = ObjectMapper().readTree<JsonNode>(parser) 
    val customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText() 
    val customMetricName = rootNode.findValue("customMetricName").asText() 
    val singleMetricAnomalyDetectorVal = SingleMetricAnomalyDetector { 
        metricName = customMetricName 
        namespace = customMetricNamespace 
        stat = "Maximum" 
    } 
    val request = DeleteAnomalyDetectorRequest { 
        singleMetricAnomalyDetector = singleMetricAnomalyDetectorVal 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.deleteAnomalyDetector(request) 
        println("Successfully deleted the Anomaly Detector.") 
    }
}
suspend fun deleteAlarm(alarmNameVal: String) { 
    val request = DeleteAlarmsRequest { 
        alarmNames = listOf(alarmNameVal) 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.deleteAlarms(request) 
        println("Successfully deleted alarm $alarmNameVal") 
    }
}
suspend fun deleteDashboard(dashboardName: String) { 
    val dashboardsRequest = DeleteDashboardsRequest { 
        dashboardNames = listOf(dashboardName) 
    } 
1138Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.deleteDashboards(dashboardsRequest) 
        println("$dashboardName was successfully deleted.") 
    }
}
suspend fun getAndOpenMetricImage(fileName: String) { 
    println("Getting Image data for custom metric.") 
    val myJSON = """{ 
        "title": "Example Metric Graph", 
        "view": "timeSeries", 
        "stacked ": false, 
        "period": 10, 
        "width": 1400, 
        "height": 600, 
        "metrics": [ 
            [ 
            "AWS/Billing", 
            "EstimatedCharges", 
            "Currency", 
            "USD" 
            ] 
        ] 
        }""" 
    val imageRequest = GetMetricWidgetImageRequest { 
        metricWidget = myJSON 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.getMetricWidgetImage(imageRequest) 
        val bytes = response.metricWidgetImage 
        if (bytes != null) { 
            File(fileName).writeBytes(bytes) 
        } 
    } 
    println("You have successfully written data to $fileName")
}
suspend fun describeAnomalyDetectors(fileName: String) { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode = ObjectMapper().readTree<JsonNode>(parser) 
    val customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText() 
    val customMetricName = rootNode.findValue("customMetricName").asText() 
    val detectorsRequest = DescribeAnomalyDetectorsRequest { 
        maxResults = 10 
        metricName = customMetricName 
        namespace = customMetricNamespace 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.describeAnomalyDetectors(detectorsRequest) 
        response.anomalyDetectors?.forEach { detector -> 
            println("Metric name: 
 ${detector.singleMetricAnomalyDetector?.metricName}") 
            println("State: ${detector.stateValue}") 
        } 
    }
}
suspend fun addAnomalyDetector(fileName: String?) { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode = ObjectMapper().readTree<JsonNode>(parser) 
1139Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    val customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText() 
    val customMetricName = rootNode.findValue("customMetricName").asText() 
    val singleMetricAnomalyDetectorVal = SingleMetricAnomalyDetector { 
        metricName = customMetricName 
        namespace = customMetricNamespace 
        stat = "Maximum" 
    } 
    val anomalyDetectorRequest = PutAnomalyDetectorRequest { 
        singleMetricAnomalyDetector = singleMetricAnomalyDetectorVal 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.putAnomalyDetector(anomalyDetectorRequest) 
        println("Added anomaly detector for metric $customMetricName.") 
    }
}
suspend fun getAlarmHistory(fileName: String, date: String) { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode = ObjectMapper().readTree<JsonNode>(parser) 
    val alarmNameVal = rootNode.findValue("exampleAlarmName").asText() 
    val start = Instant.parse(date) 
    val endDateVal = Instant.now() 
    val historyRequest = DescribeAlarmHistoryRequest { 
        startDate = aws.smithy.kotlin.runtime.time.Instant(start) 
        endDate = aws.smithy.kotlin.runtime.time.Instant(endDateVal) 
        alarmName = alarmNameVal 
        historyItemType = HistoryItemType.Action 
    } 
    CloudWatchClient { credentialsProvider = EnvironmentCredentialsProvider(); 
 region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.describeAlarmHistory(historyRequest) 
        val historyItems = response.alarmHistoryItems 
        if (historyItems != null) { 
            if (historyItems.isEmpty()) { 
                println("No alarm history data found for $alarmNameVal.") 
            } else { 
                for (item in historyItems) { 
                    println("History summary ${item.historySummary}") 
                    println("Time stamp: ${item.timestamp}") 
                } 
            } 
        } 
    }
}
suspend fun checkForMetricAlarm(fileName: String?) { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode = ObjectMapper().readTree<JsonNode>(parser) 
    val customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText() 
    val customMetricName = rootNode.findValue("customMetricName").asText() 
    var hasAlarm = false 
    var retries = 10 
    val metricRequest = DescribeAlarmsForMetricRequest { 
        metricName = customMetricName 
        namespace = customMetricNamespace 
    } 
1140Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        while (!hasAlarm && retries > 0) { 
            val response = cwClient.describeAlarmsForMetric(metricRequest) 
            if (response.metricAlarms?.count()!! > 0) { 
                hasAlarm = true 
            } 
            retries-- 
            delay(20000) 
            println(".") 
        } 
        if (!hasAlarm) println("No Alarm state found for $customMetricName after 10 
 retries.") else println("Alarm state found for $customMetricName.") 
    }
}
suspend fun addMetricDataForAlarm(fileName: String?) { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode = ObjectMapper().readTree<JsonNode>(parser) 
    val customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText() 
    val customMetricName = rootNode.findValue("customMetricName").asText() 
    // Set an Instant object. 
    val time = 
 ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) 
    val instant = Instant.parse(time) 
    val datum = MetricDatum { 
        metricName = customMetricName 
        unit = StandardUnit.None 
        value = 1001.00 
        timestamp = aws.smithy.kotlin.runtime.time.Instant(instant) 
    } 
    val datum2 = MetricDatum { 
        metricName = customMetricName 
        unit = StandardUnit.None 
        value = 1002.00 
        timestamp = aws.smithy.kotlin.runtime.time.Instant(instant) 
    } 
    val metricDataList = ArrayList<MetricDatum>() 
    metricDataList.add(datum) 
    metricDataList.add(datum2) 
    val request = PutMetricDataRequest { 
        namespace = customMetricNamespace 
        metricData = metricDataList 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.putMetricData(request) 
        println("Added metric values for for metric $customMetricName") 
    }
}
suspend fun getCustomMetricData(fileName: String) { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode = ObjectMapper().readTree<JsonNode>(parser) 
    val customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText() 
    val customMetricName = rootNode.findValue("customMetricName").asText() 
    // Set the date. 
    val nowDate = Instant.now() 
1141Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    val hours: Long = 1 
    val minutes: Long = 30 
    val date2 = nowDate.plus(hours, ChronoUnit.HOURS).plus( 
        minutes, 
        ChronoUnit.MINUTES 
    ) 
    val met = Metric { 
        metricName = customMetricName 
        namespace = customMetricNamespace 
    } 
    val metStat = MetricStat { 
        stat = "Maximum" 
        period = 1 
        metric = met 
    } 
    val dataQUery = MetricDataQuery { 
        metricStat = metStat 
        id = "foo2" 
        returnData = true 
    } 
    val dq = ArrayList<MetricDataQuery>() 
    dq.add(dataQUery) 
    val getMetReq = GetMetricDataRequest { 
        maxDatapoints = 10 
        scanBy = ScanBy.TimestampDescending 
        startTime = aws.smithy.kotlin.runtime.time.Instant(nowDate) 
        endTime = aws.smithy.kotlin.runtime.time.Instant(date2) 
        metricDataQueries = dq 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.getMetricData(getMetReq) 
        response.metricDataResults?.forEach { item -> 
            println("The label is ${item.label}") 
            println("The status code is ${item.statusCode}") 
        } 
    }
}
suspend fun describeAlarms() { 
    val typeList = ArrayList<AlarmType>() 
    typeList.add(AlarmType.MetricAlarm) 
    val alarmsRequest = DescribeAlarmsRequest { 
        alarmTypes = typeList 
        maxRecords = 10 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.describeAlarms(alarmsRequest) 
        response.metricAlarms?.forEach { alarm -> 
            println("Alarm name: ${alarm.alarmName}") 
            println("Alarm description: ${alarm.alarmDescription}") 
        } 
    }
}
suspend fun createAlarm(fileName: String): String { 
    // Read values from the JSON file. 
    val parser = JsonFactory().createParser(File(fileName)) 
    val rootNode: JsonNode = ObjectMapper().readTree(parser) 
    val customMetricNamespace = 
 rootNode.findValue("customMetricNamespace").asText() 
1142Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    val customMetricName = rootNode.findValue("customMetricName").asText() 
    val alarmNameVal = rootNode.findValue("exampleAlarmName").asText() 
    val emailTopic = rootNode.findValue("emailTopic").asText() 
    val accountId = rootNode.findValue("accountId").asText() 
    val region2 = rootNode.findValue("region").asText() 
    // Create a List for alarm actions. 
    val alarmActionObs: MutableList<String> = ArrayList() 
    alarmActionObs.add("arn:aws:sns:$region2:$accountId:$emailTopic") 
    val alarmRequest = PutMetricAlarmRequest { 
        alarmActions = alarmActionObs 
        alarmDescription = "Example metric alarm" 
        alarmName = alarmNameVal 
        comparisonOperator = ComparisonOperator.GreaterThanOrEqualToThreshold 
        threshold = 100.00 
        metricName = customMetricName 
        namespace = customMetricNamespace 
        evaluationPeriods = 1 
        period = 10 
        statistic = Statistic.Maximum 
        datapointsToAlarm = 1 
        treatMissingData = "ignore" 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.putMetricAlarm(alarmRequest) 
        println("$alarmNameVal was successfully created!") 
        return alarmNameVal 
    }
}
suspend fun addMetricToDashboard(fileNameVal: String, dashboardNameVal: String) { 
    val dashboardRequest = PutDashboardRequest { 
        dashboardName = dashboardNameVal 
        dashboardBody = readFileAsString(fileNameVal) 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.putDashboard(dashboardRequest) 
        println("$dashboardNameVal was successfully updated.") 
    }
}
suspend fun createNewCustomMetric(dataPoint: Double) { 
    val dimension = Dimension { 
        name = "UNIQUE_PAGES" 
        value = "URLS" 
    } 
    // Set an Instant object. 
    val time = 
 ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) 
    val instant = Instant.parse(time) 
    val datum = MetricDatum { 
        metricName = "PAGES_VISITED" 
        unit = StandardUnit.None 
        value = dataPoint 
        timestamp = aws.smithy.kotlin.runtime.time.Instant(instant) 
        dimensions = listOf(dimension) 
    } 
    val request = PutMetricDataRequest { 
        namespace = "SITE/TRAFFIC" 
        metricData = listOf(datum) 
    } 
1143Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.putMetricData(request) 
        println("Added metric values for for metric PAGES_VISITED") 
    }
}
suspend fun listDashboards() { 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        cwClient.listDashboardsPaginated({}) 
            .transform { it.dashboardEntries?.forEach { obj -> emit(obj) } } 
            .collect { obj -> 
                println("Name is ${obj.dashboardName}") 
                println("Dashboard ARN is ${obj.dashboardArn}") 
            } 
    }
}
suspend fun createDashboardWithMetrics(dashboardNameVal: String, fileNameVal: 
 String) { 
    val dashboardRequest = PutDashboardRequest { 
        dashboardName = dashboardNameVal 
        dashboardBody = readFileAsString(fileNameVal) 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.putDashboard(dashboardRequest) 
        println("$dashboardNameVal was successfully created.") 
        val messages = response.dashboardValidationMessages 
        if (messages != null) { 
            if (messages.isEmpty()) { 
                println("There are no messages in the new Dashboard") 
            } else { 
                for (message in messages) { 
                    println("Message is: ${message.message}") 
                } 
            } 
        } 
    }
}
fun readFileAsString(file: String): String { 
    return String(Files.readAllBytes(Paths.get(file)))
}
suspend fun getMetricStatistics(costDateWeek: String?) { 
    val start = Instant.parse(costDateWeek) 
    val endDate = Instant.now() 
    val dimension = Dimension { 
        name = "Currency" 
        value = "USD" 
    } 
    val dimensionList: MutableList<Dimension> = ArrayList() 
    dimensionList.add(dimension) 
    val statisticsRequest = GetMetricStatisticsRequest { 
        metricName = "EstimatedCharges" 
        namespace = "AWS/Billing" 
        dimensions = dimensionList 
        statistics = listOf(Statistic.Maximum) 
        startTime = aws.smithy.kotlin.runtime.time.Instant(start) 
        endTime = aws.smithy.kotlin.runtime.time.Instant(endDate) 
        period = 86400 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.getMetricStatistics(statisticsRequest) 
1144Amazon CloudWatch User Guide
Get started with metrics, dashboards, and alarms
        val data: List<Datapoint>? = response.datapoints 
        if (data != null) { 
            if (!data.isEmpty()) { 
                for (datapoint in data) { 
                    println("Timestamp:  ${datapoint.timestamp} Maximum value: 
 ${datapoint.maximum}") 
                } 
            } else { 
                println("The returned data list is empty") 
            } 
        } 
    }
}
suspend fun getAndDisplayMetricStatistics(nameSpaceVal: String, metVal: String, 
 metricOption: String, date: String, myDimension: Dimension) { 
    val start = Instant.parse(date) 
    val endDate = Instant.now() 
    val statisticsRequest = GetMetricStatisticsRequest { 
        endTime = aws.smithy.kotlin.runtime.time.Instant(endDate) 
        startTime = aws.smithy.kotlin.runtime.time.Instant(start) 
        dimensions = listOf(myDimension) 
        metricName = metVal 
        namespace = nameSpaceVal 
        period = 86400 
        statistics = listOf(Statistic.fromValue(metricOption)) 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.getMetricStatistics(statisticsRequest) 
        val data = response.datapoints 
        if (data != null) { 
            if (data.isNotEmpty()) { 
                for (datapoint in data) { 
                    println("Timestamp: ${datapoint.timestamp} Maximum value: 
 ${datapoint.maximum}") 
                } 
            } else { 
                println("The returned data list is empty") 
            } 
        } 
    }
}
suspend fun listMets(namespaceVal: String?): ArrayList<String>? { 
    val metList = ArrayList<String>() 
    val request = ListMetricsRequest { 
        namespace = namespaceVal 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val reponse = cwClient.listMetrics(request) 
        reponse.metrics?.forEach { metrics -> 
            val data = metrics.metricName 
            if (!metList.contains(data)) { 
                metList.add(data!!) 
            } 
        } 
    } 
    return metList
}
suspend fun getSpecificMet(namespaceVal: String?): Dimension? { 
    val request = ListMetricsRequest { 
        namespace = namespaceVal 
    } 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
1145Amazon CloudWatch User Guide
Manage metrics and alarms
        val response = cwClient.listMetrics(request) 
        val myList = response.metrics 
        if (myList != null) { 
            return myList[0].dimensions?.get(0) 
        } 
    } 
    return null
}
suspend fun listNameSpaces(): ArrayList<String> { 
    val nameSpaceList = ArrayList<String>() 
    CloudWatchClient { region = "us-east-1" }.use { cwClient -> 
        val response = cwClient.listMetrics(ListMetricsRequest {}) 
        response.metrics?.forEach { metrics -> 
            val data = metrics.namespace 
            if (!nameSpaceList.contains(data)) { 
                nameSpaceList.add(data!!) 
            } 
        } 
    } 
    return nameSpaceList
}
•For API details, see the following topics in AWS SDK for Kotlin API reference.
•DeleteAlarms
•DeleteAnomalyDetector
•DeleteDashboards
•DescribeAlarmHistory
•DescribeAlarms
•DescribeAlarmsForMetric
•DescribeAnomalyDetectors
•GetMetricData
•GetMetricStatistics
•GetMetricWidgetImage
•ListMetrics
•PutAnomalyDetector
•PutDashboard
•PutMetricAlarm
•PutMetricData
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
Manage CloudWatch metrics and alarms using an 
AWS SDK
The following code example shows how to:
•Create an alarm to watch a CloudWatch metric.
•Put data into a metric and trigger the alarm.
•Get data from the alarm.
1146Amazon CloudWatch User Guide
Manage metrics and alarms
•Delete the alarm.
Python
SDK for Python (Boto3)
Note
There's more on GitHub. Find the complete example and learn how to set up and run in 
the AWS Code Examples Repository.
Create a class that wraps CloudWatch operations.
from datetime import datetime, timedelta
import logging
from pprint import pprint
import random
import time
import boto3
from botocore.exceptions import ClientError
logger = logging.getLogger(__name__)
class CloudWatchWrapper: 
    """Encapsulates Amazon CloudWatch functions.""" 
    def __init__(self, cloudwatch_resource): 
        """ 
        :param cloudwatch_resource: A Boto3 CloudWatch resource. 
        """ 
        self.cloudwatch_resource = cloudwatch_resource 
    def put_metric_data_set(self, namespace, name, timestamp, unit, data_set): 
        """ 
        Sends a set of data to CloudWatch for a metric. All of the data in the set 
        have the same timestamp and unit. 
        :param namespace: The namespace of the metric. 
        :param name: The name of the metric. 
        :param timestamp: The UTC timestamp for the metric. 
        :param unit: The unit of the metric. 
        :param data_set: The set of data to send. This set is a dictionary that 
                         contains a list of values and a list of corresponding 
 counts. 
                         The value and count lists must be the same length. 
        """ 
        try: 
            metric = self.cloudwatch_resource.Metric(namespace, name) 
            metric.put_data( 
                Namespace=namespace, 
                MetricData=[{ 
                    'MetricName': name, 
                    'Timestamp': timestamp, 
                    'Values': data_set['values'], 
                    'Counts': data_set['counts'], 
                    'Unit': unit}]) 
            logger.info("Put data set for metric %s.%s.", namespace, name) 
        except ClientError: 
            logger.exception("Couldn't put data set for metric %s.%s.", namespace, 
 name) 
            raise 
    def create_metric_alarm( 
            self, metric_namespace, metric_name, alarm_name, stat_type, period, 
            eval_periods, threshold, comparison_op): 
1147Amazon CloudWatch User Guide
Manage metrics and alarms
        """ 
        Creates an alarm that watches a metric. 
        :param metric_namespace: The namespace of the metric. 
        :param metric_name: The name of the metric. 
        :param alarm_name: The name of the alarm. 
        :param stat_type: The type of statistic the alarm watches. 
        :param period: The period in which metric data are grouped to calculate 
                       statistics. 
        :param eval_periods: The number of periods that the metric must be over the 
                             alarm threshold before the alarm is set into an 
 alarmed 
                             state. 
        :param threshold: The threshold value to compare against the metric 
 statistic. 
        :param comparison_op: The comparison operation used to compare the 
 threshold 
                              against the metric. 
        :return: The newly created alarm. 
        """ 
        try: 
            metric = self.cloudwatch_resource.Metric(metric_namespace, metric_name) 
            alarm = metric.put_alarm( 
                AlarmName=alarm_name, 
                Statistic=stat_type, 
                Period=period, 
                EvaluationPeriods=eval_periods, 
                Threshold=threshold, 
                ComparisonOperator=comparison_op) 
            logger.info( 
                "Added alarm %s to track metric %s.%s.", alarm_name, 
 metric_namespace, 
                metric_name) 
        except ClientError: 
            logger.exception( 
                "Couldn't add alarm %s to metric %s.%s", alarm_name, 
 metric_namespace, 
                metric_name) 
            raise 
        else: 
            return alarm 
    def put_metric_data(self, namespace, name, value, unit): 
        """ 
        Sends a single data value to CloudWatch for a metric. This metric is given 
        a timestamp of the current UTC time. 
        :param namespace: The namespace of the metric. 
        :param name: The name of the metric. 
        :param value: The value of the metric. 
        :param unit: The unit of the metric. 
        """ 
        try: 
            metric = self.cloudwatch_resource.Metric(namespace, name) 
            metric.put_data( 
                Namespace=namespace, 
                MetricData=[{ 
                    'MetricName': name, 
                    'Value': value, 
                    'Unit': unit 
                }] 
            ) 
            logger.info("Put data for metric %s.%s", namespace, name) 
        except ClientError: 
            logger.exception("Couldn't put data for metric %s.%s", namespace, name) 
            raise 
1148Amazon CloudWatch User Guide
Manage metrics and alarms
    def get_metric_statistics(self, namespace, name, start, end, period, 
 stat_types): 
        """ 
        Gets statistics for a metric within a specified time span. Metrics are 
 grouped 
        into the specified period. 
        :param namespace: The namespace of the metric. 
        :param name: The name of the metric. 
        :param start: The UTC start time of the time span to retrieve. 
        :param end: The UTC end time of the time span to retrieve. 
        :param period: The period, in seconds, in which to group metrics. The 
 period 
                       must match the granularity of the metric, which depends on 
                       the metric's age. For example, metrics that are older than 
                       three hours have a one-minute granularity, so the period 
 must 
                       be at least 60 and must be a multiple of 60. 
        :param stat_types: The type of statistics to retrieve, such as average 
 value 
                           or maximum value. 
        :return: The retrieved statistics for the metric. 
        """ 
        try: 
            metric = self.cloudwatch_resource.Metric(namespace, name) 
            stats = metric.get_statistics( 
                StartTime=start, EndTime=end, Period=period, Statistics=stat_types) 
            logger.info( 
                "Got %s statistics for %s.", len(stats['Datapoints']), 
 stats['Label']) 
        except ClientError: 
            logger.exception("Couldn't get statistics for %s.%s.", namespace, name) 
            raise 
        else: 
            return stats 
    def get_metric_alarms(self, metric_namespace, metric_name): 
        """ 
        Gets the alarms that are currently watching the specified metric. 
        :param metric_namespace: The namespace of the metric. 
        :param metric_name: The name of the metric. 
        :returns: An iterator that yields the alarms. 
        """ 
        metric = self.cloudwatch_resource.Metric(metric_namespace, metric_name) 
        alarm_iter = metric.alarms.all() 
        logger.info("Got alarms for metric %s.%s.", metric_namespace, metric_name) 
        return alarm_iter 
    def delete_metric_alarms(self, metric_namespace, metric_name): 
        """ 
        Deletes all of the alarms that are currently watching the specified metric. 
        :param metric_namespace: The namespace of the metric. 
        :param metric_name: The name of the metric. 
        """ 
        try: 
            metric = self.cloudwatch_resource.Metric(metric_namespace, metric_name) 
            metric.alarms.delete() 
            logger.info( 
                "Deleted alarms for metric %s.%s.", metric_namespace, metric_name) 
        except ClientError: 
            logger.exception( 
                "Couldn't delete alarms for metric %s.%s.", metric_namespace, 
                metric_name) 
1149Amazon CloudWatch User Guide
Manage metrics and alarms
            raise
Use the wrapper class to put data in a metric, trigger an alarm that watches the metric, and get 
data from the alarm.
def usage_demo(): 
    print('-'*88) 
    print("Welcome to the Amazon CloudWatch metrics and alarms demo!") 
    print('-'*88) 
    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s') 
    cw_wrapper = CloudWatchWrapper(boto3.resource('cloudwatch')) 
    minutes = 20 
    metric_namespace = 'doc-example-metric' 
    metric_name = 'page_views' 
    start = datetime.utcnow() - timedelta(minutes=minutes) 
    print(f"Putting data into metric {metric_namespace}.{metric_name} spanning the 
 " 
          f"last {minutes} minutes.") 
    for offset in range(0, minutes): 
        stamp = start + timedelta(minutes=offset) 
        cw_wrapper.put_metric_data_set( 
            metric_namespace, metric_name, stamp, 'Count', { 
                'values': [ 
                    random.randint(bound, bound * 2) 
                    for bound in range(offset + 1, offset + 11)], 
                'counts': [random.randint(1, offset + 1) for _ in range(10)] 
            }) 
    alarm_name = 'high_page_views' 
    period = 60 
    eval_periods = 2 
    print(f"Creating alarm {alarm_name} for metric {metric_name}.") 
    alarm = cw_wrapper.create_metric_alarm( 
        metric_namespace, metric_name, alarm_name, 'Maximum', period, eval_periods, 
        100, 'GreaterThanThreshold') 
    print(f"Alarm ARN is {alarm.alarm_arn}.") 
    print(f"Current alarm state is: {alarm.state_value}.") 
    print(f"Sending data to trigger the alarm. This requires data over the 
 threshold " 
          f"for {eval_periods} periods of {period} seconds each.") 
    while alarm.state_value == 'INSUFFICIENT_DATA': 
        print("Sending data for the metric.") 
        cw_wrapper.put_metric_data( 
            metric_namespace, metric_name, random.randint(100, 200), 'Count') 
        alarm.load() 
        print(f"Current alarm state is: {alarm.state_value}.") 
        if alarm.state_value == 'INSUFFICIENT_DATA': 
            print(f"Waiting for {period} seconds...") 
            time.sleep(period) 
        else: 
            print("Wait for a minute for eventual consistency of metric data.") 
            time.sleep(period) 
            if alarm.state_value == 'OK': 
                alarm.load() 
                print(f"Current alarm state is: {alarm.state_value}.") 
    print(f"Getting data for metric {metric_namespace}.{metric_name} during 
 timespan " 
          f"of {start} to {datetime.utcnow()} (times are UTC).") 
1150Amazon CloudWatch User Guide
Manage metrics and alarms
    stats = cw_wrapper.get_metric_statistics( 
        metric_namespace, metric_name, start, datetime.utcnow(), 60, 
        ['Average', 'Minimum', 'Maximum']) 
    print(f"Got {len(stats['Datapoints'])} data points for metric " 
          f"{metric_namespace}.{metric_name}.") 
    pprint(sorted(stats['Datapoints'], key=lambda x: x['Timestamp'])) 
    print(f"Getting alarms for metric {metric_name}.") 
    alarms = cw_wrapper.get_metric_alarms(metric_namespace, metric_name) 
    for alarm in alarms: 
        print(f"Alarm {alarm.name} is currently in state {alarm.state_value}.") 
    print(f"Deleting alarms for metric {metric_name}.") 
    cw_wrapper.delete_metric_alarms(metric_namespace, metric_name) 
    print("Thanks for watching!") 
    print('-'*88)
•For API details, see the following topics in AWS SDK for Python (Boto3) API Reference.
•DeleteAlarms
•DescribeAlarmsForMetric
•DisableAlarmActions
•EnableAlarmActions
•GetMetricStatistics
•ListMetrics
•PutMetricAlarm
•PutMetricData
For a complete list of AWS SDK developer guides and code examples, see Using CloudWatch with an AWS 
SDK (p. 1024 ). This topic also includes information about getting started and details about previous SDK 
versions.
1151Amazon CloudWatch User Guide
Data protection
Security in Amazon CloudWatch
Cloud security at AWS is the highest priority. As an AWS customer, you beneﬁt from a data center and 
network architecture that is built to meet the requirements of the most security-sensitive organizations.
Security is a shared responsibility between AWS and you. The shared responsibility model describes this 
as security of the cloud and security in the cloud:
•Security of the cloud – AWS is responsible for protecting the infrastructure that runs AWS services in 
the AWS Cloud. AWS also provides you with services that you can use securely. Third-party auditors 
regularly test and verify the eﬀectiveness of our security as part of the AWS Compliance Programs.
To learn about the compliance programs that apply to CloudWatch, see AWS Services in Scope by 
Compliance Program.
•Security in the cloud – Your responsibility is determined by the AWS service that you use. You are also 
responsible for other factors including the sensitivity of your data, your company’s requirements, and 
applicable laws and regulations
This documentation helps you understand how to apply the shared responsibility model when using 
Amazon CloudWatch. It shows you how to conﬁgure Amazon CloudWatch to meet your security and 
compliance objectives. You also learn how to use other AWS services that help you to monitor and secure 
your CloudWatch resources.
Contents
•Data protection in Amazon CloudWatch (p. 1152 )
•Identity and access management for Amazon CloudWatch (p. 1153 )
•Compliance validation for Amazon CloudWatch (p. 1224 )
•Resilience in Amazon CloudWatch (p. 1225 )
•Infrastructure security in Amazon CloudWatch (p. 1225 )
•AWS Security Hub (p. 1226 )
•Using CloudWatch and CloudWatch Synthetics with interface VPC endpoints (p. 1226 )
•Security considerations for Synthetics canaries (p. 1229 )
Data protection in Amazon CloudWatch
The AWS shared responsibility model applies to data protection in Amazon CloudWatch. As described in 
this model, AWS is responsible for protecting the global infrastructure that runs all of the AWS Cloud. 
You are responsible for maintaining control over your content that is hosted on this infrastructure. This 
content includes the security conﬁguration and management tasks for the AWS services that you use. For 
more information about data privacy, see the Data Privacy FAQ. For information about data protection in 
Europe, see the AWS Shared Responsibility Model and GDPR blog post on the AWS Security Blog.
For data protection purposes, we recommend that you protect AWS account credentials and set up 
individual users with AWS IAM Identity Center (successor to AWS Single Sign-On) or AWS Identity and 
Access Management (IAM). That way, each user is given only the permissions necessary to fulﬁll their job 
duties. We also recommend that you secure your data in the following ways:
•Use multi-factor authentication (MFA) with each account.
1152Amazon CloudWatch User Guide
Encryption in transit
•Use SSL/TLS to communicate with AWS resources. We require TLS 1.2 and recommend TLS 1.3.
•Set up API and user activity logging with AWS CloudTrail.
•Use AWS encryption solutions, along with all default security controls within AWS services.
•Use advanced managed security services such as Amazon Macie, which assists in discovering and 
securing sensitive data that is stored in Amazon S3.
•If you require FIPS 140-2 validated cryptographic modules when accessing AWS through a command 
line interface or an API, use a FIPS endpoint. For more information about the available FIPS endpoints, 
see Federal Information Processing Standard (FIPS) 140-2.
We strongly recommend that you never put conﬁdential or sensitive information, such as your 
customers' email addresses, into tags or free-form text ﬁelds such as a Name  ﬁeld. This includes 
when you work with CloudWatch or other AWS services using the console, API, AWS CLI, or AWS SDKs. 
Any data that you enter into tags or free-form text ﬁelds used for names may be used for billing or 
diagnostic logs. If you provide a URL to an external server, we strongly recommend that you do not 
include credentials information in the URL to validate your request to that server.
Encryption in transit
CloudWatch uses end-to-end encryption of data in transit.
Identity and access management for Amazon 
CloudWatch
AWS Identity and Access Management (IAM) is an AWS service that helps an administrator securely 
control access to AWS resources. IAM administrators control who can be authenticated  (signed in) and
authorized  (have permissions) to use CloudWatch resources. IAM is an AWS service that you can use with 
no additional charge.
Topics
•Audience (p. 1154 )
•Authenticating with identities  (p. 1154 )
•Managing access using policies (p. 1156 )
•How Amazon CloudWatch works with IAM (p. 1158 )
•Identity-based policy examples for Amazon CloudWatch (p. 1162 )
•Troubleshooting Amazon CloudWatch identity and access (p. 1165 )
•CloudWatch dashboard permissions update (p. 1167 )
•AWS managed (predeﬁned) policies for CloudWatch (p. 1167 )
•Customer managed policy examples (p. 1183 )
•CloudWatch updates to AWS managed policies (p. 1184 )
•Using condition keys to limit access to CloudWatch namespaces (p. 1190 )
•Using condition keys to limit Contributor Insights users' access to log groups (p. 1191 )
•Using condition keys to limit alarm actions (p. 1192 )
•Using service-linked roles for CloudWatch (p. 1192 )
•Using service-linked roles for CloudWatch RUM (p. 1197 )
•Using service-linked roles for CloudWatch Application Insights (p. 1201 )
•AWS managed policies for Amazon CloudWatch Application Insights (p. 1209 )
1153Amazon CloudWatch User Guide
Audience
•Amazon CloudWatch permissions reference (p. 1216 )
Audience
How you use AWS Identity and Access Management (IAM) diﬀers, depending on the work that you do in 
CloudWatch.
Service user – If you use the CloudWatch service to do your job, then your administrator provides you 
with the credentials and permissions that you need. As you use more CloudWatch features to do your 
work, you might need additional permissions. Understanding how access is managed can help you 
request the right permissions from your administrator. If you cannot access a feature in CloudWatch, see
Troubleshooting Amazon CloudWatch identity and access (p. 1165 ).
Service administrator – If you're in charge of CloudWatch resources at your company, you probably 
have full access to CloudWatch. It's your job to determine which CloudWatch features and resources 
your service users should access. You must then submit requests to your IAM administrator to change 
the permissions of your service users. Review the information on this page to understand the basic 
concepts of IAM. To learn more about how your company can use IAM with CloudWatch, see How 
Amazon CloudWatch works with IAM (p. 1158 ).
IAM administrator  – If you're an IAM administrator, you might want to learn details about how you can 
write policies to manage access to CloudWatch. To view example CloudWatch identity-based policies that 
you can use in IAM, see Identity-based policy examples for Amazon CloudWatch (p. 1162 ).
Authenticating with identities
Authentication is how you sign in to AWS using your identity credentials. You must be authenticated
(signed in to AWS) as the AWS account root user, as an IAM user, or by assuming an IAM role.
You can sign in to AWS as a federated identity by using credentials provided through an identity source. 
AWS IAM Identity Center (successor to AWS Single Sign-On) (IAM Identity Center) users, your company's 
single sign-on authentication, and your Google or Facebook credentials are examples of federated 
identities. When you sign in as a federated identity, your administrator previously set up identity 
federation using IAM roles. When you access AWS by using federation, you are indirectly assuming a role.
Depending on the type of user you are, you can sign in to the AWS Management Console or the AWS 
access portal. For more information about signing in to AWS, see How to sign in to your AWS account in 
the AWS Sign-In User Guide.
If you access AWS programmatically, AWS provides a software development kit (SDK) and a command 
line interface (CLI) to cryptographically sign your requests by using your credentials. If you don't use AWS 
tools, you must sign requests yourself. For more information about using the recommended method to 
sign requests yourself, see Signing AWS API requests in the IAM User Guide .
Regardless of the authentication method that you use, you might be required to provide additional 
security information. For example, AWS recommends that you use multi-factor authentication (MFA) 
to increase the security of your account. To learn more, see Multi-factor authentication in the AWS IAM 
Identity Center (successor to AWS Single Sign-On) User Guide and Using multi-factor authentication (MFA) 
in AWS in the IAM User Guide .
AWS account root user
When you create an AWS account, you begin with one sign-in identity that has complete access to 
all AWS services and resources in the account. This identity is called the AWS account root user  and is 
accessed by signing in with the email address and password that you used to create the account. We 
strongly recommend that you don't use the root user for your everyday tasks. Safeguard your root user 
1154Amazon CloudWatch User Guide
Authenticating with identities
credentials and use them to perform the tasks that only the root user can perform. For the complete list 
of tasks that require you to sign in as the root user, see Tasks that require root user credentials in the
AWS Account Management Reference Guide.
Federated identity
As a best practice, require human users, including users that require administrator access, to use 
federation with an identity provider to access AWS services by using temporary credentials.
A federated identity  is a user from your enterprise user directory, a web identity provider, the AWS 
Directory Service, the Identity Center directory, or any user that accesses AWS services by using 
credentials provided through an identity source. When federated identities access AWS accounts, they 
assume roles, and the roles provide temporary credentials.
For centralized access management, we recommend that you use AWS IAM Identity Center (successor to 
AWS Single Sign-On). You can create users and groups in IAM Identity Center, or you can connect and 
synchronize to a set of users and groups in your own identity source for use across all your AWS accounts 
and applications. For information about IAM Identity Center, see What is IAM Identity Center? in the AWS 
IAM Identity Center (successor to AWS Single Sign-On) User Guide.
IAM users and groups
An IAM user  is an identity within your AWS account that has speciﬁc permissions for a single person or 
application. Where possible, we recommend relying on temporary credentials instead of creating IAM 
users who have long-term credentials such as passwords and access keys. However, if you have speciﬁc 
use cases that require long-term credentials with IAM users, we recommend that you rotate access keys. 
For more information, see Rotate access keys regularly for use cases that require long-term credentials in 
the IAM User Guide .
An IAM group  is an identity that speciﬁes a collection of IAM users. You can't sign in as a group. You 
can use groups to specify permissions for multiple users at a time. Groups make permissions easier to 
manage for large sets of users. For example, you could have a group named IAMAdmins  and give that 
group permissions to administer IAM resources.
Users are diﬀerent from roles. A user is uniquely associated with one person or application, but a role 
is intended to be assumable by anyone who needs it. Users have permanent long-term credentials, but 
roles provide temporary credentials. To learn more, see When to create an IAM user (instead of a role) in 
the IAM User Guide .
IAM roles
An IAM role  is an identity within your AWS account that has speciﬁc permissions. It is similar to an IAM 
user, but is not associated with a speciﬁc person. You can temporarily assume an IAM role in the AWS 
Management Console by switching roles. You can assume a role by calling an AWS CLI or AWS API 
operation or by using a custom URL. For more information about methods for using roles, see Using IAM 
roles in the IAM User Guide .
IAM roles with temporary credentials are useful in the following situations:
•Federated user access – To assign permissions to a federated identity, you create a role and deﬁne 
permissions for the role. When a federated identity authenticates, the identity is associated with 
the role and is granted the permissions that are deﬁned by the role. For information about roles for 
federation, see  Creating a role for a third-party Identity Provider in the IAM User Guide . If you use IAM 
Identity Center, you conﬁgure a permission set. To control what your identities can access after they 
authenticate, IAM Identity Center correlates the permission set to a role in IAM. For information about 
permissions sets, see  Permission sets in the AWS IAM Identity Center (successor to AWS Single Sign-On) 
User Guide .
1155Amazon CloudWatch User Guide
Managing access using policies
•Temporary IAM user permissions – An IAM user or role can assume an IAM role to temporarily take on 
diﬀerent permissions for a speciﬁc task.
•Cross-account access – You can use an IAM role to allow someone (a trusted principal) in a diﬀerent 
account to access resources in your account. Roles are the primary way to grant cross-account access. 
However, with some AWS services, you can attach a policy directly to a resource (instead of using a role 
as a proxy). To learn the diﬀerence between roles and resource-based policies for cross-account access, 
see How IAM roles diﬀer from resource-based policies in the IAM User Guide .
•Cross-service access – Some AWS services use features in other AWS services. For example, when you 
make a call in a service, it's common for that service to run applications in Amazon EC2 or store objects 
in Amazon S3. A service might do this using the calling principal's permissions, using a service role, or 
using a service-linked role.
•Principal permissions  – When you use an IAM user or role to perform actions in AWS, you are 
considered a principal. Policies grant permissions to a principal. When you use some services, you 
might perform an action that then triggers another action in a diﬀerent service. In this case, you 
must have permissions to perform both actions. To see whether an action requires additional 
dependent actions in a policy, see Actions, resources, and condition keys for Amazon CloudWatch in 
the Service Authorization Reference.
•Service role – A service role is an IAM role that a service assumes to perform actions on your behalf. 
An IAM administrator can create, modify, and delete a service role from within IAM. For more 
information, see Creating a role to delegate permissions to an AWS service in the IAM User Guide .
•Service-linked role – A service-linked role is a type of service role that is linked to an AWS service. 
The service can assume the role to perform an action on your behalf. Service-linked roles appear in 
your AWS account and are owned by the service. An IAM administrator can view, but not edit the 
permissions for service-linked roles.
•Applications running on Amazon EC2 – You can use an IAM role to manage temporary credentials 
for applications that are running on an EC2 instance and making AWS CLI or AWS API requests. 
This is preferable to storing access keys within the EC2 instance. To assign an AWS role to an EC2 
instance and make it available to all of its applications, you create an instance proﬁle that is attached 
to the instance. An instance proﬁle contains the role and enables programs that are running on the 
EC2 instance to get temporary credentials. For more information, see Using an IAM role to grant 
permissions to applications running on Amazon EC2 instances in the IAM User Guide .
To learn whether to use IAM roles or IAM users, see When to create an IAM role (instead of a user) in the
IAM User Guide .
Managing access using policies
You control access in AWS by creating policies and attaching them to AWS identities or resources. A 
policy is an object in AWS that, when associated with an identity or resource, deﬁnes their permissions. 
AWS evaluates these policies when a principal (user, root user, or role session) makes a request. 
Permissions in the policies determine whether the request is allowed or denied. Most policies are stored 
in AWS as JSON documents. For more information about the structure and contents of JSON policy 
documents, see Overview of JSON policies in the IAM User Guide .
Administrators can use AWS JSON policies to specify who has access to what. That is, which principal  can 
perform actions on what resources, and under what conditions.
By default, users and roles have no permissions. To grant users permission to perform actions on the 
resources that they need, an IAM administrator can create IAM policies. The administrator can then add 
the IAM policies to roles, and users can assume the roles.
IAM policies deﬁne permissions for an action regardless of the method that you use to perform the 
operation. For example, suppose that you have a policy that allows the iam:GetRole  action. A user with 
that policy can get role information from the AWS Management Console, the AWS CLI, or the AWS API.
1156Amazon CloudWatch User Guide
Managing access using policies
Identity-based policies
Identity-based policies are JSON permissions policy documents that you can attach to an identity, such 
as an IAM user, group of users, or role. These policies control what actions users and roles can perform, 
on which resources, and under what conditions. To learn how to create an identity-based policy, see
Creating IAM policies in the IAM User Guide .
Identity-based policies can be further categorized as inline policies  or managed policies . Inline policies 
are embedded directly into a single user, group, or role. Managed policies are standalone policies that 
you can attach to multiple users, groups, and roles in your AWS account. Managed policies include AWS 
managed policies and customer managed policies. To learn how to choose between a managed policy or 
an inline policy, see Choosing between managed policies and inline policies in the IAM User Guide .
Resource-based policies
Resource-based policies are JSON policy documents that you attach to a resource. Examples of resource-
based policies are IAM role trust policies  and Amazon S3 bucket policies . In services that support resource-
based policies, service administrators can use them to control access to a speciﬁc resource. For the 
resource where the policy is attached, the policy deﬁnes what actions a speciﬁed principal can perform 
on that resource and under what conditions. You must specify a principal in a resource-based policy. 
Principals can include accounts, users, roles, federated users, or AWS services.
Resource-based policies are inline policies that are located in that service. You can't use AWS managed 
policies from IAM in a resource-based policy.
Access control lists (ACLs)
Access control lists (ACLs) control which principals (account members, users, or roles) have permissions to 
access a resource. ACLs are similar to resource-based policies, although they do not use the JSON policy 
document format.
Amazon S3, AWS WAF, and Amazon VPC are examples of services that support ACLs. To learn more about 
ACLs, see Access control list (ACL) overview in the Amazon Simple Storage Service Developer Guide.
Other policy types
AWS supports additional, less-common policy types. These policy types can set the maximum 
permissions granted to you by the more common policy types.
•Permissions boundaries – A permissions boundary is an advanced feature in which you set the 
maximum permissions that an identity-based policy can grant to an IAM entity (IAM user or role). 
You can set a permissions boundary for an entity. The resulting permissions are the intersection of an 
entity's identity-based policies and its permissions boundaries. Resource-based policies that specify 
the user or role in the Principal  ﬁeld are not limited by the permissions boundary. An explicit deny 
in any of these policies overrides the allow. For more information about permissions boundaries, see
Permissions boundaries for IAM entities in the IAM User Guide .
•Service control policies (SCPs) – SCPs are JSON policies that specify the maximum permissions for 
an organization or organizational unit (OU) in AWS Organizations. AWS Organizations is a service for 
grouping and centrally managing multiple AWS accounts that your business owns. If you enable all 
features in an organization, then you can apply service control policies (SCPs) to any or all of your 
accounts. The SCP limits permissions for entities in member accounts, including each AWS account 
root user. For more information about Organizations and SCPs, see How SCPs work in the AWS 
Organizations User Guide .
•Session policies  – Session policies are advanced policies that you pass as a parameter when you 
programmatically create a temporary session for a role or federated user. The resulting session's 
permissions are the intersection of the user or role's identity-based policies and the session policies. 
1157Amazon CloudWatch User Guide
How Amazon CloudWatch works with IAM
Permissions can also come from a resource-based policy. An explicit deny in any of these policies 
overrides the allow. For more information, see Session policies  in the IAM User Guide .
Multiple policy types
When multiple types of policies apply to a request, the resulting permissions are more complicated to 
understand. To learn how AWS determines whether to allow a request when multiple policy types are 
involved, see Policy evaluation logic in the IAM User Guide .
How Amazon CloudWatch works with IAM
Before you use IAM to manage access to CloudWatch, learn what IAM features are available to use with 
CloudWatch.
IAM features you can use with Amazon CloudWatch
IAM feature CloudWatch support
Identity-based policies (p. 1158 ) Yes
Resource-based policies (p. 1159 ) No
Policy actions (p. 1159 ) Yes
Policy resources (p. 1160 ) Yes
Policy condition keys (service-speciﬁc) (p. 1160 ) Yes
ACLs (p. 1161 ) No
ABAC (tags in policies) (p. 1161 ) Partial
Temporary credentials (p. 1161 ) Yes
Principal permissions  (p. 1162 ) Yes
Service roles (p. 1162 ) Yes
Service-linked roles (p. 288) No
To get a high-level view of how CloudWatch and other AWS services work with most IAM features, see
AWS services that work with IAM in the IAM User Guide .
Identity-based policies for CloudWatch
Supports identity-based policies Yes
Identity-based policies are JSON permissions policy documents that you can attach to an identity, such 
as an IAM user, group of users, or role. These policies control what actions users and roles can perform, 
on which resources, and under what conditions. To learn how to create an identity-based policy, see
Creating IAM policies in the IAM User Guide .
With IAM identity-based policies, you can specify allowed or denied actions and resources as well as the 
conditions under which actions are allowed or denied. You can't specify the principal in an identity-based 
1158Amazon CloudWatch User Guide
How Amazon CloudWatch works with IAM
policy because it applies to the user or role to which it is attached. To learn about all of the elements 
that you can use in a JSON policy, see IAM JSON policy elements reference in the IAM User Guide .
Identity-based policy examples for CloudWatch
To view examples of CloudWatch identity-based policies, see Identity-based policy examples for Amazon 
CloudWatch (p. 1162 ).
Resource-based policies within CloudWatch
Supports resource-based policies No
Resource-based policies are JSON policy documents that you attach to a resource. Examples of resource-
based policies are IAM role trust policies  and Amazon S3 bucket policies . In services that support resource-
based policies, service administrators can use them to control access to a speciﬁc resource. For the 
resource where the policy is attached, the policy deﬁnes what actions a speciﬁed principal can perform 
on that resource and under what conditions. You must specify a principal in a resource-based policy. 
Principals can include accounts, users, roles, federated users, or AWS services.
To enable cross-account access, you can specify an entire account or IAM entities in another account as 
the principal in a resource-based policy. Adding a cross-account principal to a resource-based policy is 
only half of establishing the trust relationship. When the principal and the resource are in diﬀerent AWS 
accounts, an IAM administrator in the trusted account must also grant the principal entity (user or role) 
permission to access the resource. They grant permission by attaching an identity-based policy to the 
entity. However, if a resource-based policy grants access to a principal in the same account, no additional 
identity-based policy is required. For more information, see How IAM roles diﬀer from resource-based 
policies in the IAM User Guide .
Policy actions for CloudWatch
Supports policy actions Yes
Administrators can use AWS JSON policies to specify who has access to what. That is, which principal  can 
perform actions on what resources, and under what conditions.
The Action element of a JSON policy describes the actions that you can use to allow or deny access in a 
policy. Policy actions usually have the same name as the associated AWS API operation. There are some 
exceptions, such as permission-only actions that don't have a matching API operation. There are also 
some operations that require multiple actions in a policy. These additional actions are called dependent 
actions .
Include actions in a policy to grant permissions to perform the associated operation.
To see a list of CloudWatch actions, see Actions deﬁned by Amazon CloudWatch in the Service 
Authorization Reference.
Policy actions in CloudWatch use the following preﬁx before the action:
cloudwatch
To specify multiple actions in a single statement, separate them with commas.
1159Amazon CloudWatch User Guide
How Amazon CloudWatch works with IAM
"Action": [ 
      "cloudwatch: action1", 
      "cloudwatch: action2" 
         ]
To view examples of CloudWatch identity-based policies, see Identity-based policy examples for Amazon 
CloudWatch (p. 1162 ).
Policy resources for CloudWatch
Supports policy resources Yes
Administrators can use AWS JSON policies to specify who has access to what. That is, which principal  can 
perform actions on what resources, and under what conditions.
The Resource  JSON policy element speciﬁes the object or objects to which the action applies. 
Statements must include either a Resource  or a NotResource  element. As a best practice, specify 
a resource using its Amazon Resource Name (ARN). You can do this for actions that support a speciﬁc 
resource type, known as resource-level permissions .
For actions that don't support resource-level permissions, such as listing operations, use a wildcard (*) to 
indicate that the statement applies to all resources.
"Resource": "*"
To see a list of CloudWatch resource types and their ARNs, see Resources deﬁned by Amazon CloudWatch
in the Service Authorization Reference. To learn with which actions you can specify the ARN of each 
resource, see Actions deﬁned by Amazon CloudWatch.
To view examples of CloudWatch identity-based policies, see Identity-based policy examples for Amazon 
CloudWatch (p. 1162 ).
Policy condition keys for CloudWatch
Supports service-speciﬁc policy condition keys Yes
Administrators can use AWS JSON policies to specify who has access to what. That is, which principal  can 
perform actions on what resources, and under what conditions.
The Condition  element (or Condition  block ) lets you specify conditions in which a statement is in 
eﬀect. The Condition  element is optional. You can create conditional expressions that use condition 
operators , such as equals or less than, to match the condition in the policy with values in the request.
If you specify multiple Condition  elements in a statement, or multiple keys in a single Condition
element, AWS evaluates them using a logical AND operation. If you specify multiple values for a single 
condition key, AWS evaluates the condition using a logical OR operation. All of the conditions must be 
met before the statement's permissions are granted.
1160Amazon CloudWatch User Guide
How Amazon CloudWatch works with IAM
You can also use placeholder variables when you specify conditions. For example, you can grant an IAM 
user permission to access a resource only if it is tagged with their IAM user name. For more information, 
see IAM policy elements: variables and tags in the IAM User Guide .
AWS supports global condition keys and service-speciﬁc condition keys. To see all AWS global condition 
keys, see AWS global condition context keys in the IAM User Guide .
To see a list of CloudWatch condition keys, see Condition keys for Amazon CloudWatch in the Service 
Authorization Reference. To learn with which actions and resources you can use a condition key, see
Actions deﬁned by Amazon CloudWatch.
To view examples of CloudWatch identity-based policies, see Identity-based policy examples for Amazon 
CloudWatch (p. 1162 ).
ACLs in CloudWatch
Supports ACLs No
Access control lists (ACLs) control which principals (account members, users, or roles) have permissions to 
access a resource. ACLs are similar to resource-based policies, although they do not use the JSON policy 
document format.
ABAC with CloudWatch
Supports ABAC (tags in policies) Partial
Attribute-based access control (ABAC) is an authorization strategy that deﬁnes permissions based on 
attributes. In AWS, these attributes are called tags. You can attach tags to IAM entities (users or roles) 
and to many AWS resources. Tagging entities and resources is the ﬁrst step of ABAC. Then you design 
ABAC policies to allow operations when the principal's tag matches the tag on the resource that they are 
trying to access.
ABAC is helpful in environments that are growing rapidly and helps with situations where policy 
management becomes cumbersome.
To control access based on tags, you provide tag information in the condition element of a policy using 
the aws:ResourceTag/ key-name , aws:RequestTag/ key-name , or aws:TagKeys  condition keys.
If a service supports all three condition keys for every resource type, then the value is Yes for the service. 
If a service supports all three condition keys for only some resource types, then the value is Partial.
For more information about ABAC, see What is ABAC? in the IAM User Guide . To view a tutorial with steps 
for setting up ABAC, see Use attribute-based access control (ABAC) in the IAM User Guide .
Using temporary credentials with CloudWatch
Supports temporary credentials Yes
Some AWS services don't work when you sign in using temporary credentials. For additional information, 
including which AWS services work with temporary credentials, see AWS services that work with IAM in 
the IAM User Guide .
1161Amazon CloudWatch User Guide
Identity-based policy examples
You are using temporary credentials if you sign in to the AWS Management Console using any method 
except a user name and password. For example, when you access AWS using your company's single 
sign-on (SSO) link, that process automatically creates temporary credentials. You also automatically 
create temporary credentials when you sign in to the console as a user and then switch roles. For more 
information about switching roles, see Switching to a role (console) in the IAM User Guide .
You can manually create temporary credentials using the AWS CLI or AWS API. You can then use those 
temporary credentials to access AWS. AWS recommends that you dynamically generate temporary 
credentials instead of using long-term access keys. For more information, see Temporary security 
credentials in IAM.
Cross-service principal permissions for CloudWatch
Supports principal permissions Yes
When you use an IAM user or role to perform actions in AWS, you are considered a principal. Policies 
grant permissions to a principal. When you use some services, you might perform an action that 
then triggers another action in a diﬀerent service. In this case, you must have permissions to perform 
both actions. To see whether an action requires additional dependent actions in a policy, see Actions, 
resources, and condition keys for Amazon CloudWatch in the Service Authorization Reference.
Service roles for CloudWatch
Supports service roles Yes
A service role is an IAM role that a service assumes to perform actions on your behalf. An IAM 
administrator can create, modify, and delete a service role from within IAM. For more information, see
Creating a role to delegate permissions to an AWS service in the IAM User Guide .
Warning
Changing the permissions for a service role might break CloudWatch functionality. Edit service 
roles only when CloudWatch provides guidance to do so.
Identity-based policy examples for Amazon 
CloudWatch
By default, users and roles don't have permission to create or modify CloudWatch resources. They also 
can't perform tasks by using the AWS Management Console, AWS Command Line Interface (AWS CLI), 
or AWS API. To grant users permission to perform actions on the resources that they need, an IAM 
administrator can create IAM policies. The administrator can then add the IAM policies to roles, and users 
can assume the roles.
To learn how to create an IAM identity-based policy by using these example JSON policy documents, see
Creating IAM policies in the IAM User Guide .
For details about actions and resource types deﬁned by CloudWatch, including the format of the ARNs 
for each of the resource types, see Actions, resources, and condition keys for Amazon CloudWatch in the
Service Authorization Reference.
Topics
•Policy best practices (p. 1163 )
•Using the CloudWatch console (p. 1163 )
1162Amazon CloudWatch User Guide
Identity-based policy examples
Policy best practices
Identity-based policies determine whether someone can create, access, or delete CloudWatch resources 
in your account. These actions can incur costs for your AWS account. When you create or edit identity-
based policies, follow these guidelines and recommendations:
•Get started with AWS managed policies and move toward least-privilege permissions – To get 
started granting permissions to your users and workloads, use the AWS managed policies that grant 
permissions for many common use cases. They are available in your AWS account. We recommend that 
you reduce permissions further by deﬁning AWS customer managed policies that are speciﬁc to your 
use cases. For more information, see AWS managed policies or AWS managed policies for job functions
in the IAM User Guide .
•Apply least-privilege permissions – When you set permissions with IAM policies, grant only the 
permissions required to perform a task. You do this by deﬁning the actions that can be taken on 
speciﬁc resources under speciﬁc conditions, also known as least-privilege permissions . For more 
information about using IAM to apply permissions, see  Policies and permissions in IAM in the IAM User 
Guide .
•Use conditions in IAM policies to further restrict access – You can add a condition to your policies to 
limit access to actions and resources. For example, you can write a policy condition to specify that all 
requests must be sent using SSL. You can also use conditions to grant access to service actions if they 
are used through a speciﬁc AWS service, such as AWS CloudFormation. For more information, see  IAM 
JSON policy elements: Condition in the IAM User Guide .
•Use IAM Access Analyzer to validate your IAM policies to ensure secure and functional permissions
– IAM Access Analyzer validates new and existing policies so that the policies adhere to the IAM 
policy language (JSON) and IAM best practices. IAM Access Analyzer provides more than 100 policy 
checks and actionable recommendations to help you author secure and functional policies. For more 
information, see IAM Access Analyzer policy validation in the IAM User Guide .
•Require multi-factor authentication (MFA) – If you have a scenario that requires IAM users or a root 
user in your AWS account, turn on MFA for additional security. To require MFA when API operations are 
called, add MFA conditions to your policies. For more information, see  Conﬁguring MFA-protected API 
access in the IAM User Guide .
For more information about best practices in IAM, see Security best practices in IAM in the IAM User 
Guide .
Using the CloudWatch console
To access the Amazon CloudWatch console, you must have a minimum set of permissions. These 
permissions must allow you to list and view details about the CloudWatch resources in your AWS 
account. If you create an identity-based policy that is more restrictive than the minimum required 
permissions, the console won't function as intended for entities (users or roles) with that policy.
You don't need to allow minimum console permissions for users that are making calls only to the AWS 
CLI or the AWS API. Instead, allow access to only the actions that match the API operation that they're 
trying to perform.
To ensure that users and roles can still use the CloudWatch console, also attach the CloudWatch
ConsoleAccess  or ReadOnly  AWS managed policy to the entities. For more information, see Adding 
permissions to a user  in the IAM User Guide .
Permissions needed for CloudWatch console
The full set of permissions required to work with the CloudWatch console are listed below. These 
permissions provide full write and read access to the CloudWatch console.
•application-autoscaling:DescribeScalingPolicies
1163Amazon CloudWatch User Guide
Identity-based policy examples
•autoscaling:DescribeAutoScalingGroups
•autoscaling:DescribePolicies
•cloudtrail:DescribeTrails
•cloudwatch:DeleteAlarms
•cloudwatch:DescribeAlarmHistory
•cloudwatch:DescribeAlarms
•cloudwatch:GetMetricData
•cloudwatch:GetMetricStatistics
•cloudwatch:ListMetrics
•cloudwatch:PutMetricAlarm
•cloudwatch:PutMetricData
•ec2:DescribeInstances
•ec2:DescribeTags
•ec2:DescribeVolumes
•es:DescribeElasticsearchDomain
•es:ListDomainNames
•events:DeleteRule
•events:DescribeRule
•events:DisableRule
•events:EnableRule
•events:ListRules
•events:PutRule
•iam:AttachRolePolicy
•iam:CreateRole
•iam:GetPolicy
•iam:GetPolicyVersion
•iam:GetRole
•iam:ListAttachedRolePolicies
•iam:ListRoles
•kinesis:DescribeStream
•kinesis:ListStreams
•lambda:AddPermission
•lambda:CreateFunction
•lambda:GetFunctionConﬁguration
•lambda:ListAliases
•lambda:ListFunctions
•lambda:ListVersionsByFunction
•lambda:RemovePermission
•logs:CancelExportTask
•logs:CreateExportTask
•logs:CreateLogGroup
•logs:CreateLogStream
•logs:DeleteLogGroup
•logs:DeleteLogStream
•logs:DeleteMetricFilter
•logs:DeleteRetentionPolicy
1164Amazon CloudWatch User Guide
Troubleshooting
•logs:DeleteSubscriptionFilter
•logs:DescribeExportTasks
•logs:DescribeLogGroups
•logs:DescribeLogStreams
•logs:DescribeMetricFilters
•logs:DescribeQueries
•logs:DescribeSubscriptionFilters
•logs:FilterLogEvents
•logs:GetLogGroupFields
•logs:GetLogRecord
•logs:GetLogEvents
•logs:GetQueryResults
•logs:PutMetricFilter
•logs:PutRetentionPolicy
•logs:PutSubscriptionFilter
•logs:StartQuery
•logs:StopQuery
•logs:TestMetricFilter
•s3:CreateBucket
•s3:ListBucket
•sns:CreateTopic
•sns:GetTopicAttributes
•sns:ListSubscriptions
•sns:ListTopics
•sns:SetTopicAttributes
•sns:Subscribe
•sns:Unsubscribe
•sqs:GetQueueAttributes
•sqs:GetQueueUrl
•sqs:ListQueues
•sqs:SetQueueAttributes
•swf:CreateAction
•swf:DescribeAction
•swf:ListActionTemplates
•swf:RegisterAction
•swf:RegisterDomain
•swf:UpdateAction
Additionally, to view the service map in ServiceLens, you need AWSXrayReadOnlyAccess
Troubleshooting Amazon CloudWatch identity and 
access
Use the following information to help you diagnose and ﬁx common issues that you might encounter 
when working with CloudWatch and IAM.
1165Amazon CloudWatch User Guide
Troubleshooting
Topics
•I am not authorized to perform an action in CloudWatch (p. 1166 )
•I am not authorized to perform iam:PassRole (p. 1166 )
•I want to allow people outside of my AWS account to access my CloudWatch resources (p. 1166 )
I am not authorized to perform an action in CloudWatch
If you receive an error that you're not authorized to perform an action, your policies must be updated to 
allow you to perform the action.
The following example error occurs when the mateojackson  IAM user tries to use the console 
to view details about a ﬁctional my-example-widget  resource but doesn't have the ﬁctional
cloudwatch: GetWidget  permissions.
User: arn:aws:iam::123456789012:user/mateojackson is not authorized to perform: 
 cloudwatch: GetWidget  on resource: my-example-widget
In this case, the policy for the mateojackson  user must be updated to allow access to the my-
example-widget  resource by using the cloudwatch: GetWidget  action.
If you need help, contact your AWS administrator. Your administrator is the person who provided you 
with your sign-in credentials.
I am not authorized to perform iam:PassRole
If you receive an error that you're not authorized to perform the iam:PassRole  action, your policies 
must be updated to allow you to pass a role to CloudWatch.
Some AWS services allow you to pass an existing role to that service instead of creating a new service 
role or service-linked role. To do this, you must have permissions to pass the role to the service.
The following example error occurs when an IAM user named marymajor  tries to use the console to 
perform an action in CloudWatch. However, the action requires the service to have permissions that are 
granted by a service role. Mary does not have permissions to pass the role to the service.
User: arn:aws:iam::123456789012:user/ marymajor  is not authorized to perform: iam:PassRole
In this case, Mary's policies must be updated to allow her to perform the iam:PassRole  action.
If you need help, contact your AWS administrator. Your administrator is the person who provided you 
with your sign-in credentials.
I want to allow people outside of my AWS account to access my 
CloudWatch resources
You can create a role that users in other accounts or people outside of your organization can use to 
access your resources. You can specify who is trusted to assume the role. For services that support 
resource-based policies or access control lists (ACLs), you can use those policies to grant people access to 
your resources.
To learn more, consult the following:
•To learn whether CloudWatch supports these features, see How Amazon CloudWatch works with 
IAM (p. 1158 ).
1166Amazon CloudWatch User Guide
CloudWatch dashboard permissions update
•To learn how to provide access to your resources across AWS accounts that you own, see Providing 
access to an IAM user in another AWS account that you own in the IAM User Guide .
•To learn how to provide access to your resources to third-party AWS accounts, see Providing access to 
AWS accounts owned by third parties in the IAM User Guide .
•To learn how to provide access through identity federation, see Providing access to externally 
authenticated users (identity federation) in the IAM User Guide .
•To learn the diﬀerence between using roles and resource-based policies for cross-account access, see
How IAM roles diﬀer from resource-based policies in the IAM User Guide .
CloudWatch dashboard permissions update
On May 1, 2018, AWS changed the permissions required to access CloudWatch dashboards. Dashboard 
access in the CloudWatch console now requires permissions that were introduced in 2017 to support 
dashboard API operations:
•cloudwatch:GetDashboard
•cloudwatch:ListDashboards
•cloudwatch:PutDashboard
•cloudwatch:DeleteDashboards
To access CloudWatch dashboards, you need one of the following:
•The AdministratorAccess policy.
•The CloudWatchFullAccess policy.
•A custom policy that includes one or more of these speciﬁc permissions:
•cloudwatch:GetDashboard  and cloudwatch:ListDashboards  to be able to view dashboards
•cloudwatch:PutDashboard  to be able to create or modify dashboards
•cloudwatch:DeleteDashboards  to be able to delete dashboards
For more information about using policies to change permissions for an IAM user, see Changing 
Permissions for an IAM user.
For more information about CloudWatch permissions, see Amazon CloudWatch permissions 
reference (p. 1216 ).
For more information about dashboard API operations, see PutDashboard in the Amazon CloudWatch 
API Reference.
AWS managed (predeﬁned) policies for CloudWatch
AWS addresses many common use cases by providing standalone IAM policies that are created and 
administered by AWS. These AWS managed policies grant necessary permissions for common use cases 
so that you can avoid having to investigate what permissions are needed. For more information, see AWS 
managed policies  in the IAM User Guide .
The following AWS managed policies, which you can attach to users in your account, are speciﬁc to 
CloudWatch.
Topics
•CloudWatchFullAccess (p. 1168 )
1167Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
•CloudWatchReadOnlyAccess (p. 1169 )
•CloudWatchActionsEC2Access (p. 1169 )
•CloudWatchAutomaticDashboardsAccess (p. 1170 )
•CloudWatchAgentServerPolicy (p. 1171 )
•CloudWatchAgentAdminPolicy (p. 1171 )
•AWS managed (predeﬁned) policies for CloudWatch cross-account observability (p. 1172 )
•AWS managed (predeﬁned) policies for CloudWatch Synthetics (p. 1174 )
•AWS managed (predeﬁned) policies for Amazon CloudWatch RUM (p. 1178 )
•AWS managed (predeﬁned) policies for CloudWatch Evidently (p. 1181 )
•AWS managed policy for AWS Systems Manager Incident Manager (p. 1183 )
CloudWatchFullAccess
The CloudWatchFullAccess policy grants full access to all CloudWatch and CloudWatch Logs actions and 
resources.
It includes autoscaling:Describe*  so that users with this policy can see the Auto Scaling actions 
that are associated with CloudWatch alarms. It includes sns:* so that users with this policy can retrieve 
create Amazon SNS topics and associate them with CloudWatch alarms. It includes IAM permissions so 
that users with this policy can view information about service-linked roles associated with CloudWatch. It 
includes the oam:ListSinks  and oam:ListAttachedLinks  permissions so that users with this policy 
can use the console to view data shared from source accounts in CloudWatch cross-account observability.
Its contents are as follows:
{ 
    "Version": "2012-10-17", 
    "Statement": [{ 
            "Effect": "Allow", 
            "Action": [ 
                "autoscaling:Describe*", 
                "cloudwatch:*", 
                "logs:*", 
                "sns:*", 
                "iam:GetPolicy", 
                "iam:GetPolicyVersion", 
                "iam:GetRole", 
                "oam:ListSinks" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": "iam:CreateServiceLinkedRole", 
            "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/
AWSServiceRoleForCloudWatchEvents*", 
            "Condition": { 
                "StringLike": { 
                    "iam:AWSServiceName": "events.amazonaws.com" 
                } 
            } 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "oam:ListAttachedLinks" 
            ], 
1168Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
            "Resource": "arn:aws:oam:*:*:sink/*" 
        } 
    ]
}
CloudWatchReadOnlyAccess
The CloudWatchReadOnlyAccess policy grants read-only access to CloudWatch.
It includes some logs: permissions so that users with this policy can use the console to 
view CloudWatch Logs information and to use CloudWatch Logs Insights queries. It includes
autoscaling:Describe*  so that users with this policy can see the Auto Scaling actions that are 
associated with CloudWatch alarms. It includes sns:Get*  and sns:List*  so that users with this policy 
can retrieve information about the Amazon SNS topics that receive notiﬁcations about CloudWatch 
alarms. It includes the oam:ListSinks  and oam:ListAttachedLinks  permissions so that users with 
this policy can use the console to view data shared from source accounts in CloudWatch cross-account 
observability.
The following is the content of the CloudWatchReadOnlyAccess policy.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "autoscaling:Describe*", 
                "cloudwatch:Describe*", 
                "cloudwatch:Get*", 
                "cloudwatch:List*", 
                "logs:Get*", 
                "logs:List*", 
                "logs:StartQuery", 
                "logs:StopQuery", 
                "logs:Describe*", 
                "logs:TestMetricFilter", 
                "logs:FilterLogEvents", 
                "logs:StartLiveTail", 
                "logs:StopLiveTail", 
                "oam:ListSinks", 
                "sns:Get*", 
                "sns:List*" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "oam:ListAttachedLinks" 
            ], 
            "Resource": "arn:aws:oam:*:*:sink/*" 
        } 
     ]
}
CloudWatchActionsEC2Access
The CloudWatchActionsEC2Access policy grants read-only access to CloudWatch alarms and metrics in 
addition to Amazon EC2 metadata. It also grants access to the Stop, Terminate, and Reboot API actions 
for EC2 instances.
1169Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
The following is the content of the CloudWatchActionsEC2Access policy.
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "cloudwatch:Describe*", 
        "ec2:Describe*", 
        "ec2:RebootInstances", 
        "ec2:StopInstances", 
        "ec2:TerminateInstances" 
      ], 
      "Resource": "*" 
    } 
  ]
}
CloudWatchAutomaticDashboardsAccess
The CloudWatch-CrossAccountAccess managed policy is used by the CloudWatch-
CrossAccountSharingRole IAM role. This role and policy enable users of cross-account dashboards to 
view automatic dashboards in each account that is sharing dashboards.
The following is the content of CloudWatchAutomaticDashboardsAccess:
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Action": [ 
        "autoscaling:DescribeAutoScalingGroups", 
        "cloudfront:GetDistribution", 
        "cloudfront:ListDistributions", 
        "dynamodb:DescribeTable", 
        "dynamodb:ListTables", 
        "ec2:DescribeInstances", 
        "ec2:DescribeVolumes", 
        "ecs:DescribeClusters", 
        "ecs:DescribeContainerInstances", 
        "ecs:ListClusters", 
        "ecs:ListContainerInstances", 
        "ecs:ListServices", 
        "elasticache:DescribeCacheClusters", 
        "elasticbeanstalk:DescribeEnvironments", 
        "elasticfilesystem:DescribeFileSystems", 
        "elasticloadbalancing:DescribeLoadBalancers", 
        "kinesis:DescribeStream", 
        "kinesis:ListStreams", 
        "lambda:GetFunction", 
        "lambda:ListFunctions", 
        "rds:DescribeDBClusters", 
        "rds:DescribeDBInstances", 
        "resource-groups:ListGroupResources", 
        "resource-groups:ListGroups", 
        "route53:GetHealthCheck", 
        "route53:ListHealthChecks", 
        "s3:ListAllMyBuckets", 
        "s3:ListBucket", 
        "sns:ListTopics", 
        "sqs:GetQueueAttributes", 
1170Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
        "sqs:GetQueueUrl", 
        "sqs:ListQueues", 
        "synthetics:DescribeCanariesLastRun", 
        "tag:GetResources" 
      ], 
      "Effect": "Allow", 
      "Resource": "*" 
    }, 
    { 
      "Action": [ 
        "apigateway:GET" 
      ], 
      "Effect": "Allow", 
      "Resource": [ 
        "arn:aws:apigateway:*::/restapis*" 
      ] 
    } 
  ]
CloudWatchAgentServerPolicy
The CloudWatchAgentServerPolicy policy can be used in IAM roles that are attached to Amazon 
EC2 instances to allow the CloudWatch agent to read information from the instance and write it to 
CloudWatch.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "cloudwatch:PutMetricData", 
                "ec2:DescribeVolumes", 
                "ec2:DescribeTags", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups", 
                "logs:CreateLogStream", 
                "logs:CreateLogGroup" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "ssm:GetParameter" 
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*" 
        } 
    ]
}
CloudWatchAgentAdminPolicy
The CloudWatchAgentAdminPolicy policy can be used in IAM roles that are attached to Amazon EC2 
instances. This policy allows the CloudWatch agent to read information from the instance and write it to 
CloudWatch, and also to write information to Parameter Store.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
1171Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
        { 
            "Effect": "Allow", 
            "Action": [ 
                "cloudwatch:PutMetricData", 
                "ec2:DescribeTags", 
                "logs:PutLogEvents", 
                "logs:DescribeLogStreams", 
                "logs:DescribeLogGroups", 
                "logs:CreateLogStream", 
                "logs:CreateLogGroup" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "ssm:GetParameter", 
                "ssm:PutParameter" 
            ], 
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*" 
        } 
    ]
}
Note
You can review these permissions policies by signing in to the IAM console and searching for 
speciﬁc policies there.
You can also create your own custom IAM policies to allow permissions for CloudWatch actions 
and resources. You can attach these custom policies to the IAM users or groups that require those 
permissions.
AWS managed (predeﬁned) policies for CloudWatch cross-
account observability
The policies in this section grant permissions related to CloudWatch cross-account observability. For 
more information, see CloudWatch cross-account observability (p. 846).
CloudWatchCrossAccountSharingConﬁguration
The CloudWatchCrossAccountSharingConﬁguration policy grants access to create, manage, and view 
Observability Access Manager links for sharing CloudWatch resources between accounts. For more 
information, see CloudWatch cross-account observability (p. 846). The contents are as follows:
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "cloudwatch:Link", 
                "oam:ListLinks" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "oam:DeleteLink", 
                "oam:GetLink", 
                "oam:TagResource" 
1172Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
            ], 
            "Resource": "arn:aws:oam:*:*:link/*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "oam:CreateLink", 
                "oam:UpdateLink" 
            ], 
            "Resource": [ 
                "arn:aws:oam:*:*:link/*", 
                "arn:aws:oam:*:*:sink/*" 
            ] 
        } 
    ]
}
OAMFullAccess
The OAMFullAccess policy grants access to create, manage, and view Observability Access Manager sinks 
and links, which are used for CloudWatch cross-account observability.
The OAMFullAccess policy by itself does not permit you to share observability data 
across links. To create a link to share CloudWatch metrics, you also need either
CloudWatchFullAccess or CloudWatchCrossAccountSharingConﬁguration. To create a link 
to share CloudWatch Logs log groups, you also need either CloudWatchLogsFullAccess or
CloudWatchLogsCrossAccountSharingConﬁguration. To create a link to share X-Ray traces, you also 
need either AWSXRayFullAccess or AWSXRayCrossAccountSharingConﬁguration.
For more information, see CloudWatch cross-account observability (p. 846). The contents are as follows:
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "oam:*" 
            ], 
            "Resource": "*" 
        } 
    ]
}
OAMReadOnlyAccess
The OAMReadOnlyAccess policy grants read-only access to Observability Access Manager resources, 
which are used for CloudWatch cross-account observability. For more information, see CloudWatch cross-
account observability (p. 846). The contents are as follows:
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "oam:Get*", 
                "oam:List*" 
            ], 
            "Resource": "*" 
1173Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
        } 
    ]
}
AWS managed (predeﬁned) policies for CloudWatch Synthetics
The CloudWatchSyntheticsFullAccess and CloudWatchSyntheticsReadOnlyAccess AWS managed 
policies are available for you to assign to users who will manage or use CloudWatch Synthetics. The 
following additional policies are also relevant:
•AmazonS3ReadOnlyAccess and CloudWatchReadOnlyAccess – These are necessary to be able to read 
all Synthetics data in the CloudWatch console.
•AWSLambdaReadOnlyAccess – To be able to view the source code used by canaries.
•CloudWatchSyntheticsFullAccess enables you to create canaries, Additionally, to create and delete 
canaries that have a new IAM role created for them, you also need the following inline policy 
statement:
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "iam:CreateRole", 
                "iam:DeleteRole", 
                "iam:CreatePolicy", 
                "iam:DeletePolicy", 
                "iam:AttachRolePolicy", 
                "iam:DetachRolePolicy", 
            ], 
            "Resource": [ 
                "arn:aws:iam::*:role/service-role/CloudWatchSyntheticsRole*", 
                "arn:aws:iam::*:policy/service-role/CloudWatchSyntheticsPolicy*" 
            ] 
        } 
    ]
}
Important
Granting a user the iam:CreateRole , iam:DeleteRole , iam:CreatePolicy ,
iam:DeletePolicy , iam:AttachRolePolicy , and iam:DetachRolePolicy
permissions gives that user full administrative access to create, attach, and delete roles 
and policies that have ARNs that match arn:aws:iam::*:role/service-role/
CloudWatchSyntheticsRole*  and arn:aws:iam::*:policy/service-role/
CloudWatchSyntheticsPolicy* . For example, a user with these permissions can create 
a policy that has full permissions for all resources, and attach that policy to any role that 
matches that ARN pattern. Be very careful about who you grant these permissions to.
For information about attaching policies and granting permissions to users, see Changing Permissions 
for an IAM User  and To embed an inline policy for a user or role.
CloudWatchSyntheticsFullAccess
The following is the content of the CloudWatchSyntheticsFullAccess policy.
{ 
    "Version": "2012-10-17", 
1174Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "synthetics:*" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:CreateBucket", 
                "s3:PutEncryptionConfiguration" 
            ], 
            "Resource": [ 
                "arn:aws:s3:::cw-syn-results-*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "iam:ListRoles", 
                "s3:ListAllMyBuckets", 
                "xray:GetTraceSummaries", 
                "xray:BatchGetTraces", 
                "apigateway:GET" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:GetBucketLocation" 
            ], 
            "Resource": "arn:aws:s3:::*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:GetObject", 
                "s3:ListBucket" 
            ], 
            "Resource": "arn:aws:s3:::cw-syn-*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:GetObjectVersion" 
            ], 
            "Resource": "arn:aws:s3:::aws-synthetics-library-*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "iam:PassRole" 
            ], 
            "Resource": [ 
                "arn:aws:iam::*:role/service-role/CloudWatchSyntheticsRole*" 
            ], 
            "Condition": { 
                "StringEquals": { 
                    "iam:PassedToService": [ 
                        "lambda.amazonaws.com", 
                        "synthetics.amazonaws.com" 
                    ] 
                } 
1175Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
            } 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "iam:GetRole", 
                "iam:ListAttachedRolePolicies" 
            ], 
            "Resource": [ 
                "arn:aws:iam::*:role/service-role/CloudWatchSyntheticsRole*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "cloudwatch:GetMetricData", 
                "cloudwatch:GetMetricStatistics" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "cloudwatch:PutMetricAlarm", 
                "cloudwatch:DeleteAlarms" 
            ], 
            "Resource": [ 
                "arn:aws:cloudwatch:*:*:alarm:Synthetics-*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "cloudwatch:DescribeAlarms" 
            ], 
            "Resource": [ 
                "arn:aws:cloudwatch:*:*:alarm:*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "lambda:CreateFunction", 
                "lambda:AddPermission", 
                "lambda:PublishVersion", 
                "lambda:UpdateFunctionCode", 
                "lambda:UpdateFunctionConfiguration", 
                "lambda:GetFunctionConfiguration", 
                "lambda:DeleteFunction" 
            ], 
            "Resource": [ 
                "arn:aws:lambda:*:*:function:cwsyn-*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "lambda:GetLayerVersion", 
                "lambda:PublishLayerVersion", 
                "lambda:DeleteLayerVersion" 
            ], 
            "Resource": [ 
                "arn:aws:lambda:*:*:layer:cwsyn-*", 
                "arn:aws:lambda:*:*:layer:Synthetics:*" 
            ] 
        }, 
1176Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
        { 
            "Effect": "Allow", 
            "Action": [ 
                "ec2:DescribeVpcs", 
                "ec2:DescribeSubnets", 
                "ec2:DescribeSecurityGroups" 
            ], 
            "Resource": [ 
                "*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "sns:ListTopics" 
            ], 
            "Resource": [ 
                "*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "sns:CreateTopic", 
                "sns:Subscribe", 
                "sns:ListSubscriptionsByTopic" 
            ], 
            "Resource": [ 
                "arn:*:sns:*:*:Synthetics-*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "kms:ListAliases" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "kms:DescribeKey" 
            ], 
            "Resource": "arn:aws:kms:*:*:key/*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "kms:Decrypt" 
            ], 
            "Resource": "arn:aws:kms:*:*:key/*", 
            "Condition": { 
                "StringLike": { 
                    "kms:ViaService": [ 
                        "s3.*.amazonaws.com" 
                    ] 
                } 
            } 
        } 
    ]
}
CloudWatchSyntheticsReadOnlyAccess
The following is the content of the CloudWatchSyntheticsReadOnlyAccess policy.
1177Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "synthetics:Describe*", 
                "synthetics:Get*", 
                "synthetics:List*", 
                "lambda:GetFunctionConfiguration" 
            ], 
            "Resource": "*" 
        } 
    ]
}
AWS managed (predeﬁned) policies for Amazon CloudWatch 
RUM
The AmazonCloudWatchRUMFullAccess and AmazonCloudWatchRUMReadOnlyAccess AWS managed 
policies are available for you to assign to users who will manage or use CloudWatch RUM.
AmazonCloudWatchRUMFullAccess
The following are the contents of the AmazonCloudWatchRUMFullAccess policy.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "rum:*" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "iam:GetRole", 
                "iam:CreateServiceLinkedRole" 
            ], 
            "Resource": [ 
                "arn:aws:iam::*:role/aws-service-role/rum.amazonaws.com/
AWSServiceRoleForRealUserMonitoring" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "iam:PassRole" 
            ], 
            "Resource": [ 
                "arn:aws:iam::*:role/RUM-Monitor*" 
            ], 
            "Condition": { 
                "StringEquals": { 
                    "iam:PassedToService": [ 
                        "cognito-identity.amazonaws.com" 
                    ] 
                } 
1178Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
            } 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "cloudwatch:GetMetricData", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:ListMetrics" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "cloudwatch:DescribeAlarms" 
            ], 
            "Resource": "arn:aws:cloudwatch:*:*:alarm:*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "cognito-identity:CreateIdentityPool", 
                "cognito-identity:ListIdentityPools", 
                "cognito-identity:DescribeIdentityPool", 
                "cognito-identity:GetIdentityPoolRoles", 
                "cognito-identity:SetIdentityPoolRoles" 
            ], 
            "Resource": "arn:aws:cognito-identity:*:*:identitypool/*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "logs:CreateLogGroup", 
                "logs:DeleteLogGroup", 
                "logs:PutRetentionPolicy", 
                "logs:CreateLogStream" 
            ], 
            "Resource": "arn:aws:logs:*:*:log-group:*RUMService*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "logs:CreateLogDelivery", 
                "logs:GetLogDelivery", 
                "logs:UpdateLogDelivery", 
                "logs:DeleteLogDelivery", 
                "logs:ListLogDeliveries", 
                "logs:DescribeResourcePolicies" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "logs:DescribeLogGroups" 
            ], 
            "Resource": "arn:aws:logs:*:*:log-group::log-stream:*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "synthetics:describeCanaries", 
                "synthetics:describeCanariesLastRun" 
            ], 
            "Resource": "arn:aws:synthetics:*:*:canary:*" 
        } 
1179Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
    ]
}
AmazonCloudWatchRUMReadOnlyAccess
The following are the contents of the AmazonCloudWatchRUMReadOnlyAccess policy.
{ 
 "Version": "2012-10-17", 
 "Statement": [ 
  { 
   "Effect": "Allow", 
   "Action": [ 
    "rum:GetAppMonitor", 
    "rum:GetAppMonitorData", 
    "rum:ListAppMonitors", 
    "rum:ListRumMetricsDestinations", 
    "rum:BatchGetRumMetricDefinitions" 
   ], 
   "Resource": "*" 
  } 
 ]
}
AmazonCloudWatchRUMServiceRolePolicy
You can't attach AmazonCloudWatchRUMServiceRolePolicy to your IAM entities. This policy is attached 
to a service-linked role that allows CloudWatch RUM to publish monitoring data to other relevant 
AWS services. For more information about this service linked role, see Using service-linked roles for 
CloudWatch RUM (p. 1197 ).
The complete contents of AmazonCloudWatchRUMServiceRolePolicy are as follows.
{ 
 "Version": "2012-10-17", 
 "Statement": [ 
  { 
   "Effect": "Allow", 
   "Action": [ 
    "xray:PutTraceSegments" 
   ], 
   "Resource": [ 
    "*" 
   ] 
  }, 
  { 
   "Effect": "Allow", 
   "Action": "cloudwatch:PutMetricData", 
   "Resource": "*", 
   "Condition": { 
    "StringLike": { 
     "cloudwatch:namespace": [ 
      "RUM/CustomMetrics/*", 
      "AWS/RUM" 
     ] 
    } 
   } 
  } 
 ]
}
1180Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
AWS managed (predeﬁned) policies for CloudWatch Evidently
The CloudWatchEvidentlyFullAccess and CloudWatchEvidentlyReadOnlyAccess AWS managed policies 
are available for you to assign to users who will manage or use CloudWatch Evidently.
CloudWatchEvidentlyFullAccess
The following are the contents of the CloudWatchEvidentlyFullAccess policy.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "evidently:*" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "iam:ListRoles" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "iam:GetRole" 
            ], 
            "Resource": [ 
                "arn:aws:iam::*:role/service-role/CloudWatchRUMEvidentlyRole-*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "s3:GetBucketLocation", 
                "s3:ListAllMyBuckets" 
            ], 
            "Resource": "arn:aws:s3:::*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "cloudwatch:GetMetricData", 
                "cloudwatch:GetMetricStatistics", 
                "cloudwatch:DescribeAlarmHistory", 
                "cloudwatch:DescribeAlarmsForMetric", 
                "cloudwatch:ListTagsForResource" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "cloudwatch:DescribeAlarms", 
                "cloudwatch:TagResource", 
                "cloudwatch:UnTagResource" 
            ], 
            "Resource": [ 
                "arn:aws:cloudwatch:*:*:alarm:*" 
            ] 
1181Amazon CloudWatch User Guide
AWS managed (predeﬁned) policies for CloudWatch
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "cloudtrail:LookupEvents" 
            ], 
            "Resource": "*" 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "cloudwatch:PutMetricAlarm" 
            ], 
            "Resource": [ 
                "arn:aws:cloudwatch:*:*:alarm:Evidently-Alarm-*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "sns:ListTopics" 
            ], 
            "Resource": [ 
                "*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "sns:CreateTopic", 
                "sns:Subscribe", 
                "sns:ListSubscriptionsByTopic" 
            ], 
            "Resource": [ 
                "arn:*:sns:*:*:Evidently-*" 
            ] 
        }, 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "logs:DescribeLogGroups" 
            ], 
            "Resource": [ 
                "*" 
            ] 
        } 
    ]
}
CloudWatchEvidentlyReadOnlyAccess
The following are the contents of the CloudWatchEvidentlyReadOnlyAccess policy.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "evidently:GetExperiment", 
                "evidently:GetFeature", 
                "evidently:GetLaunch", 
                "evidently:GetProject", 
                "evidently:GetSegment", 
1182Amazon CloudWatch User Guide
Customer managed policy examples
                "evidently:ListExperiments", 
                "evidently:ListFeatures", 
                "evidently:ListLaunches", 
                "evidently:ListProjects", 
                "evidently:ListSegments", 
                "evidently:ListSegmentReferencs"                                
            ], 
            "Resource": "*" 
        } 
    ]
}
AWS managed policy for AWS Systems Manager Incident 
Manager
The AWSCloudWatchAlarms_ActionSSMIncidentsServiceRolePolicy policy is attached to a service-
linked role that allows CloudWatch to start incidents in AWS Systems Manager Incident Manager on 
your behalf. For more information, see Service-linked role permissions for CloudWatch alarms Systems 
Manager Incident Manager actions (p. 1194 ).
The policy has the following permission:
•ssm-incidents:StartIncident
Customer managed policy examples
In this section, you can ﬁnd example user policies that grant permissions for various CloudWatch actions. 
These policies work when you are using the CloudWatch API, AWS SDKs, or the AWS CLI.
Examples
•Example 1: Allow user full access to CloudWatch (p. 1183 )
•Example 2: Allow read-only access to CloudWatch (p. 1183 )
•Example 3: Stop or terminate an Amazon EC2 instance (p. 1184 )
Example 1: Allow user full access to CloudWatch
To grant a user full access to CloudWatch, you can use grant them the CloudWatchFullAccess managed 
policy instead of creating a customer-managed policy. The contents of the CloudWatchFullAccess are 
listed in CloudWatchFullAccess (p. 1168 ).
Example 2: Allow read-only access to CloudWatch
The following policy allows a user read-only access to CloudWatch and view Amazon EC2 Auto Scaling 
actions, CloudWatch metrics, CloudWatch Logs data, and alarm-related Amazon SNS data.
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Action": [ 
        "autoscaling:Describe*", 
        "cloudwatch:Describe*", 
        "cloudwatch:Get*", 
        "cloudwatch:List*", 
1183Amazon CloudWatch User Guide
Policy updates
        "logs:Get*", 
        "logs:Describe*", 
        "logs:StartQuery", 
        "logs:StopQuery", 
        "logs:TestMetricFilter", 
        "logs:FilterLogEvents", 
        "logs:StartLiveTail", 
        "logs:StopLiveTail", 
        "sns:Get*", 
        "sns:List*" 
      ], 
      "Effect": "Allow", 
      "Resource": "*" 
    } 
  ]
}
Example 3: Stop or terminate an Amazon EC2 instance
The following policy allows an CloudWatch alarm action to stop or terminate an EC2 instance. In 
the sample below, the GetMetricData, ListMetrics, and DescribeAlarms actions are optional. It is 
recommended that you include these actions to ensure that you have correctly stopped or terminated 
the instance.
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Action": [ 
        "cloudwatch:PutMetricAlarm", 
        "cloudwatch:GetMetricData", 
        "cloudwatch:ListMetrics", 
        "cloudwatch:DescribeAlarms" 
      ], 
      "Resource": [ 
        "*" 
      ], 
      "Effect": "Allow" 
    }, 
    { 
      "Action": [ 
        "ec2:DescribeInstanceStatus", 
        "ec2:DescribeInstances", 
        "ec2:StopInstances", 
        "ec2:TerminateInstances" 
      ], 
      "Resource": [ 
        "*" 
      ], 
      "Effect": "Allow" 
    } 
  ]
}
CloudWatch updates to AWS managed policies
View details about updates to AWS managed policies for CloudWatch since this service began tracking 
these changes. For automatic alerts about changes to this page, subscribe to the RSS feed on the 
CloudWatch Document history page.
1184Amazon CloudWatch User Guide
Policy updates
Change Description Date
AWSServiceRoleForInternetMonitor (p. 290)
– Update to an existing policyAmazon CloudWatch Internet 
Monitor added new permissions 
to monitor Network Load 
Balancer resources.
The
elasticloadbalancing:DescribeLoadBalancers
and
ec2:DescribeNetworkInterfaces
permissions are required so that 
Internet Monitor can monitor 
customers' Network Load 
Balancer traﬃc by analyzing 
ﬂow logs for NLB resources.
For more information, see Using 
Amazon CloudWatch Internet 
Monitor  (p. 243).July 15, 2023
CloudWatchReadOnlyAccess (p. 1169 )
– Update to an existing policyCloudWatch added permissions 
to CloudWatchReadOnlyAccess.
The logs:StartLiveTail
and logs:StopLiveTail
permissions were added so 
that users with this policy can 
use the console to start and 
stop CloudWatch Logs live tail 
sessions. For more information, 
see  Use live tail to view logs in 
near real time.June 6, 2023
CloudWatchCrossAccountSharingConﬁguration (p. 1172 )
– New policyCloudWatch added a new 
policy to enable you to manage 
CloudWatch cross-account 
observability links that share 
CloudWatch metrics.
For more information, see
CloudWatch cross-account 
observability (p. 846).November 27, 2022
OAMFullAccess (p. 1173 ) – New 
policyCloudWatch added a new policy 
to enable you to fully manage 
CloudWatch cross-account 
observability links and sinks.
For more information, see
CloudWatch cross-account 
observability (p. 846).November 27, 2022
OAMReadOnlyAccess (p. 1173 ) – 
New policyCloudWatch added a new 
policy to enable you to view 
information about CloudWatch 
cross-account observability links 
and sinks.November 27, 2022
1185Amazon CloudWatch User Guide
Policy updates
Change Description Date
For more information, see
CloudWatch cross-account 
observability (p. 846).
CloudWatchFullAccess (p. 1168 )
– Update to an existing policyCloudWatch added permissions 
to CloudWatchFullAccess.
The oam:ListSinks  and
oam:ListAttachedLinks
permissions were added so 
that users with this policy can 
use the console to view data 
shared from source accounts 
in CloudWatch cross-account 
observability.November 27, 2022
CloudWatchReadOnlyAccess (p. 1169 )
– Update to an existing policyCloudWatch added permissions 
to CloudWatchReadOnlyAccess.
The oam:ListSinks  and
oam:ListAttachedLinks
permissions were added so 
that users with this policy can 
use the console to view data 
shared from source accounts 
in CloudWatch cross-account 
observability.November 27, 2022
AmazonCloudWatchRUMServiceRolePolicy (p. 1197 )
– Update to an existing policyCloudWatch RUM updated 
a condition key in
AmazonCloudWatchRUMServiceRolePolicy.
The "Condition": 
{ "StringEquals": 
{ "cloudwatch:namespace": 
"AWS/RUM" } }  condition key 
was changed to the following so 
that CloudWatch RUM can send 
custom metrics to custom metric 
namespaces.
"Condition": { 
    "StringLike": { 
  "cloudwatch:namespace": [ 
   "RUM/CustomMetrics/*", 
   "AWS/RUM" 
  ] 
 }
} 
          
         February 2, 2023
1186Amazon CloudWatch User Guide
Policy updates
Change Description Date
AmazonCloudWatchRUMReadOnlyAccess (p. 1180 )
– Updated policyCloudWatch added 
permissions the
AmazonCloudWatchRUMReadOnlyAccess
policy.
The
rum:ListRumMetricsDestinations
and
rum:BatchGetRumMetricsDefinitions
permissions were added so 
that CloudWatch RUM can send 
extended metrics to CloudWatch 
and Evidently.October 27, 2022
AmazonCloudWatchRUMServiceRolePolicy (p. 1197 )
– Update to an existing policyCloudWatch RUM 
added permissions to
AmazonCloudWatchRUMServiceRolePolicy.
The
cloudwatch:PutMetricData
permission was added so 
that CloudWatch RUM can 
send extended metrics to 
CloudWatch.October 26, 2022
CloudWatchEvidentlyReadOnlyAccess (p. 1182 )
– Update to an existing policyCloudWatch Evidently 
added permissions to
CloudWatchEvidentlyReadOnlyAccess.
The evidently:GetSegment ,
evidently:ListSegments , 
and
evidently:ListSegmentReferences
permissions were added so that 
users with this policy can see 
Evidently audience segments 
that have been created.August 12, 2022
CloudWatchSyntheticsFullAccess (p. 1174 )
– Update to an existing policyCloudWatch Synthetics 
added permissions to
CloudWatchSyntheticsFullAccess.
The lambda:DeleteFunction
and
lambda:DeleteLayerVersion
permissions were added so 
that CloudWatch Synthetics 
can delete related resources 
when a canary is deleted. The
iam:ListAttachedRolePolicies
was added so that customers 
can view the policies that are 
attached to a canary's IAM role.May 6, 2022
1187Amazon CloudWatch User Guide
Policy updates
Change Description Date
AmazonCloudWatchRUMFullAccess (p. 1178 )
– New policyCloudWatch added a new policy 
to enable full management of 
CloudWatch RUM.
CloudWatch RUM allows you to 
perform real user monitoring 
of your web application. For 
more information, see Use 
CloudWatch RUM (p. 420).November 29, 2021
AmazonCloudWatchRUMReadOnlyAccess (p. 1180 )
– New policyCloudWatch added a new policy 
to enable read-only access to 
CloudWatch RUM.
CloudWatch RUM allows you to 
perform real user monitoring 
of your web application. For 
more information, see Use 
CloudWatch RUM (p. 420).November 29, 2021
CloudWatchEvidentlyFullAccess (p. 1181 )
– New policyCloudWatch added a new policy 
to enable full management of 
CloudWatch Evidently.
CloudWatch Evidently allows 
you to perform A/B experiments 
of your web applications, and 
to roll them out gradually. 
For more information, see
Perform launches and A/B 
experiments with CloudWatch 
Evidently  (p. 383).November 29, 2021
CloudWatchEvidentlyReadOnlyAccess (p. 1182 )
– New policyCloudWatch added a new policy 
to enable read-only access to 
CloudWatch Evidently.
CloudWatch Evidently allows 
you to perform A/B experiments 
of your web applications, and 
to roll them out gradually. 
For more information, see
Perform launches and A/B 
experiments with CloudWatch 
Evidently  (p. 383).November 29, 2021
AWSServiceRoleForCloudWatchRUM (p. 1197 )
– New managed policyCloudWatch added a policy 
for a new service-linked role 
to allow CloudWatch RUM to 
pubish monitoring data to other 
relevant AWS services.November 29, 2021
1188Amazon CloudWatch User Guide
Policy updates
Change Description Date
CloudWatchSyntheticsFullAccess (p. 1174 )
– Update to an existing policyCloudWatch Synthetics 
added permissions to
CloudWatchSyntheticsFullAccess, 
and also changed the scope of 
one permission.
The kms:ListAliases
permission was added so that 
users can list available AWS 
KMS keys that can be used to 
encrypt canary artifacts. The
kms:DescribeKey  permission 
was added so that users can 
see the details of keys that will 
be used to encrypt for canary 
artifacts. And the kms:Decrypt
permission was added to enable 
users to decrypt canary artifacts. 
This decryption ability is limited 
to use on resources within 
Amazon S3 buckets.
The Resource  scope of the
s3:GetBucketLocation
permission was changed from *
to arn:aws:s3:::* .September 29, 2021
CloudWatchSyntheticsFullAccess (p. 1174 )
– Update to an existing policyCloudWatch Synthetics 
added a permission to
CloudWatchSyntheticsFullAccess.
The
lambda:UpdateFunctionCode
permission was added so that 
users with this policy can change 
the runtime version of canaries.July 20, 2021
AWSCloudWatchAlarms_ActionSSMIncidentsServiceRolePolicy (p. 1183 )
– New managed policyCloudWatch added a new 
managed IAM policy to allow 
CloudWatch to create incidents 
in AWS Systems Manager 
Incident Manager.May 10, 2021
CloudWatchAutomaticDashboardsAccess (p. 1170 )
– Update to an existing policyCloudWatch added 
a permission to the
CloudWatchAutomaticDashboardsAccess
managed policy. The
synthetics:DescribeCanariesLastRun
permission was added to this 
policy to enable cross-account 
dashboard users to see details 
about CloudWatch Synthetics 
canary runs.April 20, 2021
1189Amazon CloudWatch User Guide
Using condition keys to limit 
access to CloudWatch namespaces
Change Description Date
CloudWatch started tracking 
changesCloudWatch started tracking 
changes for its AWS managed 
policies.April 14, 2021
Using condition keys to limit access to CloudWatch 
namespaces
Use IAM condition keys to limit users to publishing metrics only in the CloudWatch namespaces that you 
specify.
Allowing publishing in one namespace only
The following policy limits the user to publishing metrics only in the namespace named
MyCustomNamespace .
{ 
    "Version": "2012-10-17", 
    "Statement": { 
        "Effect": "Allow", 
        "Resource": "*", 
        "Action": "cloudwatch:PutMetricData", 
        "Condition": { 
            "StringEquals": { 
                "cloudwatch:namespace": "MyCustomNamespace" 
            } 
        } 
    }
}
Excluding publishing from a namespace
The following policy allows the user to publish metrics in any namespace except for
CustomNamespace2 .
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Resource": "*", 
            "Action": "cloudwatch:PutMetricData" 
        }, 
        { 
            "Effect": "Deny", 
            "Resource": "*", 
            "Action": "cloudwatch:PutMetricData", 
            "Condition": { 
                "StringEquals": { 
                    "cloudwatch:namespace": "CustomNamespace2" 
                } 
            } 
        } 
    ]
}
1190Amazon CloudWatch User Guide
Using condition keys to limit Contributor 
Insights users' access to log groups
Using condition keys to limit Contributor Insights 
users' access to log groups
To create a rule in Contributor Insights and see its results, a user must have the
cloudwatch:PutInsightRule  permission. By default, a user with this permission can create a 
Contributor Insights rule that evaluates any log group in CloudWatch Logs and then see the results. The 
results can contain contributor data for those log groups.
You can create IAM policies with condition keys to grant users the permission to write Contributor 
Insights rules for some log groups while preventing them from writing rules for and seeing this data 
from other log groups.
For more information about the Condition  element in IAM policies, see IAM JSON policy elements: 
Condition .
Allow access to write rules and view results for only certain log groups
The following policy allows the user access to write rules and view results for the log group named
AllowedLogGroup  and all log groups that have names that start with AllowedWildCard . It does not 
grant access to write rules or view rule results for any other log groups.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Sid": "AllowCertainLogGroups", 
            "Effect": "Allow", 
            "Action": "cloudwatch:PutInsightRule", 
            "Resource": "arn:aws:cloudwatch:*:*:insight-rule/*", 
            "Condition": { 
                "ForAllValues:StringEqualsIgnoreCase": { 
                    "cloudwatch:requestInsightRuleLogGroups": [ 
                        "AllowedLogGroup", 
                        "AllowedWildcard*" 
                    ] 
                } 
            } 
        } 
    ]
}
Deny writing rules for speciﬁc log groups but allow writing rules for all other log groups
The following policy explicitly denies the user access to write rules and view rule results for the log group 
named ExplicitlyDeniedLogGroup , but allows writing rules and viewing rule results for all other log 
groups.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Sid": "AllowInsightRulesOnLogGroupsByDefault", 
            "Effect": "Allow", 
            "Action": "cloudwatch:PutInsightRule", 
            "Resource": "arn:aws:cloudwatch:*:*:insight-rule/*" 
           
        }, 
        { 
            "Sid": "ExplicitDenySomeLogGroups", 
1191Amazon CloudWatch User Guide
Using condition keys to limit alarm actions
            "Effect": "Deny", 
            "Action": "cloudwatch:PutInsightRule", 
            "Resource": "arn:aws:cloudwatch:*:*:insight-rule/*", 
            "Condition": { 
                "ForAllValues:StringEqualsIgnoreCase": { 
                    "cloudwatch:requestInsightRuleLogGroups": [ 
                        "/test/alpine/ExplicitlyDeniedLogGroup" 
                    ] 
                } 
            } 
        } 
    ]
}
Using condition keys to limit alarm actions
When CloudWatch alarms change state, they can perform diﬀerent actions such as stopping and 
terminating EC2 instances and performing Systems Manager actions. These actions can be initiated when 
the alarm changes to any state, including ALARM, OK, or INSUFFICIENT_DATA.
Use the cloudwatch:AlarmActions  condition key to allow a user to create alarms that can only 
perform the actions you specify when the alarm state changes. For example, you can allow a user to 
create alarms that can only perform actions which are not EC2 actions.
Allow a user to create alarms that can only send Amazon SNS notiﬁcations or perform Systems 
Manager actions
The following policy limits the user to creating alarms that can only send Amazon SNS notiﬁcations and 
perform Systems Manager actions. The user can't create alarms that perform EC2 actions.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Sid": "CreateAlarmsThatCanPerformOnlySNSandSSMActions", 
            "Effect": "Allow", 
            "Action": "cloudwatch:PutMetricAlarm", 
            "Resource": "*", 
            "Condition": { 
                "ForAllValues:StringLike": { 
                    "cloudwatch:AlarmActions": [ 
                        "arn:aws:sns:*", 
                        "arn:aws:ssm:*" 
                    ] 
                } 
            } 
        } 
    ]
}
Using service-linked roles for CloudWatch
Amazon CloudWatch uses AWS Identity and Access Management (IAM) service-linked roles. A service-
linked role is a unique type of IAM role that is linked directly to CloudWatch. Service-linked roles are 
predeﬁned by CloudWatch and include all the permissions that the service requires to call other AWS 
services on your behalf.
One service-linked role in CloudWatch makes setting up CloudWatch alarms that can terminate, stop, 
or reboot an Amazon EC2 instance without requiring you to manually add the necessary permissions. 
1192Amazon CloudWatch User Guide
Using service-linked roles
Another service-linked role enables a monitoring account to access CloudWatch data from other 
accounts that you specify, to build cross-account cross-Region dashboards.
CloudWatch deﬁnes the permissions of these service-linked roles, and unless deﬁned otherwise, only 
CloudWatch can assume the role. The deﬁned permissions include the trust policy and the permissions 
policy, and that permissions policy cannot be attached to any other IAM entity.
You can delete the roles only after ﬁrst deleting their related resources. This restriction protects your 
CloudWatch resources because you can't inadvertently remove permissions to access the resources.
For information about other services that support service-linked roles, see AWS Services That Work with 
IAM and look for the services that have Yes in the Service-Linked Role column. Choose a Yes with a link 
to view the service-linked role documentation for that service.
Service-linked role permissions for CloudWatch alarms EC2 
actions
CloudWatch uses the service-linked role named AWSServiceRoleForCloudWatchEvents – CloudWatch 
uses this service-linked role to perform Amazon EC2 alarm actions.
The AWSServiceRoleForCloudWatchEvents service-linked role trusts the CloudWatch Events service to 
assume the role. CloudWatch Events invokes the terminate, stop, or reboot instance actions when called 
upon by the alarm.
The AWSServiceRoleForCloudWatchEvents service-linked role permissions policy allows CloudWatch 
Events to complete the following actions on Amazon EC2 instances:
•ec2:StopInstances
•ec2:TerminateInstances
•ec2:RecoverInstances
•ec2:DescribeInstanceRecoveryAttribute
•ec2:DescribeInstances
•ec2:DescribeInstanceStatus
The AWSServiceRoleForCloudWatchCrossAccount service-linked role permissions policy allows 
CloudWatch to complete the following actions:
•sts:AssumeRole
Service-linked role permissions for CloudWatch alarms Systems 
Manager OpsCenter actions
CloudWatch uses the service-linked role named AWSServiceRoleForCloudWatchAlarms_ActionSSM
– CloudWatch uses this service-linked role to perform Systems Manager OpsCenter actions when a 
CloudWatch alarm goes into ALARM state.
The AWSServiceRoleForCloudWatchAlarms_ActionSSM service-linked role trusts the CloudWatch service 
to assume the role. CloudWatch alarms invoke the Systems Manager OpsCenter actions when called 
upon by the alarm.
The AWSServiceRoleForCloudWatchAlarms_ActionSSM service-linked role permissions policy allows 
Systems Manager to complete the following actions:
•ssm:CreateOpsItem
1193Amazon CloudWatch User Guide
Using service-linked roles
Service-linked role permissions for CloudWatch alarms Systems 
Manager Incident Manager actions
CloudWatch uses the service-linked role named
AWSServiceRoleForCloudWatchAlarms_ActionSSMIncidents – CloudWatch uses this service-linked role 
to start Incident Manager incidents when a CloudWatch alarm goes into ALARM state.
The AWSServiceRoleForCloudWatchAlarms_ActionSSMIncidents service-linked role trusts the 
CloudWatch service to assume the role. CloudWatch alarms invoke the Systems Manager Incident 
Manager action when called upon by the alarm.
The AWSServiceRoleForCloudWatchAlarms_ActionSSMIncidents service-linked role permissions policy 
allows Systems Manager to complete the following actions:
•ssm-incidents:StartIncident
Service-linked role permissions for CloudWatch cross-account 
cross-Region
CloudWatch uses the service-linked role named AWSServiceRoleForCloudWatchCrossAccount – 
CloudWatch uses this role to access CloudWatch data in other AWS accounts that you specify. The SLR 
only provides the assume role permission to allow the CloudWatch service to assume the role in the 
sharing account. It is the sharing role that provides access to data.
The AWSServiceRoleForCloudWatchCrossAccount service-linked role permissions policy allows 
CloudWatch to complete the following actions:
•sts:AssumeRole
The AWSServiceRoleForCloudWatchCrossAccount service-linked role trusts the CloudWatch service to 
assume the role.
Creating a service-linked role for CloudWatch
You do not need to manually create any of these service-linked roles. The ﬁrst time you create 
an alarm in the AWS Management Console, the IAM CLI, or the IAM API, CloudWatch creates 
AWSServiceRoleForCloudWatchEvents and AWSServiceRoleForCloudWatchAlarms_ActionSSM for 
you. When you ﬁrst enable an account to be a monitoring account for cross-account cross-Region 
functionality, CloudWatch creates AWSServiceRoleForCloudWatchCrossAccount for you.
For more information, see Creating a Service-Linked Role in the IAM User Guide .
Editing a service-linked role for CloudWatch
CloudWatch does not allow you to edit the AWSServiceRoleForCloudWatchEvents,
AWSServiceRoleForCloudWatchAlarms_ActionSSM or AWSServiceRoleForCloudWatchCrossAccount
roles. After you create these roles, you cannot change their names because various entities might 
reference these roles. However, you can edit the description of these roles using IAM.
Editing a service-linked role description (IAM console)
You can use the IAM console to edit the description of a service-linked role.
To edit the description of a service-linked role (console)
1. In the navigation pane of the IAM console, choose Roles.
1194Amazon CloudWatch User Guide
Using service-linked roles
2. Choose the name of the role to modify.
3. To the far right of Role description, choose Edit.
4. Type a new description in the box, and choose Save.
Editing a service-linked role description (AWS CLI)
You can use IAM commands from the AWS Command Line Interface to edit the description of a service-
linked role.
To change the description of a service-linked role (AWS CLI)
1. (Optional) To view the current description for a role, use the following commands:
$ aws iam get-role  --role-name role-name
Use the role name, not the ARN, to refer to roles with the AWS CLI commands. For example, if a role 
has the following ARN: arn:aws:iam::123456789012:role/myrole , you refer to the role as
myrole .
2. To update a service-linked role's description, use the following command:
$ aws iam update-role-description  --role-name role-name  --description description
Editing a service-linked role description (IAM API)
You can use the IAM API to edit the description of a service-linked role.
To change the description of a service-linked role (API)
1. (Optional) To view the current description for a role, use the following command:
GetRole
2. To update a role's description, use the following command:
UpdateRoleDescription
Deleting a service-linked role for CloudWatch
If you no longer have alarms that automatically stop, terminate, or reboot EC2 instances, we recommend 
that you delete the AWSServiceRoleForCloudWatchEvents role.
If you not longer have alarms that perform Systems Manager OpsCenter actions, we recommend that 
you delete the AWSServiceRoleForCloudWatchAlarms_ActionSSM role.
That way you don’t have an unused entity that is not actively monitored or maintained. However, you 
must clean up your service-linked role before you can delete it.
Cleaning up a service-linked role
Before you can use IAM to delete a service-linked role, you must ﬁrst conﬁrm that the role has no active 
sessions and remove any resources used by the role.
To check whether the service-linked role has an active session in the IAM console
1. Open the IAM console at https://console.aws.amazon.com/iam/.
1195Amazon CloudWatch User Guide
Using service-linked roles
2. In the navigation pane, choose Roles. Choose the name (not the check box) of the 
AWSServiceRoleForCloudWatchEvents role.
3. On the Summary page for the selected role, choose Access Advisor and review the recent activity 
for the service-linked role.
Note
If you are unsure whether CloudWatch is using the AWSServiceRoleForCloudWatchEvents 
role, try to delete the role. If the service is using the role, then the deletion fails and you can 
view the Regions where the role is being used. If the role is being used, then you must wait 
for the session to end before you can delete the role. You cannot revoke the session for a 
service-linked role.
Deleting a service-linked role (IAM console)
You can use the IAM console to delete a service-linked role.
To delete a service-linked role (console)
1. Open the IAM console at https://console.aws.amazon.com/iam/.
2. In the navigation pane, choose Roles. Select the check box next to the name of the role you want to 
delete, not the name or row itself.
3. For Role actions, choose Delete role.
4. In the conﬁrmation dialog box, review the service last accessed data, which shows when each of the 
selected roles last accessed an AWS service. This helps you to conﬁrm whether the role is currently 
active. To proceed, choose Yes, Delete.
5. Watch the IAM console notiﬁcations to monitor the progress of the service-linked role deletion. 
Because the IAM service-linked role deletion is asynchronous, the deletion task can succeed or fail 
after you submit the role for deletion. If the task fails, choose View details  or View Resources from 
the notiﬁcations to learn why the deletion failed. If the deletion fails because there are resources in 
the service that are being used by the role, then the reason for the failure includes a list of resources.
Deleting a service-linked role (AWS CLI)
You can use IAM commands from the AWS Command Line Interface to delete a service-linked role.
To delete a service-linked role (AWS CLI)
1. Because a service-linked role cannot be deleted if it is being used or has associated resources, you 
must submit a deletion request. That request can be denied if these conditions are not met. You 
must capture the deletion-task-id  from the response to check the status of the deletion task. 
Type the following command to submit a service-linked role deletion request:
$ aws iam delete-service-linked-role  --role-name service-linked-role-name
2. Type the following command to check the status of the deletion task:
$ aws iam get-service-linked-role-deletion-status  --deletion-task-id deletion-task-id
The status of the deletion task can be NOT_STARTED , IN_PROGRESS , SUCCEEDED , or FAILED . If the 
deletion fails, the call returns the reason that it failed so that you can troubleshoot.
Deleting a service-linked role (IAM API)
You can use the IAM API to delete a service-linked role.
1196Amazon CloudWatch User Guide
Using a service-linked role for CloudWatch RUM
To delete a service-linked role (API)
1. To submit a deletion request for a service-linked role, call DeleteServiceLinkedRole. In the request, 
specify the role name that you want to delete.
Because a service-linked role cannot be deleted if it is being used or has associated resources, you 
must submit a deletion request. That request can be denied if these conditions are not met. You 
must capture the DeletionTaskId  from the response to check the status of the deletion task.
2. To check the status of the deletion, call GetServiceLinkedRoleDeletionStatus. In the request, specify 
the DeletionTaskId .
The status of the deletion task can be NOT_STARTED , IN_PROGRESS , SUCCEEDED , or FAILED . If the 
deletion fails, the call returns the reason that it failed so that you can troubleshoot.
CloudWatch updates to AWS service-linked roles
View details about updates to AWS managed policies for CloudWatch since this service began tracking 
these changes. For automatic alerts about changes to this page, subscribe to the RSS feed on the 
CloudWatch Document history page.
Change Description Date
AWSServiceRoleForCloudWatchAlarms_ActionSSMIncidents (p. 1194 )
– New service-linked roleCloudWatch added a new 
service-linked role to allow 
CloudWatch to create incidents 
in AWS Systems Manager 
Incident Manager.April 26, 2021
CloudWatch started tracking 
changesCloudWatch started tracking 
changes for its service-linked 
roles.April 26, 2021
Using service-linked roles for CloudWatch RUM
CloudWatch RUM uses a AWS Identity and Access Management (IAM) service-linked role. A service-linked 
role is a unique type of IAM role that is linked directly to RUM. The service-linked role is predeﬁned by 
RUM and includes all the permissions that the service requires to call other AWS services on your behalf.
RUM deﬁnes the permissions of the service-linked role, and unless deﬁned otherwise, only RUM can 
assume the role. The deﬁned permissions include the trust policy and the permissions policy, and that 
permissions policy cannot be attached to any other IAM entity.
You can delete the role only after ﬁrst deleting its related resources. This restriction protects your RUM 
resources because you can't inadvertently remove permissions to access the resources.
For information about other services that support service-linked roles, see AWS services that work with 
IAM and look for the services that have Yes in the Service-linked roles column. Choose a Yes with a link 
to view the service-linked role documentation for that service.
Service-linked role permissions for RUM
RUM uses the service-linked role named AWSServiceRoleForCloudWatchRUM – this role allows RUM to 
send AWS X-Ray trace data into your account, for app monitors that you enable X-Ray tracing for.
1197Amazon CloudWatch User Guide
Using a service-linked role for CloudWatch RUM
The AWSServiceRoleForCloudWatchRUM service-linked role trusts the X-Ray service to assume the role. 
X-Ray sends the trace data to your account.
The AWSServiceRoleForCloudWatchRUM service-linked role has an IAM policy attached named
AmazonCloudWatchRUMServiceRolePolicy. This policy grants permission to CloudWatch RUM to 
publish monitoring data to other relevant AWS services. It includes permissions that allow RUM to 
complete the following actions:
•xray:PutTraceSegments
•cloudwatch:PutMetricData
The complete contents of AmazonCloudWatchRUMServiceRolePolicy are as follows.
{ 
 "Version": "2012-10-17", 
 "Statement": [ 
  { 
   "Effect": "Allow", 
   "Action": [ 
    "xray:PutTraceSegments" 
   ], 
   "Resource": [ 
    "*" 
   ] 
  }, 
  { 
   "Effect": "Allow", 
   "Action": "cloudwatch:PutMetricData", 
   "Resource": "*", 
   "Condition": { 
    "StringLike": { 
     "cloudwatch:namespace": [ 
      "RUM/CustomMetrics/*", 
      "AWS/RUM" 
     ] 
    } 
   } 
  } 
 ]
}
Creating a service-linked role for RUM
You do not need to manually create the service-linked role for CloudWatch RUM. The ﬁrst time that you 
create an app monitor with X-Ray tracing enabled, or update an app monitor to use X-Ray tracing, RUM 
creates AWSServiceRoleForCloudWatchRUM for you.
For more information, see Creating a Service-Linked Role in the IAM User Guide .
Editing a service-linked role for RUM
CloudWatch RUM does not allow you to edit the AWSServiceRoleForCloudWatchRUM role. After you 
create these roles, you cannot change their names because various entities might reference these roles. 
However, you can edit the description of these roles using IAM.
Editing a service-linked role description (IAM console)
You can use the IAM console to edit the description of a service-linked role.
1198Amazon CloudWatch User Guide
Using a service-linked role for CloudWatch RUM
To edit the description of a service-linked role (console)
1. In the navigation pane of the IAM console, choose Roles.
2. Choose the name of the role to modify.
3. To the far right of Role description, choose Edit.
4. Type a new description in the box, and choose Save.
Editing a service-linked role description (AWS CLI)
You can use IAM commands from the AWS Command Line Interface to edit the description of a service-
linked role.
To change the description of a service-linked role (AWS CLI)
1. (Optional) To view the current description for a role, use the following commands:
$ aws iam get-role  --role-name role-name
Use the role name, not the ARN, to refer to roles with the AWS CLI commands. For example, if a role 
has the following ARN: arn:aws:iam::123456789012:role/myrole , you refer to the role as
myrole .
2. To update a service-linked role's description, use the following command:
$ aws iam update-role-description  --role-name role-name  --description description
Editing a service-linked role description (IAM API)
You can use the IAM API to edit the description of a service-linked role.
To change the description of a service-linked role (API)
1. (Optional) To view the current description for a role, use the following command:
GetRole
2. To update a role's description, use the following command:
UpdateRoleDescription
Deleting a service-linked role for RUM
If you no longer have app monitors with X-Ray enabled, we recommend that you delete the
AWSServiceRoleForCloudWatchRUM role.
That way you don’t have an unused entity that is not actively monitored or maintained. However, you 
must clean up your service-linked role before you can delete it.
Cleaning up a service-linked role
Before you can use IAM to delete a service-linked role, you must ﬁrst conﬁrm that the role has no active 
sessions and remove any resources used by the role.
To check whether the service-linked role has an active session in the IAM console
1. Open the IAM console at https://console.aws.amazon.com/iam/.
1199Amazon CloudWatch User Guide
Using a service-linked role for CloudWatch RUM
2. In the navigation pane, choose Roles. Choose the name (not the check box) of the
AWSServiceRoleForCloudWatchRUM role.
3. On the Summary page for the selected role, choose Access Advisor and review the recent activity 
for the service-linked role.
Note
If you are unsure whether RUM is using the AWSServiceRoleForCloudWatchRUM role, 
try to delete the role. If the service is using the role, then the deletion fails and you can 
view the Regions where the role is being used. If the role is being used, then you must wait 
for the session to end before you can delete the role. You cannot revoke the session for a 
service-linked role.
Deleting a service-linked role (IAM console)
You can use the IAM console to delete a service-linked role.
To delete a service-linked role (console)
1. Open the IAM console at https://console.aws.amazon.com/iam/.
2. In the navigation pane, choose Roles. Select the check box next to the name of the role you want to 
delete, not the name or row itself.
3. For Role actions, choose Delete role.
4. In the conﬁrmation dialog box, review the service last accessed data, which shows when each of the 
selected roles last accessed an AWS service. This helps you to conﬁrm whether the role is currently 
active. To proceed, choose Yes, Delete.
5. Watch the IAM console notiﬁcations to monitor the progress of the service-linked role deletion. 
Because the IAM service-linked role deletion is asynchronous, the deletion task can succeed or fail 
after you submit the role for deletion. If the task fails, choose View details  or View Resources from 
the notiﬁcations to learn why the deletion failed. If the deletion fails because there are resources in 
the service that are being used by the role, then the reason for the failure includes a list of resources.
Deleting a service-linked role (AWS CLI)
You can use IAM commands from the AWS Command Line Interface to delete a service-linked role.
To delete a service-linked role (AWS CLI)
1. Because a service-linked role cannot be deleted if it is being used or has associated resources, you 
must submit a deletion request. That request can be denied if these conditions are not met. You 
must capture the deletion-task-id  from the response to check the status of the deletion task. 
Type the following command to submit a service-linked role deletion request:
$ aws iam delete-service-linked-role  --role-name service-linked-role-name
2. Type the following command to check the status of the deletion task:
$ aws iam get-service-linked-role-deletion-status  --deletion-task-id deletion-task-id
The status of the deletion task can be NOT_STARTED , IN_PROGRESS , SUCCEEDED , or FAILED . If the 
deletion fails, the call returns the reason that it failed so that you can troubleshoot.
Deleting a service-linked role (IAM API)
You can use the IAM API to delete a service-linked role.
1200Amazon CloudWatch User Guide
Using service-linked roles for Application Insights
To delete a service-linked role (API)
1. To submit a deletion request for a service-linked role, call DeleteServiceLinkedRole. In the request, 
specify the role name that you want to delete.
Because a service-linked role cannot be deleted if it is being used or has associated resources, you 
must submit a deletion request. That request can be denied if these conditions are not met. You 
must capture the DeletionTaskId  from the response to check the status of the deletion task.
2. To check the status of the deletion, call GetServiceLinkedRoleDeletionStatus. In the request, specify 
the DeletionTaskId .
The status of the deletion task can be NOT_STARTED , IN_PROGRESS , SUCCEEDED , or FAILED . If the 
deletion fails, the call returns the reason that it failed so that you can troubleshoot.
Using service-linked roles for CloudWatch Application 
Insights
CloudWatch Application Insights uses AWS Identity and Access Management (IAM) service-linked roles. A 
service-linked role is a unique type of IAM role that is linked directly to CloudWatch Application Insights. 
Service-linked roles are predeﬁned by CloudWatch Application Insights and include all of the permissions 
that the service requires to call other AWS services on your behalf.
A service-linked role makes setting up CloudWatch Application Insights easier because you don’t have to 
manually add the necessary permissions. CloudWatch Application Insights deﬁnes the permissions of its 
service-linked roles, and unless deﬁned otherwise, only CloudWatch Application Insights can assume its 
roles. The deﬁned permissions include the trust policy and the permissions policy, and that permissions 
policy cannot be attached to any other IAM entity.
For information about other services that support service-linked roles, see AWS Services That Work with 
IAM and look for the services that have Yes in the Service-Linked Role column. Choose a Yes link to view 
the service-linked role documentation for that service.
Service-linked role permissions for CloudWatch Application 
Insights
CloudWatch Application Insights uses the service-linked role named
AWSServiceRoleForApplicationInsights. Application Insights uses this role to perform operations such 
as analyzing the resource groups of the customer, creating CloudFormation stacks to create alarms on 
metrics, and conﬁguring the CloudWatch Agent on EC2 instances. This service-linked role has an IAM 
policy attached to it named CloudwatchApplicationInsightsServiceLinkedRolePolicy . For 
updates to this policy, see Application Insights updates to AWS managed policies (p. 1211 ).
The role permissions policy allows CloudWatch Application Insights to complete the following actions on 
resources.
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "cloudwatch:DescribeAlarmHistory", 
        "cloudwatch:DescribeAlarms", 
        "cloudwatch:GetMetricData", 
        "cloudwatch:ListMetrics", 
        "cloudwatch:PutMetricAlarm", 
        "cloudwatch:DeleteAlarms", 
1201Amazon CloudWatch User Guide
Using service-linked roles for Application Insights
        "cloudwatch:PutAnomalyDetector", 
        "cloudwatch:DeleteAnomalyDetector", 
        "cloudwatch:DescribeAnomalyDetectors" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "logs:FilterLogEvents", 
        "logs:GetLogEvents", 
        "logs:DescribeLogStreams", 
        "logs:DescribeLogGroups" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "events:DescribeRule" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "cloudFormation:CreateStack", 
        "cloudFormation:UpdateStack", 
        "cloudFormation:DeleteStack", 
        "cloudFormation:DescribeStackResources" 
      ], 
      "Resource": [ 
        "arn:aws:cloudformation:*:*:stack/ApplicationInsights-*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "cloudFormation:DescribeStacks", 
        "cloudFormation:ListStackResources", 
        "cloudFormation:ListStacks" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "tag:GetResources" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "resource-groups:ListGroupResources", 
        "resource-groups:GetGroupQuery", 
1202Amazon CloudWatch User Guide
Using service-linked roles for Application Insights
        "resource-groups:GetGroup" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "resource-groups:CreateGroup", 
        "resource-groups:DeleteGroup" 
      ], 
      "Resource": [ 
        "arn:aws:resource-groups:*:*:group/ApplicationInsights-*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "elasticloadbalancing:DescribeLoadBalancers", 
        "elasticloadbalancing:DescribeTargetGroups", 
        "elasticloadbalancing:DescribeTargetHealth" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "autoscaling:DescribeAutoScalingGroups" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "ssm:PutParameter", 
        "ssm:DeleteParameter", 
        "ssm:AddTagsToResource", 
        "ssm:RemoveTagsFromResource", 
        "ssm:GetParameters" 
      ], 
      "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-ApplicationInsights-*" 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "ssm:CreateAssociation", 
        "ssm:UpdateAssociation", 
        "ssm:DeleteAssociation", 
        "ssm:DescribeAssociation" 
      ], 
      "Resource": [ 
        "arn:aws:ec2:*:*:instance/*", 
        "arn:aws:ssm:*:*:association/*", 
        "arn:aws:ssm:*:*:managed-instance/*", 
        "arn:aws:ssm:*:*:document/AWSEC2-
ApplicationInsightsCloudwatchAgentInstallAndConfigure", 
        "arn:aws:ssm:*:*:document/AWS-ConfigureAWSPackage", 
        "arn:aws:ssm:*:*:document/AmazonCloudWatch-ManageAgent" 
      ] 
    }, 
    { 
1203Amazon CloudWatch User Guide
Using service-linked roles for Application Insights
      "Effect": "Allow", 
      "Action": [ 
        "ssm:GetOpsItem", 
        "ssm:CreateOpsItem", 
        "ssm:DescribeOpsItems", 
        "ssm:UpdateOpsItem", 
        "ssm:DescribeInstanceInformation" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "ssm:AddTagsToResource" 
      ], 
      "Resource": "arn:aws:ssm:*:*:opsitem/*" 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "ssm:ListCommandInvocations", 
        "ssm:GetCommandInvocation" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": "ssm:SendCommand", 
      "Resource": [ 
        "arn:aws:ec2:*:*:instance/*", 
        "arn:aws:ssm:*:*:document/AWSEC2-CheckPerformanceCounterSets", 
        "arn:aws:ssm:*:*:document/AWS-ConfigureAWSPackage", 
        "arn:aws:ssm:*:*:document/AWSEC2-DetectWorkload", 
        "arn:aws:ssm:*:*:document/AmazonCloudWatch-ManageAgent" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "ec2:DescribeInstances", 
        "ec2:DescribeVolumes", 
        "ec2:DescribeVolumeStatus", 
        "ec2:DescribeVpcs", 
        "ec2:DescribeVpcAttribute", 
        "ec2:DescribeNatGateways" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "rds:DescribeDBInstances", 
        "rds:DescribeDBClusters" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
1204Amazon CloudWatch User Guide
Using service-linked roles for Application Insights
      "Action": [ 
        "lambda:ListFunctions", 
        "lambda:GetFunctionConfiguration", 
        "lambda:ListEventSourceMappings" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "events:PutRule", 
        "events:PutTargets", 
        "events:RemoveTargets", 
        "events:DeleteRule" 
      ], 
      "Resource": [ 
        "arn:aws:events:*:*:rule/AmazonCloudWatch-ApplicationInsights-*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "xray:GetServiceGraph", 
        "xray:GetTraceSummaries", 
        "xray:GetTimeSeriesServiceStatistics", 
        "xray:GetTraceGraph" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "dynamodb:ListTables", 
        "dynamodb:DescribeTable", 
        "dynamodb:DescribeContributorInsights", 
        "dynamodb:DescribeTimeToLive" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "application-autoscaling:DescribeScalableTargets" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "s3:ListAllMyBuckets", 
        "s3:GetMetricsConfiguration", 
        "s3:GetReplicationConfiguration" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
1205Amazon CloudWatch User Guide
Using service-linked roles for Application Insights
      "Effect": "Allow", 
      "Action": [ 
        "states:ListStateMachines", 
        "states:DescribeExecution", 
        "states:DescribeStateMachine", 
        "states:GetExecutionHistory" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "apigateway:GET" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "ecs:DescribeClusters", 
        "ecs:DescribeContainerInstances", 
        "ecs:DescribeServices", 
        "ecs:DescribeTaskDefinition", 
        "ecs:DescribeTasks", 
        "ecs:DescribeTaskSets", 
        "ecs:ListClusters", 
        "ecs:ListContainerInstances", 
        "ecs:ListServices", 
        "ecs:ListTasks" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "ecs:UpdateClusterSettings" 
      ], 
      "Resource": [ 
        "arn:aws:ecs:*:*:cluster/*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "eks:DescribeCluster", 
        "eks:DescribeFargateProfile", 
        "eks:DescribeNodegroup", 
        "eks:ListClusters", 
        "eks:ListFargateProfiles", 
        "eks:ListNodegroups", 
        "fsx:DescribeFileSystems", 
        "fsx:DescribeVolumes" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
1206Amazon CloudWatch User Guide
Using service-linked roles for Application Insights
        "sns:GetSubscriptionAttributes", 
        "sns:GetTopicAttributes", 
        "sns:GetSMSAttributes", 
        "sns:ListSubscriptionsByTopic", 
        "sns:ListTopics" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "sqs:ListQueues" 
      ], 
      "Resource": "*" 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "logs:DeleteSubscriptionFilter" 
      ], 
      "Resource": [ 
        "arn:aws:logs:*:*:log-group:*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "logs:PutSubscriptionFilter" 
      ], 
      "Resource": [ 
        "arn:aws:logs:*:*:log-group:*", 
        "arn:aws:logs:*:*:destination:AmazonCloudWatch-ApplicationInsights-
LogIngestionDestination*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "elasticfilesystem:DescribeFileSystems" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "route53:GetHostedZone", 
        "route53:GetHealthCheck", 
        "route53:ListHostedZones", 
        "route53:ListHealthChecks", 
        "route53:ListQueryLoggingConfigs" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "route53resolver:ListFirewallRuleGroupAssociations", 
        "route53resolver:GetFirewallRuleGroup", 
        "route53resolver:ListFirewallRuleGroups", 
        "route53resolver:ListResolverEndpoints", 
1207Amazon CloudWatch User Guide
Using service-linked roles for Application Insights
        "route53resolver:GetResolverQueryLogConfig", 
        "route53resolver:ListResolverQueryLogConfigs", 
        "route53resolver:ListResolverQueryLogConfigAssociations", 
        "route53resolver:GetResolverEndpoint", 
        "route53resolver:GetFirewallRuleGroupAssociation" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    } 
  ]
}
You must conﬁgure permissions to allow an IAM entity (such as a user, group, or role) to create, edit, or 
delete a service-linked role. For more information, see Service-Linked Role Permissions in the IAM User 
Guide .
Creating a service-linked role for CloudWatch Application 
Insights
You don't need to manually create a service-linked role. When you create a new Application Insights 
application in the AWS Management Console, CloudWatch Application Insights creates the service-linked 
role for you.
If you delete this service-linked role, and then want to create it again, you can use the same process to 
recreate the role in your account. When you create a new Application Insights application, CloudWatch 
Application Insights creates the service-linked role for you again.
Editing a service-linked role for CloudWatch Application Insights
CloudWatch Application Insights does not allow you to edit the AWSServiceRoleForApplicationInsights 
service-linked role. After you create a service-linked role, you cannot change the name of the role 
because various entities might reference the role. However, you can edit the description of the role using 
IAM. For more information, see Editing a Service-Linked Role in the IAM User Guide .
Deleting a service-linked role for CloudWatch Application 
Insights
If you no longer need to use a feature or service that requires a service-linked role, we recommend 
that you delete that role. That way you avoid having an unused entity that is not actively monitored or 
maintained. However, you must delete all applications in Application Insights before you can manually 
delete the role.
Note
If the CloudWatch Application Insights service is using the role when you try to delete the 
resources, the deletion might fail. If that happens, wait for a few minutes and try the operation 
again.
To delete CloudWatch Application Insights resources used by the 
AWSServiceRoleForApplicationInsights
• Delete all of your CloudWatch Application Insights applications. For more information, see "Deleting 
Your Application(s)" in the CloudWatch Application Insights User Guide.
To manually delete the service-linked role using IAM
Use the IAM console, the AWS CLI, or the AWS API to delete the AWSServiceRoleForApplicationInsights 
service-linked role. For more information, see Deleting a Service-Linked Role in the IAM User Guide .
1208Amazon CloudWatch User Guide
AWS managed policies for Application Insights
Supported Regions for CloudWatch Application Insights service-
linked roles
CloudWatch Application Insights supports using service-linked roles in all of the AWS Regions where the 
service is available. For more information, see CloudWatch Application Insights Regions and Endpoints.
AWS managed policies for Amazon CloudWatch 
Application Insights
An AWS managed policy is a standalone policy that is created and administered by AWS. AWS managed 
policies are designed to provide permissions for many common use cases so that you can start assigning 
permissions to users, groups, and roles.
Keep in mind that AWS managed policies might not grant least-privilege permissions for your speciﬁc 
use cases because they're available for all AWS customers to use. We recommend that you reduce 
permissions further by deﬁning  customer managed policies  that are speciﬁc to your use cases.
You cannot change the permissions deﬁned in AWS managed policies. If AWS updates the permissions 
deﬁned in an AWS managed policy, the update aﬀects all principal identities (users, groups, and roles) 
that the policy is attached to. AWS is most likely to update an AWS managed policy when a new AWS 
service is launched or new API operations become available for existing services.
For more information, see AWS managed policies in the IAM User Guide .
AWS managed policy: CloudWatchApplicationInsightsFullAccess
You can attach the CloudWatchApplicationInsightsFullAccess  policy to your IAM identities.
This policy grants administrative permissions that allow full access to Application Insights functionality.
Permissions details
This policy includes the following permissions.
•applicationinsights  – Allows full access to Application Insights functionality.
•iam – Allows Application Insights to create the service-linked role, 
AWSServiceRoleForApplicationInsights. This is required so that Application Insights can perform 
operations such as analyze the resource groups of a customer, create CloudFormation stacks to create 
alarms on metrics, and conﬁgure the CloudWatch Agent on EC2 instances. For more information, see
Using service-linked roles for CloudWatch Application Insights (p. 1201 ).
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
1209Amazon CloudWatch User Guide
AWS managed policies for Application Insights
      "Effect": "Allow", 
      "Action": "applicationinsights:*", 
      "Resource": "*" 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "ec2:DescribeInstances", 
        "ec2:DescribeVolumes", 
        "rds:DescribeDBInstances", 
        "rds:DescribeDBClusters", 
        "sqs:ListQueues", 
        "elasticloadbalancing:DescribeLoadBalancers", 
        "elasticloadbalancing:DescribeTargetGroups", 
        "elasticloadbalancing:DescribeTargetHealth", 
        "autoscaling:DescribeAutoScalingGroups", 
        "lambda:ListFunctions", 
        "dynamodb:ListTables", 
        "s3:ListAllMyBuckets", 
        "sns:ListTopics", 
        "states:ListStateMachines", 
        "apigateway:GET", 
        "ecs:ListClusters", 
        "ecs:DescribeTaskDefinition", 
        "ecs:ListServices", 
        "ecs:ListTasks", 
        "eks:ListClusters", 
        "eks:ListNodegroups", 
        "fsx:DescribeFileSystems", 
        "logs:DescribeLogGroups", 
        "elasticfilesystem:DescribeFileSystems" 
      ], 
      "Resource": "*" 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "iam:CreateServiceLinkedRole" 
      ], 
      "Resource": [ 
        "arn:aws:iam::*:role/aws-service-role/application-insights.amazonaws.com/
AWSServiceRoleForApplicationInsights" 
      ], 
      "Condition": { 
        "StringEquals": { 
          "iam:AWSServiceName": "application-insights.amazonaws.com" 
        } 
      } 
    } 
  ]
}
AWS managed policy: 
CloudWatchApplicationInsightsReadOnlyAccess
You can attach the CloudWatchApplicationInsightsReadOnlyAccess  policy to your IAM 
identities.
This policy grants administrative permissions that allow read-only access to all Application Insights 
functionality.
1210Amazon CloudWatch User Guide
AWS managed policies for Application Insights
Permissions details
This policy includes the following permissions.
•applicationinsights  – Allows read-only access to Application Insights functionality.
{ 
    "Version": "2012-10-17", 
    "Statement": [ 
        { 
            "Effect": "Allow", 
            "Action": [ 
                "applicationinsights:Describe*", 
                "applicationinsights:List*" 
            ], 
            "Resource": "*" 
        } 
    ]
}
AWS managed policy: 
CloudwatchApplicationInsightsServiceLinkedRolePolicy
You can't attach CloudwatchApplicationInsightsServiceLinkedRolePolicy to your IAM entities. This policy 
is attached to a service-linked role that allows Application Insights to monitor customer resources. For 
more information, see Using service-linked roles for CloudWatch Application Insights (p. 1201 ).
Application Insights updates to AWS managed policies
View details about updates to AWS managed policies for Application Insights since this service began 
tracking these changes. For automatic alerts about changes to this page, subscribe to the RSS feed on 
the Application Insights Document history (p. 1252 ) page.
Change Description Date
CloudwatchApplicationInsightsServiceLinkedRolePolicy (p. 1211 )
– Update to an existing policyApplication Insights added 
new permissions to list 
CloudFormation stacks.
These permissions are required 
for Amazon CloudWatch 
Application Insights to analyze 
and monitor AWS resources 
nested in the CloudFormation 
stack.April 24, 2023
CloudwatchApplicationInsightsServiceLinkedRolePolicy (p. 1211 )
– Update to an existing policyApplication Insights added 
new permissions to get list of January 23, 2023
1211Amazon CloudWatch User Guide
AWS managed policies for Application Insights
Change Description Date
Amazon VPC and Route 53 
resources.
These permissions are required 
for Amazon CloudWatch 
Application Insights to 
automatically set up best 
practice network monitoring 
with Amazon CloudWatch.
CloudwatchApplicationInsightsServiceLinkedRolePolicy (p. 1211 )
– Update to an existing policyApplication Insights added 
new permissions to get SSM 
command invocation results.
These permissions are required 
for Amazon CloudWatch 
Application Insights to 
automatically detect and 
monitor workloads running on 
Amazon EC2 instances.December 19, 2022
CloudwatchApplicationInsightsServiceLinkedRolePolicy (p. 1211 )
– Update to an existing policyApplication Insights added new 
permissions to describe Amazon 
VPC and Route 53 resources.
These permissions are required 
for Amazon CloudWatch 
Application Insights to 
read customer Amazon 
VPC and Route 53 resource 
conﬁgurations, and to help 
customers automatically set 
up best practice network 
monitoring with Amazon 
CloudWatch.December 19, 2022
CloudwatchApplicationInsightsServiceLinkedRolePolicy (p. 1211 )
– Update to an existing policyApplication Insights added new 
permissions to describe EFS 
resources.
These permissions are required 
for Amazon CloudWatch 
Application Insights to read 
Amazon EFS customer resource 
conﬁgurations, and to help 
customers automatically set 
up best practices for EFS 
monitoring with CloudWatch.October 3, 2022
1212Amazon CloudWatch User Guide
AWS managed policies for Application Insights
Change Description Date
CloudWatchApplicationInsightsFullAccess (p. 1209 )
– Update to an existing policyApplication Insights added new 
permissions to describe the EFS 
ﬁle system.
These permissions are required 
for Amazon CloudWatch 
Application Insights to create 
account-based applications by 
querying all of the supported 
resources in an account.October 3, 2022
CloudwatchApplicationInsightsServiceLinkedRolePolicy (p. 1211 )
– Update to an existing policyApplication Insights added 
new permissions to retrieve 
information about FSx resources.
These permissions are required 
for Amazon CloudWatch 
Application Insights to monitor 
workloads by retrieving 
suﬃcient information about the 
underlying FSx volumes.September 12, 2022
CloudWatchApplicationInsightsFullAccess (p. 1209 )
– Update to an existing policyApplication Insights added a 
new permission to describe log 
groups.
This permissions is required 
for Amazon CloudWatch 
Application Insights to ensure 
that the correct permissions for 
monitoring log groups are in an 
account when creating a new 
application.January 24, 2022
CloudwatchApplicationInsightsServiceLinkedRolePolicy (p. 1211 )
– Update to an existing policyApplication Insights added new 
permissions to create and delete 
CloudWatch Log Subscription 
Filters.
These permissions are required 
for Amazon CloudWatch 
Application Insights to create 
Subscription Filters to facilitate 
log monitoring of resources 
within conﬁgured applications.January 24, 2022
1213Amazon CloudWatch User Guide
AWS managed policies for Application Insights
Change Description Date
CloudWatchApplicationInsightsFullAccess (p. 1209 )
– Update to an existing policyApplication Insights added new 
permissions to describe target 
groups and target health for 
Elastic Load Balancers.
These permissions are required 
for Amazon CloudWatch 
Application Insights to create 
account-based applications by 
querying all of the supported 
resources in an account.November 4, 2021
CloudwatchApplicationInsightsServiceLinkedRolePolicy (p. 1211 )
– Update to an existing policyApplication Insights added 
new permissions to run 
the AmazonCloudWatch-
ManageAgent  SSM document 
on Amazon EC2 instances.
This permissions is required for 
Amazon CloudWatch Application 
Insights to clean up CloudWatch 
agent conﬁguration ﬁles created 
by Application Insights.September 30, 2021
CloudwatchApplicationInsightsServiceLinkedRolePolicy (p. 1211 )
– Update to an existing policyApplication Insights added new 
permissions to support account-
based application monitoring 
to onboard and monitor all 
supported resources in your 
account.
These permissions are required 
for Amazon CloudWatch 
Application Insights to query, 
tag resources, and create groups 
for these resources.
Application Insights added 
new permissions to support 
monitoring of SNS topics.
These permissions are required 
for Amazon CloudWatch 
Application Insights to gather 
metadata from SNS resources 
to conﬁgure monitoring for SNS 
topics.September 15, 2021
1214Amazon CloudWatch User Guide
AWS managed policies for Application Insights
Change Description Date
CloudWatchApplicationInsightsFullAccess (p. 1209 )
– Update to an existing policyApplication Insights added new 
permissions to describe and list 
supported resources.
These permissions are required 
for Amazon CloudWatch 
Application Insights to create 
account-based applications by 
querying all of the supported 
resources in an account.September 15, 2021
CloudwatchApplicationInsightsServiceLinkedRolePolicy (p. 1211 )
– Update to an existing policyApplication Insights added new 
permissions to describe FSx 
resources.
These permissions are required 
for Amazon CloudWatch 
Application Insights to 
read customer FSx resource 
conﬁgurations, and to help 
customers automatically set up 
best practice FSx monitoring 
with CloudWatch.August 31, 2021
CloudwatchApplicationInsightsServiceLinkedRolePolicy (p. 1211 )
– Update to an existing policyApplication Insights added new 
permissions to describe and list 
ECS and EKS service resources.
This permission is required 
for Amazon CloudWatch 
Application Insights to read 
customer container resources 
conﬁguration, and to help 
customers automatically set 
up best practice container 
monitoring with CloudWatch.May 18, 2021
CloudwatchApplicationInsightsServiceLinkedRolePolicy (p. 1211 )
– Update to an existing policyApplication Insights added new 
permissions to allow OpsCenter 
to tag OpsItems using the
ssm:AddTagsToResource
action on resources with the
opsitem resource type.
This permission is required by 
OpsCenter. Amazon CloudWatch 
Application Insights creates 
OpsItems so that the customer 
can resolve problems using AWS 
SSM OpsCenter.April 13, 2021
Application Insights started 
tracking changesApplication Insights started 
tracking changes for its AWS 
managed policies.April 13, 2021
1215Amazon CloudWatch User Guide
Amazon CloudWatch permissions reference
Amazon CloudWatch permissions reference
The following table lists each CloudWatch API operation and the corresponding actions for which you 
can grant permissions to perform the action. You specify the actions in the policy's Action ﬁeld, and you 
specify a wildcard character (*) as the resource value in the policy's Resource  ﬁeld.
You can use AWS-wide condition keys in your CloudWatch policies to express conditions. For a complete 
list of AWS-wide keys, see AWS Global and IAM Condition Context Keys in the IAM User Guide .
Note
To specify an action, use the cloudwatch:  preﬁx followed by the API operation name. For 
example: cloudwatch:GetMetricData , cloudwatch:ListMetrics , or cloudwatch:*  (for 
all CloudWatch actions).
Topics
•CloudWatch API operations and required permissions for actions (p. 1216 )
•CloudWatch Contributor Insights API operations and required permissions for actions (p. 1219 )
•CloudWatch Events API operations and required permissions for actions (p. 1219 )
•CloudWatch Logs API operations and required permissions for actions (p. 1220 )
•Amazon EC2 API operations and required permissions for actions (p. 1224 )
•Amazon EC2 Auto Scaling API operations and required permissions for actions (p. 1224 )
CloudWatch API operations and required permissions for actions
CloudWatch API operations Required permissions (API actions)
DeleteAlarms cloudwatch:DeleteAlarms
Required to delete an alarm.
DeleteDashboards cloudwatch:DeleteDashboards
Required to delete a dashboard.
DeleteMetricStream cloudwatch:DeleteMetricStream
Required to delete a metric stream.
DescribeAlarmHistory cloudwatch:DescribeAlarmHistory
Required to view alarm history. To retrieve 
information about composite alarms, your
cloudwatch:DescribeAlarmHistory
permission must have a * scope. You can't 
return information about composite alarms if 
your cloudwatch:DescribeAlarmHistory
permission has a narrower scope.
DescribeAlarms cloudwatch:DescribeAlarms
Required to retrieve information about alarms.
To retrieve information about composite 
alarms, your cloudwatch:DescribeAlarms
permission must have a * scope. You can't return 
information about composite alarms if your
1216Amazon CloudWatch User Guide
Amazon CloudWatch permissions reference
CloudWatch API operations Required permissions (API actions)
cloudwatch:DescribeAlarms  permission has a 
narrower scope.
DescribeAlarmsForMetric cloudwatch:DescribeAlarmsForMetric
Required to view alarms for a metric.
DisableAlarmActions cloudwatch:DisableAlarmActions
Required to disable an alarm action.
EnableAlarmActions cloudwatch:EnableAlarmActions
Required to enable an alarm action.
GetDashboard cloudwatch:GetDashboard
Required to display data about existing 
dashboards.
GetMetricData cloudwatch:GetMetricData
Required to graph metric data in the CloudWatch 
console, to retrieve large batches of metric data, 
and perform metric math on that data.
GetMetricStatistics cloudwatch:GetMetricStatistics
Required to view graphs in other parts of the 
CloudWatch console and in dashboard widgets.
GetMetricStream cloudwatch:GetMetricStream
Required to view information about a metric 
stream.
GetMetricWidgetImage cloudwatch:GetMetricWidgetImage
Required to retrieve a snapshot graph of one or 
more CloudWatch metrics as a bitmap image.
ListDashboards cloudwatch:ListDashboards
Required to view the list of CloudWatch 
dashboards in your account.
ListMetrics cloudwatch:ListMetrics
Required to view or search metric names within 
the CloudWatch console and in the CLI. Required 
to select metrics on dashboard widgets.
ListMetricStreams cloudwatch:ListMetricStreams
Required to view or search the list of metric 
streams in the account.
1217Amazon CloudWatch User Guide
Amazon CloudWatch permissions reference
CloudWatch API operations Required permissions (API actions)
PutCompositeAlarm cloudwatch:PutCompositeAlarm
Required to create a composite alarm.
To create a composite alarm, your
cloudwatch:PutCompositeAlarm  permission 
must have a * scope. You can't return 
information about composite alarms if your
cloudwatch:PutCompositeAlarm  permission 
has a narrower scope.
PutDashboard cloudwatch:PutDashboard
Required to create a dashboard or update an 
existing dashboard.
PutMetricAlarm cloudwatch:PutMetricAlarm
Required to create or update an alarm.
PutMetricData cloudwatch:PutMetricData
Required to create metrics.
PutMetricStream cloudwatch:PutMetricStream
Required to create a metric stream.
SetAlarmState cloudwatch:SetAlarmState
Required to manually set an alarm's state.
StartMetricStreams cloudwatch:StartMetricStreams
Required to start the ﬂow of metrics in a metric 
stream.
StopMetricStreams cloudwatch:StopMetricStreams
Required to temporarily stop the ﬂow of metrics 
in a metric stream.
TagResource cloudwatch:TagResource
Required to add or update tags on CloudWatch 
resources such as alarms and Contributor Insights 
rules.
UntagResource cloudwatch:UntagResource
Required to remove tags from CloudWatch 
resources .
1218Amazon CloudWatch User Guide
Amazon CloudWatch permissions reference
CloudWatch Contributor Insights API operations and required 
permissions for actions
Important
When you grant a user the cloudwatch:PutInsightRule  permission, by default that user 
can create a rule that evaluates any log group in CloudWatch Logs. You can add IAM policy 
conditions that limit these permissions for a user to include and exclude speciﬁc log groups. 
For more information, see Using condition keys to limit Contributor Insights users' access to log 
groups (p. 1191 ).
CloudWatch Contributor Insights API operationsRequired permissions (API actions)
DeleteInsightRules cloudwatch:DeleteInsightRules
Required to delete Contributor Insights rules.
DescribeInsightRules cloudwatch:DescribeInsightRules
Required to view the Contributor Insights rules in 
your account.
EnableInsightRules cloudwatch:EnableInsightRules
Required to enable Contributor Insights rules.
GetInsightRuleReport cloudwatch:GetInsightRuleReport
Required to retrieve time series data and other 
statistics collectd by Contributor Insights rules.
PutInsightRule cloudwatch:PutInsightRule
Required to create Contributor Insights rules. See 
the Important note at the beginning of this table.
CloudWatch Events API operations and required permissions for 
actions
CloudWatch Events API operations Required permissions (API actions)
DeleteRule events:DeleteRule
Required to delete a rule.
DescribeRule events:DescribeRule
Required to list the details about a rule.
DisableRule events:DisableRule
Required to disable a rule.
EnableRule events:EnableRule
Required to enable a rule.
ListRuleNamesByTarget events:ListRuleNamesByTarget
1219Amazon CloudWatch User Guide
Amazon CloudWatch permissions reference
CloudWatch Events API operationsRequired permissions (API actions)
Required to list rules associated with a target.
ListRules events:ListRules
Required to list all rules in your account.
ListTargetsByRule events:ListTargetsByRule
Required to list all targets associated with a rule.
PutEvents events:PutEvents
Required to add custom events that can be 
matched to rules.
PutRule events:PutRule
Required to create or update a rule.
PutTargets events:PutTargets
Required to add targets to a rule.
RemoveTargets events:RemoveTargets
Required to remove a target from a rule.
TestEventPattern events:TestEventPattern
Required to test an event pattern against a given 
event.
CloudWatch Logs API operations and required permissions for 
actions
CloudWatch Logs API operations Required permissions (API actions)
CancelExportTask logs:CancelExportTask
Required to cancel a pending or running export 
task.
CreateExportTask logs:CreateExportTask
Required to export data from a log group to an 
Amazon S3 bucket.
CreateLogGroup logs:CreateLogGroup
Required to create a new log group.
CreateLogStream logs:CreateLogStream
Required to create a new log stream in a log 
group.
DeleteDestination logs:DeleteDestination
1220Amazon CloudWatch User Guide
Amazon CloudWatch permissions reference
CloudWatch Logs API operationsRequired permissions (API actions)
Required to delete a log destination and disables 
any subscription ﬁlters to it.
DeleteLogGroup logs:DeleteLogGroup
Required to delete a log group and any associated 
archived log events.
DeleteLogStream logs:DeleteLogStream
Required to delete a log stream and any 
associated archived log events.
DeleteMetricFilter logs:DeleteMetricFilter
Required to delete a metric ﬁlter associated with a 
log group.
DeleteQueryDeﬁnition logs:DeleteQueryDefinition
Required to delete a saved query deﬁnition in 
CloudWatch Logs Insights.
DeleteResourcePolicy logs:DeleteResourcePolicy
Required to delete a CloudWatch Logs resource 
policy.
DeleteRetentionPolicy logs:DeleteRetentionPolicy
Required to delete a log group's retention policy.
DeleteSubscriptionFilter logs:DeleteSubscriptionFilter
Required to delete the subscription ﬁlter 
associated with a log group.
DescribeDestinations logs:DescribeDestinations
Required to view all destinations associated with 
the account.
DescribeExportTasks logs:DescribeExportTasks
Required to view all export tasks associated with 
the account.
DescribeLogGroups logs:DescribeLogGroups
Required to view all log groups associated with 
the account.
DescribeLogStreams logs:DescribeLogStreams
Required to view all log streams associated with a 
log group.
1221Amazon CloudWatch User Guide
Amazon CloudWatch permissions reference
CloudWatch Logs API operationsRequired permissions (API actions)
DescribeMetricFilters logs:DescribeMetricFilters
Required to view all metrics associated with a log 
group.
DescribeQueryDeﬁnitions logs:DescribeQueryDefinitions
Required to see the list of saved query deﬁnitions 
in CloudWatch Logs Insights.
DescribeQueries logs:DescribeQueries
Required to see the list of CloudWatch Logs 
Insights queries that are scheduled, executing, or 
have recently excecuted.
DescribeResourcePolicies logs:DescribeResourcePolicies
Required to view a list of CloudWatch Logs 
resource policies.
DescribeSubscriptionFilters logs:DescribeSubscriptionFilters
Required to view all subscription ﬁlters associated 
with a log group.
FilterLogEvents logs:FilterLogEvents
Required to sort log events by log group ﬁlter 
pattern.
GetLogEvents logs:GetLogEvents
Required to retrieve log events from a log stream.
GetLogGroupFields logs:GetLogGroupFields
Required to retrieve the list of ﬁelds that are 
included in the log events in a log group.
GetLogRecord logs:GetLogRecord
Required to retrieve the details from a single log 
event.
GetQueryResults logs:GetQueryResults
Required to retrieve the results of CloudWatch 
Logs Insights queries.
ListTagsLogGroup logs:ListTagsLogGroup
Required to list the tags associated with a log 
group.
PutDestination logs:PutDestination
Required to create or update a destination log 
stream (such as an Kinesis stream).
1222Amazon CloudWatch User Guide
Amazon CloudWatch permissions reference
CloudWatch Logs API operationsRequired permissions (API actions)
PutDestinationPolicy logs:PutDestinationPolicy
Required to create or update an access policy 
associated with an existing log destination.
PutLogEvents logs:PutLogEvents
Required to upload a batch of log events to a log 
stream.
PutMetricFilter logs:PutMetricFilter
Required to create or update a metric ﬁlter and 
associate it with a log group.
PutQueryDeﬁnition logs:PutQueryDefinition
Required to save a query in CloudWatch Logs 
Insights.
PutResourcePolicy logs:PutResourcePolicy
Required to create a CloudWatch Logs resource 
policy.
PutRetentionPolicy logs:PutRetentionPolicy
Required to set the number of days to keep log 
events (retention) in a log group.
PutSubscriptionFilter logs:PutSubscriptionFilter
Required to create or update a subscription ﬁlter 
and associate it with a log group.
StartQuery logs:StartQuery
Required to start CloudWatch Logs Insights 
queries.
StopQuery logs:StopQuery
Required to stop a CloudWatch Logs Insights 
query that is in progress.
TagLogGroup logs:TagLogGroup
Required to add or update log group tags.
TestMetricFilter logs:TestMetricFilter
Required to test a ﬁlter pattern against a 
sampling of log event messages.
1223Amazon CloudWatch User Guide
Compliance validation
Amazon EC2 API operations and required permissions for 
actions
Amazon EC2 API operations Required permissions (API actions)
DescribeInstanceStatus ec2:DescribeInstanceStatus
Required to view EC2 instance status details.
DescribeInstances ec2:DescribeInstances
Required to view EC2 instance details.
RebootInstances ec2:RebootInstances
Required to reboot an EC2 instance.
StopInstances ec2:StopInstances
Required to stop an EC2 instance.
TerminateInstances ec2:TerminateInstances
Required to terminate an EC2 instance.
Amazon EC2 Auto Scaling API operations and required 
permissions for actions
Amazon EC2 Auto Scaling API operations Required permissions (API actions)
Scaling autoscaling:Scaling
Required to scale an Auto Scaling group.
Trigger autoscaling:Trigger
Required to trigger an Auto Scaling action.
Compliance validation for Amazon CloudWatch
Third-party auditors assess the security and compliance of Amazon CloudWatch as part of multiple AWS 
compliance programs. These include SOC, PCI, FedRAMP, HIPAA, and others.
For a list of AWS services in scope of speciﬁc compliance programs, see AWS Services in Scope by 
Compliance Program. For general information, see AWS Compliance Programs.
You can download third-party audit reports using AWS Artifact. For more information, see Downloading 
Reports in AWS Artifact.
Your compliance responsibility when using Amazon CloudWatch is determined by the sensitivity of your 
data, your company's compliance objectives, and applicable laws and regulations. AWS provides the 
following resources to help with compliance:
1224Amazon CloudWatch User Guide
Resilience
•Security and Compliance Quick Start Guides – These deployment guides discuss architectural 
considerations and provide steps for deploying security- and compliance-focused baseline 
environments on AWS.
•Architecting for HIPAA Security and Compliance Whitepaper  – This whitepaper describes how 
companies can use AWS to create HIPAA-compliant applications.
•AWS Compliance Resources – This collection of workbooks and guides might apply to your industry 
and location.
•Evaluating Resources with Rules in the AWS Conﬁg Developer Guide – AWS Conﬁg; assesses how well 
your resource conﬁgurations comply with internal practices, industry guidelines, and regulations.
•AWS Security Hub – This AWS service provides a comprehensive view of your security state within AWS 
that helps you check your compliance with security industry standards and best practices.
Resilience in Amazon CloudWatch
The AWS global infrastructure is built around AWS Regions and Availability Zones. Regions provide 
multiple physically separated and isolated Availability Zones, which are connected through low-latency, 
high-throughput, and highly redundant networking. With Availability Zones, you can design and operate 
applications and databases that automatically fail over between zones without interruption. Availability 
Zones are more highly available, fault tolerant, and scalable than traditional single or multiple data 
center infrastructures.
For more information about AWS Regions and Availability Zones, see AWS Global Infrastructure.
Infrastructure security in Amazon CloudWatch
As a managed service, Amazon CloudWatch is protected by AWS global network security. For information 
about AWS security services and how AWS protects infrastructure, see AWS Cloud Security. To design 
your AWS environment using the best practices for infrastructure security, see Infrastructure Protection
in Security Pillar AWS Well‐Architected Framework.
You use AWS published API calls to access CloudWatch through the network. Clients must support the 
following:
•Transport Layer Security (TLS). We require TLS 1.2 and recommend TLS 1.3.
•Cipher suites with perfect forward secrecy (PFS) such as DHE (Ephemeral Diﬃe-Hellman) or ECDHE 
(Elliptic Curve Ephemeral Diﬃe-Hellman). Most modern systems such as Java 7 and later support these 
modes.
Additionally, requests must be signed by using an access key ID and a secret access key that is associated 
with an IAM principal. Or you can use the AWS Security Token Service (AWS STS) to generate temporary 
security credentials to sign requests.
Network isolation
A virtual private cloud (VPC) is a virtual network in your own logically isolated area in the Amazon Web 
Services Cloud. A subnet is a range of IP addresses in a VPC. You can deploy a variety of AWS resources 
in the subnets of your VPCs. For example, you can deploy Amazon EC2 instances, EMR clusters, and 
DynamoDB tables in subnets. For more information, see the Amazon VPC User Guide.
To enable CloudWatch to communicate with resources in a VPC without going through the public 
internet, use AWS PrivateLink. For more information, see Using CloudWatch and CloudWatch Synthetics 
with interface VPC endpoints (p. 1226 ).
1225Amazon CloudWatch User Guide
AWS Security Hub
A private subnet is a subnet with no default route to the public internet. Deploying an AWS resource in a 
private subnet does not prevent Amazon CloudWatch from collecting built-in metrics from the resource.
If you need to publish custom metrics from an AWS resource in a private subnet, you can do so using 
a proxy server. The proxy server forwards those HTTPS requests to the public API endpoints for 
CloudWatch.
AWS Security Hub
Monitor your usage of CloudWatch as it relates to security best practices by using AWS Security Hub. 
Security Hub uses security controls  to evaluate resource conﬁgurations and security standards  to help you 
comply with various compliance frameworks. For more information about using Security Hub to evaluate 
CloudWatch resources, see Amazon CloudWatch controls in the AWS Security Hub User Guide.
Using CloudWatch and CloudWatch Synthetics 
with interface VPC endpoints
If you use Amazon Virtual Private Cloud (Amazon VPC) to host your AWS resources, you can establish 
a private connection between your VPC, CloudWatch, and CloudWatch Synthetics. You can use these 
connections to enable CloudWatch and CloudWatch Synthetics to communicate with your resources on 
your VPC without going through the public internet.
Amazon VPC is an AWS service that you can use to launch AWS resources in a virtual network that you 
deﬁne. With a VPC, you have control over your network settings, such the IP address range, subnets, 
route tables, and network gateways. To connect your VPC to CloudWatch or CloudWatch Synthetics, you 
deﬁne an interface VPC endpoint to connect your VPC to AWS services. The endpoint provides reliable, 
scalable connectivity to CloudWatch or CloudWatch Synthetics without requiring an internet gateway, 
network address translation (NAT) instance, or VPN connection. For more information, see What Is 
Amazon VPC in the Amazon VPC User Guide .
Interface VPC endpoints are powered by AWS PrivateLink, an AWS technology that enables private 
communication between AWS services using an elastic network interface with private IP addresses. For 
more information, see the New – AWS PrivateLink for AWS Services blog post.
The following steps are for users of Amazon VPC. For more information, see Getting Started in the
Amazon VPC User Guide .
CloudWatch VPC endpoint
CloudWatch currently supports VPC endpoints in the following AWS Regions:
•US East (Ohio)
•US East (N. Virginia)
•US West (N. California)
•US West (Oregon)
•Asia Paciﬁc (Hong Kong)
•Asia Paciﬁc (Mumbai)
•Asia Paciﬁc (Seoul)
•Asia Paciﬁc (Singapore)
•Asia Paciﬁc (Sydney)
•Asia Paciﬁc (Tokyo)
1226Amazon CloudWatch User Guide
CloudWatch
•Canada (Central)
•Europe (Frankfurt)
•Europe (Ireland)
•Europe (London)
•Europe (Paris)
•Middle East (UAE)
•South America (São Paulo)
•AWS GovCloud (US-East)
•AWS GovCloud (US-West)
Creating a VPC endpoint for CloudWatch
To start using CloudWatch with your VPC, create an interface VPC endpoint for CloudWatch. The service 
name to choose is com.amazonaws. region.monitoring . For more information, see Creating an 
Interface Endpoint in the Amazon VPC User Guide .
You do not need to change the settings for CloudWatch. CloudWatch calls other AWS services using 
either public endpoints or private interface VPC endpoints, whichever are in use. For example, if you 
create an interface VPC endpoint for CloudWatch, and you already have metrics ﬂowing to CloudWatch 
from resources located on your VPC, these metrics begin ﬂowing through the interface VPC endpoint by 
default.
Controlling access to your CloudWatch VPC endpoint
A VPC endpoint policy is an IAM resource policy that you attach to an endpoint when you create or 
modify the endpoint. If you don't attach a policy when you create an endpoint, Amazon VPC attaches a 
default policy for you that allows full access to the service. An endpoint policy doesn't override or replace 
user policies or service-speciﬁc policies. It's a separate policy for controlling access from the endpoint to 
the speciﬁed service.
Endpoint policies must be written in JSON format.
For more information, see Controlling Access to Services with VPC Endpoints in the Amazon VPC User 
Guide .
The following is an example of an endpoint policy for CloudWatch. This policy allows users connecting 
to CloudWatch through the VPC to send metric data to CloudWatch and prevents them from performing 
other CloudWatch actions.
{ 
  "Statement": [ 
    { 
      "Sid": "PutOnly", 
      "Principal": "*", 
      "Action": [ 
        "cloudwatch:PutMetricData" 
      ], 
      "Effect": "Allow", 
      "Resource": "*" 
    } 
  ]
}
To edit the VPC endpoint policy for CloudWatch
1. Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.
1227Amazon CloudWatch User Guide
CloudWatch Synthetics
2. In the navigation pane, choose Endpoints .
3. If you have not already created the endpoint for CloudWatch, choose Create Endpoint . Select
com.amazonaws.region .monitoring , and then choose Create endpoint .
4. Select the com.amazonaws.region .monitoring  endpoint, and then choose the Policy tab.
5. Choose Edit Policy, and then make your changes.
CloudWatch Synthetics VPC endpoint
CloudWatch Synthetics currently supports VPC endpoints in the following AWS Regions:
•US East (Ohio)
•US East (N. Virginia)
•US West (N. California)
•US West (Oregon)
•Asia Paciﬁc (Hong Kong)
•Asia Paciﬁc (Mumbai)
•Asia Paciﬁc (Seoul)
•Asia Paciﬁc (Singapore)
•Asia Paciﬁc (Sydney)
•Asia Paciﬁc (Tokyo)
•Canada (Central)
•Europe (Frankfurt)
•Europe (Ireland)
•Europe (London)
•Europe (Paris)
•South America (São Paulo)
Creating a VPC endpoint for CloudWatch Synthetics
To start using CloudWatch Synthetics with your VPC, create an interface VPC endpoint for CloudWatch 
Synthetics. The service name to choose is com.amazonaws. region.synthetics . For more 
information, see Creating an Interface Endpoint in the Amazon VPC User Guide .
You do not need to change the settings for CloudWatch Synthetics. CloudWatch Synthetics 
communicates with other AWS services using either public endpoints or private interface VPC endpoints, 
whichever are in use. For example, if you create an interface VPC endpoint for CloudWatch Synthetics, 
and you already have a gateway endpoint for Amazon S3, CloudWatch Synthetics begins communicating 
with Amazon S3 through the interface VPC endpoint by default.
Controlling access to your CloudWatch Synthetics VPC endpoint
A VPC endpoint policy is an IAM resource policy that you attach to an endpoint when you create or 
modify the endpoint. If you don't attach a policy when you create an endpoint, we attach a default policy 
for you that allows full access to the service. An endpoint policy doesn't override or replace user policies 
or service-speciﬁc policies. It's a separate policy for controlling access from the endpoint to the speciﬁed 
service.
Endpoint policies aﬀect canaries that are managed privately by VPC. They are not needed for canaries 
that run on private subnets.
1228Amazon CloudWatch User Guide
Security considerations for Synthetics canaries
Endpoint policies must be written in JSON format.
For more information, see Controlling Access to Services with VPC Endpoints in the Amazon VPC User 
Guide .
The following is an example of an endpoint policy for CloudWatch Synthetics. This policy enables users 
connecting to CloudWatch Synthetics through the VPC to view information about canaries and their 
runs, but not to create, modify, or delete canaries.
{ 
    "Statement": [ 
        { 
            "Action": [ 
                "synthetics:DescribeCanaries", 
                "synthetics:GetCanaryRuns" 
            ], 
            "Effect": "Allow", 
            "Resource": "*", 
            "Principal": "*" 
        } 
    ]
}
To edit the VPC endpoint policy for CloudWatch Synthetics
1. Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.
2. In the navigation pane, choose Endpoints .
3. If you have not already created the endpoint for CloudWatch Synthetics, choose Create Endpoint . 
Select com.amazonaws.region .synthetics  and then choose Create endpoint .
4. Select the com.amazonaws.region .synthetics  endpoint and then choose the Policy tab.
5. Choose Edit Policy, and then make your changes.
Security considerations for Synthetics canaries
The following sections explain security issues that you should consider when creating and running 
canaries in Synthetics.
Use secure connections
Because canary code and the results from canary test runs can contain sensitive information, do not have 
your canary connect to endpoints over unencrypted connections. Always use encrypted connections, 
such as those that begin with https:// .
Canary naming considerations
The Amazon Resource Name (ARN) of a canary is included in the user-agent header as a part of 
outbound calls made from the Puppeteer-driven Chromium browser that is included as a part of the 
CloudWatch Synthetics wrapper library. This helps identify CloudWatch Synthetics canary traﬃc and 
relate it back to the canaries that are making calls.
The canary ARN includes the canary name. Choose canary names that do not reveal proprietary 
information.
Additionally, be sure to point your canaries only at websites and endpoints that you control.
1229Amazon CloudWatch User Guide
Secrets and sensitive information in canary code
Secrets and sensitive information in canary code
If you pass your canary code directly into the canary using a zip ﬁle, the contents of the script can be 
seen in AWS CloudTrail logs.
If you have sensitive information or secrets (such as access keys or database credentials) in a canary 
script, we strongly recommend that you store the script as a versioned object in Amazon S3 and pass the 
Amazon S3 location into the canary, instead of passing the canary code by a zip ﬁle.
If you do use a zip ﬁle to pass the canary script, we strongly recommend that you don't include secrets 
or sensitive information in your canary source code. For more information about how to use AWS Secrets 
Manager to help keep your secrets safe, see What is AWS Secrets Manager?.
Permissions considerations
We recommend that you restrict access to resources that are created or used by CloudWatch Synthetics. 
Use tight permissions on the Amazon S3 buckets where canaries store test run results and other artifacts, 
such as logs and screenshots.
Similarly, keep tight permissions on the locations where your canary source code is stored, so that no 
user accidentally or maliciously deletes the Lambda layers or Lambda functions used for the canary.
To help make sure you run the canary code you intend, you can use object versioning on the Amazon S3 
bucket where your canary code is stored. Then when you specify this code to run as a canary, you can 
include the object versionId  as part of the path, as in the following examples.
https:// bucket.s3.amazonaws.com/ path/object.zip?versionId= version-id
https://s3.amazonaws.com/ bucket/path/object.zip?versionId= version-id
https:// bucket.s3-region.amazonaws.com/ path/object.zip?versionId= version-id
Stack traces and exception messages
By default, CloudWatch Synthetics canaries capture any exception thrown by your canary script, no 
matter whether the script is custom or is from a blueprint. CloudWatch Synthetics logs both the 
exception message and the stack trace to three locations:
•Back into the CloudWatch Synthetics service to speed up debugging when you describe test runs
•Into CloudWatch Logs according to the conﬁguration that your Lambda functions are created with
•Into the Synthetics log ﬁle, which is a plaintext ﬁle that is uploaded to the Amazon S3 location 
speciﬁed by the value you set for the resultsLocation  of the canary
If you want to send and store less information, you can capture exceptions before they return to the 
CloudWatch Synthetics wrapper library.
You can also have request URLs in your errors. CloudWatch Synthetics scans for any URLs in 
the error thrown by your script and redacts restricted URL parameters from them based on the
restrictedUrlParameters conﬁguration. If you are logging error messages in your script, you can use
getSanitizedErrorMessage  (p. 345) to redact URLs before logging.
Scope your IAM roles narrowly
We recommend that you do not conﬁgure your canary to visit potentially malicious URLs or endpoints. 
Pointing your Canary to untrusted or unknown websites or endpoints could expose your Lambda 
function code to malicious user’s scripts. Assuming a malicious website can break out of Chromium, 
1230Amazon CloudWatch User Guide
Sensitive data redaction
it could have access to your Lambda code in a similar way to if you connected to it using an internet 
browser.
Run your Lambda function with an IAM execution role that has scoped-down permissions. This way, if 
your Lambda function is compromised by a malicious script, it is limited in the actions it can take when 
running as your canary’s AWS account.
When you use the CloudWatch console to create a canary, it is created with a scoped-down IAM 
execution role.
Sensitive data redaction
CloudWatch Synthetics captures URLs, status code, failure reason (if any), and headers and bodies of 
requests and responses. This enables a canary user to understand, monitor, and debug canaries.
The conﬁgurations described in the following sections can be set at any point in canary execution. You 
can also choose to apply diﬀerent conﬁgurations to diﬀerent synthetics steps.
Request URLs
By default, CloudWatch Synthetics logs request URLs, status codes, and the status reason for each URL 
in canary logs. Request URLs can also appear in canary execution reports, HAR ﬁles, and so on. Your 
request URL might contain sensitive query parameters, such as access tokens or passwords. You can 
redact sensitive information from being logged by CloudWatch Synthetics.
To redact sensitive information, set the conﬁguration property restrictedUrlParameters. For more 
information, see SyntheticsConﬁguration class (p. 334). This causes CloudWatch Synthetics to redact 
URL parameters, including path and query parameter values, based on restrictedUrlParameters before 
logging. If you are logging URLs in your script, you can use getSanitizedUrl(url, stepConﬁg = null) (p. 344)
to redact URLs before logging. For more information, see SyntheticsLogHelper class (p. 343).
Headers
By default, CloudWatch Synthetics doesn't log request/response headers. For UI canaries, this is the 
default behavior for canaries using runtime version syn-nodejs-puppeteer-3.2  and later.
If your headers don't contain sensitive information, you can enable headers in HAR ﬁle and HTTP reports 
by setting the includeRequestHeaders and includeResponseHeaders properties to true. You can 
enable all headers but choose to restrict values of sensitive header keys. For example, you can choose to 
only redact Authorization  headers from artifacts produced by canaries.
Request and response body
By default, CloudWatch Synthetics doesn't log the request/response body in canary logs or reports. 
This information is particularly useful for API canaries. Synthetics captures all HTTP requests and can 
show headers, request and response bodies. For more information, see executeHttpStep(stepName, 
requestOptions, [callback], [stepConﬁg]) (p. 353). You can choose to enable request/response body by 
setting the includeRequestBody and includeResponseBody properties to true .
1231Amazon CloudWatch User Guide
CloudWatch information in CloudTrail
Logging Amazon CloudWatch API 
calls with AWS CloudTrail
Amazon CloudWatch and CloudWatch Synthetics are integrated with AWS CloudTrail, a service that 
provides a record of actions taken by a user, role, or an AWS service. CloudTrail captures API calls made 
by or on behalf of your AWS account. The captured calls include calls from the console and code calls to 
API operations.
If you create a trail, you can enable continuous delivery of CloudTrail events to an S3 bucket, including 
events for CloudWatch. If you don't conﬁgure a trail, you can still view the most recent events in the 
CloudTrail console in Event history. Using the information collected by CloudTrail, you can determine 
the request that was made to CloudWatch, the IP address from which the request was made, who made 
the request, when it was made, and other details.
To learn more about CloudTrail, including how to conﬁgure and enable it, see the AWS CloudTrail User 
Guide .
Every event or log entry contains information about who generated the request. The identity 
information helps you determine the following:
•Whether the request was made with root or AWS Identity and Access Management (IAM) user 
credentials.
•Whether the request was made with temporary security credentials for a role or federated user.
•Whether the request was made by another AWS service.
For more information, see the CloudTrail userIdentity Element.
For an ongoing record of events in your AWS account, including events for CloudWatch and CloudWatch 
Synthetics, create a trail. A trail enables CloudTrail to deliver log ﬁles to an S3 bucket. By default, 
when you create a trail in the console, the trail applies to all AWS Regions. The trail logs events from 
all Regions in the AWS partition and delivers the log ﬁles to the S3 bucket that you specify. You can 
conﬁgure other AWS services to further analyze and act on the event data collected in CloudTrail logs. 
For more information, see the following:
•Overview for Creating a Trail
•CloudTrail Supported Services and Integrations
•Conﬁguring Amazon SNS Notiﬁcations for CloudTrail
•Receiving CloudTrail Log Files from Multiple Regions and Receiving CloudTrail Log Files from Multiple 
Accounts
Topics
•CloudWatch information in CloudTrail (p. 1232 )
•CloudWatch Internet Monitor in CloudTrail (p. 1235 )
•CloudWatch Synthetics information in CloudTrail (p. 1236 )
CloudWatch information in CloudTrail
CloudWatch supports logging the following actions as events in CloudTrail log ﬁles:
1232Amazon CloudWatch User Guide
Example: CloudWatch log ﬁle entries
•DeleteAlarms
•DeleteAnomalyDetector
•DeleteDashboards
•DescribeAlarmHistory
•DescribeAlarms
•DescribeAlarmsForMetric
•DescribeAnomalyDetectors
•DisableAlarmActions
•EnableAlarmActions
•GetDashboard
•ListDashboards
•PutAnomalyDetector
•PutDashboard
•PutMetricAlarm
•SetAlarmState
Example: CloudWatch log ﬁle entries
The following example shows a CloudTrail log entry that demonstrates the PutMetricAlarm  action.
{ 
    "Records": [{ 
        "eventVersion": "1.01", 
        "userIdentity": { 
            "type": "Root", 
            "principalId": "EX_PRINCIPAL_ID", 
            "arn": "arn:aws:iam::123456789012:root", 
            "accountId": "123456789012", 
            "accessKeyId": "EXAMPLE_KEY_ID" 
        }, 
        "eventTime": "2014-03-23T21:50:34Z", 
        "eventSource": "monitoring.amazonaws.com", 
        "eventName": "PutMetricAlarm", 
        "awsRegion": "us-east-1", 
        "sourceIPAddress": "127.0.0.1", 
        "userAgent": "aws-sdk-ruby2/2.0.0.rc4 ruby/1.9.3 x86_64-linux Seahorse/0.1.0", 
        "requestParameters": { 
            "threshold": 50.0, 
            "period": 60, 
            "metricName": "CloudTrail Test", 
            "evaluationPeriods": 3, 
            "comparisonOperator": "GreaterThanThreshold", 
            "namespace": "AWS/CloudWatch", 
            "alarmName": "CloudTrail Test Alarm", 
            "statistic": "Sum" 
        }, 
        "responseElements": null, 
        "requestID": "29184022-b2d5-11e3-a63d-9b463e6d0ff0", 
        "eventID": "b096d5b7-dcf2-4399-998b-5a53eca76a27" 
    }, 
    ..additional entries 
  ] 
  }
The following log ﬁle entry shows that a user called the CloudWatch Events PutRule action.
1233Amazon CloudWatch User Guide
Example: CloudWatch log ﬁle entries
{ 
         "eventVersion":"1.03", 
         "userIdentity":{ 
            "type":"Root", 
            "principalId":"123456789012", 
            "arn":"arn:aws:iam::123456789012:root", 
            "accountId":"123456789012", 
            "accessKeyId":"AKIAIOSFODNN7EXAMPLE", 
            "sessionContext":{ 
               "attributes":{ 
                  "mfaAuthenticated":"false", 
                  "creationDate":"2015-11-17T23:56:15Z" 
               } 
            } 
         }, 
         "eventTime":"2015-11-18T00:11:28Z", 
         "eventSource":"events.amazonaws.com", 
         "eventName":"PutRule", 
         "awsRegion":"us-east-1", 
         "sourceIPAddress":"AWS Internal", 
         "userAgent":"AWS CloudWatch Console", 
         "requestParameters":{ 
            "description":"", 
            "name":"cttest2", 
            "state":"ENABLED", 
            "eventPattern":"{\"source\":[\"aws.ec2\"],\"detail-type\":[\"EC2 Instance 
 State-change Notification\"]}", 
            "scheduleExpression":"" 
         }, 
         "responseElements":{ 
            "ruleArn":"arn:aws:events:us-east-1:123456789012:rule/cttest2" 
         }, 
         "requestID":"e9caf887-8d88-11e5-a331-3332aa445952", 
         "eventID":"49d14f36-6450-44a5-a501-b0fdcdfaeb98", 
         "eventType":"AwsApiCall", 
         "apiVersion":"2015-10-07", 
         "recipientAccountId":"123456789012"
}
The following log ﬁle entry shows that a user called the CloudWatch Logs CreateExportTask  action.
{ 
        "eventVersion": "1.03", 
        "userIdentity": { 
            "type": "IAMUser", 
            "principalId": "EX_PRINCIPAL_ID", 
            "arn": "arn:aws:iam::123456789012:user/someuser", 
            "accountId": "123456789012", 
            "accessKeyId": "AKIAIOSFODNN7EXAMPLE", 
            "userName": "someuser" 
        }, 
        "eventTime": "2016-02-08T06:35:14Z", 
        "eventSource": "logs.amazonaws.com", 
        "eventName": "CreateExportTask", 
        "awsRegion": "us-east-1", 
        "sourceIPAddress": "127.0.0.1", 
        "userAgent": "aws-sdk-ruby2/2.0.0.rc4 ruby/1.9.3 x86_64-linux Seahorse/0.1.0", 
        "requestParameters": { 
            "destination": "yourdestination", 
            "logGroupName": "yourloggroup", 
            "to": 123456789012, 
            "from": 0, 
            "taskName": "yourtask" 
        }, 
1234Amazon CloudWatch User Guide
CloudWatch Internet Monitor in CloudTrail
        "responseElements": { 
            "taskId": "15e5e534-9548-44ab-a221-64d9d2b27b9b" 
        }, 
        "requestID": "1cd74c1c-ce2e-12e6-99a9-8dbb26bd06c9", 
        "eventID": "fd072859-bd7c-4865-9e76-8e364e89307c", 
        "eventType": "AwsApiCall", 
        "apiVersion": "20140328", 
        "recipientAccountId": "123456789012"
}
CloudWatch Internet Monitor in CloudTrail
CloudWatch Internet Monitor supports logging the following actions as events in CloudTrail log ﬁles: 
(Links to API Reference Guide to be added at release)
Example: CloudWatch Internet Monitor log ﬁle 
entries
The following example shows a CloudTrail Internet Monitor log entry that demonstrates the
ListMonitors  action.
{ 
        "eventVersion": "1.08", 
        "userIdentity": { 
            "type": "AssumedRole", 
            "principalId": "EX_PRINCIPAL_ID", 
            "arn": "arn:aws:iam::000000000000:assumed-role/role_name", 
            "accountId":"123456789012", 
            "accessKeyId":"AKIAIOSFODNN7EXAMPLE", 
            "sessionContext": { 
                "sessionIssuer": { 
                "type": "Role", 
                "principalId": "EX_PRINCIPAL_ID", 
                "arn": "arn:aws:iam::000000000000:role/Admin", 
                "accountId":"123456789012", 
                "userName": "SAMPLE_NAME" 
                }, 
                "webIdFederationData": {}, 
                "attributes": { 
                    "creationDate": "2022-10-11T17:25:41Z", 
                    "mfaAuthenticated": "false" 
                } 
            } 
        }, 
        "eventTime": "2022-10-11T17:30:18Z", 
        "eventSource": "internetmonitor.amazonaws.com", 
        "eventName": "ListMonitors", 
        "awsRegion": "us-east-2", 
        "sourceIPAddress": "192.0.2.0", 
        "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)", 
        "requestParameters": null, 
        "responseElements": null, 
        "requestID": "a1b2c3d4-5678-90ab-cdef-EXAMPLE11111", 
        "eventID": "a1b2c3d4-5678-90ab-cdef-EXAMPLEbbbbb", 
        "readOnly": true, 
        "eventType": "AwsApiCall", 
        "managementEvent": true, 
        "recipientAccountId": "111122223333", 
        "eventCategory": "Management" 
1235Amazon CloudWatch User Guide
CloudWatch Synthetics information in CloudTrail
    }
The following example shows a CloudTrail Internet Monitor log entry that demonstrates the
CreateMonitor  action.
{ 
        "eventVersion": "1.08", 
        "userIdentity": { 
            "type": "AssumedRole", 
            "principalId": "EX_PRINCIPAL_ID", 
            "arn": "arn:aws:iam::000000000000:assumed-role/role_name", 
            "accountId":"123456789012", 
            "accessKeyId":"AKIAIOSFODNN7EXAMPLE", 
            "sessionContext": { 
                "sessionIssuer": { 
                "type": "Role", 
                "principalId": "EX_PRINCIPAL_ID", 
                "arn": "arn:aws:iam::000000000000:role/Admin", 
                "accountId":"123456789012", 
                "userName": "SAMPLE_NAME" 
                }, 
                "webIdFederationData": {}, 
                "attributes": { 
                    "creationDate": "2022-10-11T17:25:41Z", 
                    "mfaAuthenticated": "false" 
                } 
            } 
        }, 
        "eventTime": "2022-10-11T17:30:08Z", 
        "eventSource": "internetmonitor.amazonaws.com", 
        "eventName": "CreateMonitor", 
        "awsRegion": "us-east-2", 
        "sourceIPAddress": "192.0.2.0", 
        "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)", 
        "requestParameters": { 
            "MonitorName": "TestMonitor", 
            "Resources": ["arn:aws:ec2:us-east-2:444455556666:vpc/vpc-febc0b95"], 
            "ClientToken": "a1b2c3d4-5678-90ab-cdef-EXAMPLE33333" 
        }, 
        "responseElements": { 
            "Arn": "arn:aws:internetmonitor:us-east-2:444455556666:monitor/ct-onboarding-
test", 
            "Status": "PENDING" 
        }, 
        "requestID": "a1b2c3d4-5678-90ab-cdef-EXAMPLE11111", 
        "eventID": "a1b2c3d4-5678-90ab-cdef-EXAMPLEbbbbb", 
        "readOnly": false, 
        "eventType": "AwsApiCall", 
        "managementEvent": true, 
        "recipientAccountId": "111122223333", 
        "eventCategory": "Management" 
    }
CloudWatch Synthetics information in CloudTrail
CloudWatch Synthetics supports logging the following actions as events in CloudTrail log ﬁles:
•CreateCanary
•DeleteCanary
•DescribeCanaries
1236Amazon CloudWatch User Guide
Example: CloudWatch Synthetics log ﬁle entries
•DescribeCanariesLastRun
•DescribeRuntimeVersions
•GetCanary
•GetCanaryRuns
•ListTagsForResource
•StartCanary
•StopCanary
•TagResource
•UntagResource
•UpdateCanary
Example: CloudWatch Synthetics log ﬁle entries
The following example shows a CloudTrail Synthetics log entry that demonstrates the
DescribeCanaries  action.
{ 
    "eventVersion": "1.05", 
    "userIdentity": { 
        "type": "AssumedRole", 
        "principalId": "EX_PRINCIPAL_ID", 
        "arn": "arn:aws:iam::123456789012:assumed-role/role_name", 
        "accountId":"123456789012", 
        "accessKeyId":"AKIAIOSFODNN7EXAMPLE", 
        "sessionContext": { 
            "sessionIssuer": { 
                "type": "Role", 
                "principalId": "EX_PRINCIPAL_ID", 
                "arn": "arn:aws:iam::111222333444:role/Administrator", 
                "accountId":"123456789012", 
                "userName": "SAMPLE_NAME" 
            }, 
            "webIdFederationData": {}, 
            "attributes": { 
                "mfaAuthenticated": "false", 
                "creationDate": "2020-04-08T21:43:24Z" 
            } 
        } 
    }, 
    "eventTime": "2020-04-08T23:06:47Z", 
    "eventSource": "synthetics.amazonaws.com", 
    "eventName": "DescribeCanaries", 
    "awsRegion": "us-east-1", 
    "sourceIPAddress": "127.0.0.1", 
    "userAgent": "aws-internal/3 aws-sdk-java/1.11.590 
 Linux/4.9.184-0.1.ac.235.83.329.metal1.x86_64 OpenJDK_64-Bit_Server_VM/25.212-b03 
 java/1.8.0_212 vendor/Oracle_Corporation", 
    "requestParameters": null, 
    "responseElements": null, 
    "requestID": "201ed5f3-15db-4f87-94a4-123456789", 
    "eventID": "73ddbd81-3dd0-4ada-b246-123456789", 
    "readOnly": true, 
    "eventType": "AwsApiCall", 
    "recipientAccountId": "111122223333"
}
The following example shows a CloudTrail Synthetics log entry that demonstrates the UpdateCanary
action.
1237Amazon CloudWatch User Guide
Example: CloudWatch Synthetics log ﬁle entries
{ 
    "eventVersion": "1.05", 
    "userIdentity": { 
        "type": "AssumedRole", 
        "principalId": "EX_PRINCIPAL_ID", 
        "arn": "arn:aws:iam::123456789012:assumed-role/role_name", 
        "accountId":"123456789012", 
        "accessKeyId":"AKIAIOSFODNN7EXAMPLE", 
        "sessionContext": { 
            "sessionIssuer": { 
               "type": "Role", 
                "principalId": "EX_PRINCIPAL_ID", 
                "arn": "arn:aws:iam::111222333444:role/Administrator", 
       "accountId":"123456789012", 
                "userName": "SAMPLE_NAME" 
            }, 
            "webIdFederationData": {}, 
            "attributes": { 
                "mfaAuthenticated": "false", 
                "creationDate": "2020-04-08T21:43:24Z" 
            } 
        } 
    }, 
    "eventTime": "2020-04-08T23:06:47Z", 
    "eventSource": "synthetics.amazonaws.com", 
    "eventName": "UpdateCanary", 
    "awsRegion": "us-east-1", 
    "sourceIPAddress": "192.0.2.0", 
    "userAgent": "aws-internal/3 aws-sdk-java/1.11.590 
 Linux/4.9.184-0.1.ac.235.83.329.metal1.x86_64 OpenJDK_64-Bit_Server_VM/25.212-b03 
 java/1.8.0_212 vendor/Oracle_Corporation", 
    "requestParameters": { 
        "Schedule": { 
            "Expression": "rate(1 minute)" 
        }, 
        "name": "sample_canary_name", 
        "Code": { 
            "Handler": "myOwnScript.handler", 
            "ZipFile": "SAMPLE_ZIP_FILE" 
        } 
    }, 
    "responseElements": null, 
    "requestID": "fe4759b0-0849-4e0e-be71-1234567890", 
    "eventID": "9dc60c83-c3c8-4fa5-bd02-1234567890", 
    "readOnly": false, 
    "eventType": "AwsApiCall", 
    "recipientAccountId": "111122223333"
}
The following example shows a CloudTrail Synthetics log entry that demonstrates the GetCanaryRuns
action.
{ 
    "eventVersion": "1.05", 
    "userIdentity": { 
        "type": "AssumedRole", 
        "principalId": "EX_PRINCIPAL_ID", 
        "arn": "arn:aws:iam::123456789012:assumed-role/role_name", 
        "accountId":"123456789012", 
        "accessKeyId":"AKIAIOSFODNN7EXAMPLE", 
        "sessionContext": { 
            "sessionIssuer": { 
                "type": "Role", 
                "principalId": "EX_PRINCIPAL_ID", 
1238Amazon CloudWatch User Guide
Example: CloudWatch Synthetics log ﬁle entries
                "arn": "arn:aws:iam::111222333444:role/Administrator", 
       "accountId":"123456789012", 
                "userName": "SAMPLE_NAME" 
            }, 
            "webIdFederationData": {}, 
            "attributes": { 
                "mfaAuthenticated": "false", 
                "creationDate": "2020-04-08T21:43:24Z" 
            } 
        } 
    }, 
    "eventTime": "2020-04-08T23:06:30Z", 
    "eventSource": "synthetics.amazonaws.com", 
    "eventName": "GetCanaryRuns", 
    "awsRegion": "us-east-1", 
    "sourceIPAddress": "127.0.0.1", 
    "userAgent": "aws-internal/3 aws-sdk-java/1.11.590 
 Linux/4.9.184-0.1.ac.235.83.329.metal1.x86_64 OpenJDK_64-Bit_Server_VM/25.212-b03 
 java/1.8.0_212 vendor/Oracle_Corporation", 
    "requestParameters": { 
        "Filter": "TIME_RANGE", 
        "name": "sample_canary_name", 
        "FilterValues": [ 
            "2020-04-08T23:00:00.000Z", 
            "2020-04-08T23:10:00.000Z" 
        ] 
    }, 
    "responseElements": null, 
    "requestID": "2f56318c-cfbd-4b60-9d93-1234567890", 
    "eventID": "52723fd9-4a54-478c-ac55-1234567890", 
    "readOnly": true, 
    "eventType": "AwsApiCall", 
    "recipientAccountId": "111122223333"
}
1239Amazon CloudWatch User Guide
Supported resources in CloudWatch
Tagging your Amazon CloudWatch 
resources
A tag is a custom attribute label that you or AWS assigns to an AWS resource. Each tag has two parts:
•A tag key  (for example, CostCenter , Environment , or Project). Tag keys are case sensitive.
•An optional ﬁeld known as a tag value  (for example, 111122223333  or Production ). Omitting the 
tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.
Tags help you do the following:
•Identify and organize your AWS resources. Many AWS services support tagging, so you can assign the 
same tag to resources from diﬀerent services to indicate that the resources are related. For example, 
you can assign the same tag to a CloudWatch rule that you assign to an EC2 instance.
•Track your AWS costs. You activate these tags on the AWS Billing and Cost Management dashboard. 
AWS uses the tags to categorize your costs and deliver a monthly cost allocation report to you. For 
more information, see Use Cost Allocation Tags in the AWS Billing User Guide.
The following sections provide more information about tags for CloudWatch.
Supported resources in CloudWatch
The following resources in CloudWatch support tagging:
•Alarms – You can tag alarms using the tag-resource AWS CLI command and the TagResource API. You 
can also view and manage your alarm tags using the Alarms  details page in the CloudWatch console.
•Canaries – You can tag canaries using the CloudWatch console. For more information, see Creating a 
canary (p. 303).
•Contributor Insights rules – You can tag Contributor Insights rules when you create them by using the
put-insight-rule AWS CLI command and the PutInsightRule  API. You can add tags to existing rules by 
using the tag-resource AWS CLI command and the TagResource API.
•Metric streams – You can tag metric streams when you create them by using the put-metric-stream
AWS CLI command and the PutMetricStream API. You can add tags to existing metric streams by using 
the tag-resource AWS CLI command and the TagResource API.
For information about adding and managing tags, see Managing tags  (p. 1240 ).
Managing tags
Tags consist of the Key and Value properties on a resource. You can use the CloudWatch console, the 
AWS CLI, or the CloudWatch API to add, edit, or delete the values for these properties. For information 
about working with tags, see the following:
•TagResource, UntagResource, and ListTagsForResource in the Amazon CloudWatch API Reference
•tag-resource, untag-resource, and list-tags-for-resource in the Amazon CloudWatch CLI Reference
1240Amazon CloudWatch User Guide
Tag naming and usage conventions
•Working with Tag Editor in the Resource Groups User Guide
Tag naming and usage conventions
The following basic naming and usage conventions apply to using tags with CloudWatch resources:
•Each resource can have a maximum of 50 tags.
•For each resource, each tag key must be unique, and each tag key can have only one value.
•The maximum tag key length is 128 Unicode characters in UTF-8.
•The maximum tag value length is 256 Unicode characters in UTF-8.
•Allowed characters are letters, numbers, spaces representable in UTF-8, and the following characters:
. : + = @ _ / -  (hyphen).
•Tag keys and values are case sensitive. As a best practice, decide on a strategy for capitalizing tags and 
consistently implement that strategy across all resource types. For example, decide whether to use
Costcenter , costcenter , or CostCenter  and use the same convention for all tags. Avoid using 
similar tags with inconsistent case treatment.
•The aws: preﬁx is prohibited for tags because it's reserved for AWS use. You can't edit or delete tag 
keys or values with this preﬁx. Tags with this preﬁx don't count against your tags per resource limit.
1241Amazon CloudWatch User Guide
Grafana integration
You can use Grafana version 6.5.0 and later to contextually advance through the CloudWatch console 
and query a dynamic list of metrics by using wildcards. This can help you monitor metrics for AWS 
resources, such as Amazon Elastic Compute Cloud instances or containers. When new instances are 
created as part of an Auto Scaling event, they appear in the graph automatically. You don't need to track 
the new instance IDs. Prebuilt dashboards help simplify the getting started experience for monitoring 
Amazon EC2, Amazon Elastic Block Store, and AWS Lambda resources.
You can use Grafana version 7.0 and later to perform CloudWatch Logs Insights queries on log groups 
in CloudWatch Logs. You can visualize your query results in bar, line, and stacked graphs and in a table 
format. For more information about CloudWatch Logs Insights, see Analyzing Log Data with CloudWatch 
Logs Insights .
For more information about how to get started, see Using AWS CloudWatch in Grafana in the Grafana 
Labs documentation.
1242Amazon CloudWatch User Guide
Enabling cross-account cross-Region functionality
Cross-account cross-Region 
CloudWatch console
To get the richest cross-account observability and discovery experience for your metrics, logs, and 
traces, we recommend that you use CloudWatch cross-account observability. For more information, see
CloudWatch cross-account observability (p. 846).
CloudWatch also oﬀers a cross-account, cross-Region CloudWatch dashboard. This functionality provides 
you with cross-account visibility to your dashboards, alarms, metrics, and automatic dashboards. It does 
not provide cross-account visibility for logs or for traces.
If you are also using CloudWatch cross-account observability, one use case for this cross-account 
CloudWatch dashboard is to let one of your CloudWatch cross-account observability source accounts see 
the metrics from another source account.
The rest of this section describes the cross-account, cross-Region dashboard. You can use it to create 
dashboards that summarize CloudWatch data from multiple AWS accounts and multiple AWS Regions 
into a single dashboard. You can also create an alarm in one account that watches a metric located in a 
diﬀerent account.
Many organizations have their AWS resources deployed in multiple accounts, to provide billing and 
security boundaries. In this case, we recommend that you designate one or more of your accounts as your 
monitoring accounts, and build your cross-account dashboards in these accounts.
Cross-account functionality is integrated with AWS Organizations, to help you eﬃciently build your 
cross-account dashboards.
Cross-Region functionality
Cross-Region functionality is now built in automatically. You do not need to take any extra steps to 
be able to display metrics from diﬀerent Regions in a single account on the same graph or the same 
dashboard. Cross-Region functionality is not supported for alarms, so you can't create an alarm in one 
Region that watches a metric in a diﬀerent Region.
Topics
•Enabling cross-account functionality in CloudWatch (p. 1243 )
•(Optional) Integrate with AWS Organizations (p. 1246 )
•Troubleshooting your CloudWatch cross-account setup (p. 1246 )
•Disabling and cleaning up after using cross-account (p. 1247 )
Enabling cross-account functionality in 
CloudWatch
To set up cross-account functionality in your CloudWatch console, use the CloudWatch console to set up 
your sharing accounts and monitoring accounts.
Set up a sharing account
You must enable sharing in each account that will make data available to the monitoring account.
1243Amazon CloudWatch User Guide
Enabling cross-account cross-Region functionality
This will grant the read-only permissions that you choose in step 5 to all users that view a cross account 
dashboard in the account that you share with, if the user has corresponding permissions in the account 
that you share with.
To enable your account to share CloudWatch data with other accounts
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Settings.
3. For Share your CloudWatch data, choose Conﬁgure .
4. For Sharing , choose Speciﬁc accounts and enter the IDs of the accounts that you want to share data 
with.
Any accounts that you specify here can view your account's CloudWatch data. Specify the IDs only of 
accounts that you know and trust.
5. For Permissions, specify how to share your data with one of the following options:
•Provide read-only access to your CloudWatch metrics, dashboards, and alarms. This option 
enables the monitoring accounts to create cross-account dashboards that include widgets that 
contain CloudWatch data from your account.
•Include CloudWatch automatic dashboards. If you select this option, users in the monitoring 
account can also view the information in this account's automatic dashboards. For more 
information, see Getting started with Amazon CloudWatch (p. 12).
•Include X-Ray read-only access for ServiceLens. If you select this option, users in the monitoring 
account can also view the ServiceLens service map and X-Ray trace information in this account. 
For more information, see Using ServiceLens to monitor the health of your applications (p. 229).
•Full read-only access to everything in your account. This option enables the accounts that you 
use for sharing to create cross-account dashboards that include widgets that contain CloudWatch 
data from your account. It also enables those accounts to look deeper into your account and view 
your account's data in the consoles of other AWS services.
6. Choose Launch CloudFormation template.
In the conﬁrmation screen, type Confirm , and choose Launch template .
7. Select the I acknowledge...  check box, and choose Create stack .
Sharing with an entire organization
Completing the preceding procedure creates an IAM role which enables your account to share data 
with one account. You can create or edit an IAM role that shares your data with all accounts in an 
organization. Do this only if you know and trust all accounts in the organization.
This will grant the read-only permissions listed in the policies shown in step 5 of the previous procedure 
to all users that view a cross-account dashboard in the account that you share with, if the user has 
corresponding permissions in the account that you share with.
To share your CloudWatch account data with all accounts in an organization
1. If you haven't already, complete the preceding procedure to share your data with one AWS account.
2. Sign in to the AWS Management Console and open the IAM console at https:// 
console.aws.amazon.com/iam/.
3. In the navigation pane, choose Roles.
4. In the list of roles, choose CloudWatch-CrossAccountSharingRole.
5. Choose Trust relationships, Edit trust relationship.
You see a policy like this:
1244Amazon CloudWatch User Guide
Enabling cross-account cross-Region functionality
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Principal": { 
        "AWS": "arn:aws:iam:: 123456789012 :root" 
      }, 
      "Action": "sts:AssumeRole" 
    } 
  ]
}
6. Change the policy to the following, replacing org-id with the ID of your organization.
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Principal": { 
        "AWS": "*" 
      }, 
      "Action": "sts:AssumeRole", 
      "Condition": { 
        "StringEquals": { 
          "aws:PrincipalOrgID": " org-id" 
        } 
      } 
    } 
  ]
}
7. Choose Update Trust Policy.
Set up a monitoring account
Enable each monitoring account if you want to view cross-account CloudWatch data.
When you complete the following procedure, CloudWatch creates a service-linked role that CloudWatch 
uses in the monitoring account to access data shared from your other accounts. This service-linked role 
is called AWSServiceRoleForCloudWatchCrossAccount. For more information, see Using service-linked 
roles for CloudWatch (p. 1192 ).
To enable your account to view cross-account CloudWatch data
1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
2. In the navigation pane, choose Settings, and then, in the Cross-account cross-region section, 
choose Conﬁgure .
3. Under the View cross-account cross-region section, choose Enable, and then select the Show 
selector in the console checkbox to enable an account selector to appear in the CloudWatch console 
when you're graphing a metric or creating an alarm.
4. Under View cross-account cross-region, choose one of the following options:
•Account Id Input. This option prompts you to manually input an account ID each time that you 
want to switch accounts when you view cross-account data.
•AWS Organization account selector. This option causes the accounts that you speciﬁed when you 
completed your cross-account integration with Organizations to appear. When you next use the 
1245Amazon CloudWatch User Guide
(Optional) Integrate with AWS Organizations
console, CloudWatch displays a dropdown list of these accounts for you to select from when you 
are viewing cross-account data.
To do this, you must have ﬁrst used your organization management account to allow CloudWatch 
to see a list of accounts in your organization. For more information, see (Optional) Integrate with 
AWS Organizations (p. 1246 ).
•Custom account selector. This option prompts you to enter a list of account IDs. When you next 
use the console, CloudWatch displays a dropdown list of these accounts for you to select from 
when you are viewing cross-account data.
You can also enter a label for each of these accounts to help you identify them when choosing 
accounts to view.
The account selector settings that a user makes here are retained only for that user, not for all 
other users in the monitoring account.
5. Choose Enable.
After you complete this setup, you can create cross-account dashboards. For more information, see
Cross-account cross-Region dashboards (p. 35).
(Optional) Integrate with AWS Organizations
If you want to integrate cross-account functionality with AWS Organizations, you must make a list of all 
accounts in the organization available to the monitoring accounts.
To enable cross-account CloudWatch functionality to access a list of all accounts in your 
organization
1. Sign in to your organization's management account.
2. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
3. In the navigation pane, choose Settings, then choose Conﬁgure .
4. For Grant permission to view the list of accounts in the organization, choose Speciﬁc accounts to 
be prompted to enter a list of account IDs. The list of accounts in your organization are shared with 
only the accounts that you specify here.
5. Choose Share organization account list.
6. Choose Launch CloudFormation template.
In the conﬁrmation screen, type Confirm , and choose Launch template .
Troubleshooting your CloudWatch cross-account 
setup
This section contains troubleshooting tips for cross-account, console deployment in CloudWatch.
I am getting access denied errors displaying cross-account data
Check the following:
•Your monitoring account should have a role named
AWSServiceRoleForCloudWatchCrossAccount. If it does not, you need to create this role. For 
more information, see Set Up a Monitoring Account (p. 1245 ).
1246Amazon CloudWatch User Guide
Disabling and cleaning up after using cross-account
•Each sharing account should have a role named CloudWatch-CrossAccountSharingRole. If it does 
not, you need to create this role. For more information, see Set Up A Sharing Account (p. 1243 ).
•The sharing role must trust the monitoring account.
To conﬁrm that your roles are set up properly for the CloudWatch cross-account console
1. Sign in to the AWS Management Console and open the IAM console at https:// 
console.aws.amazon.com/iam/.
2. In the navigation pane, choose Roles.
3. In the list of roles, make sure the needed role exists. In a sharing account, look 
for CloudWatch-CrossAccountSharingRole. In a monitoring account, look for
AWSServiceRoleForCloudWatchCrossAccount.
4. If you are in a sharing account and CloudWatch-CrossAccountSharingRole already exists, choose
CloudWatch-CrossAccountSharingRole.
5. Choose Trust relationships, Edit trust relationship.
6. Conﬁrm that the policy lists either the account ID of the monitoring account, or the organization ID 
of an organization that contains the monitoring account.
I don't see an account dropdown in the console
First, check that you have created the correct IAM roles, as discussed in the preceding 
troubleshooting section. If those are set up correctly, make sure that you have enabled this 
account to view cross-account data, as described in Enable Your Account to View Cross-Account 
Data  (p. 1245 ).
Disabling and cleaning up after using cross-
account
To disable cross-account functionality for CloudWatch, follow these steps.
Step 1: Remove the cross-account stacks or roles
The best method is to remove the AWS CloudFormation stacks that were used to enable cross-account 
functionality.
•In each of the sharing accounts, remove the CloudWatch-CrossAccountSharingRole stack.
•If you used AWS Organizations to enable cross-account functionality with all accounts in an 
organization, remove the CloudWatch-CrossAccountListAccountsRole  stack in the organization's 
management account.
If you didn't use the AWS CloudFormation stacks to enable cross-account functionality, do the following:
•In each of the sharing accounts, delete the CloudWatch-CrossAccountSharingRole IAM role.
•If you used AWS Organizations to enable cross-account functionality with all accounts in an 
organization, delete the CloudWatch-CrossAccountSharing-ListAccountsRole IAM role in the 
organization's management account.
Step 2: Remove the service-linked role
In the monitoring account, delete the AWSServiceRoleForCloudWatchCrossAccount service-linked IAM 
role.
1247Amazon CloudWatch User Guide
CloudWatch service quotas
CloudWatch has the following quotas for metrics, alarms, API requests, and alarm email notiﬁcations.
Note
For some AWS services including CloudWatch, you can use the CloudWatch usage metrics to 
visualize your current service usage on CloudWatch graphs and dashboards. You can use a 
CloudWatch metric math function to display the service quotas for those resources on your 
graphs. You can also conﬁgure alarms that alert you when your usage approaches a service 
quota. For more information, see Visualizing your service quotas and setting alarms (p. 1010 ).
Resource Default quota
Alarm actions 5/alarm. This quota cannot be changed.
Alarm evaluation period The maximum value, calculated by multiplying the alarm 
period by the number of evaluation periods used, is one day 
(86,400 seconds). This quota cannot be changed.
Alarms 10/month/customer for free. Additional alarms incur 
charges.
No limit on the total number of alarms per account.
Alarms based on metric math expressions can have up to 10 
metrics.
Anomaly detection models 500 per Region, per account.
API requests 1,000,000/month/customer for free.
Canaries 200 per Region per account.
You can request a quota increase.
Contributor Insights API requests The following APIs have a quota of 20 transactions per 
second (TPS) and per Region.
•DescribeInsightRules
The quota cannot be changed.
•GetInsightRuleReport
You can request a quota increase.
The following APIs have a quota of 5 TPS per Region. This 
quota cannot be changed.
•DeleteInsightRules
•PutInsightRule
The following APIs have a quota of 1 TPS per Region. This 
quota cannot be changed.
•DisableInsightRules
•EnableInsightRules
1248Amazon CloudWatch User Guide
Resource Default quota
Contributor Insights rules 100 rules per Region per account.
You can request a quota increase.
Custom metrics No quota.
Dashboards Up to 500 widgets per dashboard. Up to 500 metrics per 
dashboard widget. Up to 2500 metrics per dashboard, across 
all widgets.
These quotas include all metrics retrieved for use in metric 
math functions, even if those metrics are not displayed on 
the graph.
These quotas cannot be changed.
DescribeAlarms 9 transactions per second (TPS) per Region. The maximum 
number of operation requests you can make per second 
without being throttled.
You can request a quota increase.
DeleteAlarms  request
DescribeAlarmHistory request
DisableAlarmActions request
EnableAlarmActions request
SetAlarmState  request3 TPS per Region for each of these operations. The 
maximum number of operation requests you can make per 
second without being throttled.
These quotas cannot be changed.
DescribeAlarmsForMetric request9 TPS per Region. The maximum number of operation 
requests you can make per second without being throttled.
This quotas cannot be changed.
DeleteDashboards request
GetDashboard request
ListDashboards request
PutDashboard request10 TPS per Region for each of these operations. The 
maximum number of operation requests you can make per 
second without being throttled.
These quotas cannot be changed.
PutAnomalyDetector
DescribeAnomalyDetectors10 TPS per Region. The maximum number of operation 
requests you can make per second without being throttled.
DeleteAnomalyDetector5 TPS per Region. The maximum number of operation 
requests you can make per second without being throttled.
Dimensions 30/metric. This quota cannot be changed.
1249Amazon CloudWatch User Guide
Resource Default quota
GetMetricData 10 TPS per Region for operations that include Metrics 
Insights queries. For operations that do not include Metrics 
Insights queries, the quota is 50 TPS per Region. This is the 
maximum number of operation requests you can make per 
second without being throttled. You can request a quota 
increase.
For GetMetricData  operations that include a Metrics 
Insights query, the quota is 4,300,000 Datapoints Per Second 
(DPS) for the most recent 3 hours. This is calculated against 
the total number of data points scanned by the query (which 
can include no more than 10,000 metrics.)
180,000 Datapoints Per Second (DPS) if the StartTime
used in the API request is less than or equal to three hours 
from current time. 396,000 DPS if the StartTime  is more 
than three hours from current time. This is the maximum 
number of datapoints you can request per second using one 
or more API calls without being throttled. This quota cannot 
be changed.
The DPS is calculated based on estimated data points, not 
actual data points. The data point estimate is calculated 
using the requested time range, period, and retention 
period. This means that if the actual data points in the 
requested metrics are sparse or empty, throttling still occurs 
if the estimated data points exceed the quota. The DPS 
quota is per-Region.
GetMetricData A single GetMetricData  call can include as many as 500
MetricDataQuery  structures.
This quota cannot be changed.
GetMetricStatistics 400 TPS per Region. The maximum number of operation 
requests you can make per second without being throttled.
You can request a quota increase.
GetMetricWidgetImage Up to 500 metrics per image. This quota cannot be changed.
20 TPS per Region. The maximum number of operation 
requests you can make per second without being throttled. 
This quota cannot be changed.
ListMetrics 25 TPS per Region. The maximum number of operation 
requests you can make per second without being throttled.
You can request a quota increase.
Metric data storage 15 months. This quota cannot be changed.
Metric data values The value of a metric data point must be within the range of 
-2^360 to 2^360. Special values (for example, NaN, +Inﬁnity, 
-Inﬁnity) are not supported. This quota cannot be changed.
1250Amazon CloudWatch User Guide
Resource Default quota
MetricDatum  items 1000/ PutMetricData  request. A MetricDatum  object can 
contain a single value or a StatisticSet  object representing 
many values. This quota cannot be changed.
Metrics 10/month/customer for free.
Metrics Insights queries A single query can process no more than 10,000 metrics. 
This means that if the SELECT, FROM, and WHERE  clauses 
would match more than 10,000 metrics, only the ﬁrst 
10,000 of these metrics that are found will be processed by 
the query.
A single query can return no more than 500 time series.
You can query only the most recent three hours of data
OAM API request rates.1 TPS per Region for PutSinkPolicy.
10 TPS per Region for each other CloudWatch OAM API.
These quotas reﬂect the maximum number of operation 
requests you can make per second without being throttled.
These quotas can't be changed.
OAM source account linksEach source account can be linked to as many as 5 
monitoring accounts
This quota can't be changed.
OAM sinks 1 sink per account
This quota can't be changed.
PutCompositeAlarm  request3 TPS per Region. The maximum number of operation 
requests you can make per second without being throttled.
You can request a quota increase.
PutMetricAlarm  request3 TPS per Region. The maximum number of operation 
requests you can make per second without being throttled.
You can request a quota increase.
PutMetricData  request1MB for HTTP POST requests. PutMetricData  can handle 
500 transactions per second (TPS), which is the maximum 
number of operation requests that you can make per second 
without being throttled. PutMetricData  can handle 1,000 
metrics per request.
You can request a quota increase.
Amazon SNS email notiﬁcations1,000/month/customer for free.
Synthetics Groups 20 per account.
This quota can't be changed.
1251Amazon CloudWatch User Guide
Document history
The following table describes important changes in each release of the Amazon CloudWatch User Guide, 
beginning in June 2018. For notiﬁcation about updates to this documentation, you can subscribe to an 
RSS feed.
Change Description Date
CloudWatch agent added 
support for AL2023The CloudWatch agent supports 
AL2023.August 8, 2023
Updated service linked role for 
Amazon CloudWatch Internet 
Monitor – update to an existing 
policyAdds new permissions,
elasticloadbalancing:DescribeLoadBalancers
and
ec2:DescribeNetworkInterfaces , 
to the service linked role for 
Internet Monitor, to support 
monitoring traﬃc for speciﬁc 
Network Load Balancer 
resources.July 25, 2023
Added support for Network Load 
Balancer resources in Amazon 
CloudWatch Internet MonitorAdds support for creating a 
monitor in Internet Monitor with 
speciﬁc Network Load Balancer 
resources, to provide more 
granular levels of observability 
for your application.July 25, 2023
Dashboard variables 
feature  (p. 1252 )CloudWatch released dashboard 
variables , which you can use to 
create ﬂexible dashboards that 
can quickly display diﬀerent 
contents depending on how you 
set one input ﬁeld within the 
dashboard. For example, you 
can create a dashboard that can 
quickly switch between diﬀerent 
Lambda functions or Amazon 
EC2 instance IDs, or one that 
can switch to diﬀerent AWS 
Regions. For more information, 
see  Create ﬂexible dashboards 
with dashboard variables.June 28, 2023
Internet Monitor now supports 
customizing the threshold for 
health events (p. 1252 )Internet Monitor added the 
ability to customize the 
threshold for when a global 
performance score or availability 
score triggers a heath event. 
For more information, see 
Tracking real-time performance 
and availability in Amazon 
CloudWatch Internet Monitor.June 26, 2023
1252Amazon CloudWatch User Guide
Internet Monitor now 
supports all commercial 
Regions (p. 1252 )Internet Monitor added seven 
new AWS Regions and now 
supports all commercial Regions. 
For more information, see 
Supported AWS Regions for 
Amazon CloudWatch Internet 
Monitor .June 19, 2023
New Lambda Insights extension 
versions (p. 1252 )CloudWatch added the 1.0.229.0 
version of the Lambda Insights 
extension for both x86-64 
platforms and ARM64 platforms. 
For more information, see 
Available versions of the Lambda 
Insights extension.June 12, 2023
CloudWatchReadOnlyAccess
policy updated (p. 1252 )CloudWatch added permissions 
to CloudWatchReadOnlyAccess. 
The logs:StartLiveTail
and logs:StopLiveTail
permissions were added so 
that users with this policy can 
use the console to start and 
stop CloudWatch Logs live tail 
sessions. For more information, 
see  Use live tail to view logs in 
near real time.June 6, 2023
CloudWatch RUM adds support 
for custom metrics  (p. 1252 )You can use CloudWatch RUM 
app monitors to create custom 
metrics and send them to 
CloudWatch and CloudWatch 
Evidently. This feature 
includes an update to the
AmazonCloudWatchRUMServiceRolePolicy
managed IAM policy. In that 
policy, a condition key was 
changed so that CloudWatch 
RUM can send custom metrics to 
custom metric namespaces.February 9, 2023
New and updated 
managed polices for 
CloudWatch (p. 1252 )To support CloudWatch cross-
account observability, the
CloudWatchFullAccess  and
CloudWatchReadOnlyAccess
policies have been updated, and 
the following new managed 
policies have been added:
CloudWatchCrossAccountSharingConfiguration ,
OAMFullAccess , and
OAMReadOnlyAccess . For more 
information, see CloudWatch 
updates to AWS managed 
policies .February 7, 2023
1253Amazon CloudWatch User Guide
CloudWatch Application Insights 
service-linked role policy 
updates — update to an existing 
policy. (p. 1201 )CloudWatch Application Insights 
updated an existing AWS 
service-linked role policy.December 19, 2022
Amazon CloudWatch 
Application Insights support 
for containerized applications 
and microservices from 
the Container Insights 
console. (p. 668)You can display CloudWatch 
Application Insights detected 
problems for Amazon ECS and 
Amazon EKS on your Container 
Insights dashboard.November 17, 2021
Amazon CloudWatch 
Application Insights 
monitoring for SAP HANA 
databases.  (p. 668)You can monitor SAP HANA 
databases with Application 
Insights.November 15, 2021
Amazon CloudWatch 
Application Insights support for 
monitoring all resources in an 
account. (p. 668)You can onboard and monitor all 
resources in an account.September 15, 2021
Amazon CloudWatch 
Application Insights support for 
Amazon FSx. (p. 668)You can monitor metrics 
retrieved from Amazon FSx.August 31, 2021
SDK Metrics is no longer 
supported. (p. 1252 )CloudWatch SDK Metrics is no 
longer supported.August 25, 2021
Amazon CloudWatch 
Application Insights support 
for setting up container 
monitoring.  (p. 668)You can monitor containers 
using best practices with 
Amazon CloudWatch Application 
Insights.May 18, 2021
Metric streams is generally 
available (p. 1252 )You can use metric streams to 
continually stream CloudWatch 
metrics to a destination of your 
choice. For more information, 
see Metric streams in the
Amazon CloudWatch User Guide.March 31, 2021
Amazon CloudWatch 
Application Insights monitoring 
for Oracle databases on Amazon 
RDS and Amazon EC2.  (p. 668)You can monitor metrics and 
logs retrieved from Oracle with 
Amazon CloudWatch Application 
Insights.January 16, 2021
Lambda Insights is generally 
available (p. 1252 )CloudWatch Lambda Insights is a 
monitoring and troubleshooting 
solution for serverless 
applications running on AWS 
Lambda. For more information, 
see Using Lambda Insights  in the
Amazon CloudWatch User Guide.December 3, 2020
Amazon CloudWatch 
Application Insights monitoring 
for Prometheus JMX exporter 
metrics.  (p. 668)You can monitor metrics 
retrieved from Prometheus 
JMX exporter with Amazon 
CloudWatch Application Insights.November 20, 2020
1254Amazon CloudWatch User Guide
CloudWatch Synthetics releases 
new runtime version (p. 1252 )CloudWatch Synthetics has 
released a new runtime version. 
For more information, see
Canary Runtime Versions in the
Amazon CloudWatch User Guide.September 11, 2020
Amazon CloudWatch 
Application Insights monitoring 
for Postgre SQL on Amazon RDS 
and Amazon EC2. (p. 668)You can monitor applications 
built with PostgreSQL running 
on Amazon RDS or Amazon EC2.September 11, 2020
CloudWatch supports dashboard 
sharing  (p. 1252 )You can now share CloudWatch 
dashboards with people outside 
of your organization and AWS 
account. For more information, 
see  Sharing CloudWatch 
Dashboards in the Amazon 
CloudWatch User Guide.September 10, 2020
Set up monitors for .NET 
applications using SQL Server on 
the backend with CloudWatch 
Application Insights  (p. 668)You can use the documentation 
tutorial to help you to set up 
monitors for .NET applications 
using SQL Server on the backend 
with CloudWatch Application 
Insights.August 19, 2020
AWS CloudFormation support 
for Amazon CloudWatch 
Application Insights 
applications.  (p. 668)You can add CloudWatch 
Application Insights monitoring, 
including key metrics 
and telemetry, to your 
application, database, and 
web server, directly from AWS 
CloudFormation templates.July 30, 2020
Amazon CloudWatch 
Application Insights monitoring 
for Aurora for MySQL database 
clusters.  (p. 668)You can monitor Aurora for 
MySQL database clusters 
(RDS Aurora) with Amazon 
CloudWatch Application Insights.July 2, 2020
CloudWatch Contributor Insights 
general availability (p. 1252 )CloudWatch Contributor Insights 
is now generally available. It 
enables you to analyze log data 
and create time series that 
display contributor data. You 
can see metrics about the top-
N contributors, the total number 
of unique contributors, and their 
usage. For more information, 
see Using Contributor Insights 
to Analyze High-Cardinality Data
in the Amazon CloudWatch User 
Guide .April 2, 2020
1255Amazon CloudWatch User Guide
CloudWatch Synthetics public 
preview (p. 1252 )CloudWatch Synthetics is now in 
public preview. It enables you to 
create canaries to monitor your 
endpoints and APIs. For more 
information, see Using Canaries
in the Amazon CloudWatch User 
Guide .November 25, 2019
CloudWatch Contributor Insights 
public preview (p. 1252 )CloudWatch Contributor Insights 
is now in public preview. It 
enables you to analyze log data 
and create time series that 
display contributor data. You 
can see metrics about the top-
N contributors, the total number 
of unique contributors, and their 
usage. For more information, 
see Using Contributor Insights 
to Analyze High-Cardinality Data
in the Amazon CloudWatch User 
Guide .November 25, 2019
CloudWatch launches 
ServiceLens feature (p. 1252 )ServiceLens ehances the 
observability of your services 
and applications by enabling 
you to integrate traces, metrics, 
logs, and alarms into one 
place. ServiceLens integrates 
CloudWatch with AWS X-Ray 
to provide an end-to-end 
view of your application. For 
more information, see  Using 
ServiceLens to Monitor the 
Health of Your Applications in 
the Amazon CloudWatch User 
Guide .November 21, 2019
Use CloudWatch to proactively 
manage your AWS service 
quotas  (p. 1252 )You can use CloudWatch to 
proactively manage your AWS 
service quotas. CloudWatch 
usage metrics provide visibility 
into your account's usage of 
resources and API operations. 
For more information, see 
Service Quotas Integration and 
Usage Metrics  in the Amazon 
CloudWatch User Guide.November 19, 2019
CloudWatch sends events when 
alarms change state  (p. 1252 )CloudWatch now sends an event 
to Amazon EventBridge when 
any CloudWatch alarm changes 
state. For more information, see 
Alarm Events and EventBridge
in the Amazon CloudWatch User 
Guide .October 8, 2019
1256Amazon CloudWatch User Guide
Container Insights  (p. 1252 )CloudWatch Container Insights 
is now generally available. 
It enables you to collect, 
aggregate, and summarize 
metrics and logs from your 
containerized applications 
and microservices. For more 
information, see  Using 
Container Insights  in the Amazon 
CloudWatch User Guide.August 30, 2019
Updates for Container Insights 
preview metrics on Amazon EKS 
and Kubernetes  (p. 1252 )The Container Insights on 
Amazon EKS and Kubernetes 
public preview has been 
updated. InstanceId is now 
included as a dimension to the 
cluster EC2 instances. This allows 
alarms that have been created 
on these metrics to trigger 
the following EC2 actions: 
Stop, Terminate, Reboot, or 
Recover. Additionally, pod and 
service metrics are now reported 
by Kubernetes namespace 
to simplify the monitoring 
and alarming on metrics by 
namespace.August 19, 2019
Updates for AWS Systems 
Manager OpsCenter 
integration  (p. 1252 )Updates on how CloudWatch 
Application Insights integrates 
with Systems Manager 
OpsCenter.August 7, 2019
CloudWatch usage 
metrics  (p. 1252 )CloudWatch usage metrics 
help you track the usage of 
your CloudWatch resources 
and stay within your service 
limits. For more information, see
https://docs.aws.amazon.com/ 
AmazonCloudWatch/latest/ 
monitoring/CloudWatch-Usage-
Metrics.html .August 6, 2019
CloudWatch Container Insights 
public preview (p. 1252 )CloudWatch Container Insights is 
now in public preview. It enables 
you to collect, aggregate, 
and summarize metrics and 
logs from your containerized 
applications and microservices. 
For more information, see Using 
Container Insights  in the Amazon 
CloudWatch User Guide.July 9, 2019
1257Amazon CloudWatch User Guide
CloudWatch Anomaly Detection 
public preview (p. 1252 )CloudWatch anomaly detection 
is now in public preview. 
CloudWatch applies machine-
learning algorithms to a metric's 
past data to create a model of 
the metric's expected values. 
You can use this model for 
visualization and for setting 
alarms. For more information, 
see Using CloudWatch Anomaly 
Detection in the Amazon 
CloudWatch User Guide.July 9, 2019
CloudWatch Application 
Insights for .NET and SQL 
Server (p. 1252 )CloudWatch Application Insights 
for .NET and SQL Server 
facilitates observability for .NET 
and SQL Server applications. 
It can help you set up the best 
monitors for your application 
resources to continuously 
analyze data for signs of 
problems with your applications.June 21, 2019
CloudWatch agent section re-
organized (p. 1252 )The CloudWatch agent 
documentation has been 
rewritten to improve clarity, 
especially for customers using 
the command line to install 
and conﬁgure the agent. 
For more information, see 
Collecting Metrics and Logs 
from Amazon EC2 Instances 
and On-Premises Servers with 
the CloudWatch Agent in the
Amazon CloudWatch User Guide.March 28, 2019
SEARCH function 
added to metric math 
expressions (p. 1252 )You can now use a SEARCH 
function in metric math 
expressions. This enables you 
to create dashboards that 
update automatically as new 
resources are created that match 
the search query. For more 
information, see  Using Search 
Expressions in Graphs in the
Amazon CloudWatch User Guide.March 21, 2019
AWS SDK Metrics for Enterprise 
Support (p. 1252 )SDK Metrics helps you assess 
the health of your AWS services 
and diagnose latency caused 
by reaching your account usage 
limits or by a service outage. 
For more information, see 
Monitor Applications Using 
AWS SDK Metrics in the Amazon 
CloudWatch User Guide.December 11, 2018
1258Amazon CloudWatch User Guide
Alarms on math 
expressions (p. 1252 )CloudWatch supports creating 
alarms based on metric 
math expressions. For more 
information, see  Alarms on 
Math Expressions in the Amazon 
CloudWatch User Guide.November 20, 2018
New CloudWatch console home 
page  (p. 1252 )Amazon has created a new 
home page in the CloudWatch 
console, which automatically 
displays key metrics and alarms 
for all the AWS services you are 
using. For more information, see 
Getting Started with Amazon 
CloudWatch in the Amazon 
CloudWatch User Guide.November 19, 2018
AWS CloudFormation 
templates for the CloudWatch 
Agent (p. 1252 )Amazon has uploaded AWS 
CloudFormation templates 
that you can use to install and 
update the CloudWatch agent. 
For more information, see 
Install the CloudWatch Agent 
on New Instances Using AWS 
CloudFormation in the Amazon 
CloudWatch User Guide.November 9, 2018
Enhancements to the 
CloudWatch Agent (p. 1252 )The CloudWatch agent has been 
updated to work with both the 
StatsD and collectd protocols. It 
also has improved cross-account 
support. For more information, 
see Retrieve Custom Metrics with 
StatsD , Retrieve Custom Metrics 
with collectd, and  Sending 
Metrics and Logs to a Diﬀerent 
AWS Account in the Amazon 
CloudWatch User Guide.September 28, 2018
Support for Amazon VPC 
endpoints  (p. 1252 )You can now establish a private 
connection between your 
VPC and CloudWatch. For 
more information, see Using 
CloudWatch with Interface 
VPC Endpoints  in the Amazon 
CloudWatch User Guide.June 28, 2018
The following table describes important changes to the Amazon CloudWatch User Guide before June 
2018.
Change Description Release date
Metric math You can now perform math expressions on 
CloudWatch metrics, producing new time series that 
you can add to graphs on your dashboard. For more 
information, see Use metric math  (p. 136).April 4, 2018
1259Amazon CloudWatch User Guide
Change Description Release date
"M out of N" 
alarmsYou can now conﬁgure an alarm to trigger based 
on "M out of N" datapoints in any alarm evaluation 
interval. For more information, see Evaluating an 
alarm  (p. 181).December 8, 2017
CloudWatch agentA new uniﬁed CloudWatch agent was released. You 
can use the uniﬁed multi-platform agent to collect 
custom both system metrics and log ﬁles from 
Amazon EC2 instances and on-premises servers. 
The new agent supports both Windows and Linux 
and enables customization of metrics collected, 
including sub-resource metrics such as per-CPU core. 
For more information, see Collect metrics and logs 
from Amazon EC2 instances and on-premises servers 
with the CloudWatch agent (p. 857).September 7, 2017
NAT gateway 
metricsAdded metrics for Amazon VPC NAT gateway. September 7, 2017
High-resolution 
metricsYou can now optionally set up custom metrics as 
high-resolution metrics, with a granularity of as 
low as one second. For more information, see High-
resolution metrics (p. 176).July 26, 2017
Dashboard APIsYou can now create, modify, and delete dashboards 
using APIs and the AWS CLI. For more information, 
see Creating a CloudWatch dashboard (p. 34).July 6, 2017
AWS Direct 
Connect metricsAdded metrics for AWS Direct Connect. June 29, 2017
Amazon VPC VPN 
metricsAdded metrics for Amazon VPC VPN.May 15, 2017
AppStream 2.0 
metricsAdded metrics for AppStream 2.0. March 8, 2017
CloudWatch 
console color 
pickerYou can now choose the color for each metric on your 
dashboard widgets. For more information, see  Edit a 
graph on a CloudWatch dashboard  (p. 45).February 27, 2017
Alarms on 
dashboardsAlarms can now be added to dashboards. For more 
information, see  Add or remove an alarm widget 
from a CloudWatch dashboard  (p. 62).February 15, 2017
Added metrics for 
Amazon PollyAdded metrics for Amazon Polly. December 1, 2016
Added metrics for 
Amazon Kinesis 
Data AnalyticsAdded metrics for Amazon Kinesis Data Analytics.December 1, 2016
Added support 
for percentile 
statisticsYou can specify any percentile, using up to two 
decimal places (for example, p95.45). For more 
information, see Percentiles (p. 7).November 17, 2016
1260Amazon CloudWatch User Guide
Change Description Release date
Added metrics for 
Amazon Simple 
Email ServiceAdded metrics for Amazon Simple Email Service.November 2, 2016
Updated metrics 
retentionAmazon CloudWatch now retains metrics data for 15 
months instead of 14 days.November 1, 2016
Updated metrics 
console interfaceThe CloudWatch console is updated with 
improvements to existing functionality and new 
functionality.November 1, 2016
Added metrics for 
Amazon Elastic 
TranscoderAdded metrics for Amazon Elastic Transcoder. September 20, 2016
Added metrics 
for Amazon API 
GatewayAdded metrics for Amazon API Gateway. September 9, 2016
Added metrics 
for AWS Key 
Management 
ServiceAdded metrics for AWS Key Management Service. September 9, 2016
Added metrics 
for the new 
Application 
Load Balancers 
supported by 
Elastic Load 
BalancingAdded metrics for Application Load Balancers. August 11, 2016
Added new 
NetworkPacketsIn 
and 
NetworkPacketsOut 
metrics for 
Amazon EC2Added new NetworkPacketsIn and 
NetworkPacketsOut metrics for Amazon EC2.March 23, 2016
Added new 
metrics for 
Amazon EC2 Spot 
ﬂeetAdded new metrics for Amazon EC2 Spot ﬂeet.March 21, 2016
Added new 
CloudWatch Logs 
metricsAdded new CloudWatch Logs metrics.March 10, 2016
Added Amazon 
OpenSearch 
Service and AWS 
WAF metrics and 
dimensionsAdded Amazon OpenSearch Service and AWS WAF 
metrics and dimensions.October 14, 2015
1261Amazon CloudWatch User Guide
Change Description Release date
Added support 
for CloudWatch 
dashboardsDashboards are customizable home pages in the 
CloudWatch console that you can use to monitor your 
resources in a single view, even those that are spread 
out across diﬀerent Regions. For more information, 
see Using Amazon CloudWatch dashboards (p. 33).October 8, 2015
Added AWS 
Lambda metrics 
and dimensionsAdded AWS Lambda metrics and dimensions. September 4, 2015
Added Amazon 
Elastic Container 
Service metrics 
and dimensionsAdded Amazon Elastic Container Service metrics and 
dimensions.August 17, 2015
Added Amazon 
Simple Storage 
Service metrics 
and dimensionsAdded Amazon Simple Storage Service metrics and 
dimensions.July 26, 2015
New feature: 
Reboot alarm 
actionAdded the reboot alarm action and new IAM role for 
use with alarm actions. For more information, see
Create alarms to stop, terminate, reboot, or recover 
an EC2 instance (p. 211).July 23, 2015
Added Amazon 
WorkSpaces 
metrics and 
dimensionsAdded Amazon WorkSpaces metrics and dimensions.April 30, 2015
Added Amazon 
Machine Learning 
metrics and 
dimensionsAdded Amazon Machine Learning metrics and 
dimensions.April 9, 2015
New feature: 
Amazon EC2 
instance recovery 
alarm actionsUpdated alarm actions to include new EC2 instance 
recovery action. For more information, see Create 
alarms to stop, terminate, reboot, or recover an EC2 
instance (p. 211).March 12, 2015
Added Amazon 
CloudFront 
and Amazon 
CloudSearch 
metrics and 
dimensionsAdded Amazon CloudFront and Amazon CloudSearch 
metrics and dimensions.March 6, 2015
Added Amazon 
Simple Workﬂow 
Service metrics 
and dimensionsAdded Amazon Simple Workﬂow Service metrics and 
dimensions.May 9, 2014
Updated guide to 
add support for 
AWS CloudTrailAdded a new topic to explain how you can use AWS 
CloudTrail to log activity in Amazon CloudWatch. For 
more information, see Logging Amazon CloudWatch 
API calls with AWS CloudTrail (p. 1232 ).April 30, 2014
1262Amazon CloudWatch User Guide
Change Description Release date
Updated guide to 
use the new AWS 
Command Line 
Interface (AWS 
CLI)The AWS CLI is a cross-service CLI with a simpliﬁed 
installation, uniﬁed conﬁguration, and consistent 
command line syntax. The AWS CLI is supported on 
Linux/Unix, Windows, and Mac. The CLI examples in 
this guide have been updated to use the new AWS 
CLI.
For information about how to install and conﬁgure 
the new AWS CLI, see Getting Set Up with the AWS 
CLI Interface in the AWS Command Line Interface User 
Guide .February 21, 2014
Added Amazon 
Redshift and AWS 
OpsWorks metrics 
and dimensionsAdded Amazon Redshift and AWS OpsWorks metrics 
and dimensions.July 16, 2013
Added Amazon 
Route 53 metrics 
and dimensionsAdded Amazon Route 53 metrics and dimensions. June 26, 2013
New feature: 
Amazon 
CloudWatch Alarm 
ActionsAdded a new section to document Amazon 
CloudWatch alarm actions, which you can use to 
stop or terminate an Amazon Elastic Compute 
Cloud instance. For more information, see Create 
alarms to stop, terminate, reboot, or recover an EC2 
instance (p. 211).January 8, 2013
Updated EBS 
metricsUpdated the EBS metrics to include two new metrics 
for Provisioned IOPS volumes.November 20, 2012
New billing alertsYou can now monitor your AWS charges using 
Amazon CloudWatch metrics and create alarms to 
notify you when you have exceeded the speciﬁed 
threshold. For more information, see Create a 
billing alarm to monitor your estimated AWS 
charges (p. 216).May 10, 2012
New metricsYou can now access six new Elastic Load Balancing 
metrics that provide counts of various HTTP response 
codes.October 19, 2011
New featureYou can now access metrics from Amazon EMR. June 30, 2011
New featureYou can now access metrics from Amazon Simple 
Notiﬁcation Service and Amazon Simple Queue 
Service.July 14, 2011
New FeatureAdded information about using the PutMetricData
API to publish custom metrics. For more information, 
see Publish custom metrics  (p. 176).May 10, 2011
Updated metrics 
retentionAmazon CloudWatch now retains the history of an 
alarm for two weeks rather than six weeks. With this 
change, the retention period for alarms matches the 
retention period for metrics data.April 7, 2011
1263Amazon CloudWatch User Guide
Change Description Release date
New featureAdded ability to send Amazon Simple Notiﬁcation 
Service or Auto Scaling notiﬁcations when a metric 
has crossed a threshold. For more information, see
Alarms  (p. 8).December 2, 2010
New featureA number of CloudWatch actions now include the 
MaxRecords and NextToken parameters, which enable 
you to control pages of results to display.December 2, 2010
New featureThis service now integrates with AWS Identity and 
Access Management (IAM).December 2, 2010
1264