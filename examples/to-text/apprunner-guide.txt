AWS App Runner
Developer Guide
AWS App Runner Developer Guide
AWS App Runner: Developer Guide
Copyright © 2023 Amazon Web Services, Inc. and/or its aﬃliates. All rights reserved.
Amazon's trademarks and trade dress may not be used in connection with any product or service that is not 
Amazon's, in any manner that is likely to cause confusion among customers, or in any manner that disparages or 
discredits Amazon. All other trademarks not owned by Amazon are the property of their respective owners, who may 
or may not be aﬃliated with, connected to, or sponsored by Amazon.AWS App Runner Developer Guide
Table of Contents
What is AWS App Runner?..................................................................................................................1
Who is App Runner for? ..............................................................................................................1
Accessing App Runner.................................................................................................................1
Pricing for App Runner ...............................................................................................................2
What's next...............................................................................................................................2
Setting up.........................................................................................................................................3
Sign up for an AWS account........................................................................................................3
Create an administrative user......................................................................................................3
Grant programmatic access.........................................................................................................4
What's next...............................................................................................................................5
Getting started..................................................................................................................................6
Prerequisites..............................................................................................................................6
Step 1: Create an App Runner service...........................................................................................7
Step 2: Change your service code...............................................................................................12
Step 3: Make a conﬁguration change..........................................................................................13
Step 4: View logs for your service..............................................................................................15
Step 5: Clean up ......................................................................................................................16
What's next.............................................................................................................................17
Architecture and concepts.................................................................................................................18
App Runner concepts................................................................................................................18
App Runner supported conﬁgurations.........................................................................................19
App Runner resources...............................................................................................................20
App Runner resource quotas......................................................................................................21
Image-based service.........................................................................................................................23
Image repository providers........................................................................................................23
Using an image stored in Amazon ECR in your AWS account...................................................23
Using an image stored in Amazon ECR in a diﬀerent AWS account...........................................24
Using an image stored in Amazon ECR Public......................................................................24
Image example ........................................................................................................................25
Code-based service...........................................................................................................................26
Source code repository providers................................................................................................26
Deploying from GitHub.....................................................................................................26
App Runner managed platforms................................................................................................27
Python platform......................................................................................................................27
Python runtime conﬁguration............................................................................................28
Python runtime examples..................................................................................................28
Release information..........................................................................................................30
Node.js platform......................................................................................................................31
Node.js runtime conﬁguration............................................................................................31
Node.js runtime examples .................................................................................................33
Release information..........................................................................................................35
Java platform..........................................................................................................................36
Java runtime conﬁguration................................................................................................37
Java runtime examples.....................................................................................................37
Release information..........................................................................................................40
.NET platform..........................................................................................................................41
.NET runtime conﬁguration................................................................................................42
.NET runtime examples .....................................................................................................42
Release information..........................................................................................................44
PHP platform...........................................................................................................................44
PHP runtime conﬁguration................................................................................................45
Compatibility...................................................................................................................45
PHP runtime examples ......................................................................................................46
Release information..........................................................................................................51
iiiAWS App Runner Developer Guide
Ruby platform.........................................................................................................................52
Ruby runtime conﬁguration...............................................................................................53
Ruby runtime examples.....................................................................................................53
Release information..........................................................................................................55
Go platform.............................................................................................................................55
Go runtime conﬁguration..................................................................................................56
Go runtime examples ........................................................................................................56
Release information..........................................................................................................57
Developing for App Runner...............................................................................................................59
Runtime information ................................................................................................................59
Code development guidelines....................................................................................................60
App Runner console.........................................................................................................................61
Overall console layout..............................................................................................................61
The Services page....................................................................................................................61
The service dashboard page......................................................................................................62
The GitHub connections page....................................................................................................62
Managing your service......................................................................................................................64
Creation..................................................................................................................................64
Prerequisites....................................................................................................................64
Create a service...............................................................................................................64
Rebuild failed service................................................................................................................74
Rebuilding a failed App Runner service using the App Runner console.....................................75
Rebuilding failed App Runner service using the App Runner API or AWS CLI.............................75
Deployment.............................................................................................................................76
Deployment methods.......................................................................................................76
Manual deployment..........................................................................................................77
Conﬁguration ...........................................................................................................................78
Conﬁgure your service using the App Runner API or AWS CLI.................................................79
Conﬁgure your service using the App Runner console...........................................................79
Conﬁgure your service using an App Runner conﬁguration ﬁle...............................................80
Observability conﬁguration................................................................................................80
Conﬁguration resources.....................................................................................................81
Health check conﬁguration................................................................................................82
Connections.............................................................................................................................84
Manage connections.........................................................................................................85
Auto scaling ............................................................................................................................86
Manage auto scaling .........................................................................................................86
Custom domain names .............................................................................................................87
Associate (link) a custom domain to your service..................................................................88
Disassociate (unlink) a custom domain ................................................................................89
Manage custom domains ...................................................................................................89
Conﬁgure an Amazon Route 53 alias record.........................................................................93
Pausing / resuming...................................................................................................................94
Pausing and deleting compared.........................................................................................95
When your service is paused..............................................................................................95
Pause and resume your service..........................................................................................95
Deletion ..................................................................................................................................96
Pausing and deleting compared.........................................................................................97
What does App Runner delete? ..........................................................................................97
Delete your service...........................................................................................................97
Reference Environment variables........................................................................................................99
Referencing sensitive data as environment variables.....................................................................99
Considerations ........................................................................................................................100
Permissions............................................................................................................................100
Manage environment variables.................................................................................................101
App Runner console........................................................................................................101
App Runner API or AWS CLI.............................................................................................102
ivAWS App Runner Developer Guide
Networking....................................................................................................................................107
Terminology...........................................................................................................................107
General Terms................................................................................................................107
Term speciﬁc to conﬁguring outgoing traﬃc......................................................................108
Terms speciﬁc to conﬁguring incoming traﬃc....................................................................108
Incoming traﬃc......................................................................................................................108
Considerations ................................................................................................................108
Permissions....................................................................................................................109
VPC interface endpoint...................................................................................................109
VPC Ingress Connection...................................................................................................109
Private endpoint .............................................................................................................110
Summary.......................................................................................................................110
Manage Private endpoint .................................................................................................110
Outgoing traﬃc .....................................................................................................................114
VPC Connector...............................................................................................................115
Subnet ..........................................................................................................................115
Security group...............................................................................................................116
Manage VPC access.........................................................................................................116
Observability.................................................................................................................................121
Activity..................................................................................................................................121
Track App Runner service activity.....................................................................................121
Logs (CloudWatch Logs)..........................................................................................................122
App Runner log groups and streams.................................................................................122
Viewing App Runner logs in the console............................................................................124
Metrics (CloudWatch)..............................................................................................................125
App Runner metrics ........................................................................................................126
Viewing App Runner metrics in the console.......................................................................127
Event handling (EventBridge)...................................................................................................128
Creating an EventBridge rule to act on App Runner events...................................................129
App Runner event examples............................................................................................129
App Runner event pattern examples.................................................................................130
App Runner event reference............................................................................................131
API actions (CloudTrail)...........................................................................................................132
App Runner information in CloudTrail...............................................................................132
Understanding App Runner log ﬁle entries ........................................................................133
Tracing (X-Ray).......................................................................................................................135
Instrument your application for tracing.............................................................................136
Add X-Ray permissions to your App Runner service instance role...........................................138
Enable X-Ray tracing for your App Runner service...............................................................138
View X-Ray tracing data for your App Runner service..........................................................138
AWS WAF web ACL.........................................................................................................................139
Considerations ........................................................................................................................140
Permissions............................................................................................................................140
Manage web ACLs..................................................................................................................141
App Runner console........................................................................................................141
AWS CLI........................................................................................................................143
Testing and logging AWS WAF web ACLs...........................................................................146
App Runner conﬁguration ﬁle..........................................................................................................147
Examples ...............................................................................................................................147
Conﬁguration ﬁle examples .............................................................................................147
Reference..............................................................................................................................148
Structure overview..........................................................................................................149
Top section....................................................................................................................149
Build section..................................................................................................................149
Run section....................................................................................................................151
App Runner API ..............................................................................................................................153
Using the AWS CLI to work with App Runner.............................................................................153
vAWS App Runner Developer Guide
Using AWS CloudShell.............................................................................................................153
Obtaining IAM permissions for AWS CloudShell..................................................................154
Interacting with App Runner using AWS CloudShell............................................................154
Verifying your App Runner service using AWS CloudShell.....................................................156
Troubleshooting.............................................................................................................................157
Failed to create service...........................................................................................................157
Custom domain names ............................................................................................................158
Getting Create Fail error for custom domain......................................................................158
Getting DNS certiﬁcate validation pending error for custom domain......................................158
Basic troubleshooting commands.....................................................................................159
Custom domain certiﬁcate renewal...................................................................................159
Request routing error..............................................................................................................160
404 Not found error when sending HTTP/HTTPS traﬃc to App Runner service endpoints.........160
Security.........................................................................................................................................161
Data protection......................................................................................................................161
Data encryption.............................................................................................................162
Internetwork privacy.......................................................................................................163
Identity and access management..............................................................................................163
Audience.......................................................................................................................163
Authenticating with identities ..........................................................................................164
Managing access using policies.........................................................................................166
App Runner and IAM .......................................................................................................167
Identity-based policy examples........................................................................................173
Using service-linked roles................................................................................................176
AWS managed policies....................................................................................................181
Troubleshooting.............................................................................................................182
Logging and monitoring ..........................................................................................................183
Compliance validation.............................................................................................................184
Resilience..............................................................................................................................184
Infrastructure security.............................................................................................................185
VPC endpoints .......................................................................................................................185
Setting up a VPC endpoint for App Runner........................................................................185
VPC network privacy considerations..................................................................................185
Using endpoint policies to control access with VPC endpoints...............................................186
Integrating with interface endpoint..................................................................................186
Shared responsibility model.....................................................................................................186
Security best practices............................................................................................................186
Preventive security best practices.....................................................................................186
Detective security best practices.......................................................................................187
AWS glossary.................................................................................................................................188
viAWS App Runner Developer Guide
Who is App Runner for?
What is AWS App Runner?
AWS App Runner is an AWS service that provides a fast, simple, and cost-eﬀective way to deploy from 
source code or a container image directly to a scalable and secure web application in the AWS Cloud. You 
don't need to learn new technologies, decide which compute service to use, or know how to provision 
and conﬁgure AWS resources.
App Runner connects directly to your code or image repository. It provides an automatic integration and 
delivery pipeline with fully managed operations, high performance, scalability, and security.
Who is App Runner for?
If you're a developer , you can use App Runner to simplify the process of deploying a new version of your 
code or image repository.
For operations teams , App Runner enables automatic deployments each time a commit is pushed to the 
code repository or a new container image version is pushed to the image repository.
Accessing App Runner
You can deﬁne and conﬁgure your App Runner service deployments using any one of the following 
interfaces:
•App Runner console – Provides a web interface for managing your App Runner services.
•App Runner API  – Provides a RESTful API for performing App Runner actions. For more information, 
see AWS App Runner API Reference.
•AWS Command Line Interface (AWS CLI) – Provides commands for a broad set of AWS services, 
including Amazon VPC, and is supported on Windows, macOS, and Linux. For more information, see
AWS Command Line Interface.
1AWS App Runner Developer Guide
Pricing for App Runner
•AWS SDKs – Provides language-speciﬁc APIs and takes care of many of the connection details, such 
as calculating signatures, handling request retries, and error handling. For more information, see AWS 
SDKs .
Pricing for App Runner
App Runner provides a cost-eﬀective way to run your application. You only pay for resources that your 
App Runner service consumes. Your service scales down to fewer compute instances when request 
traﬃc is lower. You have control over scalability settings: the lowest and highest number of provisioned 
instances, and the highest load an instance handles.
For more information about App Runner automatic scaling, see the section called “Auto 
scaling”  (p. 86).
For pricing information, see AWS App Runner pricing.
What's next
Learn how to get started with App Runner in the following topics:
•Setting up  (p. 3) – Complete the prerequisite steps for using App Runner.
•Getting started (p. 6) – Deploy your ﬁrst application to App Runner.
2AWS App Runner Developer Guide
Sign up for an AWS account
Setting up for App Runner
If you're a new AWS customer, complete the setup prerequisites that are listed on this page before you 
start using AWS App Runner.
For these setup procedures, you use the AWS Identity and Access Management (IAM) service. For 
complete information about IAM, see the following reference materials:
•AWS Identity and Access Management (IAM)
•IAM User Guide
Sign up for an AWS account
If you do not have an AWS account, complete the following steps to create one.
To sign up for an AWS account
1. Open https://portal.aws.amazon.com/billing/signup.
2. Follow the online instructions.
Part of the sign-up procedure involves receiving a phone call and entering a veriﬁcation code on the 
phone keypad.
When you sign up for an AWS account, an AWS account root user is created. The root user has access 
to all AWS services and resources in the account. As a security best practice, assign administrative 
access to an administrative user, and use only the root user to perform tasks that require root user 
access.
AWS sends you a conﬁrmation email after the sign-up process is complete. At any time, you can view 
your current account activity and manage your account by going to https://aws.amazon.com/ and 
choosing My Account.
Create an administrative user
After you sign up for an AWS account, create an administrative user so that you don't use the root user 
for everyday tasks.
Secure your AWS account root user
1. Sign in to the AWS Management Console as the account owner by choosing Root user and entering 
your AWS account email address. On the next page, enter your password.
For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User Guide.
2. Turn on multi-factor authentication (MFA) for your root user.
For instructions, see Enable a virtual MFA device for your AWS account root user (console) in the IAM 
User Guide .
3AWS App Runner Developer Guide
Grant programmatic access
Create an administrative user
• For your daily administrative tasks, grant administrative access to an administrative user in AWS IAM 
Identity Center (successor to AWS Single Sign-On).
For instructions, see Getting started in the AWS IAM Identity Center (successor to AWS Single Sign-On) 
User Guide .
Sign in as the administrative user
• To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email 
address when you created the IAM Identity Center user.
For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in the
AWS Sign-In User Guide.
Grant programmatic access
Users need programmatic access if they want to interact with AWS outside of the AWS Management 
Console. The way to grant programmatic access depends on the type of user that's accessing AWS.
To grant users programmatic access, choose one of the following options.
Which user needs 
programmatic access?To By
Workforce identity
(Users managed in IAM Identity 
Center)Use temporary credentials to 
sign programmatic requests to 
the AWS CLI, AWS SDKs, or AWS 
APIs.Following the instructions for 
the interface that you want to 
use.
•For the AWS CLI, see
Conﬁguring the AWS CLI to 
use AWS IAM Identity Center 
(successor to AWS Single Sign-
On) in the AWS Command Line 
Interface User Guide.
•For AWS SDKs, tools, and 
AWS APIs, see IAM Identity 
Center authentication  in the
AWS SDKs and Tools Reference 
Guide .
IAM Use temporary credentials to 
sign programmatic requests to 
the AWS CLI, AWS SDKs, or AWS 
APIs.Following the instructions in
Using temporary credentials 
with AWS resources in the IAM 
User Guide .
IAM (Not recommended)
Use long-term credentials to 
sign programmatic requests to 
the AWS CLI, AWS SDKs, or AWS 
APIs.Following the instructions for 
the interface that you want to 
use.
•For the AWS CLI, see
Authenticating using IAM 
user credentials in the AWS 
Command Line Interface User 
Guide .
4AWS App Runner Developer Guide
What's next
Which user needs 
programmatic access?To By
•For AWS SDKs and tools, see
Authenticate using long-term 
credentials in the AWS SDKs 
and Tools Reference Guide.
•For AWS APIs, see Managing 
access keys for IAM users in 
the IAM User Guide .
What's next
You completed the prerequisite steps. To deploy your ﬁrst application to App Runner, see Getting 
started (p. 6).
5AWS App Runner Developer Guide
Prerequisites
Getting started with App Runner
AWS App Runner is an AWS service that provides a fast, simple, and cost-eﬀective way to turn an existing 
container image or source code directly into a running web service in the AWS Cloud.
This tutorial covers how you can use AWS App Runner to deploy your application to an App Runner 
service. It walks through conﬁguring the source code and deployment, the service build, and the service 
runtime. It also shows how to deploy a code version, make a conﬁguration change, and view logs. 
Last, the tutorial shows how to clean up the resources that you created while following the tutorial's 
procedures.
Topics
•Prerequisites (p. 6)
•Step 1: Create an App Runner service (p. 7)
•Step 2: Change your service code (p. 12)
•Step 3: Make a conﬁguration change (p. 13)
•Step 4: View logs for your service (p. 15)
•Step 5: Clean up  (p. 16)
•What's next (p. 17)
Prerequisites
Before you start the tutorial, be sure to take the following actions:
1.Complete the setup steps in Setting up  (p. 3).
2.Create a GitHub  account, if you don't already have one. If you're new to GitHub, see Getting started 
with GitHub  in the GitHub Docs .
3.Create a repository in your GitHub account. This tutorial uses the repository name python-hello . 
Create ﬁles in the root directory of the repository, with the names and content speciﬁed in the 
following examples.
Files for the python-hello  example repository
Example requirements.txt
pyramid==2.0
Example server.py
from wsgiref.simple_server import make_server
from pyramid.config import Configurator
from pyramid.response import Response
import os
def hello_world(request): 
    name = os.environ.get('NAME') 
    if name == None or len(name) == 0: 
        name = "world" 
    message = "Hello, " + name + "!\n" 
6AWS App Runner Developer Guide
Step 1: Create an App Runner service
    return Response(message)
if __name__ == '__main__': 
    port = int(os.environ.get("PORT")) 
    with Configurator() as config: 
        config.add_route('hello', '/') 
        config.add_view(hello_world, route_name='hello') 
        app = config.make_wsgi_app() 
    server = make_server('0.0.0.0', port, app) 
    server.serve_forever()
Step 1: Create an App Runner service
In this step, you create an App Runner service based on the example source code repository that you 
created on GitHub as part of the section called “Prerequisites” (p. 6). The example contains a simple 
Python website. These are the main steps you take to create a service:
1.Conﬁgure your source code.
2.Conﬁgure source deployment.
3.Conﬁgure application build.
4.Conﬁgure your service.
5.Review and conﬁrm.
The following diagram outlines the steps for creating an App Runner service:
To create an App Runner service based on a source code repository
1. Conﬁgure your source code.
a. Open the App Runner console, and in the Regions list, select your AWS Region.
b. If the AWS account doesn't have any App Runner services yet, the console home page is 
displayed. Choose Create an App Runner service.
7AWS App Runner Developer Guide
Step 1: Create an App Runner service
If the AWS account has existing services, the Services page with a list of your services is 
displayed. Choose Create service.
c. On the Source and deployment page, in the Source section, for Repository type, choose
Source code repository.
d. Under Connect to GitHub choose Add new , and then, if prompted, provide your GitHub 
credentials.
Note
The following steps to install the AWS Connector for GitHub to your GitHub account 
are one-time steps. You can reuse the connection for creating multiple App Runner 
services based on repositories in this account. When you have an existing connection, 
choose it and skip to repository selection.
e. In the Install AWS Connector for GitHub dialog box, if prompted, choose your GitHub account 
name.
f.If prompted to authorize the AWS Connector for GitHub, choose Authorize AWS Connections.
g. Choose Install .
Your account name appears as the selected GitHub account/organization. You can now choose 
a repository in your account.
h. For Repository, choose the example repository you created, python-hello . For Branch , 
choose the default branch name of your repository (for example, main ).
2. Conﬁgure your deployments: In the Deployment settings section, choose Automatic , and then 
choose Next.
Note
With automatic deployment, each new commit to your repository automatically deploys a 
new version of your service.
8AWS App Runner Developer Guide
Step 1: Create an App Runner service
3. Conﬁgure application build.
a. On the Conﬁgure build page, for Conﬁguration ﬁle, choose Conﬁgure all settings here.
b. Provide the following build settings:
•Runtime  – Choose Python 3.
•Build command – Enter pip install -r requirements.txt .
•Start command – Enter python server.py .
•Port – Enter 8080 .
c. Choose Next.
Note
The Python 3 runtime builds a Docker image using a base Python 3 image and your 
example Python code. It then launches a service that runs a container instance of this 
image.
9AWS App Runner Developer Guide
Step 1: Create an App Runner service
4. Conﬁgure your service.
a. On the Conﬁgure service page, in the Service settings section, enter a service name.
b. Under Environment variables, add a single environment variable. For Key, enter NAME , and for
Value, enter any name (for example, your ﬁrst name).
Note
The example application reads the name you set in this environment variable and 
displays the name on its webpage.
c. Choose Next.
10AWS App Runner Developer Guide
Step 1: Create an App Runner service
5. On the Review and create page, verify all the details you've entered, and then choose Create and 
deploy.
11AWS App Runner Developer Guide
Step 2: Change your service code
If the service is successfully created, the console shows the service dashboard, with a Service 
overview of the new service.
6. Verify that your service is running.
a. On the service dashboard page, wait until the service Status  is Running .
b. Choose the Default domain  value—it's the URL to the website of your service.
A webpage displays: Hello, your name !
Step 2: Change your service code
In this step, you make a change to your source code repository. The App Runner CI/CD capability 
automatically builds and deploys the change to your service.
To make a change to your service code
1. Navigate to your example GitHub repository.
2. Choose the ﬁle name server.py  to navigate to that ﬁle.
12AWS App Runner Developer Guide
Step 3: Make a conﬁguration change
3. Choose Edit this ﬁle (the pencil icon).
4. In the expression assigned to the variable message, change the text Hello  to Good morning .
5. Choose Commit changes .
The new commit starts to deploy. On the service dashboard page, the service Status  changes to
Operation in progress .
6. Wait for the deployment to end. On the service dashboard page, the service Status  should change 
back to Running .
7. Verify that the deployment is successful: refresh the browser tab where the webpage of your service 
is displayed.
The page now displays the modiﬁed message: Good morning, your name !
Step 3: Make a conﬁguration change
In this step, you make a change to the NAME environment variable value, to demonstrate a service 
conﬁguration change.
To view logs for your service
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. In the navigation pane, choose Services, and then choose your App Runner service.
The console displays the service dashboard with a Service overview.
13AWS App Runner Developer Guide
Step 3: Make a conﬁguration change
3. On the service dashboard page, choose the Conﬁguration  tab.
The console displays your service conﬁguration settings in several sections.
4. In the Conﬁgure service section, choose Edit.
5. For the environment variable with the key NAME, change the value to a diﬀerent name.
6. Choose Apply changes .
App Runner starts the update process. On the service dashboard page, the service Status  changes to
Operation in progress .
7. Wait for the update to end. On the service dashboard page, the service Status  should change back 
to Running .
8. Verify that the update is successful: refresh the browser tab where the webpage of your service is 
displayed.
14AWS App Runner Developer Guide
Step 4: View logs for your service
The page now displays the modiﬁed name: Good morning, new name !
Step 4: View logs for your service
In this step, you use the App Runner console to view logs for your App Runner service. App Runner 
streams logs to Amazon CloudWatch Logs (CloudWatch Logs) and displays them on your service's 
dashboard. For information about App Runner logs, see the section called “Logs (CloudWatch 
Logs)”  (p. 122).
To view logs for your service
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. In the navigation pane, choose Services, and then choose your App Runner service.
The console displays the service dashboard with a Service overview.
3. On the service dashboard page, choose the Logs  tab.
The console displays a few types of logs in several sections:
•Event log – Activity in the lifecycle of your App Runner service. The console displays the latest 
events.
•Deployment logs – Source repository deployments to your App Runner service. The console 
displays a separate log stream for each deployment.
•Application logs – The output of the web application that's deployed to your App Runner service. 
The console combines the output from all running instances into a single log stream.
15AWS App Runner Developer Guide
Step 5: Clean up
4. To ﬁnd speciﬁc deployments, scope down the deployment log list by entering a search term. You can 
search for any value that appears in the table.
5. To view a log's content, choose View full log (event log) or the log stream name (deployment and 
application logs).
6. Choose Download to download a log. For a deployment log stream, select a log stream ﬁrst.
7. Choose View in CloudWatch to open the CloudWatch console and use its full capabilities to explore 
your App Runner service logs. For a deployment log stream, select a log stream ﬁrst.
Note
The CloudWatch console is particularly useful if you want to view application logs of 
speciﬁc instances instead of the combined application log.
Step 5: Clean up
You've now learned how to create an App Runner service, view logs, and make some changes. In this 
step, you delete the service to remove resources that you don't need anymore.
To delete your service
1. On the service dashboard page, choose Actions, and then choose Delete service.
2. In the conﬁrmation dialog, enter the requested text, and then choose Delete.
16AWS App Runner Developer Guide
What's next
Result: The console navigates to the Services page. The service that you just deleted shows a status 
of DELETING . A short time later it disappears from the list.
Consider also deleting the GitHub connection that you created as part of this tutorial. For more 
information, see the section called “Connections” (p. 84).
What's next
Now that you've deployed your ﬁrst App Runner service, learn more in the following topics:
•Architecture and concepts  (p. 18) – The architecture, main concepts, and AWS resources related to 
App Runner.
•Image-based service (p. 23) and Code-based service (p. 26) – The two types of application source 
that App Runner can deploy.
•Developing for App Runner  (p. 59) – Things you should know when developing or migrating 
application code for deployment to App Runner.
•App Runner console  (p. 61) – Manage and monitor your service using the App Runner console.
•Managing your service (p. 64) – Manage the lifecycle of your App Runner service.
•Observability (p. 121) – Get visibility into your App Runner service operations by monitoring metrics, 
reading logs, handling events, tracking service action calls, and tracing application events like HTTP 
calls.
•App Runner conﬁguration ﬁle (p. 147) – A conﬁguration-based way to specify options for the build 
and runtime behavior of your App Runner service.
•App Runner API  (p. 153) – Use the App Runner application programming interface (API) to create, 
read, update, and delete App Runner resources.
•Security  (p. 161) – The diﬀerent ways that AWS and you ensure cloud security while you use App 
Runner and other services.
17AWS App Runner Developer Guide
App Runner concepts
App Runner architecture and 
concepts
AWS App Runner takes your source code or source image from a repository, and creates and maintains 
a running web service for you in the AWS Cloud. Typically, you need to call just one App Runner action,
CreateService, to create your service.
With a source image repository, you provide a ready-to-use container image that App Runner can deploy 
to run your web service. With a source code repository, you provide your code and instructions for 
building and running a web service, and you target a speciﬁc runtime environment. App Runner supports 
several programming platforms, each with one or more managed runtimes for platform major versions.
At this time, App Runner can retrieve your source code from a GitHub  repository, or retrieve your source 
image from Amazon Elastic Container Registry (Amazon ECR) in your AWS account.
The following diagram shows an overview of the App Runner service architecture. In the diagram, there 
are two example services: one deploys source code from GitHub, and the other deploys a source image 
from Amazon ECR.
App Runner concepts
The following are key concepts related to your web service that's running in App Runner:
•App Runner service – An AWS resource that App Runner uses to deploy and manage your application 
based on its source code repository or container image. An App Runner service is a running 
18AWS App Runner Developer Guide
App Runner supported conﬁgurations
version of your application. For more information about creating a service, see the section called 
“Creation” (p. 64).
•Source type  – The type of source repository that you provide for deploying your App Runner service:
source code (p. 26) or source image (p. 23).
•Repository provider – The repository service that contains your application source (for example,
GitHub  (p. 26) or Amazon ECR (p. 23)).
•App Runner connection  – An AWS resource that lets App Runner access a repository provider account 
(for example, a GitHub account or organization). For more information about connections, see the 
section called “Connections” (p. 84).
•Runtime  – A base image for deploying a source code repository. App Runner provides a variety of
managed runtimes  for diﬀerent programming platforms and versions. For more information, see Code-
based service (p. 26).
•Deployment  – An action that applies a version of your source repository (code or image) to an 
App Runner service. The ﬁrst deployment to the service occurs as part of service creation. Later 
deployments can occur in one of two ways:
•Automatic deployment  – A CI/CD capability. You can conﬁgure an App Runner service to 
automatically build (for source code) and deploy each version of your application as it appears in the 
repository. This can be a new commit in a source code repository or a new image version in a source 
image repository.
•Manual deployment  – A deployment to your App Runner service that you explicitly start.
•Custom domain  – A domain that you associate with your App Runner service. Users of your web 
application can use this domain to access your web service instead of the default App Runner 
subdomain. For more information, see the section called “Custom domain names” (p. 87).
•Maintenance  – An activity that App Runner occasionally performs on the infrastructure that runs 
your App Runner service. When maintenance is in progress, service status temporarily changes to
OPERATION_IN_PROGRESS  (Operation in progress  in the console) for a few minutes. Actions on your 
service (for example, deployment, conﬁguration update, pause/resume, or deletion) are blocked during 
this time. Try the action again a few minutes later, when the service status returns to RUNNING .
Note
If your action fails, it doesn't mean that your App Runner service is down. Your application is 
active and keeps handling requests. It's unlikely for your service to experience any downtime.
In particular, App Runner migrates your service if it detects issues in the underlying hardware hosting 
the service. To prevent any service downtime, App Runner deploys your service to a new set of 
instances and shifts traﬃc to them (a blue-green deployment). You might occasionally see a slight 
temporary increase in charges.
App Runner supported conﬁgurations
When you conﬁgure an App Runner service, you specify the virtual CPU and memory conﬁguration 
to allocate to your service. You pay based on the compute conﬁguration that you select. For more 
information on pricing, see AWS Resource Groups Pricing.
The following table provides information on the vCPU and memory conﬁgurations that App Runner 
supports:
CPU Memory
0.25 vCPU 0.5 GB
0.25 vCPU 1 GB
19AWS App Runner Developer Guide
App Runner resources
CPU Memory
0.5 vCPU 1 GB
1 vCPU 2 GB
1 vCPU 3 GB
1 vCPU 4 GB
2 vCPU 4 GB
2 vCPU 6 GB
4 vCPU 8 GB
4 vCPU 10 GB
4 vCPU 12 GB
App Runner resources
When you use App Runner, you create and manage a few types of resources in your AWS account. These 
resources are used to access your code and manage your services.
The following table provides an overview of these resources:
Resource name Description
Service Represents a running version of your application. Much of the rest of this 
guide describes service types, management, conﬁguration, and monitoring.
ARN: arn:aws:apprunner: region:account-id :service/ service-
name[/service-id ]
Connection Provides your App Runner services with access to private repositories 
stored with third-party providers. Exists as a separate resource for sharing 
across multiple services. For more information about connections, see the 
section called “Connections” (p. 84).
ARN: arn:aws:apprunner: region:account-
id:connection/ connection-name [/connection-id ]
AutoScalingConﬁguration Provides your App Runner services with settings that control the automatic 
scaling of your application. Exists as a separate resource for sharing across 
multiple services. For more information about automatic scaling, see the 
section called “Auto scaling” (p. 86).
ARN: arn:aws:apprunner: region:account-
id:autoscalingconfiguration/ config-name [/config-
revision [/config-id ]]
ObservabilityConﬁgurationConﬁgures additional application observability features for your App 
Runner services. Exists as a separate resource for sharing across multiple 
services. For more information about observability conﬁguration, see the 
section called “Observability conﬁguration” (p. 80).
20AWS App Runner Developer Guide
App Runner resource quotas
Resource name Description
ARN: arn:aws:apprunner: region:account-
id:observabilityconfiguration/ config-name [/config-
revision [/config-id ]]
VpcConnectorConﬁgures VPC settings for your App Runner services. Exists as a separate 
resource for sharing across multiple services. For more information about 
VPC functionality, see the section called “Outgoing traﬃc” (p. 114).
ARN: arn:aws:apprunner: region:account-
id:vpcconnector/ connector-name [/connector-
revision [/connector-id ]]
VpcIngressConnectionIt's an AWS App Runner resource used to conﬁgure incoming traﬃc. It 
establishes a connection between a VPC interface endpoint and App 
Runner service, to make your App Runner service accessible from only 
within an Amazon VPC. For more information about functionality of 
VPCIngressConnection, see the section called “Incoming traﬃc” (p. 108).
ARN: arn:aws:apprunner: region:account-
id:vpcingressconnection/ vpc-ingress-connection-
name[/connector-id ]]
App Runner resource quotas
AWS imposes some quotas (also known as limits) on your account for AWS resource usage in each AWS 
Region. The following table lists quotas related to App Runner resources. Quotas are also listed in AWS 
App Runner endpoints and quotas  in the AWS General Reference.
Resource quota Description Default 
valueAdjustable?
Services The maximum number of services that you can 
create in your account for each AWS Region.30 ✓  Yes
Connections The maximum number of connections that you can 
create in your account for each AWS Region. You 
can use a single connection in multiple services.10 ✓  Yes
names The maximum number of unique names that you 
can have in auto scaling conﬁgurations that you 
create in your account for each AWS Region. You 
can use a single auto scaling conﬁguration in 
multiple services.10 ✓  Yes Auto scaling 
conﬁgurations
revisions 
per 
nameThe maximum number of auto scaling 
conﬁguration revisions that you can create in 
your account for each AWS Region for each 
unique name. You can use a single auto scaling 
conﬁguration revision in multiple services.10 ☓ No
Observability 
conﬁgurationsnames The maximum number of unique names that you 
can have in observability conﬁgurations that you 
create in your account for each AWS Region. You 10 ✓  Yes
21AWS App Runner Developer Guide
App Runner resource quotas
Resource quota Description Default 
valueAdjustable?
can use a single observability conﬁguration in 
multiple services.
revisions 
per 
nameThe maximum number of observability 
conﬁguration revisions that you can create in 
your account for each AWS Region for each 
unique name. You can use a single observability 
conﬁguration revision in multiple services.10 ☓ No
VPC connectorsThe maximum number of VPC connectors that you 
can create in your account for each AWS Region. 
You can use a single VPC connector in multiple 
services.10 ✓  Yes
VPC Ingress ConnectionThe maximum number of VPC Ingress Connections 
that you can create in your account for each 
AWS Region. You can use a single VPC Ingress 
Connection to access multiple App Runner services.1 ☓ No
Most quotas are adjustable, and you can request a quota increase for them. For more information, see
Requesting a quota increase in the Service Quotas User Guide.
22AWS App Runner Developer Guide
Image repository providers
App Runner service based on a 
source image
You can use AWS App Runner to create and manage services based on two fundamentally diﬀerent 
types of service source: source code  and source image . Regardless of the source type, App Runner takes 
care of starting, running, scaling, and load balancing your service. You can use the CI/CD capability of 
App Runner to track changes to your source image or code. When App Runner discovers a change, it 
automatically builds (for source code) and deploys the new version to your App Runner service.
This chapter discusses services based on a source image. For information about services based on source 
code, see Code-based service (p. 26).
A source image  is a public or private container image stored in an image repository. You point App 
Runner to an image, and it starts a service running a container based on this image. No build stage is 
necessary. Rather, you provide a ready-to-deploy image.
Image repository providers
App Runner supports the following image repository providers:
•Amazon Elastic Container Registry (Amazon ECR) – Stores images that are private to an AWS 
account.
•Amazon Elastic Container Registry Public (Amazon ECR Public) – Stores images that are publicly 
readable.
Provider use cases
•Using an image stored in Amazon ECR in your AWS account (p. 23)
•Using an image stored in Amazon ECR in a diﬀerent AWS account (p. 24)
•Using an image stored in Amazon ECR Public (p. 24)
Using an image stored in Amazon ECR in your AWS 
account
Amazon ECR stores images in repositories. There are private and public repositories. To deploy your 
image to an App Runner service from a private repository, App Runner needs permission to read your 
image from Amazon ECR. To give that permission to App Runner, you need to provide App Runner with 
an access role . This is an AWS Identity and Access Management (IAM) role that has the necessary Amazon 
ECR action permissions. When you use the App Runner console to create the service, you can choose an 
existing role in your account. Alternatively, you can use the IAM console to create a new custom role. Or, 
you can choose for the App Runner console to create a role for you based on managed policies.
When you use the App Runner API or the AWS CLI, you complete a two-step process. First, you use 
the IAM console to create an access role. You can use a managed policy that App Runner provides or 
23AWS App Runner Developer Guide
Using an image stored in Amazon 
ECR in a diﬀerent AWS account
enter your own custom permissions. Then, you provide the access role during service creation using the
CreateService API action.
For information about App Runner service creation, see the section called “Creation” (p. 64).
Using an image stored in Amazon ECR in a diﬀerent 
AWS account
When you create an App Runner service, you can use an image stored in an Amazon ECR repository 
that belongs to an AWS account other than the one that your service is in. There are a few additional 
considerations to keep in mind when using a cross-account image, in addition to those listed in the 
previous section about a same-account image.
•The cross-account repository should have a policy attached to it. The repository policy provides your 
access role with permissions to read images in the repository. Use the following policy for this purpose. 
Replace access-role-arn  with the Amazon Resource Name (ARN) of your access role.
{ 
  "Version": "2008-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Principal": { 
        "AWS": " access-role-arn " 
      }, 
      "Action": [ 
        "ecr:BatchGetImage", 
        "ecr:DescribeImages", 
        "ecr:GetDownloadUrlForLayer" 
      ] 
    } 
  ]
}
For information about attaching a repository policy to an Amazon ECR repository, see Setting a 
repository policy statement in the Amazon Elastic Container Registry User Guide.
•App Runner doesn't support automatic deployment for Amazon ECR images in a diﬀerent account 
than the one that your service is in.
Using an image stored in Amazon ECR Public
Amazon ECR Public stores publicly readable images. These are the main diﬀerences between Amazon 
ECR and Amazon ECR Public that you should be aware of in the context of App Runner services:
•Amazon ECR Public images are publicly readable. You don't need to provide an access role when 
you create a service based on an Amazon ECR Public image. The repository doesn't need any policy 
attached to it.
•App Runner doesn't support automatic (continuous) deployment for Amazon ECR Public images.
Launch a service directly from Amazon ECR Public
You can directly launch container images of compatible web applications that are hosted on the Amazon 
ECR Public Gallery as web services running on App Runner. When browsing the gallery, look for Launch 
with App Runner  on the gallery page for an image. An image with this option is compatible with App 
24AWS App Runner Developer Guide
Image example
Runner. For more information about the gallery, see Using the Amazon ECR Public Gallery in the Amazon 
ECR Public user guide.
To launch a gallery image as an App Runner service
1. On the gallery page of an image, choose Launch with App Runner .
Result: The App Runner console opens in a new browser tab. The console displays the Create service
wizard, with most of the required new service details pre-ﬁlled.
2. If you want to create your service in an AWS Region other than the one that the console is showing, 
choose the Region displayed on the console header. Then, select another Region.
3. For Port, enter the port number that the image application listens on. You can typically ﬁnd it on 
the gallery page for the image.
4. Optionally, change any other conﬁguration details.
5. Choose Next, review the settings, and then choose Create & deploy.
Image example
The App Runner team maintains the hello-app-runner example image in an Amazon ECR Public Gallery. 
You can use this example to get started with creating an image-based App Runner service. For more 
information, see hello-app-runner .
25AWS App Runner Developer Guide
Source code repository providers
App Runner service based on source 
code
You can use AWS App Runner to create and manage services based on two fundamentally diﬀerent 
types of service source: source code  and source image . Regardless of the source type, App Runner takes 
care of starting, running, scaling, and load balancing your service. You can use the CI/CD capability of 
App Runner to track changes to your source image or code. When App Runner discovers a change, it 
automatically builds (for source code) and deploys the new version to your App Runner service.
This chapter discusses services based on source code. For information about services based on a source 
image, see Image-based service (p. 23).
Source code is application code that App Runner builds and deploys for you. You point App Runner to 
a source code repository and choose a suitable runtime  that corresponds to a programming platform 
version. App Runner builds an image that's based on the base image of the runtime and your application 
code. It then starts a service that runs a container based on this image.
App Runner provides convenient platform-speciﬁc managed runtimes . Each one of these runtimes builds 
a container image from your source code, and adds language runtime dependencies into your image. You 
don't need to provide container conﬁguration and build instructions such as a Dockerﬁle.
Subtopics of this chapter discuss the various platforms that App Runner supports— managed platforms
that provide managed runtimes for diﬀerent programming environments and versions.
Topics
•Source code repository providers (p. 26)
•App Runner managed platforms (p. 27)
•Using the Python platform (p. 27)
•Using the Node.js platform (p. 31)
•Using the Java platform (p. 36)
•Using the .NET platform (p. 41)
•Using the PHP platform (p. 44)
•Using the Ruby platform (p. 52)
•Using the Go platform (p. 55)
Source code repository providers
App Runner deploys your source code by reading it from a source code repository. App Runner supports 
one source code repository provider: GitHub .
Deploying from GitHub
To deploy your source code to an App Runner service from a GitHub  repository, App Runner establishes 
a connection to GitHub. If your repository is private (that is, it isn't publicly accessible on GitHub), you 
26AWS App Runner Developer Guide
App Runner managed platforms
must provide App Runner with connection details. When you use the App Runner console to create a 
service (p. 64), you provide connection details as part of the service creation procedure.
When you use the App Runner API or the AWS CLI, a connection is a separate resource. First, you create 
the connection using the CreateConnection API action. Then, you provide the connection's ARN during 
service creation using the CreateService API action.
For more information about App Runner service creation, see the section called “Creation” (p. 64). For 
more information about App Runner connections, see the section called “Connections” (p. 84).
App Runner managed platforms
App Runner managed platforms provide managed runtimes for various programming environments. 
Each managed runtime makes it easy to build and run containers based on a version of a programming 
language or runtime environment. When you use a managed runtime, App Runner starts with a managed 
runtime image. This image is based on the Amazon Linux Docker image and contains a language runtime 
package as well as some tools and popular dependency packages. App Runner uses this managed 
runtime image as a base image, and adds your application code to build a Docker image. It then deploys 
this image to run your web service in a container.
You specify a runtime for your App Runner service when you create a service (p. 64) using the App 
Runner console or the CreateService API operation. You can also specify a runtime as part of your 
source code. Use the runtime keyword in a App Runner conﬁguration ﬁle (p. 147) that you include 
in your code repository. The naming convention of a managed runtime is <language-name><major-
version> .
App Runner updates the runtime for your service to the latest version on every deployment or service 
update. If your application requires a speciﬁc version of a managed runtime, you can specify it using the
runtime-version  keyword in the App Runner conﬁguration ﬁle (p. 147). You can lock to any level of 
version, including a major or minor version. App Runner only makes lower-level updates to the runtime 
of your service.
Using the Python platform
The AWS App Runner Python platform provides managed runtimes. Each runtime makes it easy to 
build and run containers with web applications based on a Python version. When you use a Python 
runtime, App Runner starts with a managed Python runtime image. This image is based on the Amazon 
Linux Docker image and contains the runtime package for a version of Python and some tools and 
popular dependency packages. App Runner uses this managed runtime image as a base image, and adds 
your application code to build a Docker image. It then deploys this image to run your web service in a 
container.
You specify a runtime for your App Runner service when you create a service (p. 64) using the App 
Runner console or the CreateService API operation. You can also specify a runtime as part of your 
source code. Use the runtime keyword in a App Runner conﬁguration ﬁle (p. 147) that you include 
in your code repository. The naming convention of a managed runtime is <language-name><major-
version> .
For valid Python runtime names and versions, see the section called “Release information” (p. 30).
App Runner updates the runtime for your service to the latest version on every deployment or service 
update. If your application requires a speciﬁc version of a managed runtime, you can specify it using the
runtime-version  keyword in the App Runner conﬁguration ﬁle (p. 147). You can lock to any level of 
27AWS App Runner Developer Guide
Python runtime conﬁguration
version, including a major or minor version. App Runner only makes lower-level updates to the runtime 
of your service.
Version syntax for Python runtimes: major[.minor[.patch]]
For example: 3.8.5
The following examples demonstrate version locking:
•3.8 – Lock the major and minor versions. App Runner updates only patch versions.
•3.8.5 – Lock to a speciﬁc patch version. App Runner doesn't update your runtime version.
Topics
•Python runtime conﬁguration (p. 28)
•Python runtime examples (p. 28)
•Python runtime release information (p. 30)
Python runtime conﬁguration
When you choose a managed runtime, you must also conﬁgure, as a minimum, build and run commands. 
You conﬁgure them while creating (p. 64) or updating  (p. 78) your App Runner service. You can do 
this using one of the following methods:
•Using the App Runner console – Specify the commands in the Conﬁgure build section of the creation 
process or conﬁguration tab.
•Using the App Runner API  – Call the CreateService or UpdateService API operation. Specify the 
commands using the BuildCommand  and StartCommand  members of the CodeConﬁgurationValues
data type.
•Using a conﬁguration ﬁle (p. 147) – Specify one or more build commands in up to three build 
phases, and a single run command that serves to start your application. There are additional optional 
conﬁguration settings.
Providing a conﬁguration ﬁle is optional. When you create an App Runner service using the console or 
the API, you specify if App Runner gets your conﬁguration settings directly when it's created or from a 
conﬁguration ﬁle.
Python runtime examples
The following examples show App Runner conﬁguration ﬁles for building and running a Python service. 
The last example is the source code for a complete Python application that you can deploy to a Python 
runtime service.
Note
The runtime version that's used in these examples is 3.7.7. You can replace it with a version 
you want to use. For latest supported Python runtime version, see the section called “Release 
information”  (p. 30).
Minimal Python conﬁguration ﬁle
This example shows a minimal conﬁguration ﬁle that you can use with a Python managed runtime. 
For the assumptions that App Runner makes with a minimal conﬁguration ﬁle, see the section called 
“Conﬁguration ﬁle examples” (p. 147).
28AWS App Runner Developer Guide
Python runtime examples
Example apprunner.yaml
version: 1.0
runtime: python3  
build: 
  commands: 
    build: 
      - pip install pipenv 
      - pipenv install  
run:  
  command: python app.py
Extended Python conﬁguration ﬁle
This example shows the use of all conﬁguration keys with a Python managed runtime.
Note
The runtime version that's used in these examples is 3.7.7. You can replace it with a version 
you want to use. For latest supported Python runtime version, see the section called “Release 
information”  (p. 30).
Example apprunner.yaml
version: 1.0
runtime: python3  
build: 
  commands: 
    pre-build: 
      - wget -c https://s3.amazonaws.com/ DOC-EXAMPLE-BUCKET /test-lib.tar.gz -O - | tar -xz 
    build:         
      - pip install pipenv 
      - pipenv install 
    post-build: 
      - python manage.py test 
  env: 
    - name: DJANGO_SETTINGS_MODULE 
      value: "django_apprunner.settings" 
    - name: MY_VAR_EXAMPLE 
      value: "example"
run: 
  runtime-version: 3.7.7
  command: pipenv run gunicorn django_apprunner.wsgi --log-file - 
  network:  
    port: 8000 
    env: MY_APP_PORT   
  env: 
    - name: MY_VAR_EXAMPLE 
      value: "example" 
  secrets: 
    - name: my-secret 
      value-from: "arn:aws:secretsmanager:us-
east-1:123456789012:secret:testingstackAppRunnerConstr-kJFXde2ULKbT-S7t8xR:username::" 
    - name: my-parameter 
      value-from: "arn:aws:ssm:us-east-1:123456789012:parameter/parameter-name" 
    - name: my-parameter-only-name 
      value-from: "parameter-name"
Complete Python application source
This example shows the source code for a complete Python application that you can deploy to a Python 
runtime service.
29AWS App Runner Developer Guide
Release information
Example requirements.txt
pyramid==2.0
Example server.py
from wsgiref.simple_server import make_server
from pyramid.config import Configurator
from pyramid.response import Response
import os
def hello_world(request): 
    name = os.environ.get('NAME') 
    if name == None or len(name) == 0: 
        name = "world" 
    message = "Hello, " + name + "!\n" 
    return Response(message)
if __name__ == '__main__': 
    port = int(os.environ.get("PORT")) 
    with Configurator() as config: 
        config.add_route('hello', '/') 
        config.add_view(hello_world, route_name='hello') 
        app = config.make_wsgi_app() 
    server = make_server('0.0.0.0', port, app) 
    server.serve_forever()
Example apprunner.yaml
version: 1.0
runtime: python3
build: 
  commands: 
    build: 
      - pip install -r requirements.txt
run: 
  command: python server.py
Python runtime release information
This topic lists the full details for the Python runtime versions that App Runner supports.
Supported runtime versions
Runtime name Minor versions Included packages
3.8.16 SQLite 3.42.0
3.8.16 SQLite 3.41.2
3.8.16 SQLite 3.40.1
3.8.16 SQLite 3.40.0
3.8.15 SQLite 3.40.0
3.8.5 SQLite 3.39.4python3
3.7.16 SQLite 3.42.0
30AWS App Runner Developer Guide
Node.js platform
Runtime name Minor versions Included packages
3.7.16 SQLite 3.41.2
3.7.16 SQLite 3.40.1
3.7.16 SQLite 3.40.0
3.7.15 SQLite 3.40.0
3.7.10 SQLite 3.40.0
Using the Node.js platform
The AWS App Runner Node.js platform provides managed runtimes. Each runtime makes it easy to build 
and run containers with web applications based on a Node.js version. When you use a Node.js runtime, 
App Runner starts with a managed Node.js runtime image. This image is based on the Amazon Linux 
Docker image and contains the runtime package for a version of Node.js and some tools. App Runner 
uses this managed runtime image as a base image, and adds your application code to build a Docker 
image. It then deploys this image to run your web service in a container.
You specify a runtime for your App Runner service when you create a service (p. 64) using the App 
Runner console or the CreateService API operation. You can also specify a runtime as part of your 
source code. Use the runtime keyword in a App Runner conﬁguration ﬁle (p. 147) that you include 
in your code repository. The naming convention of a managed runtime is <language-name><major-
version> .
For valid Node.js runtime names and versions, see the section called “Release information” (p. 35).
App Runner updates the runtime for your service to the latest version on every deployment or service 
update. If your application requires a speciﬁc version of a managed runtime, you can specify it using the
runtime-version  keyword in the App Runner conﬁguration ﬁle (p. 147). You can lock to any level of 
version, including a major or minor version. App Runner only makes lower-level updates to the runtime 
of your service.
Version syntax for Node.js runtimes: major[.minor[.patch]]
For example: 12.21.0
The following examples demonstrate version locking:
•12.21 – Lock the major and minor versions. App Runner updates only patch versions.
•12.21.0 – Lock to a speciﬁc patch version. App Runner doesn't update your runtime version.
Topics
•Node.js runtime conﬁguration (p. 31)
•Node.js runtime examples  (p. 33)
•Node.js runtime release information (p. 35)
Node.js runtime conﬁguration
When you choose a managed runtime, you must also conﬁgure, as a minimum, build and run commands. 
You conﬁgure them while creating (p. 64) or updating  (p. 78) your App Runner service. You can do 
this using one of the following methods:
31AWS App Runner Developer Guide
Node.js runtime conﬁguration
•Using the App Runner console – Specify the commands in the Conﬁgure build section of the creation 
process or conﬁguration tab.
•Using the App Runner API  – Call the CreateService or UpdateService API operation. Specify the 
commands using the BuildCommand  and StartCommand  members of the CodeConﬁgurationValues
data type.
•Using a conﬁguration ﬁle (p. 147) – Specify one or more build commands in up to three build 
phases, and a single run command that serves to start your application. There are additional optional 
conﬁguration settings.
Providing a conﬁguration ﬁle is optional. When you create an App Runner service using the console or 
the API, you specify if App Runner gets your conﬁguration settings directly when it's created or from a 
conﬁguration ﬁle.
With Node.js runtimes speciﬁcally, you can also conﬁgure the build and runtime using a JSON ﬁle named
package.json  in the root of your source repository. Using this ﬁle, you can conﬁgure the Node.js 
engine version, dependency packages, and various commands (command line applications). Package 
managers such as npm or yarn interpret this ﬁle as input for their commands.
For example:
•npm install  installs packages deﬁned by the dependencies  and devDependencies  node in
package.json .
•npm start or npm run start runs the command deﬁned by the scripts/start  node in
package.json .
The following is an example package.json  ﬁle.
package.json
{ 
  "name": "node-js-getting-started", 
  "version": "0.3.0", 
  "description": "A sample Node.js app using Express 4", 
  "engines": { 
    "node": "12.21.0" 
  }, 
  "scripts": { 
    "start": "node index.js", 
    "test": "node test.js" 
  }, 
  "dependencies": { 
    "cool-ascii-faces": "^1.3.4", 
    "ejs": "^2.5.6", 
    "express": "^4.15.2" 
  }, 
  "devDependencies": { 
    "got": "^11.3.0", 
    "tape": "^4.7.0" 
  }
}
For more information about package.json , see Creating a package.json ﬁle on the npm Docs  website.
Tips
•If your package.json  ﬁle deﬁnes a start command, you can use it as a run command in your 
App Runner conﬁguration ﬁle, as the following example shows.
32AWS App Runner Developer Guide
Node.js runtime examples
Example
package.json
{ 
  "scripts": { 
    "start": "node index.js" 
  }
}
apprunner.yaml
run: 
  command: npm start
•When you run npm install  in your development environment, npm creates the ﬁle package-
lock.json . This ﬁle contains a snapshot of the package versions npm just installed. 
Thereafter, when npm installs dependencies, it uses these exact versions. If you install yarn 
it creates a yarn.lock  ﬁle. Commit these ﬁles to your source code repository to ensure that 
your application is installed with the versions of dependencies that you developed and tested 
it with.
•You can also use an App Runner conﬁguration ﬁle to conﬁgure the Node.js version and start 
command. When you do this, these deﬁnitions override the ones in package.json . A conﬂict 
between the node version in package.json  and the runtime-version  value in the App 
Runner conﬁguration ﬁle causes the App Runner build phase to fail.
Node.js runtime examples
The following examples show App Runner conﬁguration ﬁles for building and running a Node.js service.
Note
The runtime version that's used in these examples is 12.21.0. You can replace it with a version 
you want to use. For latest supported Node.js runtime version, see the section called “Release 
information”  (p. 35).
Minimal Node.js conﬁguration ﬁle
This example shows a minimal conﬁguration ﬁle that you can use with a Node.js managed runtime. 
For the assumptions that App Runner makes with a minimal conﬁguration ﬁle, see the section called 
“Conﬁguration ﬁle examples” (p. 147).
Example apprunner.yaml
version: 1.0
runtime: nodejs12
build: 
  commands:     
    build: 
      - npm install --production                                   
run:                               
  command: node app.js
Extended Node.js conﬁguration ﬁle
This example shows the use of all the conﬁguration keys with a Node.js managed runtime.
33AWS App Runner Developer Guide
Node.js runtime examples
Note
The runtime version that's used in these examples is 12.21.0. You can replace it with a version 
you want to use. For latest supported Node.js runtime version, see the section called “Release 
information”  (p. 35).
Example apprunner.yaml
version: 1.0
runtime: nodejs12
build: 
  commands: 
    pre-build: 
      - npm install --only=dev 
      - node test.js 
    build: 
      - npm install --production 
    post-build: 
      - node node_modules/ejs/postinstall.js 
  env: 
    - name: MY_VAR_EXAMPLE 
      value: "example"
run: 
  runtime-version: 12.21.0
  command: node app.js 
  network: 
    port: 8000 
    env: APP_PORT 
  env: 
    - name: MY_VAR_EXAMPLE 
      value: "example"
Node.js app with Grunt
This example shows how to conﬁgure a Node.js application that's developed with Grunt. Grunt  is a 
command line JavaScript task runner. It runs repetitive tasks and manages process automation to reduce 
human error. Grunt and Grunt plugins are installed and managed using npm. You conﬁgure Grunt by 
including the Gruntfile.js  ﬁle in the root of your source repository.
Example package.json
{ 
  "scripts": { 
    "build": "grunt uglify", 
    "start": "node app.js" 
  }, 
  "devDependencies": { 
    "grunt": "~0.4.5", 
    "grunt-contrib-jshint": "~0.10.0", 
    "grunt-contrib-nodeunit": "~0.4.1", 
    "grunt-contrib-uglify": "~0.5.0" 
  }, 
  "dependencies": { 
    "express": "^4.15.2" 
  },
}
Example Gruntﬁle.js
module.exports = function(grunt) { 
34AWS App Runner Developer Guide
Release information
  // Project configuration. 
  grunt.initConfig({ 
    pkg: grunt.file.readJSON('package.json'), 
    uglify: { 
      options: { 
        banner: '/*! <%= pkg.name %> <%= grunt.template.today("yyyy-mm-dd") %> */\n' 
      }, 
      build: { 
        src: 'src/<%= pkg.name %>.js', 
        dest: 'build/<%= pkg.name %>.min.js' 
      } 
    } 
  }); 
  // Load the plugin that provides the "uglify" task. 
  grunt.loadNpmTasks('grunt-contrib-uglify'); 
  // Default task(s). 
  grunt.registerTask('default', ['uglify']);
};
Example apprunner.yaml
Note
The runtime version that's used in these examples is 12.21.0. You can replace it with a version 
you want to use. For latest supported Node.js runtime version, see the section called “Release 
information”  (p. 35).
version: 1.0
runtime: nodejs12
build: 
  commands: 
    pre-build: 
      - npm install grunt grunt-cli 
      - npm install --only=dev 
      - npm run build 
    build: 
      - npm install --production
run: 
  runtime-version: 12.21.0
  command: node app.js 
  network: 
    port: 8000 
    env: APP_PORT
Node.js runtime release information
This topic lists the full details for the Node.js runtime versions that App Runner supports.
Supported runtime versions
Runtime name Minor versions Included packages
16.20.1 nodejs (including npm), yarn
16.20.0 nodejs (including npm), yarn
16.19.1 nodejs (including npm), yarnNode.js 16
16.19.0 nodejs (including npm), yarn
35AWS App Runner Developer Guide
Java platform
Runtime name Minor versions Included packages
16.18.1 nodejs (including npm), yarn
16.17.1 nodejs (including npm), yarn
16.17.0 nodejs (including npm), yarn
14.21.3 nodejs (including npm), yarn
14.21.2 nodejs (including npm), yarn
14.21.1 nodejs (including npm), yarn
14.20.1 nodejs (including npm), yarnNode.js 14
14.19.0 nodejs (including npm), yarn
12.22.12 nodejs (including npm), yarn Node.js 12
12.21.0 nodejs (including npm), yarn
Using the Java platform
The AWS App Runner Java platform provides managed runtimes. Each runtime makes it easy to build 
and run containers with web applications based on a Java version. When you use a Java runtime, App 
Runner starts with a managed Java runtime image. This image is based on the Amazon Linux Docker 
image  and contains the runtime package for a version of Java and some tools. App Runner uses this 
managed runtime image as a base image, and adds your application code to build a Docker image. It 
then deploys this image to run your web service in a container.
You specify a runtime for your App Runner service when you create a service (p. 64) using the App 
Runner console or the CreateService API operation. You can also specify a runtime as part of your 
source code. Use the runtime keyword in a App Runner conﬁguration ﬁle (p. 147) that you include 
in your code repository. The naming convention of a managed runtime is <language-name><major-
version> .
At this time, all the supported Java runtimes are based on Amazon Corretto. For valid Java runtime 
names and versions, see the section called “Release information” (p. 40).
App Runner updates the runtime for your service to the latest version on every deployment or service 
update. If your application requires a speciﬁc version of a managed runtime, you can specify it using the
runtime-version  keyword in the App Runner conﬁguration ﬁle (p. 147). You can lock to any level of 
version, including a major or minor version. App Runner only makes lower-level updates to the runtime 
of your service.
Version syntax for Amazon Corretto runtimes:
Runtime Syntax Example
corretto11 11.0[.openjdk-update [.openjdk-
build[.corretto-specific-
revision ]]]11.0.13.08.1
corretto8 8[.openjdk-update [.openjdk-
build[.corretto-specific-
revision ]]]8.312.07.1
36AWS App Runner Developer Guide
Java runtime conﬁguration
The following examples demonstrate version locking:
•11.0.13 – Lock the Open JDK update version. App Runner updates only Open JDK and Amazon 
Corretto lower-level builds.
•11.0.13.08.1  – Lock to a speciﬁc version. App Runner doesn't update your runtime version.
Topics
•Java runtime conﬁguration (p. 37)
•Java runtime examples (p. 37)
•Java runtime release information (p. 40)
Java runtime conﬁguration
When you choose a managed runtime, you must also conﬁgure, as a minimum, build and run commands. 
You conﬁgure them while creating (p. 64) or updating  (p. 78) your App Runner service. You can do 
this using one of the following methods:
•Using the App Runner console – Specify the commands in the Conﬁgure build section of the creation 
process or conﬁguration tab.
•Using the App Runner API  – Call the CreateService or UpdateService API operation. Specify the 
commands using the BuildCommand  and StartCommand  members of the CodeConﬁgurationValues
data type.
•Using a conﬁguration ﬁle (p. 147) – Specify one or more build commands in up to three build 
phases, and a single run command that serves to start your application. There are additional optional 
conﬁguration settings.
Providing a conﬁguration ﬁle is optional. When you create an App Runner service using the console or 
the API, you specify if App Runner gets your conﬁguration settings directly when it's created or from a 
conﬁguration ﬁle.
Java runtime examples
The following examples show App Runner conﬁguration ﬁles for building and running a Java service. 
The last example is the source code for a complete Java application that you can deploy to a Corretto 11 
runtime service.
Note
The runtime version that's used in these examples is 11.0.13.08.1 . You can replace it with 
a version you want to use. For latest supported Java runtime version, see the section called 
“Release information” (p. 40).
Minimal Corretto 11 conﬁguration ﬁle
This example shows a minimal conﬁguration ﬁle that you can use with a Corretto 11 managed runtime. 
For the assumptions that App Runner makes with a minimal conﬁguration ﬁle, see .
Example apprunner.yaml
version: 1.0
runtime: corretto11
build: 
  commands:     
37AWS App Runner Developer Guide
Java runtime examples
    build: 
      - mvn clean package
run:                               
  command: java -Xms256m -jar target/MyApp-1.0-SNAPSHOT.jar .
Extended Corretto 11 conﬁguration ﬁle
This example shows how you can use all the conﬁguration keys with a Corretto 11 managed runtime.
Note
The runtime version that's used in these examples is 11.0.13.08.1 . You can replace it with 
a version you want to use. For latest supported Java runtime version, see the section called 
“Release information” (p. 40).
Example apprunner.yaml
version: 1.0
runtime: corretto11
build: 
  commands: 
    pre-build: 
      - yum install some-package
      - scripts/prebuild.sh 
    build: 
      - mvn clean package 
    post-build: 
      - mvn clean test 
  env: 
    - name: M2 
      value: "/usr/local/apache-maven/bin" 
    - name: M2_HOME 
      value: "/usr/local/apache-maven/bin"
run: 
  runtime-version: 11.0.13.08.1
  command: java -Xms256m -jar target/MyApp-1.0-SNAPSHOT.jar . 
  network: 
    port: 8000 
    env: APP_PORT 
  env: 
    - name: MY_VAR_EXAMPLE 
      value: "example"
Complete Corretto 11 application source
This example shows the source code for a complete Java application that you can deploy to a Corretto 11 
runtime service.
Example src/main/java/com/HelloWorld/HelloWorld.java
package com.HelloWorld;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
@RestController
public class HelloWorld { 
    @RequestMapping("/") 
    public String index(){ 
        String s = "Hello World"; 
        return s; 
38AWS App Runner Developer Guide
Java runtime examples
    }
}
Example src/main/java/com/HelloWorld/Main.java
package com.HelloWorld;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
@SpringBootApplication
public class Main { 
    public static void main(String[] args) { 
        SpringApplication.run(Main.class, args); 
    }
}
Example apprunner.yaml
version: 1.0
runtime: corretto11
build: 
  commands:     
    build: 
      - mvn clean package
run:                               
  command: java -Xms256m -jar target/HelloWorldJavaApp-1.0-SNAPSHOT.jar . 
  network: 
    port: 8080
Example pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/
maven-4.0.0.xsd"> 
  <modelVersion>4.0.0</modelVersion> 
  <parent> 
    <groupId>org.springframework.boot</groupId> 
    <artifactId>spring-boot-starter-parent</artifactId> 
    <version>2.3.1.RELEASE</version> 
    <relativePath/> 
  </parent> 
  <groupId>com.HelloWorld</groupId> 
  <artifactId>HelloWorldJavaApp</artifactId> 
  <version>1.0-SNAPSHOT</version> 
  <properties> 
    <java.version>11</java.version> 
  </properties> 
  <dependencies> 
    <dependency> 
      <groupId>org.springframework.boot</groupId> 
      <artifactId>spring-boot-starter-data-rest</artifactId> 
    </dependency> 
    <dependency> 
39AWS App Runner Developer Guide
Release information
      <groupId>org.springframework.boot</groupId> 
      <artifactId>spring-boot-starter-test</artifactId> 
      <scope>test</scope> 
      <exclusions> 
        <exclusion> 
          <groupId>org.junit.vintage</groupId> 
          <artifactId>junit-vintage-engine</artifactId> 
        </exclusion> 
      </exclusions> 
    </dependency> 
  </dependencies> 
  <build> 
    <plugins> 
      <plugin> 
        <groupId>org.springframework.boot</groupId> 
        <artifactId>spring-boot-maven-plugin</artifactId> 
      </plugin> 
      <plugin> 
        <groupId>org.apache.maven.plugins</groupId> 
        <artifactId>maven-compiler-plugin</artifactId> 
        <version>3.8.0</version> 
        <configuration> 
          <release>11</release> 
        </configuration> 
      </plugin> 
    </plugins> 
  </build>
</project>
Java runtime release information
This topic lists the full details for the Java runtime versions that App Runner supports.
Supported runtime versions
Runtime name Minor versions Included packages
11.0.20.8.1 Amazon Corretto 11 Maven 3.9.3, Gradle 
6.9.4
11.0.19.7.1 Amazon Corretto 11 Maven 3.9.3, Gradle 
6.9.4
11.0.19.7.1 Amazon Corretto 11 Maven 3.9.2, Gradle 
6.9.4
11.0.18.10.1 Amazon Corretto 11 Maven 3.9.1, Gradle 
6.9.4
11.0.18.10.1 Amazon Corretto 11 Maven 3.9.0, Gradle 
6.9.4
11.0.18.10.1 Amazon Corretto 11 Maven 3.8.7, Gradle 
6.9.3
11.0.17.8.1 Amazon Corretto 11 Maven 3.8.6, Gradle 
6.9.3corretto11
11.0.16.9.1 Amazon Corretto 11 Maven 3.8.6, Gradle 
6.9.2
40AWS App Runner Developer Guide
.NET platform
Runtime name Minor versions Included packages
11.0.13.08.1 Amazon Corretto 11, Maven 3.6.3, Gradle 
6.5
8.382.05.1 Amazon Corretto 8, Maven 3.9.3, Gradle 
6.9.4
8.372.07.1 Amazon Corretto 8, Maven 3.9.3, Gradle 
6.9.4
8.372.07.1 Amazon Corretto 8, Maven 3.9.2, Gradle 
6.9.4
8.362.08.1 Amazon Corretto 8, Maven 3.9.1, Gradle 
6.9.4
8.362.08.1 Amazon Corretto 8, Maven 3.9.0, Gradle 
6.9.4
8.362.08.1 Amazon Corretto 8 Maven 3.8.7, Gradle 
6.9.3
8.352.08.1 Amazon Corretto 8 Maven 3.8.6, Gradle 
6.9.3
8.342.07.4 Amazon Corretto 8 Maven 3.8.6, Gradle 
6.9.2corretto8
8.312.07.1 Amazon Corretto 8, Maven 3.6.3, Gradle 
6.5
Using the .NET platform
The AWS App Runner .NET platform provides managed runtimes. Each runtime makes it easy to build 
and run containers with web applications based on a .NET version. When you use a .NET runtime, App 
Runner starts with a managed .NET runtime image. This image is based on the Amazon Linux Docker 
image  and contains the runtime package for a version of .NET and some tools and popular dependency 
packages. App Runner uses this managed runtime image as a base image, and adds your application code 
to build a Docker image. It then deploys this image to run your web service in a container.
You specify a runtime for your App Runner service when you create a service (p. 64) using the App 
Runner console or the CreateService API operation. You can also specify a runtime as part of your 
source code. Use the runtime keyword in a App Runner conﬁguration ﬁle (p. 147) that you include 
in your code repository. The naming convention of a managed runtime is <language-name><major-
version> .
For valid .NET runtime names and versions, see the section called “Release information” (p. 44).
App Runner updates the runtime for your service to the latest version on every deployment or service 
update. If your application requires a speciﬁc version of a managed runtime, you can specify it using the
runtime-version  keyword in the App Runner conﬁguration ﬁle (p. 147). You can lock to any level of 
version, including a major or minor version. App Runner only makes lower-level updates to the runtime 
of your service.
Version syntax for .NET runtimes: major[.minor[.patch]]
For example: 6.0.9
41AWS App Runner Developer Guide
.NET runtime conﬁguration
The following examples demonstrate version locking:
•6.0 – Lock the major and minor versions. App Runner updates only patch versions.
•6.0.9 – Lock to a speciﬁc patch version. App Runner doesn't update your runtime version.
Topics
•.NET runtime conﬁguration (p. 42)
•.NET runtime examples  (p. 42)
•.NET 6 runtime release information (p. 44)
.NET runtime conﬁguration
When you choose a managed runtime, you must also conﬁgure, as a minimum, build and run commands. 
You conﬁgure them while creating (p. 64) or updating  (p. 78) your App Runner service. You can do 
this using one of the following methods:
•Using the App Runner console – Specify the commands in the Conﬁgure build section of the creation 
process or conﬁguration tab.
•Using the App Runner API  – Call the CreateService or UpdateService API operation. Specify the 
commands using the BuildCommand  and StartCommand  members of the CodeConﬁgurationValues
data type.
•Using a conﬁguration ﬁle (p. 147) – Specify one or more build commands in up to three build 
phases, and a single run command that serves to start your application. There are additional optional 
conﬁguration settings.
Providing a conﬁguration ﬁle is optional. When you create an App Runner service using the console or 
the API, you specify if App Runner gets your conﬁguration settings directly when it's created or from a 
conﬁguration ﬁle.
.NET runtime examples
The following examples show App Runner conﬁguration ﬁles for building and running a .NET service. The 
last example is the source code for a complete .NET application that you can deploy to a .NET runtime 
service.
Note
The runtime version that's used in these examples is 6.0.9. You can replace it with a version 
you want to use. For latest supported .NET runtime version, see the section called “Release 
information”  (p. 44).
Minimal .NET conﬁguration ﬁle
This example shows a minimal conﬁguration ﬁle that you can use with a .NET managed runtime. For 
the assumptions that App Runner makes with a minimal conﬁguration ﬁle, see the section called 
“Conﬁguration ﬁle examples” (p. 147).
Example apprunner.yaml
version: 1.0
runtime: dotnet6
build: 
  commands:     
    build: 
      - dotnet publish -c Release -o out
42AWS App Runner Developer Guide
.NET runtime examples
run:                               
  command: dotnet out/HelloWorldDotNetApp.dll
Extended .NET conﬁguration ﬁle
This example shows the use of all conﬁguration keys with a .NET managed runtime.
Note
The runtime version that's used in these examples is 6.0.9. You can replace it with a version 
you want to use. For latest supported .NET runtime version, see the section called “Release 
information”  (p. 44).
Example apprunner.yaml
version: 1.0
runtime: dotnet6
build: 
  commands: 
    pre-build: 
      - scripts/prebuild.sh 
    build: 
      - dotnet publish -c Release -o out 
    post-build: 
      - scripts/postbuild.sh 
  env: 
    - name: MY_VAR_EXAMPLE 
      value: "example"     
run: 
  runtime-version: 6.0.9
  command: dotnet out/HelloWorldDotNetApp.dll 
  network: 
    port: 5000 
    env: APP_PORT 
  env: 
    - name: ASPNETCORE_URLS 
      value: "http://*:5000"
Complete .NET application source
This example shows the source code for a complete .NET application that you can deploy to a .NET 
runtime service.
Note
•Run following command to create a simple .NET 6 web app:  dotnet new web --name 
HelloWorldDotNetApp -f net6.0
•Add the apprunner.yaml  to the created .NET 6 web app.
Example HelloWorldDotNetApp
version: 1.0
runtime: dotnet6
build: 
  commands: 
    build: 
      - dotnet publish -c Release -o out
run: 
  command: dotnet out/HelloWorldDotNetApp.dll 
  network: 
    port: 5000 
43AWS App Runner Developer Guide
Release information
    env: APP_PORT 
  env: 
    - name: ASPNETCORE_URLS 
      value: "http://*:5000"
.NET 6 runtime release information
This topic lists the full details for the .NET 6 runtime versions that App Runner supports.
Supported runtime versions
Runtime name Minor versions Included packages
6.0.20 .NET SDK 6.0.412
6.0.19 .NET SDK 6.0.411
6.0.16 .NET SDK 6.0.408
6.0.15 .NET SDK 6.0.407
6.0.14 .NET SDK 6.0.406
6.0.13 .NET SDK 6.0.405
6.0.12 .NET SDK 6.0.404
6.0.11 .NET SDK 6.0.403
6.0.10 .NET SDK 6.0.402.NET 6
6.0.9 .NET SDK 6.0.401
Using the PHP platform
The AWS App Runner PHP platform provides managed runtimes. You can use each runtime to build and 
run containers with web applications based on a PHP version. When you use a PHP runtime, App Runner 
starts with a managed PHP runtime image. This image is based on the Amazon Linux Docker image
and contains the runtime package for a version of PHP and some tools. App Runner uses this managed 
runtime image as a base image, and adds your application code to build a Docker image. This image then 
deploys this image to run your web service in a container.
You specify a runtime for your App Runner service when you create a service (p. 64) using the App 
Runner console or the CreateService API operation. You can also specify a runtime as part of your 
source code. Use the runtime keyword in a App Runner conﬁguration ﬁle (p. 147) that you include 
in your code repository. The naming convention of a managed runtime is <language-name><major-
version> .
For valid PHP runtime names and versions, see the section called “Release information” (p. 51).
App Runner updates the runtime for your service to the latest version on every deployment or service 
update. If your application requires a speciﬁc version of a managed runtime, you can specify it using the
runtime-version  keyword in the App Runner conﬁguration ﬁle (p. 147). You can lock to any level of 
version, including a major or minor version. App Runner only makes lower-level updates to the runtime 
of your service.
Version syntax for PHP runtimes: major[.minor[.patch]]
44AWS App Runner Developer Guide
PHP runtime conﬁguration
For example: 8.1.10
The following are examples of version locking:
•8.1 – Lock the major and minor versions. App Runner updates only patch versions.
•8.1.10 – Lock to a speciﬁc patch version. App Runner doesn't update your runtime version.
Topics
•PHP runtime conﬁguration (p. 45)
•Compatibility (p. 45)
•PHP runtime examples  (p. 46)
•PHP runtime release information (p. 51)
PHP runtime conﬁguration
When you choose a managed runtime, you must also conﬁgure, as a minimum, build and run commands. 
You conﬁgure them while creating (p. 64) or updating  (p. 78) your App Runner service. You can do 
this using one of the following methods:
•Using the App Runner console – Specify the commands in the Conﬁgure build section of the creation 
process or conﬁguration tab.
•Using the App Runner API  – Call the CreateService or UpdateService API operation. Specify the 
commands using the BuildCommand  and StartCommand  members of the CodeConﬁgurationValues
data type.
•Using a conﬁguration ﬁle (p. 147) – Specify one or more build commands in up to three build 
phases, and a single run command that serves to start your application. There are additional optional 
conﬁguration settings.
Providing a conﬁguration ﬁle is optional. When you create an App Runner service using the console or 
the API, you specify if App Runner gets your conﬁguration settings directly when it's created or from a 
conﬁguration ﬁle.
Compatibility
You can run your App Runner services on PHP platform using one of the following web servers:
•Apache HTTP Server
•NGINX
Apache HTTP Server and NGINX are compatible with PHP-FPM. You can start the Apache HTTP Server
and NGINX  by using one of the following:
•Supervisord - For more information about running a supervisord, see Running supervisord.
•Startup script
For examples on how to conﬁgure your App Runner service with PHP platform using Apache HTTP Server
or NGINX , see the section called “Complete PHP application source” (p. 47).
File Structure
The index.php  must be installed in the public  folder under the root directory.
45AWS App Runner Developer Guide
PHP runtime examples
Note
The startup.sh  or supervisord.conf  ﬁles can be stored in anywhere in the repository. 
Make sure that the start command points to the location where the startup.sh  or
supervisord.conf  ﬁles are stored.
The following is an example of the ﬁle structure if you are using supervisord.
/
## public/
#  ## index.php
## apprunner.yaml
## supervisord.conf
The following is an example of the ﬁle structure if you are using startup script.
/
## public/
#  ## index.php
## apprunner.yaml
## startup.sh
PHP runtime examples
The following are examples of App Runner conﬁguration ﬁles that are used for building and running a 
PHP service.
Minimal PHP conﬁguration ﬁle
The following example is a minimal conﬁguration ﬁle that you can use with a PHP managed runtime. 
For more information about a minimal conﬁguration ﬁle, see the section called “Conﬁguration ﬁle 
examples” (p. 147).
Example apprunner.yaml
version: 1.0  
runtime: php81
build: 
  commands: 
    build: 
      - echo example build command for PHP
run: 
  command: ./startup.sh
Extended PHP conﬁguration ﬁle
The following example uses all the conﬁguration keys with a PHP managed runtime.
Note
The runtime version that's used in these examples is 8.1.10. You can replace it with a version 
you want to use. For latest supported PHP runtime version, see the section called “Release 
information”  (p. 51).
Example apprunner.yaml
version: 1.0
runtime: php81
build: 
  commands: 
46AWS App Runner Developer Guide
PHP runtime examples
     pre-build: 
      - scripts/prebuild.sh 
    build: 
      - echo example build command for PHP 
    post-build: 
      - scripts/postbuild.sh 
  env: 
    - name: MY_VAR_EXAMPLE 
      value: "example"
run: 
  runtime-version: 8.1.10
  command: ./startup.sh 
  network: 
    port: 5000 
    env: APP_PORT 
  env: 
    - name: MY_VAR_EXAMPLE 
      value: "example"
Complete PHP application source
The following examples are of PHP application source code that you can use to deploy to a PHP runtime 
service using Apache HTTP Server or NGINX . These examples assume that you use the default ﬁle 
structure.
Running PHP platform with Apache HTTP Server using supervisord
Example File structure
Note
•The supervisord.conf  ﬁle can be stored anywhere in the repository. Make sure that the
start command points to where the supervisord.conf  ﬁle is stored.
•The index.php  must be installed in the public  folder under the root directory.
/
## public/
#  ## index.php
## apprunner.yaml
## supervisord.conf
Example supervisord.conf
[supervisord]
nodaemon=true
[program:httpd]
command=httpd -DFOREGROUND
autostart= true
autorestart= true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
[program:php-fpm]
command=php-fpm -F
autostart= true
autorestart= true
stdout_logfile=/dev/stdout
47AWS App Runner Developer Guide
PHP runtime examples
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
Example apprunner.yaml
version: 1.0
runtime: php81
build: 
  commands: 
    build: 
      - PYTHON=python2 amazon-linux-extras install epel 
      - yum -y install supervisor
run: 
  command: supervisord 
  network: 
    port: 8080 
    env: APP_PORT
Example index.php
<html>
<head> <title>First PHP App</title> </head>
<body>
<?php 
    print("Hello World!"); 
    print("<br>");
?>
</body>
</html>
Running PHP platform with Apache HTTP Server using startup script
Example File structure
Note
•The startup.sh  ﬁle can be stored anywhere in the repository. Make sure that the start
command points to where the startup.sh  ﬁle is stored.
•The index.php  must be installed in the public  folder under the root directory.
/
## public/
#  ## index.php
## apprunner.yaml
## startup.sh
Example startup.sh
#!/bin/bash
set -o monitor
trap exit SIGCHLD
# Start apache
httpd -DFOREGROUND &
48AWS App Runner Developer Guide
PHP runtime examples
# Start php-fpm
php-fpm -F &
wait
Note
•Make sure to save the startup.sh  ﬁle as an executable before you commit it to a Git 
repository. Use chmod +x startup.sh  to set execute permission on your startup.sh  ﬁle.
•If you don't save the startup.sh  ﬁle as an executable, enter chmod +x startup.sh  as the
build command in your apprunner.yaml  ﬁle.
Example apprunner.yaml
version: 1.0
runtime: php81
build: 
  commands: 
    build: 
      - echo example build command for PHP
run: 
  command: ./startup.sh 
  network: 
    port: 8080 
    env: APP_PORT
Example index.php
<html>
<head> <title>First PHP App</title> </head>
<body>
<?php 
    print("Hello World!"); 
    print("<br>");
?>
</body>
</html>
Running PHP platform with NGINX using supervisord
Example File structure
Note
•The supervisord.conf  ﬁle can be stored anywhere in the repository. Make sure that the
start command points to where the supervisord.conf  ﬁle is stored.
•The index.php  must be installed in the public  folder under the root directory.
/
## public/
#  ## index.php
## apprunner.yaml
## supervisord.conf
Example supervisord.conf
[supervisord]
49AWS App Runner Developer Guide
PHP runtime examples
nodaemon=true
[program:nginx]
command=nginx -g "daemon off;"
autostart= true
autorestart= true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
[program:php-fpm]
command=php-fpm -F
autostart= true
autorestart= true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
Example apprunner.yaml
version: 1.0
runtime: php81
build: 
  commands: 
    build: 
      - PYTHON=python2 amazon-linux-extras install epel 
      - yum -y install supervisor
run: 
  command: supervisord 
  network: 
    port: 8080 
    env: APP_PORT
Example index.php
<html>
<head> <title>First PHP App</title> </head>
<body>
<?php 
    print("Hello World!"); 
    print("<br>");
?>
</body>
</html>
Running PHP platform with NGINX using startup script
Example File structure
Note
•The startup.sh  ﬁle can be stored anywhere in the repository. Make sure that the start
command points to where the startup.sh  ﬁle is stored.
•The index.php  must be installed in the public  folder under the root directory.
/
## public/
50AWS App Runner Developer Guide
Release information
#  ## index.php
## apprunner.yaml
## startup.sh
Example startup.sh
#!/bin/bash
set -o monitor
trap exit SIGCHLD
# Start nginx  
nginx -g 'daemon off;' &
# Start php-fpm
php-fpm -F &
wait
Note
•Make sure to save the startup.sh  ﬁle as an executable before you commit it to a Git 
repository. Use chmod +x startup.sh  to set execute permission on your startup.sh  ﬁle.
•If you don't save the startup.sh  ﬁle as an executable, enter chmod +x startup.sh  as the
build command in your apprunner.yaml  ﬁle.
Example apprunner.yaml
version: 1.0
runtime: php81
build: 
  commands: 
    build: 
      - echo example build command for PHP
run: 
  command: ./startup.sh 
  network: 
    port: 8080 
    env: APP_PORT
Example index.php
<html>
<head> <title>First PHP App</title> </head>
<body>
<?php 
    print("Hello World!"); 
    print("<br>");
?>
</body>
</html>
PHP runtime release information
This topic lists the full details for the PHP runtime versions that App Runner supports.
51AWS App Runner Developer Guide
Ruby platform
Supported runtime versions
Runtime name Minor versions
8.1.21
8.1.20
8.1.19
8.1.17
8.1.16
8.1.14
8.1.13
8.1.12PHP 8.1
8.1.10
Using the Ruby platform
The AWS App Runner Ruby platform provides managed runtimes. Each runtime makes it easy to build 
and run containers with web applications based on a Ruby version. When you use a Ruby runtime, App 
Runner starts with a managed Ruby runtime image. This image is based on the Amazon Linux Docker 
image  and contains the runtime package for a version of Ruby and some tools. App Runner uses this 
managed runtime image as a base image, and adds your application code to build a Docker image. It 
then deploys this image to run your web service in a container.
You specify a runtime for your App Runner service when you create a service (p. 64) using the App 
Runner console or the CreateService API operation. You can also specify a runtime as part of your 
source code. Use the runtime keyword in a App Runner conﬁguration ﬁle (p. 147) that you include 
in your code repository. The naming convention of a managed runtime is <language-name><major-
version> .
For valid Ruby runtime names and versions, see the section called “Release information” (p. 55).
App Runner updates the runtime for your service to the latest version on every deployment or service 
update. If your application requires a speciﬁc version of a managed runtime, you can specify it using the
runtime-version  keyword in the App Runner conﬁguration ﬁle (p. 147). You can lock to any level of 
version, including a major or minor version. App Runner only makes lower-level updates to the runtime 
of your service.
Version syntax for Ruby runtimes: major[.minor[.patch]]
For example: 3.1.2
The following examples demonstrate version locking:
•3.1 – Lock the major and minor versions. App Runner updates only patch versions.
•3.1.2 – Lock to a speciﬁc patch version. App Runner doesn't update your runtime version.
Topics
•Ruby runtime conﬁguration (p. 53)
•Ruby runtime examples (p. 53)
52AWS App Runner Developer Guide
Ruby runtime conﬁguration
•Ruby runtime release information (p. 55)
Ruby runtime conﬁguration
When you choose a managed runtime, you must also conﬁgure, as a minimum, build and run commands. 
You conﬁgure them while creating (p. 64) or updating  (p. 78) your App Runner service. You can do 
this using one of the following methods:
•Using the App Runner console – Specify the commands in the Conﬁgure build section of the creation 
process or conﬁguration tab.
•Using the App Runner API  – Call the CreateService or UpdateService API operation. Specify the 
commands using the BuildCommand  and StartCommand  members of the CodeConﬁgurationValues
data type.
•Using a conﬁguration ﬁle (p. 147) – Specify one or more build commands in up to three build 
phases, and a single run command that serves to start your application. There are additional optional 
conﬁguration settings.
Providing a conﬁguration ﬁle is optional. When you create an App Runner service using the console or 
the API, you specify if App Runner gets your conﬁguration settings directly when it's created or from a 
conﬁguration ﬁle.
Ruby runtime examples
The following examples show App Runner conﬁguration ﬁles for building and running a Ruby service.
Minimal Ruby conﬁguration ﬁle
This example shows a minimal conﬁguration ﬁle that you can use with a Ruby managed runtime. 
For the assumptions that App Runner makes with a minimal conﬁguration ﬁle, see the section called 
“Conﬁguration ﬁle examples” (p. 147).
Example apprunner.yaml
version: 1.0
runtime: ruby31
build: 
  commands: 
    build: 
      - bundle install
run: 
  command: bundle exec rackup --host 0.0.0.0 -p 8080
Extended Ruby conﬁguration ﬁle
This example shows the use of all the conﬁguration keys with a Ruby managed runtime.
Note
The runtime version that's used in these examples is 3.1.2. You can replace it with a version 
you want to use. For latest supported Ruby runtime version, see the section called “Release 
information”  (p. 55).
Example apprunner.yaml
version: 1.0
runtime: ruby31
build: 
53AWS App Runner Developer Guide
Ruby runtime examples
  commands: 
     pre-build: 
      - scripts/prebuild.sh 
    build: 
      - bundle install 
    post-build: 
      - scripts/postbuild.sh 
  env: 
    - name: MY_VAR_EXAMPLE 
      value: "example"
run: 
  runtime-version: 3.1.2
  command: bundle exec rackup --host 0.0.0.0 -p 4567 
  network: 
    port: 4567 
    env: APP_PORT 
  env: 
    - name: MY_VAR_EXAMPLE 
      value: "example"
Complete Ruby application source
These examples shows the source code for a complete Ruby application that you can deploy to a Ruby 
runtime service.
Example server.rb
# server.rb
require 'sinatra'
get '/' do     
  'Hello World!'
end
Example conﬁg.ru
# config.ru
require './server'
run Sinatra::Application
Example Gemﬁle
# Gemfile
source 'https://rubygems.org (https://rubygems.org/)'
gem 'sinatra'
gem 'puma'
Example apprunner.yaml
version: 1.0
runtime: ruby31
build: 
  commands: 
    build: 
      - bundle install
run: 
  command: bundle exec rackup --host 0.0.0.0 -p 4567 
54AWS App Runner Developer Guide
Release information
  network: 
    port: 4567 
    env: APP_PORT
Ruby runtime release information
This topic lists the full details for the Ruby runtime versions that App Runner supports.
Supported runtime versions
Runtime name Minor versions Included packages
3.1.4 SQLite 3.42.0
3.1.4 SQLite 3.41.2
3.1.3 SQLite 3.41.0
3.1.3 SQLite 3.40.0Ruby 3.1
3.1.2 SQLite 3.39.4
Using the Go platform
The AWS App Runner Go platform provides managed runtimes. Each runtime makes it easy to build and 
run containers with web applications based on a Go version. When you use a Go runtime, App Runner 
starts with a managed Go runtime image. This image is based on the Amazon Linux Docker image
and contains the runtime package for a version of Go and some tools. App Runner uses this managed 
runtime image as a base image, and adds your application code to build a Docker image. It then deploys 
this image to run your web service in a container.
You specify a runtime for your App Runner service when you create a service (p. 64) using the App 
Runner console or the CreateService API operation. You can also specify a runtime as part of your 
source code. Use the runtime keyword in a App Runner conﬁguration ﬁle (p. 147) that you include 
in your code repository. The naming convention of a managed runtime is <language-name><major-
version> .
For valid Go runtime names and versions, see the section called “Release information” (p. 57).
App Runner updates the runtime for your service to the latest version on every deployment or service 
update. If your application requires a speciﬁc version of a managed runtime, you can specify it using the
runtime-version  keyword in the App Runner conﬁguration ﬁle (p. 147). You can lock to any level of 
version, including a major or minor version. App Runner only makes lower-level updates to the runtime 
of your service.
Version syntax for Go runtimes: major[.minor[.patch]]
For example: 1.18.7
The following examples demonstrate version locking:
•1.18 – Lock the major and minor versions. App Runner updates only patch versions.
•1.18.7 – Lock to a speciﬁc patch version. App Runner doesn't update your runtime version.
Topics
•Go runtime conﬁguration (p. 56)
55AWS App Runner Developer Guide
Go runtime conﬁguration
•Go runtime examples  (p. 56)
•Go 1 runtime release information (p. 57)
Go runtime conﬁguration
When you choose a managed runtime, you must also conﬁgure, as a minimum, build and run commands. 
You conﬁgure them while creating (p. 64) or updating  (p. 78) your App Runner service. You can do 
this using one of the following methods:
•Using the App Runner console – Specify the commands in the Conﬁgure build section of the creation 
process or conﬁguration tab.
•Using the App Runner API  – Call the CreateService or UpdateService API operation. Specify the 
commands using the BuildCommand  and StartCommand  members of the CodeConﬁgurationValues
data type.
•Using a conﬁguration ﬁle (p. 147) – Specify one or more build commands in up to three build 
phases, and a single run command that serves to start your application. There are additional optional 
conﬁguration settings.
Providing a conﬁguration ﬁle is optional. When you create an App Runner service using the console or 
the API, you specify if App Runner gets your conﬁguration settings directly when it's created or from a 
conﬁguration ﬁle.
Go runtime examples
The following examples show App Runner conﬁguration ﬁles for building and running a Go service.
Minimal Go conﬁguration ﬁle
This example shows a minimal conﬁguration ﬁle that you can use with a Go managed runtime. For 
the assumptions that App Runner makes with a minimal conﬁguration ﬁle, see the section called 
“Conﬁguration ﬁle examples” (p. 147).
Example apprunner.yaml
version: 1.0
runtime: go1
build: 
  commands: 
    build: 
      - go build main.go
run: 
  command: ./main
Extended Go conﬁguration ﬁle
This example shows the use of all the conﬁguration keys with a Go managed runtime.
Note
The runtime version that's used in these examples is 1.18.7. You can replace it with a version 
you want to use. For latest supported Go runtime version, see the section called “Release 
information”  (p. 57).
Example apprunner.yaml
version: 1.0
56AWS App Runner Developer Guide
Release information
runtime: go1
build: 
  commands: 
     pre-build: 
      - scripts/prebuild.sh 
    build: 
      - go build main.go 
    post-build: 
      - scripts/postbuild.sh 
  env: 
    - name: MY_VAR_EXAMPLE 
      value: "example"
run: 
  runtime-version: 1.18.7
  command: ./main 
  network: 
    port: 3000 
    env: APP_PORT 
  env: 
    - name: MY_VAR_EXAMPLE 
      value: "example"
Complete Go application source
These examples shows the source code for a complete Go application that you can deploy to a Go 
runtime service.
Example main.go
package main
import ( 
    "fmt" 
    "net/http"
)
func main() { 
    http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) { 
        fmt.Fprint(w, "<h1>Welcome to App Runner</h1>") 
    }) 
    fmt.Println("Starting the server on :3000...") 
    http.ListenAndServe(":3000", nil)
}
Example apprunner.yaml
version: 1.0
runtime: go1
build: 
  commands: 
    build: 
      - go build main.go
run: 
  command: ./main 
  network: 
    port: 3000 
    env: APP_PORT
Go 1 runtime release information
This topic lists the full details for the Go runtime versions that App Runner supports.
57AWS App Runner Developer Guide
Release information
Supported runtime versions
Runtime name Minor versions
1.18.10
1.18.9
1.18.8Go 1
1.18.7
58AWS App Runner Developer Guide
Runtime information
Developing application code for App 
Runner
This chapter discusses runtime information and development guidelines that you should consider when 
developing or migrating application code for deployment to AWS App Runner.
Runtime information
Whether you provide a container image or App Runner builds one for you, App Runner runs your 
application code in a container instance. Here are a few key aspects of the container instance runtime 
environment.
•Framework support – App Runner supports any image that implements a web application. It's 
agnostic to the programming language that you choose and to the web application server or 
framework that you use, if you use any. For your convenience, we provide platform-speciﬁc managed 
runtimes for various programming platforms, to streamline the application build process and abstract 
image creation.
•Web requests – App Runner provides support for HTTP 1.0 and HTTP 1.1 to the container instances. 
For more information about conﬁguring your service, see the section called “Conﬁguration” (p. 78). 
You don't need to implement handling of HTTPS secure traﬃc. App Runner redirects all incoming 
HTTP requests to corresponding HTTPS endpoints. You don't need to conﬁgure any settings to enable 
redirecting the HTTP web requests. App Runner terminates the TLS before passing requests to your 
application container instance.
Note
•There is a total of 120 seconds request timeout limit on the HTTP requests. The 120 
seconds include the time the application takes to read the request, including the body, and 
complete writing the HTTP response.
•The request read and response timeout limit is contingent on the applications that you 
use. These applications may have their own internal timeouts, such as the HTTP server for 
Python, Gunicorn, has a 30 second default timeout limit. In such cases, the application's 
timeout limit overrides the App Runner 120 second timeout limit.
•You don't need to conﬁgure TLS cipher suites or any other parameters as App Runner being 
a fully managed service, manages the TLS termination for you.
•Stateless apps – Currently App Runner doesn't support a stateful app. Hence, App Runner doesn't 
guarantee state persistence beyond the duration of processing a single incoming web request.
•Storage  – App Runner automatically scales the instances up or down for your App Runner application 
in accordance to incoming traﬃc volume. You can conﬁgure Auto scaling options  (p. 86) for your 
App Runner application. Since the number of currently active instances processing the web requests is 
based on the incoming traﬃc volume, App Runner cannot guarantee that the ﬁles can persist beyond 
the processing of a single request. Hence, App Runner implements the ﬁle system in your container 
instance as ephemeral storage, which entails that the ﬁles are transient. For example, the ﬁles don't 
persist when you pause and resume your App Runner service.
App Runner provides you with 3 GB of ephemeral storage and uses a part of the 3 GB of ephemeral 
storage for its pulled, compressed, and the uncompressed container image on the instance. The 
remaining ephemeral storage can be used by your App Runner service. However, this is not a 
permanent storage  owing to its stateless nature.
59AWS App Runner Developer Guide
Code development guidelines
Note
There could be scenarios when the storage ﬁles do persist across requests. For example, if 
the next request lands on the same instance the storage ﬁles will persist. The persistence of 
storage ﬁles across requests can be useful in certain situations. For example, when handling 
a request, you can cache ﬁles that your application downloads if future requests might need 
them. This might speed up future request handling, but can't guarantee the speed gains. Your 
code shouldn't assume that a ﬁle that has been downloaded in a previous request still exists.
For guaranteed caching using a high throughput, low latency in-memory data store, use a 
service such as Amazon ElastiCache.
•Environment variables – By default, App Runner makes the PORT environment variable available in 
your container instance. You can conﬁgure the variable value with port information, and add custom 
environment variables and values. You can also reference sensitive data stored in AWS Secrets Manager
or AWS Systems Manager Parameter Store as environment variables. For more information about 
creating environment variables, see Reference Environment variables (p. 99).
•Instance role – If your application code makes calls to any AWS services, using the service APIs or one 
of the AWS SDKs, create an instance role using AWS Identity and Access Management (IAM). Then, 
attach it to your App Runner service when you create it. Include all AWS service action permissions 
that your code requires in your instance role. For more information, see the section called “Instance 
role” (p. 172).
Code development guidelines
Consider these guidelines when developing code for an App Runner web application.
•Design stateless code – Design the web application you deploy to your App Runner service to be 
stateless. Your code should assume that no state persists beyond the duration of processing a single 
incoming web request.
•Delete temporary ﬁles – When you create ﬁles, they're stored on a ﬁle system, and take up part 
of the storage allocation of your service. To avoid out-of-storage errors, don't keep temporary ﬁles 
for extended periods. Balance storage size with request handling speed when making ﬁle caching 
decisions.
60AWS App Runner Developer Guide
Overall console layout
Using the App Runner console
Use the AWS App Runner console to create, manage, and monitor your App Runner services and related 
resources, such as connections. You can view existing services, create new ones, and conﬁgure a service. 
You can view the status of an App Runner service as well as view logs, monitor activity, and track metrics. 
You can also navigate to the website of your service or to your source repository.
The following sections describe the layout and functionality of the console, and point you to related 
information.
Overall console layout
The App Runner console has three areas. From left to right:
•Navigation pane – A side pane that can be collapsed or expanded. Use it to choose the top-level 
console page you want to use.
•Content pane  – The main part of the console page. Use it to view information and perform your tasks.
•Help pane  – A side pane for more information. Expand it to get help about the page you're on. Or 
choose any Info link on a console page to get contextual help.
The Services page
The Services page lists App Runner services in your account. You can scope the list down by using the 
ﬁlter text box.
To get to the Services page
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. In the navigation pane, choose Services.
Things you can do here:
•Create an App Runner service. For more information, see the section called “Creation” (p. 64).
61AWS App Runner Developer Guide
The service dashboard page
•Choose a service name to go to the service dashboard console page.
•Choose a service domain to open the service web app page.
The service dashboard page
You can view information about an App Runner service and manage it from the service dashbaord page. 
At the top of the page, you can see the service name.
To get to the service dashboard, navigate to the Services page (see previous section), and then choose 
your App Runner service.
The Service overview section provides basic details about the App Runner service and your application. 
Things you can do here:
•View service details such as status, health, and ARN.
•Navigate to the Default domain —the domain that App Runner provides for the web application 
running in your service. This is a subdomain in the awsapprunner.com  domain owned by App Runner.
•Navigate to the source repository deployed to the service.
•Start a source repository deployment to your service.
•Pause, resume, and delete your service.
The tabs below the service overview are for service management  (p. 64) and observability (p. 121).
The GitHub connections page
The GitHub connections page lists App Runner connections to GitHub in your account. You can scope 
the list down by using the ﬁlter text box. For more information about connections, see the section called 
“Connections” (p. 84).
62AWS App Runner Developer Guide
The GitHub connections page
To get to the GitHub connections page
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. In the navigation pane, choose GitHub connections.
Things you can do here:
•View a list of GitHub connections in your account. To scope the list down, enter any text in the ﬁlter 
text box.
•Choose a connection name to go to the related GitHub account or organization.
•Select a connection to complete the handshake for a connection that you just established (as part of 
creating a service), or to delete the connection.
63AWS App Runner Developer Guide
Creation
Managing your App Runner service
This chapter describes how to manage your AWS App Runner service. In this chapter, you learn how to 
manage the life cycle of your service: create, conﬁgure, and delete a service, deploy new application 
versions to your service, and control the availability of your web service by pausing and resuming your 
service. You also learn how to manage other aspects of your service, like connections and auto scaling.
Topics
•Creating an App Runner service (p. 64)
•Rebuilding a failed App Runner service (p. 74)
•Deploying a new application version to App Runner (p. 76)
•Conﬁguring an App Runner service (p. 78)
•Managing App Runner connections (p. 84)
•Managing App Runner automatic scaling  (p. 86)
•Managing custom domain names for an App Runner service (p. 87)
•Pausing and resuming an App Runner service (p. 94)
•Deleting an App Runner service (p. 96)
Creating an App Runner service
AWS App Runner automates transitioning from a container image or a source code repository to a 
running web service that scales automatically. You point App Runner to your source image or code, 
specifying only a small number of required settings. App Runner builds your application if needed, 
provisions compute resources, and deploys your application to run on them.
When you create a service, App Runner creates a service resource. In some cases, you might need to 
provide a connection  resource. If you use the App Runner console, the console implicitly creates the 
connection resource. For more information about App Runner resource types, see the section called “App 
Runner resources” (p. 20). These resource types have quotas that are associated with your account in 
each AWS Region. For more information, see the section called “App Runner resource quotas” (p. 21).
There are subtle diﬀerences in the procedure for creating a service depending on the source type and 
provider. This topic covers diﬀerent procedures for creating these source types so that you can follow 
whichever is suitable for your situation. For starting a basic procedure with a code example, see Getting 
started (p. 6).
Prerequisites
Before you create your App Runner service, make sure to complete the following actions:
•Complete the setup steps in Setting up  (p. 3).
•Make sure that your application source ready. You can use either a code repository in GitHub  or a 
container image in Amazon Elastic Container Registry (Amazon ECR) to create an App Runner service.
Create a service
This section walks through the creation process for the two App Runner service types: based on source 
code, and based on a container image.
64AWS App Runner Developer Guide
Create a service
Create a service from a GitHub code repository
The following sections show how to create an App Runner service when your source is a code repository 
in GitHub . When you use GitHub, App Runner must connect to the GitHub organization or account. 
Therefore, you need to help establish this connection. For more information about App Runner 
connections, see the section called “Connections” (p. 84).
When you create the service, App Runner builds a Docker image that contains your application code and 
dependencies. It then launches a service that runs a container instance of this image.
Topics
•Creating a service from code using the App Runner console (p. 65)
•Creating a service from code using the App Runner API or AWS CLI (p. 69)
Creating a service from code using the App Runner console
To create an App Runner service using the console
1. Conﬁgure your source code.
a. Open the App Runner console, and in the Regions list, select your AWS Region.
b. If the AWS account doesn't have any App Runner services yet, the console home page is 
displayed. Choose Create an App Runner service.
If the AWS account has existing services, the Services page with a list of your services is 
displayed. Choose Create service.
c. On the Source and deployment page, in the Source section, for Repository type, choose
Source code repository.
d. For Connect to GitHub, select a GitHub account or organization that you've used before, or 
choose Add new . Then, go through the process of providing your GitHub credentials and 
choosing a GitHub account or organization to connect to.
65AWS App Runner Developer Guide
Create a service
e. For Repository, select the repository that contains your application code.
f.For Branch , select the branch that you want to deploy.
2. Conﬁgure your deployments.
a. In the Deployment settings section, choose Manual  or Automatic .
For more information about deployment methods, see the section called “Deployment 
methods” (p. 76).
b. Choose Next.
3. Conﬁgure the application build.
a. On the Conﬁgure build page, for Conﬁguration ﬁle, choose Conﬁgure all settings here if your 
repository doesn't contain an App Runner conﬁguration ﬁle, or Use a conﬁguration ﬁle if it 
does.
66AWS App Runner Developer Guide
Create a service
Note
An App Runner conﬁguration ﬁle is a way to maintain your build conﬁguration as part 
of your application source. When you provide one, App Runner reads some values from 
the ﬁle and doesn't let you set them in the console.
b. Provide the following build settings:
•Runtime  – Choose a speciﬁc managed runtime for your application.
•Build command – Enter a command that builds your application from its source code. This 
might be a language-speciﬁc tool or a script provided with your code.
•Start command – Enter the command that starts your web service.
•Port – Enter the IP port that your web service listens to.
c. Choose Next.
4. Conﬁgure your service.
a. On the Conﬁgure service page, in the Service settings section, enter a service name.
Note
All other service settings are either optional or have console-provided defaults.
b. Optionally change or add other settings to meet your application requirements.
c. Choose Next.
67AWS App Runner Developer Guide
Create a service
5. On the Review and create page, verify all the details you entered, and then choose Create and 
deploy.
Result: If the service is created successfully, the console displays the service dashboard with a
Service overview of the new service.
68AWS App Runner Developer Guide
Create a service
6. Verify that your service is running.
a. On the service dashboard page, wait until the service Status  is Running .
b. Choose the Default domain  value. It's the URL to your service's website.
c. Use your website and verify that it's running properly.
Creating a service from code using the App Runner API or AWS CLI
To create a service using the App Runner API or AWS CLI, call the CreateService  API action. For more 
information and an example, see CreateService. If this is the ﬁrst time that you're creating a service 
using a speciﬁc GitHub organization or account, start by calling CreateConnection. This establishes a 
connection between App Runner and the GitHub organization or account. For more information about 
App Runner connections, see the section called “Connections” (p. 84).
If the call returns a successful response with a Service object showing "Status": "CREATING" , your 
service starts to create.
For an example call, see Create a source code repository service in the AWS App Runner API Reference
Create a service from an Amazon ECR image
The following sections show how to create an App Runner service when your source is a container image 
stored in Amazon ECR. Amazon ECR is an AWS service. Therefore, to create a service based on an Amazon 
ECR image, you provide App Runner with an access role containing the necessary Amazon ECR action 
permissions.
Note
Images stored in Amazon ECR Public are publicly available. So, if your image is stored in Amazon 
ECR Public, an access role isn't required.
When your service is being created, App Runner launches a service that runs a container instance of the 
image you provide. There's no build phase in this case.
For more information, see Image-based service (p. 23).
Topics
69AWS App Runner Developer Guide
Create a service
•Creating a service from an image using the App Runner console (p. 70)
•Creating a service from an image using the App Runner API or AWS CLI (p. 74)
Creating a service from an image using the App Runner console
To create an App Runner service using the console
1. Conﬁgure your source code.
a. Open the App Runner console, and in the Regions list, select your AWS Region.
b. If the AWS account doesn't have any App Runner services yet, the console home page is 
displayed. Choose Create an App Runner service.
If the AWS account has existing services, the Services page with a list of your services is 
displayed. Choose Create service.
c. On the Source and deployment page, in the Source section, for Repository type, choose
Container registry.
d. For Provider, choose the provider where your image is stored:
•Amazon ECR – A private image that's stored in Amazon ECR.
•Amazon ECR Public – A publicly readable image that's stored in Amazon ECR Public.
e. For Container image URI , choose Browse.
f.In the Select Amazon ECR container image dialog box, for Image repository, select the 
repository that contains your image.
g. For Image tag , select the speciﬁc image tag that you want to deploy (for example, latest ), and 
then choose Continue .
70AWS App Runner Developer Guide
Create a service
2. Conﬁgure your deployments.
a. In the Deployment settings section, choose Manual  or Automatic .
Note
App Runner doesn't support automatic deployment for Amazon ECR Public images, and 
for images in an Amazon ECR repository that belongs to a diﬀerent AWS account than 
the one that your service is in.
For more information about deployment methods, see the section called “Deployment 
methods” (p. 76).
b. [Amazon ECR provider] For ECR access role, choose an existing service role in your account or 
choose to create a new role. If you're using manual deployment, you can also choose to use the 
IAM user role at the time of deployment.
c. Choose Next.
71AWS App Runner Developer Guide
Create a service
3. Conﬁgure your service.
a. On the Conﬁgure service page, in the Service settings section, enter a service name and the IP 
port that your service website listens to.
Note
All other service settings are either optional or have console-provided defaults.
b. (Optional) Change or add other settings to suit your application's needs.
c. Choose Next.
72AWS App Runner Developer Guide
Create a service
4. On the Review and create page, verify all the details that you entered, and then choose Create and 
deploy.
Result: If the service is created successfully, the console shows the service dashboard, with a Service 
overview of the new service.
73AWS App Runner Developer Guide
Rebuild failed service
5. Verify that your service is running.
a. On the service dashboard page, wait until the service Status  is Running .
b. Choose the Default domain  value. It's the URL to your service's website.
c. Use your website and verify that it's running properly.
Creating a service from an image using the App Runner API or AWS CLI
To create a service using the App Runner API or AWS CLI, call the CreateService API action.
Your service creation starts if the call returns a successful response with a Service object showing
"Status": "CREATING" .
For an example call, see Create a source image repository service in the AWS App Runner API Reference
Rebuilding a failed App Runner service
If you receive a Failed to create error when creating an App Runner service, you can do one of the 
following.
•Follow the steps in the section called “Failed to create service” (p. 157) to identify the cause of the 
error.
•If you ﬁnd an error in the source or conﬁguration, make the necessary changes and then rebuild your 
service.
•If a temporary issue with App Runner caused your service to fail, rebuild your failed service without 
making any changes to the source or conﬁguration.
You can rebuild your failed service either through the App Runner console (p. 75) or the App Runner 
API or AWS CLI (p. 75).
74AWS App Runner Developer Guide
Rebuilding a failed App Runner 
service using the App Runner console
Rebuilding a failed App Runner service using the App 
Runner console
Rebuild with updates
Creating a service can fail for a variety of reasons. When this happens, it's important to identify 
and rectify the root cause of the issue before rebuilding your service. For more information, see the 
section called “Failed to create service” (p. 157).
To rebuild a failed service with updates
1. Go to the Conﬁgurations  tab on your service page and choose Edit.
The page opens a summary panel that displays a list of all your updates.
2. Make the required changes and review them in the summary panel.
3. Choose Save and rebuild.
You can monitor progress on the Logs  tab of your service page.
Rebuild without updates
If a temporary issue causes your service creation to fail, you can rebuild your service without 
modifying its source or conﬁguration settings.
To rebuild a failed service without updates
•Choose Rebuild on the top right corner of your service page.
You can monitor progress on the Logs  tab of your service page.
•If your service fails to create again, follow the troubleshooting instructions in the section called 
“Failed to create service” (p. 157). Make the necessary changes and then rebuild your service.
Rebuilding failed App Runner service using the App 
Runner API or AWS CLI
Rebuild with updates
To rebuild a failed service:
1.Follow the instructions in the section called “Failed to create service” (p. 157) to ﬁnd the cause 
of the error.
2.Make the necessary changes to the branch or the image of the source repository or the 
conﬁguration that caused the error.
3.Rebuild by calling the UpdateService API action with the new source code repository or source 
image repository parameters. App Runner retrieves the latest commit from the source code 
repository.
Example Rebuilding with updates
In the following example the source conﬁguration of an image-based service is being updated. The 
value of the Port  is changed to 80.
75AWS App Runner Developer Guide
Deployment
Updating the input.json  ﬁle for image-based App Runner service
{ 
  "ServiceArn": "arn:aws:apprunner:us-east-1:123456789012:service/python-
app/8fe1e10304f84fd2b0df550fe98a71fa", 
  "SourceConfiguration": { 
    "ImageRepository": { 
      "ImageConfiguration": { 
        "Port": "80"
      } 
    } 
  }
}
Calling the UpdateService  API action.
aws apprunner update-service
--cli-input-json file: //input.json
Rebuild without updates
To rebuild your failed service using the App Runner API or AWS CLI, call the UpdateService API action 
without making any changes to source or conﬁguration of your service. Choose to rebuild without 
making updates only if your service creation failed due a temporary issue with App Runner.
Deploying a new application version to App 
Runner
When you create a service (p. 64) in AWS App Runner, you conﬁgure an application source—a 
container image or a source repository. App Runner provisions resources to run your service and deploys 
your application to them.
This topic describes ways to redeploy your application source to your App Runner service when a new 
version becomes available. This can be a new image version in the image repository or a new commit in 
the code repository. App Runner provides two methods to deploy to a service: automatic  and manual .
Deployment methods
App Runner provides the following methods for you to control how application deployments are 
initiated.
Automatic deployment
Use automatic deployment when you want continuous integration and deployment (CICD) behavior 
for your service. App Runner monitors your image or code repository. Whenever you push a new 
image version to your image repository, or a new commit to your code repository, App Runner 
automatically deploys it to your service without further action on your side.
Note
App Runner doesn't support automatic deployment for Amazon ECR Public images, and for 
images in an Amazon ECR repository that belongs to a diﬀerent AWS account than the one 
that your service is in.
76AWS App Runner Developer Guide
Manual deployment
Manual deployment
Use manual deployment when you want to explicitly initiate each deployment to your service. You 
initiate a deployment if the repository that you conﬁgured for your service has a new version that 
you want to deploy. For more information, see the section called “Manual deployment” (p. 77).
You can conﬁgure the deployment method for your service in the following ways:
•Console  – For a new service you're creating or for an existing service, in the Deployment settings
section of the Source and deployment conﬁguration page, choose Manual  or Automatic .
•API or AWS CLI – In a call to either the CreateService or UpdateService action, set the
AutoDeploymentsEnabled  member of the SourceConﬁguration parameter to False  for manual 
deployment or True for automatic deployment.
Manual deployment
With manual deployment, you need to explicitly initiate each deployment to your service. When you have 
a new version of your application image or code ready to deploy, you can refer to the following sections 
to learn how to perform a deployment using the console and the API.
Deploy a version of your application using one of the following methods:
App Runner console
To deploy using the App Runner console
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. In the navigation pane, choose Services, and then choose your App Runner service.
The console displays the service dashboard with a Service overview.
77AWS App Runner Developer Guide
Conﬁguration
3. Choose Deploy.
Result: Deployment of the new version starts. On the service dashboard page, the service Status
changes to Operation in progress .
4. Wait for the deployment to end. On the service dashboard page, the service Status  should 
change back to Running .
5. To verify that the deployment is successful, on the service dashboard page, choose the
Default domain  value—it's the URL to your service's website. Inspect or interact with your web 
application and verify your version change.
App Runner API or AWS CLI
To deploy using the App Runner API or AWS CLI, call the StartDeployment API action. The only 
parameter to pass is your service ARN. You already conﬁgured your application source location when 
you created the service, and App Runner can ﬁnd the new version. Your deployment starts if the call 
returns a successful response.
Conﬁguring an App Runner service
When you create an AWS App Runner service (p. 64), you set various conﬁguration values. You can 
change some of these conﬁguration settings after you create the service. Other settings can be applied 
only while creating the service and cannot be changed thereafter. This topic discusses the conﬁguration 
of your service using the App Runner API, the App Runner console, and an App Runner conﬁguration ﬁle.
Topics
•Conﬁgure your service using the App Runner API or AWS CLI (p. 79)
•Conﬁgure your service using the App Runner console (p. 79)
•Conﬁgure your service using an App Runner conﬁguration ﬁle (p. 80)
•Conﬁguring observability for your service (p. 80)
•Conﬁguring service settings using sharable resources (p. 81)
•Conﬁguring health checks for your service (p. 82)
78AWS App Runner Developer Guide
Conﬁgure your service using 
the App Runner API or AWS CLI
Conﬁgure your service using the App Runner API or 
AWS CLI
The API deﬁnes which settings can be changed after service creation. The following list discusses the 
relevant actions, types, and limitations.
•UpdateService action – Can be called after creation to update some conﬁguration settings.
•Can be updated  – You can update settings in the SourceConfiguration ,
InstanceConfiguration , and HealthCheckConfiguration  parameters. However, in
SourceConfiguration , you can't switch your source type from code to image or the other way 
around. You must provide the same repositoryparameter as you provided when you created the 
service. It's either CodeRepository  or ImageRepository .
You can also update the following ARNs of separate conﬁguration resources associated with the 
service:
•AutoScalingConfigurationArn
•VpcConnectorArn
•Cannot be updated  – You can't change the ServiceName  and EncryptionConfiguration
parameters that are available in the CreateService action. They can't be changed after they're 
created. The UpdateService action doesn't include these parameters.
•API vs. ﬁle  – You can set the ConfigurationSource  parameter of the CodeConﬁguration  type 
(used for source code repositories as part of SourceConfiguration ) to Repository . In this case, 
App Runner ignores the conﬁguration settings in CodeConfigurationValues , and reads these 
settings from a conﬁguration ﬁle (p. 147) in your repository. If you set ConfigurationSource  to
API, App Runner gets all conﬁguration settings from the API call and ignores the conﬁguration ﬁle, 
even if one exists.
•TagResource action – Can be called after your service is created to add tags to the service or update 
values of existing tags.
•UntagResource action – Can be called after your service is created to remove tags from the service.
Conﬁgure your service using the App Runner console
The console uses the App Runner API to apply conﬁguration updates. The update rules that the API 
imposes, as deﬁned in the previous section, determine what you can conﬁgure using the console. Some 
settings that were available during service creation aren't available for modiﬁcation later on. In addition, 
if you decide to use a conﬁguration ﬁle (p. 147), additional settings are hidden in the console, and App 
Runner reads them from the ﬁle.
To conﬁgure your service
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. In the navigation pane, choose Services, and then choose your App Runner service.
The console displays the service dashboard with a Service overview.
79AWS App Runner Developer Guide
Conﬁgure your service using an 
App Runner conﬁguration ﬁle
3. On the service dashboard page, choose the Conﬁguration  tab.
Result: The console displays the current conﬁguration settings of your service in several sections:
Source and deployment, Conﬁgure build, and Conﬁgure service.
4. To update settings in any category, choose Edit.
5. On the conﬁguration edit page, make any desired changes, and then choose Save changes.
Conﬁgure your service using an App Runner 
conﬁguration ﬁle
When you create or update an App Runner service, you can instruct App Runner to read some 
conﬁguration settings from a conﬁguration ﬁle that you provide as part of your source repository. By 
doing this, you can manage the settings that are related to your source code under source control, 
together with the code itself. The conﬁguration ﬁle also provides certain advanced settings that you can't 
set using the console or the API. For more information, see App Runner conﬁguration ﬁle  (p. 147).
Conﬁguring observability for your service
AWS App Runner integrates with several AWS services to provide you with an extensive observability 
suite of tools for your App Runner service. For more information, see Observability (p. 121).
App Runner supports enabling some observability features and conﬁguring their behavior by using 
a sharable resource called ObservabilityConﬁguration. You can provide an observability conﬁguration 
resource when you create or update a service. The App Runner console creates one for you when you 
create a new App Runner service. Providing an observability conﬁguration is optional. If you don't 
provide one, App Runner provides a default observability conﬁguration.
You can share a single observability conﬁguration across multiple App Runner services to ensure they 
have the same observability behavior. For more information, see the section called “Conﬁguration 
resources” (p. 81).
You can conﬁgure the following observability features using observability conﬁgurations:
80AWS App Runner Developer Guide
Conﬁguration resources
•Trace conﬁguration – Settings for tracing requests that your application serves and downstream calls 
that it makes. For more information about tracing, see the section called “Tracing (X-Ray)” (p. 135).
Manage observability
Manage observability for your App Runner services using one of the following methods:
App Runner console
When you create a service (p. 64) using the App Runner console, or when you update its 
conﬁguration later (p. 78), you can conﬁgure observability features for your service. Look for the
Observability conﬁguration section on the console page.
App Runner API or AWS CLI
When you call the CreateService or UpdateService App Runner API actions, you can use the
ObservabilityConfiguration  parameter object to enable observability features and specify an 
observability conﬁguration resource for your service.
Use the following App Runner API actions to manage your observability conﬁguration resources.
•CreateObservabilityConﬁguration – Creates a new observability conﬁguration or a revision to an 
existing one.
•ListObservabilityConﬁgurations – Returns a list of the observability conﬁgurations that are 
associated with your AWS account, with summary information.
•DescribeObservabilityConﬁguration – Returns a full description of an observability conﬁguration.
•DeleteObservabilityConﬁguration – Deletes an observability conﬁguration. You can delete a 
speciﬁc revision or the latest active revision. You might need to delete unnecessary observability 
conﬁgurations if you reach the observability conﬁguration quota for your AWS account.
Conﬁguring service settings using sharable resources
For some features, it makes sense to share conﬁguration across AWS App Runner services. For example, 
you might want a set of services to have the same auto scaling behavior. Or you might want identical 
observability settings for all of your services. App Runner lets you share settings by using separate 
sharable resources. You create a resource that deﬁnes a set of conﬁguration settings for a feature, and 
then you provide the Amazon Resource Name (ARN) of this conﬁguration resource to one or more App 
Runner services.
App Runner implements sharable conﬁguration resources for the following features:
•Auto scaling  (p. 86)
81AWS App Runner Developer Guide
Health check conﬁguration
•Observability (p. 80)
•VPC access (p. 114)
The document page for each of these features provides information about the available settings and the 
management procedures.
Features using separate conﬁguration resources share some design traits and considerations.
•Revisions – Some conﬁguration resources can have revisions. In these cases, each conﬁguration has a
name  and a numeric revision . Multiple revisions of a conﬁguration have the same name and diﬀerent 
revision numbers. You can use diﬀerent conﬁguration names for diﬀerent scenarios. For each name, 
you can add multiple revisions to ﬁne-tune the settings for a speciﬁc scenario.
The ﬁrst conﬁguration that you create with a name gets the revision number 1. Subsequent 
conﬁgurations with the same name get consecutive revision numbers (starting with 2). You can 
associate your App Runner service with a speciﬁc conﬁguration revision or with the latest revision of 
conﬁguration.
•Shared  – You can share a single conﬁguration resource across multiple App Runner services. This 
is useful if you want to maintain identical conﬁgurations across these services. In particular, for 
resources that support revisions, you can conﬁgure multiple services to all use the latest version of a 
conﬁguration by specifying the conﬁguration name but not specifying a revision. By doing this, any of 
the services that you conﬁgured this way receives conﬁguration updates when you update the service. 
For more information about conﬁguration changes, see the section called “Conﬁguration” (p. 78).
•Resource management – You can use App Runner to create and delete conﬁgurations. You can't 
directly update a conﬁguration. Instead, for resources that support revisions, you can create a new 
revision to an existing conﬁguration name to eﬀectively update the conﬁguration.
Note
At this time, you can only create a conﬁguration with a single revision in the App Runner 
console. To create more revisions, and to delete conﬁgurations, use the App Runner API.
•Resource quota – There are set quotas for the number of unique conﬁguration names and revisions 
that you can have for your conﬁguration resources in each AWS Region. If you reach these quotas, you 
must either delete a conﬁguration name or at least some of its revisions before you can create more. 
Use the App Runner API to delete them. For more information, see the section called “App Runner 
resource quotas” (p. 21).
•No resource cost – You don't incur additional cost for creating a conﬁguration resource. You might 
incur cost for the feature itself (for example, you are charged for normal AWS X-Ray cost when you 
turn on X-Ray tracing), but not for the App Runner conﬁguration resource that conﬁgures the feature 
for your App Runner service.
Conﬁguring health checks for your service
AWS App Runner monitors the health of your service by performing health checks. The default health 
check protocol is TCP. App Runner pings the domain assigned to your service. By using the App Runner 
API or the AWS CLI you can alternatively set the health check protocol to HTTP. App Runner sends health 
check HTTP requests to your web application.
You can conﬁgure a few settings related to health checks. The following table describes the health check 
settings and their default values.
Setting Description Default
Protocol The IP protocol that App Runner uses to perform health checks for 
your service.TCP
82AWS App Runner Developer Guide
Health check conﬁguration
Setting Description Default
If you set the protocol to TCP, App Runner pings the default domain 
assigned to your service at the port that your application is listening 
to.
If you set the protocol to HTTP , App Runner sends health check 
requests to the conﬁgured path.
PathThe URL that App Runner sends HTTP health check requests to. 
Applicable only to HTTP checks./
IntervalThe time interval, in seconds, between health checks. 5
Timeout The time, in seconds, to wait for a health check response before 
deciding it failed.2
Healthy thresholdThe number of consecutive checks that must succeed before App 
Runner decides that the service is healthy.1
Unhealthy thresholdThe number of consecutive checks that must fail before App Runner 
decides that the service is unhealthy.5
Conﬁgure health checks
Conﬁgure health checks for your App Runner service using one of the following methods:
App Runner console
When you create your App Runner service using the App Runner console, or when you update its 
conﬁguration later, you can conﬁgure health check settings. For full console procedures, see the 
section called “Creation” (p. 64) and the section called “Conﬁguration” (p. 78). In both cases, 
look for the Health check  conﬁguration section on the console page.
83AWS App Runner Developer Guide
Connections
App Runner API or AWS CLI
When you call the CreateService or UpdateService API actions, you can use the
HealthCheckConfiguration  parameter to specify health check settings.
For information about the parameter's structure, see HealthCheckConﬁguration  in the AWS App 
Runner API Reference.
Managing App Runner connections
When you create a service (p. 64) in AWS App Runner, you conﬁgure an application source—a 
container image or a source repository that's stored with a provider. If a repository that's stored with 
a third-party provider is private (not publicly readable), App Runner has to establish an authenticated 
and authorized connection with the provider. Then, App Runner can read your repository and deploy it 
to your service. App Runner doesn't require connection establishment when you create a service that 
accesses code stored in your AWS account or in a public code location.
App Runner maintains connection information in a resource called a connection . App Runner requires 
a connection resource when you create a service that needs third-party connection information. The 
following is some important information about connections:
•Providers – App Runner currently requires connection resources with GitHub .
•Shared  – You can use a connection resource to create multiple App Runner services that use the same 
repository provider account.
•Resource management – In App Runner, you can create and delete connections. However, you can't 
modify an existing connection.
•Resource quota – Connection resources have a set quota that's associated with your AWS account 
in each AWS Region. If you reach this quota, you might need to delete a connection before you can 
84AWS App Runner Developer Guide
Manage connections
connect to a new provider account. You can delete a connection using the App Runner console or API 
as described in the following section, the section called “Manage connections” (p. 85). For more 
information, see the section called “App Runner resource quotas” (p. 21).
Manage connections
Manage your App Runner connections using one of the following methods:
App Runner console
When you use the App Runner console to create a service (p. 64), you provide connection details. 
You don't have to explicitly create a connection resource. In the console, you can choose to connect 
to a GitHub account that you've connected to before, or connect to a new account. When necessary, 
App Runner creates a connection resource for you. For a new connection, some providers (for 
example, GitHub) require you to complete an authentication handshake before you can use the 
connection. The console takes you through this process.
The console also has a page for managing your existing connections. You can complete the 
authentication handshake for a connection if you didn't do it when you created your service. You can 
also delete connections that you're no longer using. The following procedure shows how you can 
manage GitHub connections.
To manage GitHub connections in your account
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. In the navigation pane, choose GitHub connections.
The console then displays a list of GitHub connections in your account.
3. You can now do one of the following actions with any connection on the list:
•Open GitHub account or organization  – Choose the name of the connection.
•Complete authentication handshake  – Select the connection, and then choose Complete 
handshake. The console takes you through the authentication handshake process.
•Delete connection  – Select the connection, and then choose Delete. Follow the instructions on 
the deletion prompt.
App Runner API or AWS CLI
You can use the following App Runner API actions to manage your connections.
•CreateConnection – Creates a connection to a repository provider account. After the connection 
is created, you must manually complete the authentication handshake using the App Runner 
console. This process is explained in the previous section.
•ListConnections – Returns a list of App Runner connections associated with your AWS account.
85AWS App Runner Developer Guide
Auto scaling
•DeleteConnection – Deletes a connection. You might need to delete unnecessary connections if 
you reach the connection quota for your AWS account.
Managing App Runner automatic scaling
AWS App Runner automatically scales compute resources, speciﬁcally instances, up or down for your App 
Runner application. Automatic scaling provides adequate request handling when traﬃc is heavy, and 
reduces your cost when traﬃc slows down. You can conﬁgure a few parameters to adjust auto scaling 
behavior for your service.
App Runner maintains auto scaling settings in a sharable resource that's called AutoScalingConﬁguration . 
When you create or update an App Runner service, you can provide an auto scaling conﬁguration 
resource. The App Runner console also creates one for you when you create a new App Runner service. 
Providing an auto scaling conﬁguration is optional. If you don't provide one, App Runner provides a 
default auto scaling conﬁguration with recommended values.
An auto scaling conﬁguration has a name  and a numeric revision . Multiple revisions of a conﬁguration 
have the same name and diﬀerent revision numbers. You can use diﬀerent conﬁguration names for 
diﬀerent auto scaling scenarios, such as high availability or low cost. For each name, you can add 
multiple revisions to ﬁne-tune the settings for a speciﬁc scenario.
You can share a single auto scaling conﬁguration across multiple App Runner services to ensure the 
services have the same auto scaling behavior. For more information, see the section called “Conﬁguration 
resources” (p. 81).
You can conﬁgure the following auto scaling settings:
•Max concurrency – The maximum number of concurrent requests  that an instance processes. When the 
number of concurrent requests exceeds this quota, App Runner scales up the service.
•Max size  – The maximum number of instances  that your service can scale up to. This is the highest 
number of instances that can concurrently handle your service's traﬃc.
•Min size  – The minimum number of instances that App Runner can provision for your service. The 
service always has at least this number of provisioned instances. Some of these instances actively 
handle traﬃc. The remainder of them are part of the cost-eﬀective compute capacity reserve, which is 
ready to be quickly activated. You pay for the memory usage of all the provisioned instances. You pay 
for the CPU usage of only the active subset.
Note
The vCPU resource count determines the number of instances that App Runner can provide 
to your service. This is an adjustable quota value for the Fargate On-Demand vCPU resource 
count that resides in the AWS Fargate (Fargate) service. To view the vCPU quota settings for your 
account or to request a quota increase, use the Service Quotas console in the AWS Management 
Console. For more information, see AWS Fargate service quotas in the Amazon Elastic Container 
Service Developer Guide.
Manage auto scaling
Manage auto scaling for your App Runner services using one of the following methods:
App Runner console
When you create a service (p. 64) using the App Runner console or update a service 
conﬁguration (p. 78), you can specify an auto scaling conﬁguration. In the Auto scaling
86AWS App Runner Developer Guide
Custom domain names
conﬁguration section on the console, you can specify whether you want to use the default auto 
scaling conﬁguration or a custom conﬁguration. To use a custom conﬁguration, choose an existing 
conﬁguration or provide a new name and settings. If it's a new conﬁguration, App Runner creates a 
new auto scaling conﬁguration resource for you, and then associates it with your new service.
App Runner API or AWS CLI
When you call the CreateService or UpdateService App Runner API actions, you can use the
AutoScalingConfigurationArn  parameter to specify an auto scaling conﬁguration resource for 
your service.
Use the following App Runner API actions to manage your auto scaling conﬁguration resources.
•CreateAutoScalingConﬁguration – Creates a new auto scaling conﬁguration or a revision to an 
existing one.
•ListAutoScalingConﬁgurations  – Returns a list of the auto scaling conﬁgurations that are 
associated with your AWS account, with summary information.
•DescribeAutoScalingConﬁguration  – Returns a full description of an auto scaling conﬁguration.
•DeleteAutoScalingConﬁguration  – Deletes an auto scaling conﬁguration. You can delete a speciﬁc 
revision or the latest active revision. If you reach the auto scaling conﬁguration quota for your 
AWS account, you might need to delete unnecessary auto scaling conﬁgurations.
Managing custom domain names for an App 
Runner service
When you create an AWS App Runner service, App Runner allocates a domain name for it. This is a 
subdomain in the awsapprunner.com  domain that's owned by App Runner. You can use the domain 
name to access the web application that's running in your service.
If you own a domain name, you can associate it to your App Runner service. After App Runner validates 
your new domain, you can use your domain to access your application in addition to the App Runner 
domain. You can associate up to ﬁve custom domains.
87AWS App Runner Developer Guide
Associate (link) a custom domain to your service
Note
You can optionally include the www subdomain of your domain. However, this is currently only 
supported by the API. The App Runner console doesn't support including www subdomain of 
your domain.
Associate (link) a custom domain to your service
When you associate a custom domain to your service, you must add the CNAME records and DNS target 
records to your DNS server. The following sections provide information on CNAME records and DNS 
target records and how to use them.
CNAME records
When you associate a custom domain with your service, App Runner provides you with a set of CNAME 
records serve for certiﬁcate validation purpose. You must add these CNAME records to your Domain 
Name System (DNS) server. Add the certiﬁcate validation records, provided by App Runner, to your DNS 
server. This way, App Runner can validate that you own or control the domain.
Note
To auto-renew your custom domain certiﬁcates, ensure that you don't delete the certiﬁcate 
validation records from your DNS server. For information about how to resolve issues that are 
related to the renewal of the certiﬁcate, see the section called “Custom domain certiﬁcate 
renewal” (p. 159).
App Runner uses ACM to verify the domain. If you're using CAA records in your DNS records, make sure 
that at least one CAA record references amazon.com . Otherwise, ACM can't verify the domain and 
successfully create your domain.
If you receive errors related to CAA, see the following links to learn how to resolve them:
•Certiﬁcation Authority Authorization (CAA) problems
•How do I resolve CAA errors for issuing or renewing an ACM certiﬁcate?
•Custom domain names  (p. 158)
DNS target records
Add the DNS target records to your DNS server to target the App Runner domain. Add one record for the 
custom domain, and another for the www subdomain, if you chose this option. Then, wait for the custom 
domain status to become Active in the App Runner console. This typically takes several minutes, but 
might take up to 24—48 hours (1—2 days). When your custom domain is validated, App Runner starts 
routing traﬃc from this domain to your web application.
Note
For better compatibility with App Runner services, we recommend that you use Amazon 
Route 53 as your DNS provider. If you don't use Amazon Route 53 to manage your public DNS 
records, contact your DNS provider to ﬁnd out how to add records.
If you're using Amazon Route 53 as your DNS provider, you can add either CNAME or alias record 
for subdomain . For root domain , ensure that you use the alias record.
You can purchase a domain name from Amazon Route 53 or another provider. To purchase a domain 
name with Amazon Route 53, see Registering a new domain, in the  Amazon Route 53 Developer Guide.
For instructions on how to conﬁgure a DNS target in Route 53, see Routing traﬃc to your resources, in 
the  Amazon Route 53 Developer Guide.
For instructions on how to conﬁgure a DNS target on other registrars, such as GoDaddy, Shopify, Hover 
and so on, refer to their speciﬁc documentation on adding DNS Target records.
88AWS App Runner Developer Guide
Disassociate (unlink) a custom domain
Specify a domain to associate with your App Runner service
You can specify a domain to associate with your App Runner service in the following ways:
•A root domain  – DNS has some inherent limitations which might block you from creating CNAME 
records for the root domain name. For example, if your domain name is example.com , you can create 
a CNAME record that routes traﬃc for acme.example.com  to your App Runner service. However, you 
can't create a CNAME record that routes traﬃc for example.com  to your App Runner service. To create 
a root domain, ensure that you add an alias record.
An alias record is speciﬁc to Route 53 and has the following advantages over CNAME records:
•Route 53 provides you with more ﬂexibility as alias records can be created for root domain or 
subdomain. For example, if your domain name is example.com , you can create a record that routes 
requests for example.com  or acme.example.com  to your App Runner service.
•It is more cost eﬃcient. This is because Route 53 doesn't charge for requests that use an alias record 
to route traﬃc.
•A subdomain  – For example, login.example.com  or admin.login.example.com . You can 
optionally also associate the www subdomain as part of the same operation. You can add either CNAME 
or alias record for subdomain.
•A wildcard  – For example, *.example.com . You can't use the www option in this case. You can specify 
a wildcard only as the immediate subdomain of a root domain and only on its own. These aren't valid 
speciﬁcations: login*.example.com , *.login.example.com . This wildcard speciﬁcation associates 
all immediate subdomains, and doesn't associate the root domain itself. The root domain must be 
associated in a separate operation.
A more speciﬁc domain association overrides a less speciﬁc one. For example, login.example.com
overrides *.example.com . The certiﬁcate and CNAME of the more speciﬁc association are used.
The following example shows how you can use multiple custom domain associations:
1.Associate example.com  with the home page of your service. Enable the www to associate
www.example.com .
2.Associate login.example.com  with the login page of your service.
3.Associate *.example.com  with a custom "not found" page.
Disassociate (unlink) a custom domain
You can disassociate (unlink) a custom domain from your App Runner service. When you unlink a domain, 
App Runner stops routing traﬃc from this domain to your web application.
Note
You must delete the records for the domain you disassociated from your DNS server.
App Runner internally creates certiﬁcates that track domain validity. These certiﬁcates are stored in AWS 
Certiﬁcate Manager (ACM). App Runner doesn't delete these certiﬁcates for 7 days after a domain is 
disassociated from your service or after the service is deleted.
Manage custom domains
Manage custom domains for your App Runner service using one of the following methods:
Note
For better compatibility with App Runner services, we recommend that you use Amazon 
Route 53 as your DNS provider. If you don't use Amazon Route 53 to manage your public DNS 
records, contact your DNS provider to ﬁnd out how to add records.
89AWS App Runner Developer Guide
Manage custom domains
If you're using Amazon Route 53 as your DNS provider, you can add either CNAME or alias record 
for subdomain . For root domain , ensure that you use alias record.
App Runner console
To associate (link) a custom domain using the App Runner console
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. In the navigation pane, choose Services, and then choose your App Runner service.
The console displays the service dashboard with a Service overview.
3. On the service dashboard page, choose the Custom domains  tab.
The console shows the custom domains that are associated with your service, or No custom 
domains .
4. On the Custom domains  tab, choose Link domain .
5. In the Link custom domain  dialog, enter a domain name, and then choose Link custom 
domain .
90AWS App Runner Developer Guide
Manage custom domains
6. Copy the certiﬁcate validation records and DNS target records, and add them to your DNS 
server. App Runner can then validate that you own or control the domain.
Note
To auto-renew your custom domain certiﬁcates, make sure not to delete the certiﬁcate 
validation records from your DNS server.
•For more information about Conﬁgure certiﬁcate validation, see DNS Validation in the AWS 
Certiﬁcate Manager User Guide.
•For information about how to Conﬁgure DNS target  with Amazon Route 53 alias record, see
the section called “Conﬁgure an Amazon Route 53 alias record” (p. 93).
•For instructions on how to conﬁgure a DNS target on other registrars, such as GoDaddy, 
Shopify, Hover and so on, refer to their speciﬁc documentation on adding DNS Target.
7. Choose Close
91AWS App Runner Developer Guide
Manage custom domains
The console shows the dashboard again. The Custom domains  tab has a new tile showing the 
domain that you just linked in the Pending certiﬁcate DNS validation status.
8. When the domain status changes to Active, verify that the domain works for routing traﬃc by 
browsing to it.
Note
For instructions on how to troubleshoot errors related to custom domain, see the section 
called “Custom domain names” (p. 158).
92AWS App Runner Developer Guide
Conﬁgure an Amazon Route 53 alias record
To disassociate (unlink) a custom domain using the App Runner console
1. On the Custom domains  tab, select the tile for the domain you want to disassociate, and then 
choose Unlink domain .
2. In the Unlink domain  dialog, verify the action by choosing Unlink domain .
Note
You must delete the records for the domain that you disassociated from your DNS 
server.
App Runner API or AWS CLI
To associate a custom domain with your service using the App Runner API or AWS CLI, call the
AssociateCustomDomain  API action. When the call succeeds, a CustomDomain  object is returned 
that describes the custom domain that's being associated with your service. The object shows a
CREATING  status and contains a list of CertiﬁcateValidationRecord objects. The call also returns the 
target alias that you can use to conﬁgure the DNS target. These are records that you can add to your 
DNS.
To disassociate a custom domain from your service using the App Runner API or AWS CLI, call the
DisassociateCustomDomain  API action. When the call succeeds, a CustomDomain  object is returned 
that describes the custom domain that's being disassociated from your service. The object shows a
DELETING  status.
Topics
•Conﬁgure Amazon Route 53 alias record for your target DNS (p. 93)
Conﬁgure Amazon Route 53 alias record for your 
target DNS
You can use Amazon Route 53 as your DNS provider to route traﬃc to your App Runner service. It's a 
highly available and scalable Domain Name System (DNS) web service. The Amazon Route 53 record 
contains the settings that control how traﬃc is routed to your App Runner service. You create either a 
CNAME record or an ALIAS record. For a comparison on CNAME and alias records, see Choosing between 
alias and non-alias records , in the  Amazon Route 53 Developer Guide.
Note
Amazon Route 53 currently supports alias record for services that are created after August 1, 
2022.
Amazon Route 53 console
To conﬁgure Amazon Route 53 alias record
1. Sign in to the AWS Management Console and open the Route 53 console.
2. In the navigation pane, choose Hosted zones.
3. Choose the name of the hosted zone that you want to use to route traﬃc to your App Runner 
service.
4. Choose Create record.
5. Specify the following values:
•Routing policy: Choose the applicable routing policy. For more information, see Choosing a 
routing policy.
93AWS App Runner Developer Guide
Pausing / resuming
•Record name: Enter the domain name that you want to use to route traﬃc to your App 
Runner service. The default value is the name of the hosted zone. For example, if the name of 
the hosted zone is example.com  and you want to use acme.example.com  to route traﬃc to 
your environment, enter acme .
•Value/Route traﬃc to: Choose Alias to App Runner Application , then choose the Region
that the endpoint is from. Choose the domain name of the application that you want to route 
traﬃc to.
•Record type: Accept the default, A – IPv4 address .
•Evaluate target health : Accept the default value, Yes.
6. Choose Create records.
The Route 53 alias record that you created gets propagated on all Route 53 servers within 60 
seconds. When the Route 53 servers are propagated with your alias record, you can route traﬃc to 
your App Runner service by using the name of the alias record that you created.
For information about how to troubleshoot if the DNS changes are taking too long to propagate, see
Why is it taking so long for my DNS changes to propagate in Route 53 and public resolvers?.
Amazon Route 53 API or AWS CLI
To conﬁgure Amazon Route 53 alias record using the Amazon Route 53 API or AWS CLI call the
ChangeResourceRecordSets API action. To learn about the target hosted zone id of Route 53, see
Service endpoints.
Pausing and resuming an App Runner service
If you need to disable your web application temporarily and stop the code from running, you can pause 
your AWS App Runner service. App Runner reduces the compute capacity for the service to zero.
When you're ready to run your application again, you can resume your App Runner service. App 
Runner provisions new compute capacity, deploys your application to it, and runs the application. Your 
application source isn't redeployed, and no build is necessary. Rather, App Runner resumes with your 
currently deployed version. Your application retains its App Runner domain.
Important
•When you pause your service, your application loses its state. For example, any ephemeral 
storage that your code used is lost. For your code, pausing and resuming your service is the 
equivalent of deploying to a new service.
•If you pause a service due to a ﬂaw in your code (for example, a discovered bug or security 
issue), you can't deploy a new version before resuming the service.
Therefore, we recommend that you keep the service running and roll back to your last stable 
application version instead.
•When you resume your service, App Runner deploys the last application version that was 
used before you paused the service. If you added any new source versions since pausing your 
service, App Runner doesn't automatically deploy them even if automatic deployment is 
selected. For example, assume you have new image versions in the image repository or new 
commits in the code repository. These versions aren't automatically deployed .
To deploy a newer version, perform a manual deployment or add another version to your 
source repository after resuming your App Runner service.
94AWS App Runner Developer Guide
Pausing and deleting compared
Pausing and deleting compared
Pause your App Runner service to temporarily disable it. Only compute resources are terminated, and 
your stored data (for example, the container image with your application version) remains intact. 
Resuming your service is quick—your application is ready to be deployed to new compute resources. Your 
App Runner domain remains the same.
Delete  your App Runner service to permanently remove it. Your stored data is deleted. If you need to 
recreate the service, App Runner needs to fetch your source again, and also to build it if it's a code 
repository. Your web application gets a new App Runner domain.
When your service is paused
When you pause your service and it's in the Paused status, it responds diﬀerently to action requests, 
including API calls or console operations. When a service is paused, you can still perform App Runner 
actions that don't modify the deﬁnition or conﬁguration of the service in a way that aﬀects its runtime. 
In other words, if an action changes the behavior, scale, or other characteristics of a running service, you 
cannot perform that action on a paused service.
The following lists provide information about API actions that you can and cannot perform on a paused 
service. The equivalent console operations are similarly allowed or denied.
Actions you can perform on a paused service
•List*  and Describe*  actions  – Actions that only read information.
•DeleteService  – You can always delete a service.
•TagResource , UntagResource  – Tags are associated with a service, but aren't part of its deﬁnition 
and don't aﬀect its runtime behavior.
Actions you cannot  perform on a paused service
•StartDeployment  actions  (or a manual deployment (p. 77) using the console)
•UpdateService  (or a conﬁguration change using the console, except for tagging changes)
•CreateCustomDomainAssociations , DeleteCustomDomainAssociations
•CreateConnection , DeleteConnection
Pause and resume your service
Pause and resume your App Runner service using one of the following methods:
App Runner console
To pause your service using the App Runner console
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. In the navigation pane, choose Services, and then choose your App Runner service.
The console displays the service dashboard with a Service overview.
95AWS App Runner Developer Guide
Deletion
3. Choose Actions, and then choose Pause.
On the service dashboard page, the service Status  changes to Operation in progress , and then 
changes to Paused. Your service is now paused.
To resume your service using the App Runner console
1. Choose Actions, and then choose Resume.
On the service dashboard page, the service Status  changes to Operation in progress .
2. Wait for the service to resume. On the service dashboard page, the service Status  changes back 
to Running .
3. To verify that resuming the service is successful, on the service dashboard page, choose the App 
Runner domain  value. It's the URL for your service's website. Verify that your web application is 
running correctly.
App Runner API or AWS CLI
To pause your service using the App Runner API or AWS CLI, call the PauseService API 
action. If the call returns a successful response with a Service object showing "Status": 
"OPERATION_IN_PROGRESS" , App Runner starts pausing your service.
To resume your service using the App Runner API or AWS CLI, call the ResumeService API 
action. If the call returns a successful response with a Service object showing "Status": 
"OPERATION_IN_PROGRESS" , App Runner starts resuming your service.
Deleting an App Runner service
When you want to terminate the web application that's running in your AWS App Runner service, you can 
delete the service. Deleting a service stops the running web service, removes the underlying resources, 
and deletes your associated data.
You might want to delete an App Runner service for one or more of the following reasons:
96AWS App Runner Developer Guide
Pausing and deleting compared
•You don't need the web application anymore – For example, it's retired, or it's a development version 
that you're done using.
•You've reached the App Runner service quota – You want to create a new service in the same AWS 
Region and you've reached the quota associated with your account. For more information, see the 
section called “App Runner resource quotas” (p. 21).
•Security or privacy considerations – You want App Runner to delete the data that it stores for your 
service.
Pausing and deleting compared
Pause your App Runner service to temporarily disable it. Only compute resources are terminated, and 
your stored data (for example, the container image with your application version) remains intact. 
Resuming your service is quick—your application is ready to be deployed to new compute resources. Your 
App Runner domain remains the same.
Delete  your App Runner service to permanently remove it. Your stored data is deleted. If you need to 
recreate the service, App Runner needs to fetch your source again, and also to build it if it's a code 
repository. Your web application gets a new App Runner domain.
What does App Runner delete?
When you delete your service, App Runner deletes some associated items, and doesn't delete others. The 
following lists provide the details.
Items that App Runner deletes:
•Container image  – A copy of the image that you deployed or the image that App Runner built from 
your source code. It's stored in Amazon Elastic Container Registry (Amazon ECR) using internal AWS 
accounts that are owned by App Runner.
•Service conﬁguration – The conﬁguration settings that are associated with your App Runner service. 
They're stored in Amazon DynamoDB using internal AWS accounts that are owned by App Runner.
Items that App Runner doesn't delete:
•Connection  – You might have a connection that's associated with your service. An App Runner 
connection is a separate resource that might be shared among several App Runner services. If you 
don't need the connection anymore, you can explicitly delete it. For more information, see the section 
called “Connections” (p. 84).
•Custom domain certiﬁcates – If you link custom domains to an App Runner service, App Runner 
internally creates certiﬁcates that track domain validity. They're stored in AWS Certiﬁcate Manager 
(ACM). App Runner doesn't delete the certiﬁcate for seven days after a domain is unlinked from your 
service or after the service is deleted. For more information, see the section called “Custom domain 
names” (p. 87).
Delete your service
Delete your App Runner service using one of the following methods:
App Runner console
To delete your service using the App Runner console
1. Open the App Runner console, and in the Regions list, select your AWS Region.
97AWS App Runner Developer Guide
Delete your service
2. In the navigation pane, choose Services, and then choose your App Runner service.
The console displays the service dashboard with a Service overview.
3. Choose Actions, and then choose Delete.
The console takes you to the Services page. The deleted service displays the Operation in 
progress  status, and then the service disappears from the list. Your service is now deleted.
App Runner API or AWS CLI
To delete your service using the App Runner API or AWS CLI, call the DeleteService API 
action. If the call returns a successful response with a Service object showing "Status": 
"OPERATION_IN_PROGRESS" , App Runner starts deleting your service.
98AWS App Runner Developer Guide
Referencing sensitive data as environment variables
Referencing environment variables
With App Runner, you can reference secrets and conﬁgurations as environment variables in your service 
when you create a service (p. 64) or update a service (p. 78).
You can reference non-sensitive conﬁguration data such as timeouts and retry counts in Plain Text as 
key-value pairs. The conﬁguration data that you reference in Plain Text isn't encrypted and is visible to 
others in App Runner service conﬁguration and application logs.
Note
For security reasons, don't reference any sensitive data in Plain Text in your App Runner service.
Referencing sensitive data as environment 
variables
App Runner supports securely referencing sensitive data as environment variables in your service. 
Consider storing the sensitive data that you want to reference in AWS Secrets Manager or AWS Systems 
Manager Parameter Store. Then, you can securely reference them in your service as environment 
variables from App Runner console or by calling the API. This eﬀectively separates secret and parameter 
management from your application code and service conﬁguration, improving the overall security of 
your applications running on App Runner.
Note
App Runner doesn't charge you for referencing Secrets Manager and SSM Parameter Store as 
environment variables. However, you pay standard pricing for using Secrets Manager and SSM 
Parameter Store.
For more information about pricing, see the following:
•
AWS Secrets Manager Pricing
•AWS SSM Parameter Store Pricing
The following is the process to reference sensitive data as environment variables:
1.Store sensitive data, such as API keys, database credentials, database connection parameters, or 
application versions as secrets or parameters in either AWS Secrets Manager or AWS Systems Manager 
Parameter Store.
2.Update the IAM policy of your instance role so App Runner can access the secrets and parameters 
stored in Secrets Manager and SSM Parameter Store. For more information, see Permissions (p. 100).
3.Securely reference the secrets and parameters as environment variables by assigning a name and 
providing their Amazon Resource Name (ARN). You can add environment variables when you create a 
service (p. 64) or update a service's conﬁguration (p. 78). You can use one of the following options to 
add environment variables:
•App Runner console
•App Runner API
•apprunner.yaml  conﬁguration ﬁle
Note
You cannot assign PORT as a name for an environment variable when creating or updating 
your App Runner service. It's a reserved environment variable for App Runner service.
For more information on how to reference secrets and parameters, see Managing environment 
variables  (p. 101).
99AWS App Runner Developer Guide
Considerations
Note
Since App Runner only stores the reference to secret and parameter ARNs, the sensitive data 
isn't visible to others in the App Runner service conﬁguration and application logs.
Considerations
•Make sure that you update your instance role with appropriate permissions to access the secrets 
and parameters in AWS Secrets Manager or in AWS Systems Manager Parameter Store. For more 
information, see Permissions (p. 100).
•Make sure that AWS Systems Manager Parameter Store is in the same AWS account as the service that 
you want to launch or update. Currently, you can't reference SSM Parameter Store parameters across 
accounts.
•When the secrets and parameter values are rotated or changed they are not automatically updated 
in your App Runner service. Redeploy your App Runner service as App Runner only pulls secrets and 
parameters during deployment.
•You also have the option to directly call AWS Secrets Manager and AWS Systems Manager Parameter 
Store through the SDK in your App Runner service.
•To avoid errors make sure of the following when referencing them as the environment variables:
•You specify the right ARN of the secret.
•You specify the right name or ARN of the parameter.
Permissions
To enable referencing secrets and parameters stored in the AWS Secrets Manager or SSM Parameter 
Store, add appropriate permissions to the IAM policy of your instance role  to access Secrets Manager and 
SSM Parameter Store.
Note
App Runner can't access resources in your account without your permission. You provide the 
permission through updating your IAM policy.
You can use the following policy templates to update your instance role in the IAM console. You can 
modify these policy templates to meet your speciﬁc requirement. For more information about updating 
an instance role, see Modifying a role in the IAM User Guide .
Note
You can also copy the following templates from the App Runner console when creating the 
environment variables (p. 101).
Copy, the following template to your instance role to add permission to reference secrets  from AWS 
Secrets Manager .
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "secretsmanager:GetSecretValue", 
        "kms:Decrypt*" 
      ], 
      "Resource": [ 
        "arn:aws:secretsmanager:<region>:<aws_account_id>:secret:<secret_name>", 
        "arn:aws:kms:<region>:<aws_account_id>:key/<key_id>" 
      ] 
    } 
100AWS App Runner Developer Guide
Manage environment variables
  ]
}
Copy the following template to your instance role to add permission to reference parameters  from AWS 
Systems Manager Parameter Store.
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "ssm:GetParameters" 
      ], 
      "Resource": [ 
        "arn:aws:ssm:<region>:<aws_account_id>:parameter/<parameter_name>" 
      ] 
    } 
  ]
}
Managing your environment variables
Manage the environment variables for your App Runner service by using one of the following methods:
•the section called “App Runner console” (p. 101)
•the section called “App Runner API or AWS CLI” (p. 102)
App Runner console
When you create a service (p. 64) or update a service  (p. 78) on the App Runner console, you can add 
environment variables.
Adding environment variable
To add environment variable
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. Based on whether you're creating or updating a service, perform one of the following steps:
•If you're creating a new service, choose Create an App Runner service and go to Conﬁgure 
Service.
•If you're updating an existing service, select the service that you want to update and go to the
Conﬁguration  tab of the service.
3. Go to Environment variables - optional under Service settings.
4. Choose any of the following options based on your requirement:
•Choose Plain Text from the Environment variable source and enter its key-value pairs under
Environment variable name and Environment variable value, respectively.
Note
Choose Plain Text if you want to reference non-sensitive data. This data isn't encrypted 
and is visible to others in the App Runner service conﬁguration and application logs.
•Choose Secrets Manager  from the Environment variable source to reference the secret that's 
stored in AWS Secrets Manager as environment variable in your service. Provide the environment 
101AWS App Runner Developer Guide
App Runner API or AWS CLI
variable name and Amazon Resource Name (ARN) of the secret that you're referencing under
Environment variable name and Environment variable value respectively.
•Choose SSM Parameter Store from the Environment variable source to reference the parameter 
stored in SSM Parameter Store as environment variable in your service. Provide the environment 
variable name and ARN of the parameter that you're referencing under Environment variable 
name  and Environment variable value respectively.
Note
•You cannot assign PORT as a name for an environment variable when creating or 
updating your App Runner service. It's a reserved environment variable for App Runner 
service.
•If the SSM Parameter Store parameter is in the same AWS Region as the service that 
you want to launch, you can specify the full Amazon Resource Name (ARN) or the name 
of the parameter. If the parameter is in a diﬀerent Region, you need to specify the full 
ARN.
•Make sure that parameter that you're referencing to is in the same account as the 
service that you're launching or updating. Currently, you can't reference SSM Parameter 
Store parameter across accounts.
5. Choose Add environment variable to reference to another environment variable.
6. Expand IAM policy templates to view and copy the IAM policy templates provided for the AWS 
Secrets Manager and SSM Parameter Store. You only need to do this if you didn't yet update 
the IAM policy of your instance role with the required permissions. For more information, see
Permissions (p. 100).
Removing environment variable
Before you delete an environment variable make sure that your application code is updated to reﬂect the 
same. If the application code is not updated, your App Runner service might fail.
To remove environment variables
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. Go to Conﬁguration  tab of the service you want to update.
3. Go to Environment variables - optional under Service settings.
4. Choose Remove next to the environment variable that you want to remove. You receive a message 
to conﬁrm the deletion.
5. Choose Delete.
App Runner API or AWS CLI
You can reference sensitive data stored in Secrets Manager and SSM Parameter Store by adding them as 
environment variables in your service.
Note
Update the IAM policy of your instance role so App Runner can access secrets and 
parameters stored in Secrets Manager and SSM Parameter Store. For more information, see
Permissions (p. 100).
To reference secrets and conﬁgurations as environment variables
1. Create a secret or conﬁguration in the Secrets Manager or SSM Parameter Store.
The following examples show how to create a secret and a parameter using the SSM Parameter 
Store.
102AWS App Runner Developer Guide
App Runner API or AWS CLI
Example Creating a secret - Request
The following example shows how to create a secret that represents the database credential.
aws secretsmanager create-secret \
—name DevRdsCredentials \
—description "Rds credentials for development account." \
—secret-string "{\"user\":\"diegor\",\"password\":\"EXAMPLE-PASSWORD\"}"
Example Creating a secret - Response
arn:aws:secretsmanager:<region>:<aws_account_id>:secret:DevRdsCredentials
Example Creating a conﬁguration - Request
The following example shows how to create a parameter that represents the RDS connection string.
aws systemsmanager put-parameter \
—name DevRdsConnectionString \
—value "mysql2://dev-mysqlcluster-rds.com:3306/diegor" \
—type "String" \
—description "Rds connection string for development account."
Example Creating a conﬁguration - Response
arn:aws:ssm:<region>:<aws_account_id>:parameter/DevRdsConnectionString
2. Reference the secrets and conﬁgurations that are stored in Secrets Manager and SSM Parameter 
Store by adding them as environment variables. You can add environment variables when you create 
or update your App Runner service.
The following examples shows how to reference secrets and conﬁgurations as environment variables 
on a code-based and an image-based App Runner service.
Example Input.json ﬁle for image-based App Runner service
{ 
  "ServiceName": "example-secrets", 
  "SourceConfiguration": { 
    "ImageRepository": { 
      "ImageIdentifier": "<image-identifier>", 
      "ImageConfiguration": { 
        "Port": "<port>", 
        "RuntimeEnvironmentSecrets": { 
          
 "Credential1":"arn:aws:secretsmanager:<region>:<aws_account_id>:secret:XXXXXXXXXXXX", 
          "Credential2":"arn:aws:ssm:<region>:<aws_account_id>:parameter/<parameter-
name>" 
        } 
      }, 
      "ImageRepositoryType": "ECR_PUBLIC" 
    } 
  }, 
  "InstanceConfiguration": { 
    "Cpu": "1 vCPU", 
    "Memory": "3 GB", 
    "InstanceRoleArn": "<instance-role-arn>" 
  }
103AWS App Runner Developer Guide
App Runner API or AWS CLI
}
Example Image-based App Runner service – Request
aws apprunner create-service \
--cli-input-json file://input.json
Example Image-based App Runner service – Response
{
... 
      "ImageRepository": { 
         "ImageIdentifier":"<image-identifier>", 
         "ImageConfiguration":{ 
            "Port": "<port>", 
            "RuntimeEnvironmentSecrets":{ 
               "Credential1": 
 "arn:aws:secretsmanager:<region>:<aws_account_id>:secret:XXXXXXXXXXXX", 
               "Credential2": "arn:aws:ssm:<region>:<aws_account_id>:parameter/
<parameter-name>" 
            },                 
            "ImageRepositoryType":"ECR" 
      }       
   }, 
   "InstanceConfiguration": { 
        "CPU": "1 vCPU", 
        "Memory": "3 GB", 
        "InstanceRoleArn: "<instance-role-arn>" 
   }
...
}
Example Input.json ﬁle for code-based App Runner service
{ 
  "ServiceName": "example-secrets", 
  "SourceConfiguration": { 
    "AuthenticationConfiguration": { 
      "ConnectionArn": "arn:aws:apprunner:us-east-1:123456789012:connection/my-github-
connection/XXXXXXXXXX" 
    }, 
    "AutoDeploymentsEnabled": false, 
    "CodeRepository": { 
      "RepositoryUrl": "<repository-url>", 
      "SourceCodeVersion": { 
        "Type": "BRANCH", 
        "Value": "main" 
      }, 
      "CodeConfiguration": { 
        "ConfigurationSource": "API", 
        "CodeConfigurationValues": { 
          "Runtime": "<runtime>", 
          "BuildCommand": "<build-command>", 
          "StartCommand": "<start-command>", 
          "Port": "<port>", 
          "RuntimeEnvironmentSecrets": { 
            
 "Credential1":"arn:aws:secretsmanager:<region>:<aws_account_id>:secret:XXXXXXXXXXXX", 
            "Credential2":"arn:aws:ssm:<region>:<aws_account_id>:parameter/<parameter-
name>" 
          } 
104AWS App Runner Developer Guide
App Runner API or AWS CLI
        } 
      } 
    } 
  }, 
  "InstanceConfiguration": { 
    "Cpu": "1 vCPU", 
    "Memory": "3 GB", 
    "InstanceRoleArn": "<instance-role-arn>" 
  }
}
Example Code-based App Runner service – Request
aws apprunner create-service \
--cli-input-json file://input.json
Example Code-based App Runner service – Response
{
... 
   "SourceConfiguration":{ 
      "CodeRepository":{ 
         "RepositoryUrl":"<repository-url>", 
         "SourceCodeVersion":{ 
            "Type":"Branch", 
            "Value":"main" 
         }, 
         "CodeConfiguration":{ 
            "ConfigurationSource":"API", 
            "CodeConfigurationValues":{ 
               "Runtime":"<runtime>", 
               "BuildCommand":"<build-command>", 
               "StartCommand":"<start-command>", 
               "Port":"<port>",                
               "RuntimeEnvironmentSecrets":{ 
                  "Credential1" : 
 "arn:aws:secretsmanager:<region>:<aws_account_id>:secret:XXXXXXXX", 
                  "Credential2" : "arn:aws:ssm:<region>:<aws_account_id>:parameter/
<parameter-name>" 
               }  
            } 
         } 
      }, 
      "InstanceConfiguration": { 
        "CPU": "1 vCPU", 
        "Memory": "3 GB", 
        "InstanceRoleArn: "<instance-role-arn>" 
   }
...
}
3. The apprunner.yaml  model is updated to reﬂect the added secrets.
The following is an example of the updated apprunner.yaml model.
Example apprunner.yaml
version: 1.0
runtime: python3
build: 
  commands: 
105AWS App Runner Developer Guide
App Runner API or AWS CLI
    build: 
      - python -m pip install flask
run: 
  command: python app.py 
  network: 
    port: 8080 
  env: 
    - name: MY_VAR_EXAMPLE 
      value: "example" 
  secrets: 
    - name: my-secret 
      value-from: 
 "arn:aws:secretsmanager:<region>:<aws_account_id>:secret:XXXXXXXXXXXX" 
    - name: my-parameter 
      value-from: "arn:aws:ssm:<region>:<aws_account_id>:parameter/<parameter-name>" 
    - name: my-parameter-only-name 
      value-from: "parameter-name"
106AWS App Runner Developer Guide
Terminology
Networking with App Runner
This chapter describes networking conﬁgurations for your AWS App Runner services.
From this chapter you will learn the following:
•How to conﬁgure your incoming traﬃc to make your service privately available only from within an 
Amazon VPC. For more information, see Enabling Private endpoint for incoming traﬃc (p. 108).
•How to conﬁgure your outgoing traﬃc to access to other applications running in an Amazon VPC. For 
more information, see Enabling VPC access for outgoing traﬃc (p. 114).
Note
App Runner currently only supports IPv4.
Topics
•Terminology  (p. 107)
•Enabling Private endpoint for incoming traﬃc (p. 108)
•Enabling VPC access for outgoing traﬃc  (p. 114)
Terminology
In order to know how to customize your network traﬃc to suite your needs, let’s understand the 
following terms that are used in this chapter.
General Terms
To know what is needed to associate with an Amazon Virtual Private Cloud (VPC), let’s understand the 
following terms:
•VPC: An Amazon VPC  is a logically isolated virtual network that gives you complete control over your 
virtual networking environment, including resource placement, connectivity, and security. It is a virtual 
network that closely resembles a traditional network that you'd operate in your own data center.
•VPC interface endpoint: VPC interface endpoint, an AWS PrivateLink resource, connects a VPC to an 
endpoint service. Create an VPC interface endpoint to send traﬃc to endpoint services that use a 
Network Load Balancer to distribute traﬃc. Traﬃc destined for the endpoint service is resolved using 
DNS.
•Regions: Each Region is a separate geographic area where you can host an App Runner service.
•Availability Zones: Availability Zones are multiple, isolated locations within each Region. It is one or 
more discrete data centers with redundant power, networking, and connectivity in an AWS Region. 
Availability Zones help you to make production applications highly available, fault tolerant, and 
scalable.
•Subnets : A subnet  is a range of IP addresses in your VPC. A subnet must reside in a single Availability 
Zone. You can launch an AWS resource into a speciﬁed subnet. Use a public subnet for resources that 
must be connected to the internet, and a private subnet for resources that won't be connected to the 
internet.
•Security groups : A security group  controls the traﬃc that is allowed to reach and leave the resources 
that it is associated with. Security groups provide an additional layer of security to protect the AWS 
resources in each subnet, giving you more control over your network traﬃc. When you create a VPC, it 
107AWS App Runner Developer Guide
Term speciﬁc to conﬁguring outgoing traﬃc
comes with a default security group. You can create additional security groups for each VPC. You can 
associate a security group only with resources within the VPC for which it is created.
Term speciﬁc to conﬁguring outgoing traﬃc
VPC Connector
A VPC Connector  is an App Runner resource that enables App Runner service to access applications that 
run in a private Amazon VPC.
Terms speciﬁc to conﬁguring incoming traﬃc
To know how you can make your services privately accessible only from within an Amazon VPC, let’s 
understand the following terms:
•VPC Ingress Connection : VPC Ingress Connection  is an App Runner resource that provides an App 
Runner endpoint for incoming traﬃc. App Runner assigns the VPC Ingress Connection resource behind 
the scenes when you choose Private endpoint  on the App Runner console for your incoming traﬃc. 
The VPC Ingress Connection resource connects your App Runner service to the VPC interface endpoint 
of the Amazon VPC.
Note
If you are using App Runner API, the VPC Ingress Connection resource is not automatically 
created.
•Private endpoint : Private endpoint  is an App Runner console option that you select to conﬁgure the 
incoming network traﬃc to be accessible from only within an Amazon VPC.
Enabling Private endpoint for incoming traﬃc
By default when you create an AWS App Runner service, the service is accessible over the internet. 
However, you can also make your App Runner service private and only accessible from within an Amazon 
Virtual Private Cloud (Amazon VPC). With your App Runner service private, you have complete control 
over incoming traﬃc, adding an additional layer of security. This is helpful in a variety of use cases, 
including running internal APIs, corporate web applications, or applications that are still in development 
that require a greater level of privacy and security, or have the need to meet speciﬁc compliance 
requirements. When your App Runner service is private, you can access your service from within an 
Amazon VPC. An internet gateway, NAT device, or VPN connection isn’t required.
Note
App Runner currently only supports IPv4.
Considerations
•Before you set up a VPC interface endpoint for App Runner, review Considerations  in the AWS 
PrivateLink Guide .
•VPC endpoint policies are not supported for App Runner. By default, full access to App Runner is 
allowed through the VPC interface endpoint. Alternatively, you can associate a security group with the 
endpoint network interfaces to control traﬃc to App Runner through the VPC interface endpoint.
•After you enable a Private endpoint, your service is only accessible from your VPC, and can’t be 
accessed from the internet.
•For higher availability, it's recommended that you select at least two subnets across Availability Zone 
diﬀerent for the VPC interface endpoint. We don’t recommend using only one subnet.
•You can use the same VPC interface endpoint to access multiple App Runner services in a VPC.
108AWS App Runner Developer Guide
Permissions
For information on the terms used in this section, see Terminology (p. 107).
Permissions
The following is the list of permissions required to enable Private endpoint :
•ec2:CreateTags
•ec2:CreateVpcEndpoint
•ec2:ModifyVpcEndpoint
•ec2:DeleteVpcEndpoints
•ec2:DescribeSubnets
•ec2:DescribeVpcEndpoints
•ec2:DescribeVpcs
VPC interface endpoint
A VPC interface endpoint is an AWS PrivateLink resource that connects an Amazon VPC to an endpoint 
service. You can specify which Amazon VPC you would like your App Runner service to be accessible in by 
passing a VPC interface endpoint. To create a VPC interface endpoint specify the following:
•The Amazon VPC to enable the connectivity.
•Add Security groups. By default, a security group is assigned to VPC interface endpoint. You can 
choose to associate a custom security group to bring further control to incoming network traﬃc.
•Add subnets. To ensure higher availability, it is recommended to select at least two subnets for each 
Availability Zone from which you’ll access the App Runner service. A network interface endpoint is 
created in each subnet that you enable for the VPC interface endpoint. These are requester-managed 
network interfaces that serve as the entry point for traﬃc destined for App Runner. A requester-
managed network interface is a network interface that an AWS service creates in your VPC on your 
behalf.
•If you are using the API, add the App Runner VPC interface endpoint Servicename . For example,
com.amazonaws. region.apprunner.requests
You can create a VPC interface endpoint using one of the following AWS services:
•App Runner console. For more information, see Manage Private endpoint  (p. 110).
•Amazon VPC console or API, and AWS Command Line Interface (AWS CLI). For more information, see
Access AWS services through AWS PrivateLink in the AWS PrivateLink Guide.
Note
You’re charged for each VPC interface endpoint that you use based on AWS PrivateLink Pricing. 
Therefore, for better cost eﬃciency, you can use the same VPC interface endpoint to access 
multiple App Runner services within a VPC. However, for better isolation, consider associating a 
diﬀerent VPC interface endpoint for each of your App Runner services.
VPC Ingress Connection
A VPC Ingress Connection  is an App Runner resource that speciﬁes an App Runner endpoint for incoming 
traﬃc. App Runner assigns the VPC Ingress Connection resource behind the scenes when you choose
Private endpoint  on the App Runner console for your incoming traﬃc. Choose this option to only allow 
109AWS App Runner Developer Guide
Private endpoint
traﬃc from an Amazon VPC to access your App Runner service. The VPC Ingress Connection resource 
connects your App Runner service to the VPC interface endpoint of the Amazon VPC. You can create 
a VPC Ingress Connection resource only if you are using the API operations to conﬁgure the network 
settings for incoming traﬃc. For more information how to create VPC Ingress Connection resource, see
CreateVpcIngressConnection in the AWS App Runner API Reference.
Note
One VPC Ingress Connection resource of the App Runner can connect to one VPC interface 
endpoint of the Amazon VPC. Also, you can only create one VPC Ingress Connection resource for 
each App Runner service.
Private endpoint
Private endpoint is an App Runner console option that you can choose if you only want to receive 
incoming traﬃc from an Amazon VPC. Choosing the Private endpoint  option on the App Runner console 
provides you with the option to connect your service to a VPC by conﬁguring its VPC interface endpoint. 
Behind the scenes, App Runner assigns a VPC Ingress Connection resource to the VPC interface endpoint 
that you conﬁgure.
Summary
Make your service private by only allowing traﬃc from an Amazon VPC to access your App Runner 
service. To achieve this, you create a VPC interface endpoint for the selected Amazon VPC using either 
App Runner or Amazon VPC. On the App Runner console, you create a VPC interface endpoint when 
you enable the Private endpoint  for the Incoming traﬃc. App Runner then automatically creates a VPC 
Ingress Connection  resource and connects to the VPC interface endpoint and your App Runner service. 
This creates a private service connection that ensures that only traﬃc from the selected VPC can access 
your App Runner service.
Managing Private endpoint
Manage the Private endpoint for the incoming traﬃc using one of the following methods:
•the section called “App Runner console” (p. 110)
•the section called “App Runner API or AWS CLI” (p. 112)
App Runner console
When you create a service (p. 64) using the App Runner console, or when you update its conﬁguration 
later  (p. 78), you can choose to conﬁgure the incoming traﬃc.
To conﬁgure your incoming traﬃc, choose one of the following.
•Public endpoint : To make your service accessible to all services over the internet. By default, Public 
endpoint  is selected.
•Private endpoint : To make your App Runner service accessible from only within an Amazon VPC.
Enable Private endpoint
Enable a Private endpoint  by associating it with VPC interface endpoint of the Amazon VPC you want to 
access. You can either create a new VPC interface endpoint or choose an existing one.
To create a VPC interface endpoint
1. Open the App Runner console, and in the Regions list, select your AWS Region.
110AWS App Runner Developer Guide
Manage Private endpoint
2. Go to Networking section under Conﬁgure service.
3. Choose Private endpoint , for Incoming network traﬃc. Options to connect to a VCP using VPC 
interface endpoint opens.
4. Choose Create new endpoint . The Create new VPC interface endpoint dialog-box opens.
5. Enter a name for VPC interface endpoint.
6. Choose the required VPC interface endpoint from the available drop-down list.
7. Choose security group from the drop-down list. Adding security groups provides an additional 
layer of security to the VPC interface endpoint. It’s recommended to choose two or more security 
groups. If you don’t choose a security group, App Runner assigns a default security group to the 
VPC interface endpoint. Ensure that the security group rules don't block the resources that want to 
communicate with your App Runner service. The security group rules must allow resources that will 
interact with your App Runner service.
8. Choose the required subnets from the drop-down list. It is recommended to select at least two 
subnets for each Availability Zone from which you’ll access the App Runner service.
9. (Optional) Choose Add new tag  and enter the tag key and the tag value.
10. Choose Create . The Conﬁgure service page opens showing the message of successful creation of 
VPC interface endpoint on the top bar.
To choose an existing VPC interface endpoint
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. Go to Networking section under Conﬁgure service.
3. Choose Private endpoint , for Incoming network traﬃc. Options to connect to a VPC using VPC 
interface endpoint opens. A list of available VPC interface endpoints is shown.
4. Choose the required VPC interface endpoint listed under VPC interface endpoints.
5. Choose Next to create your service. App Runner enables the Private endpoint.
Note
After your service is created you can choose to edit the Security groups and Subnets 
associated with the VPC interface endpoint, if required.
To check the details of the Private endpoint , go to your service and expand the Networking section 
under Conﬁguration  tab. It shows details of the VPC and the VPC interface endpoint associated with 
the Private endpoint .
Update VPC interface endpoint
After your App Runner service is created, you can edit the VPC interface endpoint associated with the 
Private endpoint.
Note
You cannot update the Endpoint name  and the VPC ﬁelds.
To update VPC interface endpoint
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. Go to your service and choose Networking conﬁgurations on the left panel.
3. Choose Incoming traﬃc to view the VPC interface endpoints associated with the respective services.
4. Choose the VPC interface endpoint you want to edit.
5. Choose Edit. The dialog-box to edit the VPC interface endpoint opens.
6. Choose the required Security groups and Subnets  and click Update . The page showing the VPC 
interface endpoint details opens with the message of successful update of the VPC interface 
endpoint on the top bar.
111AWS App Runner Developer Guide
Manage Private endpoint
Delete VPC interface endpoint
If you don’t want your App Runner service to be privately accessible, you can set your incoming traﬃc 
to Public . Changing to Public  removes the Private endpoint, but it doesn’t delete the VPC interface 
endpoint.
To delete VPC interface endpoint
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. Go to your service and choose Networking conﬁgurations on the left panel.
3. Choose Incoming traﬃc to view the VPC interface endpoints associated with the respective services.
Note
Before deleting a VPC interface endpoint, remove it from all the services its connected to by 
updating your service.
4. Choose Delete.
If there are services connected to VPC interface endpoint, then you receive a Cannot delete VPC 
interface endpoint message. If there are no services connected to the VPC interface endpoint, you 
receive a message to conﬁrm the deletion.
5. Choose Delete. The Network conﬁgurations page opens for the Incoming traﬃc with the message 
of successful deletion of the VPC interface endpoint on the top bar.
App Runner API or AWS CLI
You can deploy an application on App Runner that is only accessible from within an Amazon VPC.
For information on permissions required to make your service private, see the section called 
“Permissions” (p. 109).
To create a private service connection to Amazon VPC
1. Create a VPC interface endpoint, an AWS PrivateLink resource, to connect to App Runner. To do this, 
specify subnets and security groups to associate with the application. The following is an example of 
creating a VPC interface endpoint.
Example
aws ec2 create-vpc-endpoint 
 --vpc-endpoint-type: Interface 
 --service-name: com.amazonaws.us-east-1.apprunner.requests
 --subnets: subnet1, subnet2
 --security-groups: sg1
2. Reference the VPC interface endpoint by using the CreateService or UpdateService
App Runner API actions through the CLI. Use the Ingressconfiguration  member 
of the NetworkConfiguration  parameter and specify IsPubliclyAccessible  for
Ingressconfiguration  as False. The following is an example of referencing VPC interface 
endpoint.
Example
aws apprunner create-service 
 --network-configuration: ingress-configuration= <ingress_configuration>
 --service-name: com.amazonaws.us-east-1.apprunner.requests
 --source-configuration: <source_configuration>
 # Ingress Configuration 
 { 
112AWS App Runner Developer Guide
Manage Private endpoint
 "IsPubliclyAccessible": False 
 }
3. Call the create-vpc-ingress-connection  API action to create the VPC Ingress Connection 
resource for App Runner and associate it with the VPC interface endpoint you created in the previous 
step. It returns a domain name that is used to access your service in the speciﬁed VPC. The following 
is an example of creating a VPC Ingress Connection resource.
Example Request
aws apprunner create-vpc-ingress-connection 
 --service-arn: <apprunner_service_arn> 
 --ingress-vpc-configuration: {"VpcId": <vpc_id> , "VpceId": <vpce_id> } 
 --vpc-ingress-connection-name: <vic_connection_name>
Example Response
{ 
   "VpcIngressConnectionArn": <vpc_ingress_connection_arn>, 
   "VpcIngressConnectionName": <vic_connection_name>, 
   "ServiceArn": <apprunner_service_arn>, 
   "Status": "PENDING_CREATION", 
   "AccountId": <connection_owner_id>, 
   "DomainName": <domain_name_associated_with_vpce>, 
   "IngressVpcConfiguration": {"VpcId":<vpc_id>, "VpceId":<vpce_id>}, 
   "CreatedAt": <date_created>
}
Update VPC Ingress Connection
You can update the VPC Ingress Connection resource. The VPC Ingress Connection must be in one of the 
following states to be updated:
•AVAILABLE
•FAILED_CREATION
•FAILED_UPDATE
The following is an example of updating a VPC Ingress Connection resource.
Example Request
aws apprunner update-vpc-ingress-connection 
      --vpc-ingress-connection-arn: <vpc_ingress_connection_arn>
Example Response
{ 
    "VpcIngressConnectionArn":  <vpc_ingress_connection_arn>, 
    "VpcIngressConnectionName":  <vic_connection_name>, 
    "ServiceArn":  <apprunner_service_arn>, 
    "Status": "FAILED_UPDATE", 
    "AccountId":  <connection_owner_id>, 
    "DomainName":  <domain_name_associated_with_vpce>, 
    "IngressVpcConfiguration": {"VpcId":<vpc_id>, "VpceId":<vpce_id>}, 
    "CreatedAt":  <date_created>
}
113AWS App Runner Developer Guide
Outgoing traﬃc
Delete VPC Ingress Connection
You can delete the VPC Ingress Connection resource if you no longer need the private connection to the 
Amazon VPC.
The VPC Ingress Connection must be in one of the following states to be deleted:
•AVAILABLE
•FAILED CREATION
•FAILED UPDATE
•FAILED DELETION
The following is an example of deleting a VPC Ingress Connection
Example Request
aws apprunner delete-vpc-ingress-connection 
      --vpc-ingress-connection-arn: <vpc_ingress_connection_arn>
Example Response
{ 
   "VpcIngressConnectionArn": <vpc_ingress_connection_arn>, 
   "VpcIngressConnectionName": <vic_connection_name>, 
   "ServiceArn": <apprunner_service_arn>, 
   "Status": "PENDING_DELETION", 
   "AccountId": <connection_owner_id>, 
   "DomainName": <domain_name_associated_with_vpce>, 
   "IngressVpcConfiguration": {"VpcId":<vpc_id>, "VpceId":<vpce_id>}, 
   "CreatedAt": <date_created>, 
   "DeletedAt": <date_deleted>
}
Use the following App Runner API actions to manage the private inbound traﬃc for your service.
•CreateVpcIngressConnection – Create a new VPC Ingress Connection resource. App Runner requires 
this resource when you want to associate your App Runner service to an Amazon VPC endpoint.
•ListVpcIngressConnections – Return a list of AWS App Runner VPC Ingress Connection endpoints that 
are associated with your AWS account.
•DescribeVpcIngressConnection – Return a full description of AWS App Runner VPC Ingress Connection 
resource.
•UpdateVpcIngressConnection – Update the AWS App Runner VPC Ingress Connection resource.
•DeleteVpcIngressConnection – Delete an App Runner VPC Ingress Connection resource that’s 
associated with the App Runner service.
For more information on using App Runner API, see App Runner API Reference guide.
Enabling VPC access for outgoing traﬃc
By default, your AWS App Runner application can send messages to public endpoints. This includes your 
own solutions, AWS services, and any other public website or web service. Your application can even 
send messages to public endpoints of applications that run in a VPC from Amazon Virtual Private Cloud
(Amazon VPC). If you don't conﬁgure a VPC when you launch your environment, App Runner uses the 
default VPC, which is public.
114AWS App Runner Developer Guide
VPC Connector
You can choose to launch your environment in a custom VPC to customize networking and security 
settings for outgoing traﬃc. You can enable your AWS App Runner service to access applications that run 
in a private VPC from Amazon Virtual Private Cloud (Amazon VPC). After you do this, your application 
can connect with and send messages to other applications that are hosted in an Amazon Virtual Private 
Cloud  (Amazon VPC). Examples are an Amazon RDS database, Amazon ElastiCache, and other private 
services that are hosted in a private VPC.
VPC Connector
You can associate your service with a VPC by creating a VPC endpoint, called VPC Connector, from the 
App Runner console. To create a VPC Connector, specify the VPC, one or more subnets, and optionally 
one or more security groups. After you conﬁgure a VPC Connector, you can use it with one or more App 
Runner services.
The VPC connectors in App Runner are based on AWS Hyperplane, the internal Amazon network 
function virtualization system that's behind several AWS services and resources. These include Network 
Load Balancer, NAT Gateway, and AWS PrivateLink. The AWS Hyperplane technology provides high 
throughput and low latency network function virtualization capabilities. With Hyperplane ENIs, a higher 
degree of sharing can be achieved than the regular ENIs. Hyperplane ENIs are tied to a combination of 
one or more subnets and security groups. As the Hyperplane ENI is shared, fewer ENIs are required for 
each service, even as you scale up the number of tasks required to handle the request load. You can 
also choose to reference the same VPC Connector across multiple App Runner services, the underlying 
Hyperplane ENIs are shared across these services. This results in more eﬃcient utilization of the IP space 
in your VPC.
Subnet
Each subnet is in a speciﬁc Availability Zone. For high availability, we recommend that you select 
subnets across at least three Availability Zones. If the Region has less than three Availability Zones, we 
recommend you select your subnets across all the supported Availability Zones.
When selecting a subnet for your VPC, ensure that you choose a private subnet, not a public subnet. This 
is because, when you create a VPC Connector, the App Runner service creates a Hyperplane ENI in each 
of the subnets. Each Hyperplane ENI is assigned a private IP address only and is tagged with a tag of 
the AWSAppRunnerManaged key. If you choose a public subnet, errors will occur when running your App 
Runner service. However, if your service needs to access some services that are on the internet or other 
public AWS services, see the section called “Considerations when selecting a subnet ” (p. 115).
Considerations when selecting a subnet
•When you connect your service to a VPC, the outbound traﬃc doesn't have access to the public 
internet. All outbound traﬃc from your application is directed through the VPC that your service is 
connected to. All networking rules for the VPC apply to the outbound traﬃc of your application. This 
means that your services can't access the public internet and AWS APIs. To gain access, do one of the 
following:
•Connect the subnets to the internet through a NAT Gateway.
•Set up VPC endpoints  for the AWS services that you want to access. Your service stays within the 
Amazon VPC by using AWS PrivateLink.
•Some Availability Zones in some AWS Regions don't support the subnets that can be used with 
App Runner services. If you choose subnets in these Availability Zones, your service fails to be 
created or updated. For these situations, App Runner provides a detailed error message pointing to 
the unsupported subnets and Availability Zones. When this occurs, troubleshoot by removing the 
unsupported subnets from your request, and then try again.
115AWS App Runner Developer Guide
Security group 
Security group
You can optionally specify the security groups that App Runner uses to access AWS under the speciﬁed 
subnets. If you don't specify security groups, App Runner uses the default security group of the VPC. The 
default security group allows all outbound traﬃc.
Adding a security group provides an additional layer of security to the VCP Connectors, giving you more 
control over the network traﬃc. The VPC Connector is only used for outbound communication from 
your application. You use outbound rules to allow communication to the desired destination endpoints. 
You must also ensure that any security groups that are associated with the destination resource have 
the appropriate inbound rules. Otherwise, these resources can't accept traﬃc that comes from the VPC 
Connector security groups.
Note
When you associate your service with a VPC, the following traﬃc isn't aﬀected:
•Inbound traﬃc  – Incoming messages that your application receives are unaﬀected by an 
associated VPC. The messages are routed through the public domain name that's associated 
with your service and don't interact with the VPC.
•App Runner traﬃc  – App Runner manages several actions on your behalf, such as pulling 
source code and images, pushing logs, and retrieving secrets. The traﬃc that these actions 
generate isn't routed through your VPC.
To know more about how AWS App Runner integrates with Amazon VPC, see AWS App Runner VPC 
Networking.
Note
App Runner currently only supports IPv4.
Manage VPC access
Manage VPC access for your App Runner services using one of the following methods:
App Runner console
When you create a service (p. 64) using the App Runner console, or when you update its 
conﬁguration later (p. 78), you can choose to conﬁgure your outgoing traﬃc. Look for the
Networking conﬁguration section on the console page. For Outgoing network traﬃc, choose in the 
following:
•Public access: To associate your service with public endpoints of other AWS services.
•Custom VPC : To associate your service with a VPC from Amazon VPC. Your application can connect 
with and send messages to other applications that are hosted in an Amazon VPC.
To enable Custom VPC
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. Go to Networking section under Conﬁgure service.
116AWS App Runner Developer Guide
Manage VPC access
3. Choose Custom VPC , for Outgoing network traﬃc.
4. In the navigation pane, choose VPC connector.
If you created the VPC connectors, the console displays a list of VPC connectors in your account. 
You can choose an existing VPC connector and choose Next to review your conﬁguration. Then, 
move to the last step. Alternatively, you can add a new VPC connector using the following steps.
5. Choose Add new  to create a new VPC connector for your service.
Then, the Add new VPC connector dialog box opens.
117AWS App Runner Developer Guide
Manage VPC access
6. Enter a name for your VPC connector and select the required VPC from the available list.
7. For Subnets  select one subnet for each Availability Zone that you plan to access the App 
Runner service from. For better availability, choose three subnets. Or, if there are less than three 
subnets, choose all available subnets.
8. (Optional) For Security group, select the security groups to associate with the endpoint network 
interfaces.
9. (Optional) To add a tag, choose Add new tag  and enter the tag key and the tag value.
118AWS App Runner Developer Guide
Manage VPC access
10. Choose Add.
The details of the VPC connector you created appear under VPC connector.
11. Choose Next to review your conﬁguration, and then choose Create and deploy.
App Runner creates a VPC connector resource for you, and then associates it with your service. 
If the service is successfully created, the console shows the service dashboard, with a Service 
overview of the new service.
App Runner API or AWS CLI
When you call the CreateService or UpdateService App Runner API actions, use the
EgressConfiguration  member of the NetworkConfiguration  parameter to specify a VPC 
connector resource for your service.
Use the following App Runner API actions to manage your VPC Connector resources.
•CreateVpcConnector – Creates a new VPC connector.
•ListVpcConnectors – Returns a list of the VPC connectors that are associated with your AWS 
account. The list includes full descriptions.
•DescribeVpcConnector – Returns a full description of a VPC connector.
•DeleteVpcConnector – Deletes a VPC connector. If you reach the VPC connector quota for your 
AWS account, you might need to delete unnecessary VPC connectors.
To deploy an application on App Runner that has outbound access to a VPC, you must ﬁrst create a 
VPC Connector. You can do this by specifying one or more subnets and security groups to associate 
with the application. You can then reference the VPC Connector in the Create  or UpdateService
through the CLI, as illustrated in the following example:
            cat > vpc-connector.json <<EOF
{
"VpcConnectorName": "my-vpc-connector",
"Subnets": [
"subnet-a",
"subnet-b",
"subnet-c"
],
"SecurityGroups": [
"sg-1",
"sg-2"
]
}
EOF
aws apprunner create-vpc-connector \
--cli-input-json file:///vpc-connector.json
cat > service.json <<EOF
{
"ServiceName": "my-vpc-connected-service",
"SourceConfiguration": {
"ImageRepository": {
"ImageIdentifier": "<ecr-image-identifier> ",
"ImageConfiguration": {
"Port": "8000"
},
"ImageRepositoryType": "ECR"
119AWS App Runner Developer Guide
Manage VPC access
}
},
"NetworkConfiguration": {
"EgressConfiguration": {
"EgressType": "VPC",
"VpcConnectorArn": "arn:aws:apprunner:..../my-vpc-connector"
}
}
}
EOF
aws apprunner create-service \
--cli-input-json file:///service.js 
           
120AWS App Runner Developer Guide
Activity
Observability for your App Runner 
service
AWS App Runner integrates with several AWS services to provide you with an extensive observability 
suite of tools for your App Runner service. Topics in this chapter describe these capabilities.
Topics
•Tracking App Runner service activity (p. 121)
•Viewing App Runner logs streamed to CloudWatch Logs (p. 122)
•Viewing App Runner service metrics reported to CloudWatch (p. 125)
•Handling App Runner events in EventBridge (p. 128)
•Logging App Runner API calls with AWS CloudTrail (p. 132)
•Tracing for your App Runner application with X-Ray (p. 135)
Tracking App Runner service activity
AWS App Runner uses a list of operations to keep track of activity in your App Runner service. An 
operation represents an asynchronous call to an API action, such as creating a service, updating a 
conﬁguration, and deploying a service. The following sections show you how to track activity in the App 
Runner console and using the API.
Track App Runner service activity
Track your App Runner service activity using one of the following methods:
App Runner console
The App Runner console displays your App Runner service activity and provides more ways to 
explore operations.
To view activity of your service
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. In the navigation pane, choose Services, and then choose your App Runner service.
The console displays the service dashboard with a Service overview.
121AWS App Runner Developer Guide
Logs (CloudWatch Logs)
3. On the service dashboard page, choose the Activity tab, if it isn't already chosen.
The console displays a list of operations.
4. To ﬁnd speciﬁc operations, scope down the list by entering a search term. You can search for any 
value that appears in the table.
5. Choose any listed operation to see or download the related log.
App Runner API or AWS CLI
The ListOperations  action, given the Amazon Resource Name (ARN) of an App Runner service, 
returns a list of operations that occurred on this service. Each list item contains an operation ID and 
some tracking details.
Viewing App Runner logs streamed to CloudWatch 
Logs
You can use Amazon CloudWatch Logs to monitor, store, and access log ﬁles that your resources in 
various AWS services generate. For more information, see Amazon CloudWatch Logs User Guide.
AWS App Runner collects the output of your application deployments and of your active service and 
streams it to CloudWatch Logs. The following sections list App Runner log streams and show you how to 
view them in the App Runner console.
App Runner log groups and streams
CloudWatch Logs keeps log data in log streams that it further organizes in log groups. A log stream  is a 
sequence of log events from a speciﬁc source. A log group  is a group of log streams that share the same 
retention, monitoring, and access control settings.
App Runner deﬁnes two CloudWatch Logs log groups, each with multiple log streams, for each one of 
your App Runner services in your AWS account.
122AWS App Runner Developer Guide
App Runner log groups and streams
Service logs
The service log group contains logging output generated by App Runner as it manages your App Runner 
service and acts on it.
Log group name Example
/aws/apprunner/ service-name /service-
id/service/aws/apprunner/python-test/
ac7ec8b51ff34746bcb6654e0bcb23da/
service
Within the service log group, App Runner creates an events log stream to capture activity in the lifecycle 
of your App Runner service. For example, this might be launching your application or pausing it.
In addition, App Runner creates a log stream for each long-running asynchronous operation that's 
related to your service. The log stream name reﬂects the operation type and speciﬁc operation ID.
A deployment  is a type of operation. Deployment logs contain the logging output of the build and 
deployment steps that App Runner performs when you create a service or deploy a new version of 
your application. Deployment log stream names start with deployment/ , and end with the ID of the 
operation that performs the deployment. This operation is either a CreateService call for the initial 
application deployment or a StartDeployment call for each further deployment.
Within a deployment log, each log message starts with a preﬁx:
•[AppRunner]  – Output that App Runner generates during the deployment.
•[Build] – Output of your own build scripts.
Log stream name Example
events N/A (ﬁxed name)
operation-type /operation-id deployment/
c2c8eeedea164f459cf78f12a8953390
Application logs
The application log group contains the output of your running application code.
Log group name Example
/aws/apprunner/ service-
name/service-id /application/aws/apprunner/python-test/
ac7ec8b51ff34746bcb6654e0bcb23da/
application
Within the application log group, App Runner creates a log stream for each instance (scaling unit) that's 
running your application.
Log stream name Example
instance/ instance-id instance/1a80bc9134a84699b7b3432ebeebb591
123AWS App Runner Developer Guide
Viewing App Runner logs in the console
Viewing App Runner logs in the console
The App Runner console displays a summary of all logs for your service and allows you to view, explore, 
and download them.
To view logs for your service
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. In the navigation pane, choose Services, and then choose your App Runner service.
The console displays the service dashboard with a Service overview.
3. On the service dashboard page, choose the Logs  tab.
The console displays a few types of logs in several sections:
•Event log – Activity in the lifecycle of your App Runner service. The console displays the latest 
events.
•Deployment logs – Source repository deployments to your App Runner service. The console 
displays a separate log stream for each deployment.
•Application logs – The output of the web application that's deployed to your App Runner service. 
The console combines the output from all running instances into a single log stream.
124AWS App Runner Developer Guide
Metrics (CloudWatch)
4. To ﬁnd speciﬁc deployments, scope down the deployment log list by entering a search term. You can 
search for any value that appears in the table.
5. To view a log's content, choose View full log (event log) or the log stream name (deployment and 
application logs).
6. Choose Download to download a log. For a deployment log stream, select a log stream ﬁrst.
7. Choose View in CloudWatch to open the CloudWatch console and use its full capabilities to explore 
your App Runner service logs. For a deployment log stream, select a log stream ﬁrst.
Note
The CloudWatch console is particularly useful if you want to view application logs of 
speciﬁc instances instead of the combined application log.
Viewing App Runner service metrics reported to 
CloudWatch
Amazon CloudWatch monitors your Amazon Web Services (AWS) resources and the applications you run 
on AWS in real time. You can use CloudWatch to collect and track metrics, which are variables you can 
measure for your resources and applications. You can also use it to create alarms that watch metrics. 
When a certain threshold is reached, CloudWatch sends notiﬁcations, or automatically makes changes to 
the monitored resources. For more information, see Amazon CloudWatch User Guide.
125AWS App Runner Developer Guide
App Runner metrics
AWS App Runner collects a variety of metrics that provide you with greater visibility into the usage, 
performance, and availability of your App Runner services. Some metrics track individual instances that 
run your web service, whereas others are at the overall service level. The following sections list App 
Runner metrics and show you how to view them in the App Runner console.
App Runner metrics
App Runner collects the following metrics relating to your service and publishes them to CloudWatch in 
the AWS/AppRunner  namespace.
Instance level metrics are collected for each instance (scaling unit) individually.
What's measured?Metric Description
CPU utilization CPUUtilization The average CPU usage during one-minute periods.
Memory utilizationMemoryUtilization The average memory usage during one-minute 
periods.
Service level metrics are collected for the entire service.
What's measured?Metric Description
CPU utilization CPUUtilization The aggregated CPU usage across all instances during 
one minute periods.
Memory utilizationMemoryUtilization The aggregated memory usage across all instances 
during one minute periods.
ConcurrencyConcurrency The approximate number of concurrent requests 
being handled by the service.
HTTP request 
countRequests The number of HTTP requests that the service 
received.
HTTP status 
counts2xxStatusResponses
4xxStatusResponses
5xxStatusResponsesThe number of HTTP requests that returned each 
response status, grouped by category (2XX, 4XX, 
5XX).
HTTP request 
latencyRequestLatency The time, in milliseconds, that it took your web 
service to process HTTP requests.
Instance countsActiveInstances The number of instances that are processing HTTP 
requests for your service.
Note
If the ActiveInstances  metric displays 
zero, it means that there are no requests 
for the service. It does not indicate that the 
number of instances for your service is zero.
126AWS App Runner Developer Guide
Viewing App Runner metrics in the console
Viewing App Runner metrics in the console
The App Runner console graphically displays the metrics that App Runner collects for your service and 
provides more ways to explore them.
Note
At this time, the console displays only service metrics. To view instance metrics, use the 
CloudWatch console.
To view logs for your service
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. In the navigation pane, choose Services, and then choose your App Runner service.
The console displays the service dashboard with a Service overview.
3. On the service dashboard page, choose the Metrics  tab.
The console displays a set of metrics graphs.
127AWS App Runner Developer Guide
Event handling (EventBridge)
4. Choose a duration (for example, 12h) to scope metrics graphs to the recent period of that duration.
5. Choose Add to dashboard  at the top of one of the graph sections, or use the menu on any graph, to 
add the relevant metrics to a dashboard in the CloudWatch console for further investigation.
Handling App Runner events in EventBridge
Using Amazon EventBridge, you can set up event-driven rules that monitor a stream of real-time 
data from your AWS App Runner service for certain patterns. When a pattern for a rule is matched, 
EventBridge initiates an action in a target such as AWS Lambda, Amazon ECS, AWS Batch, and Amazon 
SNS. For example, you can set a rule for sending out email notiﬁcations by signaling an Amazon SNS 
topic whenever a deployment to your service fails. Or, you can set a Lambda function to notify a 
Slack channel whenever a service update fails. For more information about EventBridge, see Amazon 
EventBridge User Guide.
App Runner sends the following event types to EventBridge
•Service status change – A change in the status of an App Runner service. For example, a service status 
changed to DELETE_FAILED .
128AWS App Runner Developer Guide
Creating an EventBridge rule to act on App Runner events
•Service operation status change – A change in the status of a long, asynchronous operation on an App 
Runner service. For example, a service started to create, a service update successfully completed, or a 
service deployment completed with errors.
Creating an EventBridge rule to act on App Runner 
events
An EventBridge event  is an object that deﬁnes some standard EventBridge ﬁelds, such as the source AWS 
service and the detail (event) type, and an event-speciﬁc set of ﬁelds with the event details. To create an 
EventBridge rule, you use the EventBridge console to deﬁne an event pattern  (which events should bet 
tracked) and specify a target action  (what should be done on a match). An event pattern is similar to the 
events that it matches. You specify a subset of ﬁelds to match, and for each ﬁeld, you specify a list of 
possible values. This topic provides examples of App Runner events and event patterns.
For more information about creating EventBridge rules, see Creating a rule for an AWS service in the
Amazon EventBridge User Guide .
Note
Some services support pre-deﬁned patterns  in EventBridge. This simpliﬁes how an event pattern 
is created. You select ﬁeld values on a form, and EventBridge generates the pattern for you. At 
this time, App Runner doesn't support pre-deﬁned patterns. You have to enter the pattern as a 
JSON object. You can use the examples in this topic as a starting point.
App Runner event examples
These are some examples to events that App Runner sends to EventBridge.
•A service status change event. Speciﬁcally, a service that changed from the
OPERATION_IN_PROGRESS  to the RUNNING  status.
{  
  "version": "0", 
  "id": "6a7e8feb-b491-4cf7-a9f1-bf3703467718", 
  "detail-type": "AppRunner Service Status Change", 
  "source": "aws.apprunner", 
  "account": "111122223333", 
  "time": "2021-04-29T11:54:23Z", 
  "region": "us-east-2", 
  "resources": [ 
    "arn:aws:apprunner:us-east-2:123456789012:service/my-
app/8fe1e10304f84fd2b0df550fe98a71fa" 
  ], 
  "detail": { 
    "PreviousStatus": "OPERATION_IN_PROGRESS", 
    "CurrentStatus": "RUNNING", 
    "ServiceName": "my-app", 
    "ServiceId": "8fe1e10304f84fd2b0df550fe98a71fa", 
    "Message": "Service status is set to RUNNING.", 
    "Severity": "INFO" 
  }
}
•An operation status change event. Speciﬁcally, an UpdateService  operation that completed 
successfully.
{  
  "version": "0", 
129AWS App Runner Developer Guide
App Runner event pattern examples
  "id": "6a7e8feb-b491-4cf7-a9f1-bf3703467718", 
  "detail-type": "AppRunner Service Operation Status Change", 
  "source": "aws.apprunner", 
  "account": "111122223333", 
  "time": "2021-04-29T18:43:48Z", 
  "region": "us-east-2", 
  "resources": [ 
    "arn:aws:apprunner:us-east-2:123456789012:service/my-
app/8fe1e10304f84fd2b0df550fe98a71fa" 
  ], 
  "detail": { 
    "Status": "UpdateServiceCompletedSuccessfully", 
    "ServiceName": "my-app", 
    "ServiceId": "8fe1e10304f84fd2b0df550fe98a71fa", 
    "Message": "Service update completed successfully. New application and configuration 
 is deployed.", 
    "Severity": "INFO" 
  }
}
App Runner event pattern examples
The following examples demonstrate event patterns that you can use in EventBridge rules to match one 
or more App Runner events. An event pattern is similar to an event. Include only the ﬁelds that you want 
to match, and provide a list instead of a scalar to each one.
•Match all service status change events for services of a speciﬁc account, where the service is no longer 
in RUNNING  status.
{  
  "detail-type": [ "AppRunner Service Status Change" ], 
  "source": [ "aws.apprunner" ], 
  "account": [ "111122223333" ], 
  "detail": { 
    "PreviousStatus": [ "RUNNING" ] 
  }
}
•Match all operation status change events for services of a speciﬁc account, where the operation failed.
{  
  "detail-type": [ "AppRunner Service Operation Status Change" ], 
  "source": [ "aws.apprunner" ], 
  "account": [ "111122223333" ], 
  "detail": { 
    "Status": [ 
      "CreateServiceFailed", 
      "DeleteServiceFailed", 
      "UpdateServiceFailed", 
      "DeploymentFailed", 
      "PauseServiceFailed", 
      "ResumeServiceFailed" 
    ] 
  }
}
130AWS App Runner Developer Guide
App Runner event reference
App Runner event reference
Service status change
A service status change event has detail-type  set to AppRunner Service Status Change . It has 
the following detail ﬁelds and values:
"PreviousStatus": " any valid service status ",
"CurrentStatus": " any valid service status ",
"ServiceName": " your service name ",
"ServiceId": " your service ID ",
"Message": "Service status is set to CurrentStatus .",
"Severity": " varies"
Operation status change
An operation status change event has detail-type  set to AppRunner Service Operation Status 
Change. It has the following detail ﬁelds and values:
"Status": " see following table ",
"ServiceName": " your service name ",
"ServiceId": " your service ID ",
"Message": " see following table ",
"Severity": " varies"
The following table lists all possible status codes and related messages.
Status Message
CreateServiceStarted Service creation started.
CreateServiceCompletedSuccessfully Service creation completed successfully.
CreateServiceFailed Service creation failed. For details, see service logs.
DeleteServiceStarted Service deletion started.
DeleteServiceCompletedSuccessfully Service deletion completed successfully.
DeleteServiceFailed Service deletion failed.
UpdateServiceStarted
Service update completed successfully. New application and 
conﬁguration is deployed.UpdateServiceCompletedSuccessfully
Service update completed successfully. New conﬁguration is 
deployed.
UpdateServiceFailed Service update failed. For details, see service logs.
DeploymentStarted Deployment started.
DeploymentCompletedSuccessfully Deployment completed successfully.
DeploymentFailed Deployment failed. For details, see service logs.
PauseServiceStarted Service pause started.
131AWS App Runner Developer Guide
API actions (CloudTrail)
Status Message
PauseServiceCompletedSuccessfully Service pause completed successfully.
PauseServiceFailed Service pause failed.
ResumeServiceStarted Service resume started.
ResumeServiceCompletedSuccessfully Service resume completed successfully.
ResumeServiceFailed Service resume failed.
Logging App Runner API calls with AWS CloudTrail
App Runner is integrated with AWS CloudTrail, a service that provides a record of actions taken by a 
user, role, or an AWS service in App Runner. CloudTrail captures all API calls for App Runner as events. 
The calls captured include calls from the App Runner console and code calls to the App Runner API 
operations. If you create a trail, you can enable continuous delivery of CloudTrail events to an Amazon S3 
bucket, including events for App Runner. If you don't conﬁgure a trail, you can still view the most recent 
events in the CloudTrail console in Event history. Using the information collected by CloudTrail, you can 
determine the request that was made to App Runner, the IP address from where the request was made, 
who made the request, when it was made, and additional details.
To learn more about CloudTrail, see the AWS CloudTrail User Guide.
App Runner information in CloudTrail
CloudTrail is enabled on your AWS account when you create the account. When activity occurs in App 
Runner, that activity is recorded in a CloudTrail event along with other AWS service events in Event 
history. You can view, search, and download recent events in your AWS account. For more information, 
see Viewing Events with CloudTrail Event History.
For an ongoing record of events in your AWS account, including events for App Runner, create a trail. 
A trail enables CloudTrail to deliver log ﬁles to an Amazon S3 bucket. By default, when you create a 
trail in the console, the trail applies to all AWS Regions. The trail logs events from all Regions in the 
AWS partition and delivers the log ﬁles to the Amazon S3 bucket that you specify. Additionally, you can 
conﬁgure other AWS services to further analyze and act upon the event data collected in CloudTrail logs. 
For more information, see the following:
•Overview for Creating a Trail
•CloudTrail Supported Services and Integrations
•Conﬁguring Amazon SNS Notiﬁcations for CloudTrail
•Receiving CloudTrail Log Files from Multiple Regions and Receiving CloudTrail Log Files from Multiple 
Accounts
All App Runner actions are logged by CloudTrail and are documented in the AWS App Runner API 
Reference. For example, calls to the CreateService , DeleteConnection , and StartDeployment
actions generate entries in the CloudTrail log ﬁles.
Every event or log entry contains information about who generated the request. The identity 
information helps you determine the following:
•Whether the request was made with root or IAM user credentials.
132AWS App Runner Developer Guide
Understanding App Runner log ﬁle entries
•Whether the request was made with temporary security credentials for a role or federated user.
•Whether the request was made by another AWS service.
For more information, see the CloudTrail userIdentity Element.
Understanding App Runner log ﬁle entries
A trail is a conﬁguration that enables delivery of events as log ﬁles to an Amazon S3 bucket that you 
specify. CloudTrail log ﬁles contain one or more log entries. An event represents a single request from 
any source and includes information about the requested action, the date and time of the action, and 
request parameters. CloudTrail log ﬁles aren't an ordered stack trace of the public API calls, so they don't 
appear in any speciﬁc order.
The following example shows a CloudTrail log entry that demonstrates the CreateService  action.
Note
For security reasons, some property values are redacted in the logs and replaced with the 
text HIDDEN_DUE_TO_SECURITY_REASONS . This prevents unintended exposure of secret 
information. However, you can still see that these properties were passed in the request or 
returned in the response.
Example CloudTrail log entry for the CreateService  App Runner action
{ 
  "eventVersion": "1.08", 
  "userIdentity": { 
    "type": "IAMUser", 
    "principalId": "AIDACKCEVSQ6C2EXAMPLE", 
    "arn": "arn:aws:iam::123456789012:user/ aws-user ", 
    "accountId": "123456789012", 
    "accessKeyId": "AKIAIOSFODNN7EXAMPLE", 
    "userName": " aws-user ", 
  }, 
  "eventTime": "2020-10-02T23:25:33Z", 
  "eventSource": "apprunner.amazonaws.com", 
  "eventName": " CreateService ", 
  "awsRegion": "us-east-2", 
  "sourceIPAddress": "192.0.2.0", 
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, 
 like Gecko) Chrome/77.0.3865.75 Safari/537.36", 
  "requestParameters": { 
    "serviceName": "python-test", 
    "sourceConfiguration": { 
      "codeRepository": { 
        "repositoryUrl": "https://github.com/ github-user /python-hello", 
        "sourceCodeVersion": { 
          "type": "BRANCH", 
          "value": "main" 
        }, 
        "codeConfiguration": { 
          "configurationSource": "API", 
          "codeConfigurationValues": { 
            "runtime": "python3", 
            "buildCommand": "HIDDEN_DUE_TO_SECURITY_REASONS", 
            "startCommand": "HIDDEN_DUE_TO_SECURITY_REASONS", 
            "port": "8080", 
            "runtimeEnvironmentVariables": "HIDDEN_DUE_TO_SECURITY_REASONS" 
          } 
        } 
      }, 
133AWS App Runner Developer Guide
Understanding App Runner log ﬁle entries
      "autoDeploymentsEnabled": true, 
      "authenticationConfiguration": { 
        "connectionArn": "arn:aws:apprunner:us-east-2:123456789012:connection/ your-
connection /e7656250f67242d7819feade6800f59e" 
      } 
    }, 
    "healthCheckConfiguration": { 
      "protocol": "HTTP" 
    }, 
    "instanceConfiguration": { 
      "cpu": "256", 
      "memory": "1024" 
    } 
  }, 
  "responseElements": { 
    "service": { 
      "serviceName": "python-test", 
      "serviceId": "dfa2b7cc7bcb4b6fa6c1f0f4efff988a", 
      "serviceArn": "arn:aws:apprunner:us-east-2:123456789012:service/python-test/
dfa2b7cc7bcb4b6fa6c1f0f4efff988a", 
      "serviceUrl": " generated domain ", 
      "createdAt": "2020-10-02T23:25:32.650Z", 
      "updatedAt": "2020-10-02T23:25:32.650Z", 
      "status": "OPERATION_IN_PROGRESS",  
      "sourceConfiguration": { 
        "codeRepository": { 
          "repositoryUrl": "https://github.com/ github-user /python-hello",  
          "sourceCodeVersion": { 
            "type": "Branch",  
            "value": "main" 
          }, 
          "codeConfiguration": { 
            "codeConfigurationValues": { 
            "configurationSource": "API", 
              "runtime": "python3",  
              "buildCommand": "HIDDEN_DUE_TO_SECURITY_REASONS",  
              "startCommand": "HIDDEN_DUE_TO_SECURITY_REASONS", 
              "port": "8080",  
              "runtimeEnvironmentVariables": "HIDDEN_DUE_TO_SECURITY_REASONS"  
            } 
          } 
        },  
        "autoDeploymentsEnabled": true,  
        "authenticationConfiguration": { 
          "connectionArn": "arn:aws:apprunner:us-east-2:123456789012:connection/ your-
connection /e7656250f67242d7819feade6800f59e" 
        } 
      },  
      "healthCheckConfiguration": { 
        "protocol": "HTTP", 
        "path": "/", 
        "interval": 5, 
        "timeout": 2, 
        "healthyThreshold": 3, 
        "unhealthyThreshold": 5 
      }, 
      "instanceConfiguration": { 
        "cpu": "256",  
        "memory": "1024" 
      }, 
      "autoScalingConfigurationSummary": { 
        "autoScalingConfigurationArn": "arn:aws:apprunner:us-
east-2:123456789012:autoscalingconfiguration/
DefaultConfiguration/1/00000000000000000000000000000001", 
        "autoScalingConfigurationName": "DefaultConfiguration", 
        "autoScalingConfigurationRevision": 1 
134AWS App Runner Developer Guide
Tracing (X-Ray)
      } 
    } 
  }, 
  "requestID": "1a60af60-ecf5-4280-aa8f-64538319ba0a", 
  "eventID": "e1a3f623-4d24-4390-a70b-bf08a0e24669", 
  "readOnly": false, 
  "eventType": "AwsApiCall", 
  "recipientAccountId": "123456789012"
}
Tracing for your App Runner application with X-
Ray
AWS X-Ray is a service that collects data about requests that your application serves, and provides 
tools you can use to view, ﬁlter, and gain insights into that data to identify issues and opportunities 
for optimization. For any traced request to your application, you can see detailed information not only 
about the request and response, but also about calls that your application makes to downstream AWS 
resources, microservices, databases and HTTP web APIs.
X-Ray uses trace data from the AWS resources that power your cloud applications to generate a detailed 
service graph. The service graph shows the client, your front-end service, and backend services that your 
front-end service calls to process requests and persist data. Use the service graph to identify bottlenecks, 
latency spikes, and other issues to solve to improve the performance of your applications.
For more information about X-Ray, see the AWS X-Ray Developer Guide.
135AWS App Runner Developer Guide
Instrument your application for tracing
Instrument your application for tracing
Instrument your App Runner service application for tracing using OpenTelemetry, a portable telemetry 
speciﬁcation. At this time, App Runner supports the AWS Distro for OpenTelemetry (ADOT), an 
OpenTelemetry implementation that collects and presents telemetry information using AWS services. X-
Ray implements the tracing component.
Depending on the speciﬁc ADOT SDK that you use in your application, ADOT supports up to two 
instrumentation approaches: automatic  and manual . For more information about instrumentation with 
your SDK, see the ADOT documentation, and choose your SDK on the navigation pane.
Runtime setup
The following are the general runtime setup instructions to instrument your App Runner service 
application for tracing.
To setup tracing for your runtime
1. Follow the instructions provided for your runtime in AWS Distro for OpenTelemetry (ADOT), to 
instrument your application.
2. Install the required OTEL  dependencies in the build section of the apprunner.yaml  ﬁle if you are 
using the source code repository or in the Dockerﬁle if you are using a container image.
3. Setup your environment variables in the apprunner.yaml  ﬁle if you are using the source code 
repository or in the Dockerﬁle if you are using a container image.
Example Environment variables
Note
The following example lists the important environment variables to add to the
apprunner.yaml  ﬁle. Add these environment variables to your Dockerﬁle if you are using 
a container image. However, each runtime can have their own idiosyncrasies and you may 
need to add more environment variables to the following list. For more information on 
your runtime speciﬁc instructions and examples on how to setup your application for your 
runtime, see AWS Distro for OpenTelemetry and go to your runtime, under Getting Started.
env: 
     - name: OTEL_PROPAGATORS 
      value: xray 
    - name: OTEL_METRICS_EXPORTER 
      value: none 
    - name: OTEL_EXPORTER_OTLP_ENDPOINT 
      value: http://localhost:4317   
    - name: OTEL_RESOURCE_ATTRIBUTES 
      value: 'service.name=example_app'
Note
OTEL_METRICS_EXPORTER=none  is an important environment variable for App Runner 
since the App Runner Otel collector doesn't accept metrics logging. It only accepts metrics 
tracing.
Runtime setup example
The following example demonstrates auto-instrumenting your application with the ADOT Python SDK. 
The SDK automatically produces spans with telemetry data describing the values used by the Python 
frameworks in your application without adding a single line of Python code. You need to add or modify 
just a few lines in two source ﬁles.
136AWS App Runner Developer Guide
Instrument your application for tracing
First, add some dependencies, as shown in the following example.
Example requirements.txt
opentelemetry-distro[otlp]>=0.24b0
opentelemetry-sdk-extension-aws~=2.0
opentelemetry-propagator-aws-xray~=1.0
Then, instrument your application. The way to do it depends on your service source—source image or 
source code.
Source image
When your service source is an image, you can directly instrument the Dockerﬁle that controls 
building your container image and running the application in the image. The following example 
shows an instrumented Dockerﬁle for a Python application. Instrumentation additions are 
emphasized in bold.
Example Dockerﬁle
FROM public.ecr.aws/amazonlinux/amazonlinux:latest
RUN yum install python3.7 -y && curl -O https://bootstrap.pypa.io/get-pip.py && python3 
 get-pip.py && yum update -y
COPY . /app
WORKDIR /app
RUN pip3 install -r requirements.txt
RUN opentelemetry-bootstrap --action=install
ENV OTEL_PYTHON_DISABLED_INSTRUMENTATIONS=urllib3
ENV OTEL_METRICS_EXPORTER=none               
ENV OTEL_RESOURCE_ATTRIBUTES='service.name=example_app'
CMD OTEL_PROPAGATORS=xray OTEL_PYTHON_ID_GENERATOR=xray opentelemetry-instrument
 python3 app.py
EXPOSE 8080
Source code repository
When your service source is a repository containing your application source, you indirectly 
instrument your image using App Runner conﬁguration ﬁle settings. These settings control the 
Dockerﬁle that App Runner generates and uses to build the image for your application. The 
following example shows an instrumented App Runner conﬁguration ﬁle for a Python application. 
Instrumentation additions are emphasized in bold.
Example apprunner.yaml
version: 1.0
runtime: python3  
build: 
  commands: 
    build: 
      - pip install -r requirements.txt 
       - opentelemetry-bootstrap --action=install
run:  
  command: opentelemetry-instrument  python app.py 
  network:  
    port: 8080  
  env: 
     - name: OTEL_PROPAGATORS 
      value: xray 
    - name: OTEL_METRICS_EXPORTER 
      value: none 
137AWS App Runner Developer Guide
Add X-Ray permissions to your 
App Runner service instance role
    - name: OTEL_PYTHON_ID_GENERATOR 
      value: xray   
    - name: OTEL_PYTHON_DISABLED_INSTRUMENTATIONS  
      value: urllib3 
    - name: OTEL_RESOURCE_ATTRIBUTES 
      value: 'service.name=example_app'
Add X-Ray permissions to your App Runner service 
instance role
To use X-Ray tracing with your App Runner service, you have to provide the service's instances 
with permissions to interact with the X-Ray service. You do this by associating an instance role 
with your service and adding a managed policy with X-Ray permissions. For more information 
about an App Runner instance role, see the section called “Instance role” (p. 172). Add the
AWSXRayDaemonWriteAccess  managed policy to your instance role and assign it to your service during 
creation.
Enable X-Ray tracing for your App Runner service
When you create a service (p. 64), App Runner disables tracing by default. You can enable X-Ray tracing 
for your service as part of conﬁguring observability. For more information, see the section called 
“Manage observability” (p. 81).
If you use the App Runner API or the AWS CLI, the TraceConﬁguration object within the
ObservabilityConﬁguration resource object contains tracing settings. To keep tracing disabled, don't 
specify a TraceConfiguration  object.
In both the console and API cases, be sure to associate your instance role discussed in the previous 
section with your App Runner service.
View X-Ray tracing data for your App Runner service
On the Observability tab of the service dashboard page (p. 62) in the App Runner console, choose View 
service map to navigate to the Amazon CloudWatch console.
Use the Amazon CloudWatch console to view service maps and traces for requests that your application 
serves. Service maps show information like request latency and interactions with other applications and 
AWS services. The custom annotations that you add to your code allow you to easily search for traces. 
For more information, see Using ServiceLens to monitor the health of your applications in the Amazon 
CloudWatch User Guide.
138AWS App Runner Developer Guide
Associating an AWS WAF web ACL 
with your service
AWS WAF is a web application ﬁrewall that you can use to secure your App Runner service. With AWS 
WAF web access control lists (web ACLs), you can guard your App Runner service endpoints against 
common web exploits and unwanted bots.
A web ACL provides you with ﬁne-grained control over all incoming web requests to your App Runner 
service. You can deﬁne rules in a web ACL to allow, block, or monitor web traﬃc, to ensure that only 
authorized and legitimate requests reach your web applications and APIs. You can customize the web 
ACL rules based on your speciﬁc business and security needs.
When an AWS WAF web ACL is associated with an App Runner service, incoming web requests go 
through the following process:
1.App Runner forwards the contents of the origin request to AWS WAF.
2.AWS WAF inspects the request and compares its contents to the rules that you speciﬁed in your web 
ACL.
3.Based on its inspection, AWS WAF returns an allow  or block response to App Runner.
•If an allow response is returned, App Runner forwards the request to your application.
•If a block response is returned, App Runner blocks the request from reaching your web application. 
It forwards the block response from AWS WAF to your application.
Note
By default App Runner blocks the request if no response is returned from AWS WAF.
For more information about AWS WAF web ACLs, see Web access control lists (web ACLs) in the AWS WAF 
Developer Guide .
Note
You pay standard AWS WAF pricing. You don't incur any additional costs for using AWS WAF web 
ACLs for your App Runner services.  
For more information about pricing, see 
AWS WAF Pricing.
The following is the high-level process to associate an AWS WAF web ACL with your App Runner service:
1.Create a web ACL in the AWS WAF console. For more information, see Creating a web ACL in the AWS 
WAF Developer Guide.
2.Update your AWS Identity and Access Management (IAM) permissions for AWS WAF. For more 
information, see Permissions (p. 140).
3.Associate the web ACL with the App Runner service using one of the following methods:
•App Runner console: Associate an existing web ACL using App Runner console when you
create (p. 64) or update  (p. 78) an App Runner service. For instructions, see Managing AWS WAF web 
ACLs (p. 141).
•AWS WAF console: Associate the web ACL using the AWS WAF console for an existing App Runner 
service. For more information, see Associating or disassociating a web ACL with an AWS resource in 
the AWS WAF Developer Guide.
•AWS CLI: Associate the web ACL using the AWS WAF public APIs. For more information about AWS 
WAF public APIs, see AssociateWebACL in the AWS WAF API Reference Guide.
139AWS App Runner Developer Guide
Considerations
Considerations
•An App Runner service can be associated with only one web ACL. However, you can associate one web 
ACL with multiple App Runner services and with multiple AWS resources. Examples include Amazon 
Cognito user pools and Application Load Balancer resources.
•When you create a web ACL, a small amount of time passes before the web ACL fully propagates and 
is available to App Runner. The propagation time can be from a few seconds to a number of minutes. 
AWS WAF returns a WAFUnavailableEntityException  when you try to associate a web ACL before 
it has fully propagated.
If you refresh the browser or navigate away from the App Runner console before the web ACL is fully 
propagated, the association fails to occur. However, you can navigate within the App Runner console.
•AWS WAF returns a WAFNonexistentItemException  error when you call one of the following AWS 
WAF APIs for an App Runner service which is in an invalid state:
•AssociateWebACL
•DisassociateWebACL
•GetWebACLForResource
The invalid states for your App Runner service include:
•CREATE_FAILED
•DELETE_FAILED
•DELETED
•OPERATION_IN_PROGRESS
Note
OPERATION_IN_PROGRESS  state is invalid only if your App Runner service is being deleted.
•Your request might result in a payload that is larger than the limits of what AWS WAF can inspect. 
For more information about how AWS WAF handles oversize requests from App Runner, see Oversize 
request component handling in the AWS WAF Developer Guide to learn how AWS WAF handles oversize 
requests from App Runner.
•If you don’t set appropriate rules or your traﬃc patterns change, a web ACL might not be as eﬀective 
at securing your application.
Permissions
To work with a web ACL in AWS App Runner, add the following IAM permissions for AWS WAF:
•apprunner:ListAssociatedServicesForWebAcl
•apprunner:DescribeWebAclForService
•apprunner:AssociateWebAcl
•apprunner:DisassociateWebAcl
For more information about IAM permissions, see Policies and permissions in IAM in the IAM User Guide .
The following is an example of the updated IAM policy for AWS WAF. This IAM policy includes the 
necessary permissions to work with an App Runner service.
Example
{ 
140AWS App Runner Developer Guide
Manage web ACLs
  { 
   "Version":"2012-10-17", 
   "Statement":[ 
      { 
         "Effect":"Allow", 
         "Action":[ 
            "wafv2:ListResourcesForWebACL", 
            "wafv2:GetWebACLForResource", 
            "wafv2:AssociateWebACL", 
            "wafv2:DisassociateWebACL", 
            "apprunner:ListAssociatedServicesForWebAcl", 
            "apprunner:DescribeWebAclForService", 
            "apprunner:AssociateWebAcl", 
            "apprunner:DisassociateWebAcl" 
         ], 
         "Resource":"*" 
      } 
   ]
}
Note
Though you must grant IAM permissions, the listed actions are permission-only and don't 
correspond to an API operation.
Managing AWS WAF web ACLs
Manage the AWS WAF web ACLs for your App Runner service by using one of the following methods:
•the section called “App Runner console” (p. 141)
•the section called “AWS CLI” (p. 143)
App Runner console
When you create a service (p. 64) or update an existing one  (p. 78) on the App Runner console, you can 
associate or disassociate an AWS WAF web ACL.
Note
•An App Runner service can be associated with only one web ACL. However, you can associate 
one web ACL with more than one App Runner service in addition to other AWS resources.
•Before you associate a web ACL, make sure to update your IAM permissions for AWS WAF. For 
more information, see Permissions (p. 140).
Associating AWS WAF web ACL
To associate an AWS WAF web ACL
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. Based on whether you're creating or updating a service, perform one of the following steps:
•If you're creating a new service, choose Create an App Runner service and go to Conﬁgure 
Service.
•If you're updating an existing service, choose the Conﬁguration  tab, and then choose Edit under
Conﬁgure service.
141AWS App Runner Developer Guide
App Runner console
3. Go to Web application ﬁrewall under Security.
4. Choose the Activate toggle button to view the options.
5. Perform one of the following steps:
•To associate an existing web ACL: Choose the required web ACL from the Choose a web ACL
table to associate with your App Runner service.
•To create a new web ACL: Choose Create web ACL to create a new web ACL using the AWS WAF 
console. For more information, see Creating a web ACL in the AWS WAF Developer Guide.
1.Choose the refresh button to view the newly created web ACL in the Choose a web ACL table.
2.Select the required web ACL.
6. Choose Next if you're creating a new service or Save changes if you're updating an existing service. 
The selected web ACL is associated with your App Runner service.
7. To verify the web ACL association, choose the Conﬁguration  tab of your service and go to Conﬁgure 
service. Scroll to Web application ﬁrewall under Security to view the details of the web ACL 
associated with your service.
Note
When you create a web ACL, a small amount of time passes before the web ACL fully 
propagates and is available to App Runner. The propagation time can be from a few 
seconds to a number of minutes. AWS WAF returns a WAFUnavailableEntityException
when you try to associate a web ACL before it has fully propagated.
142AWS App Runner Developer Guide
AWS CLI
If you refresh the browser or navigate away from the App Runner console before the web 
ACL is fully propagated, the association fails to occur. However, you can navigate within the 
App Runner console.
Disassociating an AWS WAF web ACL
You can disassociate AWS WAF web ACl that you no longer need by updating  (p. 78) your App Runner 
service.
To disassociate an AWS WAF web ACl
1. Open the App Runner console, and in the Regions list, select your AWS Region.
2. Go to Conﬁguration  tab of the service you want to update and choose Edit under Conﬁgure 
service.
3. Go to Web application ﬁrewall under Security.
4. Disable the Activate toggle button. You receive a message to conﬁrm the deletion.
5. Choose Conﬁrm . The web ACL is disassociated from your App Runner service.
Note
•If you want to associate your service with another web ACL, select a web ACL from the
Choose a web ACL table. App Runner disassociates the current web ACL and starts the 
process to associate with the selected web ACL.
•If no other App Runner services or resources use a disassociated web ACL, consider 
deleting the web ACL. Otherwise, you will continue to incur costs. For more information 
about pricing, see AWS WAF Pricing. For instruction on how to delete a web ACL, see
DeleteWebACL in the AWS WAF API Reference.
•You can't delete a web ACL that's associated with other active App Runner services or 
other resources.
AWS CLI
You can associate or disassociate an AWS WAF web ACL by using the AWS WAF public APIs. The App 
Runner service, with which you want to associate or disassociate a web ACL, must be in a valid state.
AWS WAF returns a WAFNonexistentItemException  error when you call one of the following AWS 
WAF APIs for an App Runner service which is in an invalid state:
•AssociateWebACL
•DisassociateWebACL
•GetWebACLForResource
The invalid states for your App Runner service include:
•CREATE_FAILED
•DELETE_FAILED
•DELETED
•OPERATION_IN_PROGRESS
Note
OPERATION_IN_PROGRESS  state is invalid only if your App Runner service is being deleted.
For more information about AWS WAF public APIs, see AWS WAF API Reference Guide.
143AWS App Runner Developer Guide
AWS CLI
Note
Update your IAM permissions for AWS WAF. For more information, see Permissions (p. 140).
Associating AWS WAF web ACL using AWS CLI
To associate an AWS WAF web ACL
1. Create an AWS WAF web ACL for your service with your preferred set of rule actions to Allow
or Block the web requests to your service. For more information about AWS WAF APIs, see
CreateWebACL in the AWS WAF API Reference Guide.
Example Create a web ACL - Request
aws wafv2
create-web-acl
--region <region>
--name <web-acl-name>
--scope REGIONAL
--default-action Allow={}
--visibility-config <file-name.json>
# This is the file containing the WAF web ACL rules.
2. Associate the web ACL that you created with the App Runner service using the associate-web-
acl AWS WAF public API. For more information about AWS WAF APIs, see AssociateWebACL in the
AWS WAF API Reference Guide.
Note
When you create a web ACL, a small amount of time passes before the web ACL fully 
propagates and is available to App Runner. The propagation time can be from a few 
seconds to a number of minutes. AWS WAF returns a WAFUnavailableEntityException
when you try to associate a web ACL before it has fully propagated.
If you refresh the browser or navigate away from the App Runner console before the web 
ACL is fully propagated, the association fails to occur. However, you can navigate within the 
App Runner console.
Example Associating a web ACL - Request
aws wafv2 associate-web-acl
--resource-arn <apprunner_service_arn>
--web-acl-arn <web_acl_arn>
--region <region>
3. Verify that the web ACL is associated with your App Runner service using the get-web-
acl-for-resource  AWS WAF public API. For more information about AWS WAF APIs, see
GetWebACLForResource in the AWS WAF API Reference Guide.
Example Verify web ACL for resource - Request
aws wafv2 get-web-acl-for-resource
--resource-arn <apprunner_service_arn>
--region <region>
If there are no web ACLs associated with your service, you receive a blank response.
Deleting an AWS WAF web ACL using AWS CLI
You can't delete an AWS WAF web ACL if it's associated with an App Runner service.
144AWS App Runner Developer Guide
AWS CLI
To delete an AWS WAF web ACL
1. Disassociate the web ACL from your App Runner service by using the disassociate-web-acl  AWS 
WAF public API. For more information about AWS WAF APIs, see DisassociateWebACL in the AWS 
WAF API Reference Guide.
Example Disassociating a web ACL - Request
aws wafv2 disassociate-web-acl
--resource-arn <apprunner_service_arn>
--region <region>
2. Verify that the web ACL is disassociated from your App Runner service using the get-web-acl-
for-resource  AWS WAF public API.
Example Verify that the web ACL is disassociated - Request
aws wafv2 get-web-acl-for-resource
--resource-arn <apprunner_service_arn>
--region <region>
The disassociated web ACL isn't listed for your App Runner service. If there are no web ACLs 
associated with your service, you receive a blank response.
3. Delete the disassociated web ACL using the delete-web-acl  AWS WAF public API. For more 
information about AWS WAF APIs, see DeleteWebACL in the AWS WAF API Reference Guide.
Example Delete a web ACL - Request
aws wafv2 delete-web-acl
--name <web_acl_name>
--scope REGIONAL
--id <web_acl_id>
--lock-token <web_acl_lock_token>
--region <region>
4. Verify that the web ACL is deleted using the list-web-acl  AWS WAF public API. For more 
information about AWS WAF APIs, see ListWebACLs in the AWS WAF API Reference Guide.
Example Verify that the web ACL is deleted - Request
aws wafv2 list-web-acls  
--scope REGIONAL
--region <region>
The deleted web ACL is no longer be listed.
Note
If a web ACL is associated with other active App Runner services or other resources, such as 
Amazon Cognito user pools, the web ACL can't be deleted.
Listing App Runner services that are associated with a web ACL
A web ACL can be associated with multiple App Runner services and other resources. List the App Runner 
services associated with a web ACL using the list-resources-for-web-acl  AWS WAF public API. 
For more information about AWS WAF APIs, see ListResourcesForWebACL in the AWS WAF API Reference 
Guide .
145AWS App Runner Developer Guide
Testing and logging AWS WAF web ACLs
Example List App Runner services associated with a web ACL - Request
aws wafv2 list-resources-for-web-acl
--web-acl-arn <WEB_ACL_ARN>
--resource-type APP_RUNNER_SERVICE
--region <REGION> 
           
Example List App Runner services associated with a web ACL - Response
The following example illustrates the response when there are no App Runner services that are 
associated with a web ACL.
{ 
  "ResourceArns": []
}
Example List App Runner services associated with a web ACL - Response
The following example illustrates the response when there are App Runner services that are associated 
with a web ACL.
{ 
  "ResourceArns": [ 
    "arn:aws:apprunner:<region>:<aws_account_id>:service/<service_name>/<service_id>" 
  ]
}
Testing and logging AWS WAF web ACLs
When you set a rule action to Count  in your web ACL, AWS WAF adds the request to a count of requests 
that match the rule. To test a web ACL with your App Runner service, set rule actions to Count  and 
consider the volume of requests that match each rule. For example, you set a rule for the Block action 
that matches a large number of requests that you determine to be normal user traﬃc. In that case, 
you might need to reconﬁgure your rule. For more information, see Testing and tuning your AWS WAF 
protections in the AWS WAF Developer Guide.
You can also conﬁgure AWS WAF to log request headers to an Amazon CloudWatch Logs log group, an 
Amazon Simple Storage Service (Amazon S3) bucket, or an Amazon Kinesis Data Firehose. For more 
information, see Logging web ACL traﬃc in the AWS WAF Developer Guide.
To access logs related to the web ACL that's associated with your App Runner service, refer to the 
following log ﬁelds:
•httpSourceName : Contains APPRUNNER
•httpSourceId : Contains customeraccountid-apprunnerserviceid
For more information, see Log Examples  in the AWS WAF Developer Guide.
146AWS App Runner Developer Guide
Examples
Setting App Runner service options 
using a conﬁguration ﬁle
Note
Conﬁguration ﬁles are applicable only to services that are based on source code (p. 26). You 
can't use conﬁguration ﬁles with image-based services (p. 23).
When you create an AWS App Runner service using a source code repository, AWS App Runner requires 
information about building and starting your service. You can provide this information each time you 
create a service using the App Runner console or API. Alternatively, you can set service options by using 
a conﬁguration ﬁle . The options that you specify in a ﬁle become part of your source repository, and any 
changes to these options are tracked similarly to how changes to the source code are tracked. You can 
use the App Runner conﬁguration ﬁle to specify more options than the API supports. You don't need to 
provide a conﬁguration ﬁle if you only need the basic options that the API supports.
The App Runner conﬁguration ﬁle is a YAML ﬁle that's named apprunner.yaml  in the root directory 
of your application’s repository. It provides build and runtime options for your service. Values in this ﬁle 
instruct App Runner how to build and start your service, and provide runtime context such as network 
settings and environment variables.
The App Runner conﬁguration ﬁle doesn’t include operational settings, such as CPU and memory.
For examples of App Runner conﬁguration ﬁles, see the section called “Examples” (p. 147). For a 
complete reference guide, see the section called “Reference” (p. 148).
Topics
•App Runner conﬁguration ﬁle examples (p. 147)
•App Runner conﬁguration ﬁle reference (p. 148)
App Runner conﬁguration ﬁle examples
Note
Conﬁguration ﬁles are applicable only to services that are based on source code (p. 26). You 
can't use conﬁguration ﬁles with image-based services (p. 23).
The following examples demonstrate AWS App Runner conﬁguration ﬁles. Some are minimal and 
contain only required settings. Others are complete, including all conﬁguration ﬁle sections. For an 
overview of App Runner conﬁguration ﬁles, see App Runner conﬁguration ﬁle  (p. 147).
Conﬁguration ﬁle examples
Minimal conﬁguration ﬁle
With a minimal conﬁguration ﬁle, App Runner makes the following assumptions:
•No custom environment variables are necessary during build or run.
•The latest runtime version is used.
•The default port number and port environment variable are used.
147AWS App Runner Developer Guide
Reference
Example apprunner.yaml
version: 1.0
runtime: python3  
build: 
  commands: 
    build: 
      - pip install pipenv 
      - pipenv install  
run:  
  command: python app.py
Complete conﬁguration ﬁle
This example shows the use of all conﬁguration keys with a managed runtime.
Example apprunner.yaml
version: 1.0
runtime: python3  
build: 
  commands: 
    pre-build: 
      - wget -c https://s3.amazonaws.com/ DOC-EXAMPLE-BUCKET /test-lib.tar.gz -O - | tar -xz 
    build:         
      - pip install pipenv 
      - pipenv install 
    post-build: 
      - python manage.py test 
  env: 
    - name: DJANGO_SETTINGS_MODULE 
      value: "django_apprunner.settings" 
    - name: MY_VAR_EXAMPLE 
      value: "example"
run: 
  runtime-version: 3.7.7
  command: pipenv run gunicorn django_apprunner.wsgi --log-file - 
  network:  
    port: 8000 
    env: MY_APP_PORT   
  env: 
    - name: MY_VAR_EXAMPLE 
      value: "example" 
  secrets: 
    - name: my-secret 
      value-from: "arn:aws:secretsmanager:us-
east-1:123456789012:secret:testingstackAppRunnerConstr-kJFXde2ULKbT-S7t8xR:username::" 
    - name: my-parameter 
      value-from: "arn:aws:ssm:us-east-1:123456789012:parameter/parameter-name" 
    - name: my-parameter-only-name 
      value-from: "parameter-name"
For examples of speciﬁc managed runtime conﬁguration ﬁles, see the speciﬁc runtime subtopic under
Code-based service (p. 26).
App Runner conﬁguration ﬁle reference
Note
Conﬁguration ﬁles are applicable only to services that are based on source code (p. 26). You 
can't use conﬁguration ﬁles with image-based services (p. 23).
148AWS App Runner Developer Guide
Structure overview
This topic is a comprehensive reference guide to the syntax and semantics of an AWS App Runner 
conﬁguration ﬁle. For an overview of App Runner conﬁguration ﬁles, see App Runner conﬁguration 
ﬁle (p. 147).
The App Runner conﬁguration ﬁle is a YAML ﬁle. Name it apprunner.yaml , and place it in the root 
directory of your application’s repository.
Structure overview
The App Runner conﬁguration ﬁle is a YAML ﬁle. Name it apprunner.yaml , and place it in the root 
directory of your application’s repository.
The App Runner conﬁguration ﬁle contains these main parts:
•Top section – Contains top-level keys
•Build section  – Conﬁgures the build stage
•Run section  – Conﬁgures the runtime stage
Top section
The keys at the top of the ﬁle provide general information about the ﬁle and your service runtime. The 
following keys are available:
•version  – Required. The App Runner conﬁguration ﬁle version. Ideally, use the latest version.
Syntax
version: version
Example
version: 1.0
•runtime  – Required. The name of the runtime that your application uses. To learn about available 
runtimes for the diﬀerent programming platforms that App Runner oﬀers, see Code-based 
service (p. 26).
Note
The naming convention of a managed runtime is <language-name><major-version> .
Syntax
runtime:  runtime-name
Example
runtime:  python3
Build section
The build section conﬁgures the build stage of the App Runner service deployment. You can specify build 
commands and environment variables. Build commands are required.
149AWS App Runner Developer Guide
Build section
The section starts with the build: key, and has the following subkeys:
•commands  – Required. Speciﬁes the commands that App Runner runs during various build phases. 
Includes the following subkeys:
•pre-build  – Optional.  The commands that App Runner runs before the build. For example, install
npm  dependencies or test libraries.
•build  – Required. The commands that App Runner runs to build your application. For example, use
pipenv.
•post-build  – Optional.  The commands that App Runner runs after the build. For example, use 
Maven to package build artifacts into a JAR or WAR ﬁle, or run a test.
Syntax
build: 
   commands:
    pre-build:
      - command
      - …
    build:
      - command
      - …
    post-build:
      - command
      - …
Example
build: 
   commands:
    pre-build:
      - yum install openssl 
     build:
      - pip install -r requirements.txt 
     post-build:
      - python manage.py test
•env – Optional.  Speciﬁes custom environment variables for the build stage. Deﬁned as name-value 
scalar mappings. You can refer to these variables by name in your build commands.
Syntax
build: 
   env:
    - name: name1
      value: value1
    - name: name2
      value: value2
    - …
Example
build: 
   env:
    - name: DJANGO_SETTINGS_MODULE 
      value: "django_apprunner.settings" 
    - name: MY_VAR_EXAMPLE 
      value: "example"
150AWS App Runner Developer Guide
Run section
Run section
The run section conﬁgures the container running stage of the App Runner application deployment. You 
can specify runtime version, start command, network port, and environment variables.
The section starts with the run: key, and has the following subkeys:
•runtime-version  – Optional.  Speciﬁes a runtime version that you want to lock for your App Runner 
service.
By default, only the major version is locked. App Runner uses the latest minor and patch versions that 
are available for the runtime on every deployment or service update. If you specify major and minor 
versions, both become locked, and App Runner updates only patch versions. If you specify major, 
minor, and patch versions, your service is locked on a speciﬁc runtime version and App Runner never 
updates it.
Syntax
run: 
   runtime-version:  major[.minor[.patch]]
Note
The runtimes of some platforms have diﬀerent version components. See speciﬁc platform 
topics for details.
Example
runtime: python3
run: 
   runtime-version:  3.7
•command  – Required. The command that App Runner uses to run your application after it completes 
the application build.
Syntax
run: 
   command:  command
•network  – Optional.  Speciﬁes the port that your application listens to. It includes the following:
•port  – Optional.  If speciﬁed, this is the port number that your application listens to. The default is
8080 .
•env – Optional.  If speciﬁed, App Runner passes the port number to the container in this environment 
variable, in addition to (not instead of) passing the same port number in the default environment 
variable, PORT. In other words, if you specify env, App Runner passes the port number in two 
environment variables.
Syntax
run: 
   network:
    port: port-number
    env: env-variable-name
151AWS App Runner Developer Guide
Run section
Example
run: 
   network:
    port: 8000 
     env: MY_APP_PORT
•env – Optional.  Deﬁnition of custom environment variables for the run stage. Deﬁned as name-value 
scalar mappings. You can refer to these variables by name in your runtime environment.
Syntax
run: 
   env:
    - name: name1
      value: value1
    - name: name2
      value: value2   
  secrets:
    - name: name1
      value-from: arn:aws:secretsmanager:region:aws_account_id:secret:secret-id
    - name: name2
      value-from: arn:aws:ssm:region:aws_account_id:parameter/parameter-name
    - …
Example
run: 
   env:
    - name: MY_VAR_EXAMPLE 
      value: "example" 
   secrets:
    - name: my-secret 
      value-from: "arn:aws:secretsmanager:us-
east-1:123456789012:secret:testingstackAppRunnerConstr-kJFXde2ULKbT-S7t8xR:username::" 
    - name: my-parameter 
      value-from: "arn:aws:ssm:us-east-1:123456789012:parameter/parameter-name" 
    - name: my-parameter-only-name 
      value-from: "parameter-name"
152AWS App Runner Developer Guide
Using the AWS CLI to work with App Runner
The App Runner API
The AWS App Runner application programming interface (API) is a RESTful API for making requests to 
the App Runner service. You can use the API to create, list, describe, update, and delete App Runner 
resources in your AWS account.
You can call the API directly in your application code, or you can use one of the AWS SDKs.
For complete API reference information, see the AWS App Runner API Reference.
For more information about AWS developer tools, see Tools to Build on AWS.
Topics
•Using the AWS CLI to work with App Runner (p. 153)
•Using AWS CloudShell to work with AWS App Runner (p. 153)
Using the AWS CLI to work with App Runner
For command line scripts, use the AWS CLI to make calls to the App Runner service. For complete AWS 
CLI reference information, see the apprunner  in the AWS CLI Command Reference.
AWS CloudShell allows you to skip installing the AWS CLI in your development environment, and use 
it in the AWS Management Console instead. In addition to avoiding installation, you also don't need to 
conﬁgure credentials, and you don't need to specify region. Your AWS Management Console session 
provides this context to the AWS CLI. For more information about CloudShell, and for a usage example, 
see the section called “Using AWS CloudShell” (p. 153).
Using AWS CloudShell to work with AWS App 
Runner
AWS CloudShell is a browser-based, pre-authenticated shell that you can launch directly from the 
AWS Management Console. You can run AWS CLI commands against AWS services (including AWS App 
Runner) using your preferred shell (Bash, PowerShell or Z shell). And you can do this without needing to 
download or install command line tools.
You launch AWS CloudShell from the AWS Management Console, and the AWS credentials you used to 
sign in to the console are automatically available in a new shell session. This pre-authentication of AWS 
CloudShell users allows you to skip conﬁguring credentials when interacting with AWS services such as 
App Runner using AWS CLI version 2 (pre-installed on the shell's compute environment).
Topics
•Obtaining IAM permissions for AWS CloudShell (p. 154)
•Interacting with App Runner using AWS CloudShell (p. 154)
•Verifying your App Runner service using AWS CloudShell (p. 156)
153AWS App Runner Developer Guide
Obtaining IAM permissions for AWS CloudShell
Obtaining IAM permissions for AWS CloudShell
Using the access management resources provided by AWS Identity and Access Management, 
administrators can grant permissions to IAM users so they can access AWS CloudShell and use the 
environment's features.
The quickest way for an administrator to grant access to users is through an AWS managed policy. An
AWS managed policy is a standalone policy that's created and administered by AWS. The following AWS 
managed policy for CloudShell can be attached to IAM identities:
•AWSCloudShellFullAccess : Grants permission to use AWS CloudShell with full access to all 
features.
If you want to limit the scope of actions that an IAM user can perform with AWS CloudShell, you can 
create a custom policy that uses the AWSCloudShellFullAccess  managed policy as a template. For 
more information about limiting the actions that are available to users in CloudShell, see Managing AWS 
CloudShell access and usage with IAM policies in the AWS CloudShell User Guide.
Note
Your IAM identity also requires a policy that grants permission to make calls to App Runner. For 
more information, see the section called “App Runner and IAM” (p. 167).
Interacting with App Runner using AWS CloudShell
After you launch AWS CloudShell from the AWS Management Console, you can immediately start to 
interact with App Runner using the command line interface.
In the following example, you retrieve information about one of your App Runner services using the AWS 
CLI in CloudShell.
Note
When using AWS CLI in AWS CloudShell, you don't need to download or install any additional 
resources. Moreover, because you're already authenticated within the shell, you don't need to 
conﬁgure credentials before making calls.
Example Retrieving App Runner service information using AWS CloudShell
1. From the AWS Management Console, you can launch CloudShell by choosing the following options 
available on the navigation bar:
•Choose the CloudShell icon.
•Start typing cloudshell  in the search box, and then choose the CloudShell option when you see 
it in the search results.
2. To list all current App Runner services in your AWS account in the console session's AWS Region, 
enter the following command in the CloudShell command line:
$ aws apprunner list-services
The output lists summary information for your services.
{ 
  "ServiceSummaryList": [ 
    { 
      "ServiceName": "my-app-1", 
      "ServiceId": "8fe1e10304f84fd2b0df550fe98a71fa", 
      "ServiceArn": "arn:aws:apprunner:us-east-2:123456789012:service/my-
app-1/8fe1e10304f84fd2b0df550fe98a71fa", 
154AWS App Runner Developer Guide
Interacting with App Runner using AWS CloudShell
      "ServiceUrl": "psbqam834h.us-east-1.awsapprunner.com", 
      "CreatedAt": "2020-11-20T19:05:25Z", 
      "UpdatedAt": "2020-11-23T12:41:37Z", 
      "Status": "RUNNING" 
    }, 
    { 
      "ServiceName": "my-app-2", 
      "ServiceId": "ab8f94cfe29a460fb8760afd2ee87555", 
      "ServiceArn": "arn:aws:apprunner:us-east-2:123456789012:service/my-app-2/
ab8f94cfe29a460fb8760afd2ee87555", 
      "ServiceUrl": "e2m8rrrx33.us-east-1.awsapprunner.com", 
      "CreatedAt": "2020-11-06T23:15:30Z", 
      "UpdatedAt": "2020-11-23T13:21:22Z", 
      "Status": "RUNNING" 
    } 
  ]
}
3. To get a detailed description of a particular App Runner service, enter the following command in the 
CloudShell command line, using one of the ARNs retrieved in the previous step:
$ aws apprunner describe-service --service-arn arn:aws:apprunner:us-
east-2:123456789012:service/my-app-1/8fe1e10304f84fd2b0df550fe98a71fa
The output lists a detailed description of the service you speciﬁed.
{ 
  "Service": { 
    "ServiceName": "my-app-1", 
    "ServiceId": "8fe1e10304f84fd2b0df550fe98a71fa", 
    "ServiceArn": "arn:aws:apprunner:us-east-2:123456789012:service/my-
app-1/8fe1e10304f84fd2b0df550fe98a71fa", 
    "ServiceUrl": "psbqam834h.us-east-1.awsapprunner.com", 
    "CreatedAt": "2020-11-20T19:05:25Z", 
    "UpdatedAt": "2020-11-23T12:41:37Z", 
    "Status": "RUNNING", 
    "SourceConfiguration": { 
      "CodeRepository": { 
        "RepositoryUrl": "https://github.com/my-account/python-hello", 
        "SourceCodeVersion": { 
          "Type": "BRANCH", 
          "Value": "main" 
        }, 
        "CodeConfiguration": { 
          "CodeConfigurationValues": { 
            "BuildCommand": "[pip install -r requirements.txt]", 
            "Port": "8080", 
            "Runtime": "PYTHON_3", 
            "RuntimeEnvironmentVariables": [ 
              { 
                "NAME": "Jane" 
              } 
            ], 
            "StartCommand": "python server.py" 
          }, 
          "ConfigurationSource": "API" 
        } 
      }, 
      "AutoDeploymentsEnabled": true, 
      "AuthenticationConfiguration": { 
        "ConnectionArn": "arn:aws:apprunner:us-east-2:123456789012:connection/my-
github-connection/e7656250f67242d7819feade6800f59e" 
      } 
155AWS App Runner Developer Guide
Verifying your App Runner service using AWS CloudShell
    }, 
    "InstanceConfiguration": { 
      "CPU": "1 vCPU", 
      "Memory": "3 GB" 
    }, 
    "HealthCheckConfiguration": { 
      "Protocol": "TCP", 
      "Path": "/", 
      "Interval": 10, 
      "Timeout": 5, 
      "HealthyThreshold": 1, 
      "UnhealthyThreshold": 5 
    }, 
    "AutoScalingConfigurationSummary": { 
      "AutoScalingConfigurationArn": "arn:aws:apprunner:us-
east-2:123456789012:autoscalingconfiguration/
DefaultConfiguration/1/00000000000000000000000000000001", 
      "AutoScalingConfigurationName": "DefaultConfiguration", 
      "AutoScalingConfigurationRevision": 1 
    } 
  }
}
Verifying your App Runner service using AWS 
CloudShell
When you create an App Runner service (p. 64), App Runner creates a default domain for your service's 
website, and shows it in the console (or returns it in the API call result). You can use CloudShell to make 
calls to your website and verify that it's working correctly.
For example, after you create an App Runner service as described in Getting started (p. 6), run the 
following command in CloudShell:
$ curl https://qxuadi4qwp.us-east-2.awsapprunner.com/; echo
The output should show the expected page content.
156AWS App Runner Developer Guide
Failed to create service
Troubleshooting
This chapter provides troubleshooting steps for common errors and issues that you might encounter 
while using your AWS App Runner service. The error messages can appear on the console, API, or the 
Logs tab of your service page.
For more troubleshooting advice and answers to common support questions, visit the Knowledge Center.
Topics
•When the service fails to create (p. 157)
•Custom domain names  (p. 158)
•HTTP/HTTPS request routing error (p. 160)
When the service fails to create
If your attempt to create an App Runner service fails, the service enters a CREATE_FAILED  status. This 
status appears as Create failed on the console. A service might fail to create because of issues that are 
related to one or more of the following:
•Your application code
•The build process
•Conﬁguration
•Resource quotas
•Temporary issues with the underlying AWS services that your service uses
To troubleshoot a service failing to create, we recommend that you do the following.
1.Read the service events and logs to ﬁnd out what caused the service to fail to create.
2.Make any necessary changes to your code or conﬁguration.
3.If you reached your service quota, delete one or more services.
4.If you reached another resource quota, you might be able to increase it if it's adjustable.
5.Try rebuilding the service again after completing all of the above steps. For information on how to 
rebuild your service, see the section called “Rebuild failed service” (p. 74).
Note
One of the adjustable resource quotas that might be causing an issue is the Fargate On-
Demand  vCPU resource.
The vCPU resource count determines the number of instances that App Runner can provide 
to your service. This is an adjustable quota value for the Fargate On-Demand vCPU resource 
count that resides in the AWS Fargate (Fargate) service. To view the vCPU quota settings 
for your account or to request a quota increase, use the Service Quotas console in the AWS 
Management Console. For more information, see AWS Fargate service quotas in the Amazon 
Elastic Container Service Developer Guide.
Important
You don't incur any additional charges beyond the initial creation attempt for a failed service. 
Even though the failed service isn't usable, it still counts towards your service quota. App Runner 
157AWS App Runner Developer Guide
Custom domain names
doesn't automatically delete the failed service, so make sure that you delete it when you're done 
analyzing the failure.
Custom domain names
This section covers how you can troubleshoot and resolve various errors that you might run into while 
linking to a custom domain.
Getting Create Fail error for custom domain
•Check if this error is because of an issue with the CAA records. If there are no CAA records anywhere 
in the DNS tree, you receive a message fail open , and ACM issues a certiﬁcate to verify the custom 
domain. This allows App Runner to accept the custom domain. If you're using CAA certiﬁcations in the 
DNS records, make sure that at least one domain's CAA records include amazon.com . Otherwise, ACM 
fails to issue a certiﬁcate. As a result, the custom domain for App Runner fails to be created.
The following example uses the DNS lookup tool DiG to show CAA records missing a required entry. 
The example uses example.com  as the custom domain. Run the following commands in the example 
to check the CAA records.
...
;; QUESTION SECTION:
;example.com.           IN  CAA
;; ANSWER SECTION:
example.com.        7200    IN  CAA 0 iodef "mailto:hostmaster@example.com"
example.com.        7200    IN  CAA 0 issue "letsencrypt.org"
...note absence of "amazon.com" in any of the above CAA records...
•Correct the domain records and ensure that at least one CAA record includes amazon.com .
•Retry to link the custom domain with App Runner.
For instructions on how to resolve CAA errors, see the following:
•Certiﬁcation Authority Authorization (CAA) problems
•How do I resolve CAA errors for issuing or renewing an ACM certiﬁcate?
Getting DNS certiﬁcate validation pending error for 
custom domain
•Check if you skipped an important step in the custom domain setup. Additionally check if you 
incorrectly conﬁgured a DNS record using a DNS lookup tool such as DiG. In particular, check for the 
following mistakes:
•Any missed steps.
•Unsupported characters such as double quotations in the DNS records.
•Correct the mistakes.
•Retry to link the custom domain with App Runner.
For instructions on how to resolve CAA validation errors, see the following.
158AWS App Runner Developer Guide
Basic troubleshooting commands
•DNS Validation
•the section called “Custom domain names” (p. 87)
Basic troubleshooting commands
•Conﬁrm that a service can be found.
          aws apprunner list-services 
         
•Describe a service and check its status.
          aws apprunner describe-service --service-arn 
         
•Check status of custom domain.
          aws apprunner describe-custom-domains --service-arn 
         
•List all operations in progress.
          aws apprunner list-operations --service-arn 
         
Custom domain certiﬁcate renewal
When you add a custom domain to your service, App Runner provides you with a set of CNAME records 
that you add to your DNS server. These CNAME records include certiﬁcate records. App Runner uses 
AWS Certiﬁcate Manager (ACM) to verify the domain. App Runner validates these DNS records to ensure 
continued ownership of this domain. If you remove the CNAME records from your DNS zone, App Runner 
can no longer validate the DNS records, and the custom domain certiﬁcate fails to renew automatically.
This section covers how to resolve the following custom domain certiﬁcate renewal issues:
•the section called “The CNAME is removed from the DNS server” (p. 159).
•the section called “The certiﬁcate has expired” (p. 160).
The CNAME is removed from the DNS server
•Retrieve your CNAME records using the DescribeCustomDomains  API or from the Custom 
Domain  settings in the App Runner console. For information about stored CNAMEs, see
CertiﬁcateValidationRecords.
•Add the certiﬁcate validation CNAME records to your DNS server. App Runner can then validate 
that you own the domain. After you add the CNAME records, it can take up to 30 minutes for the 
DNS records to be propagated. It can also take several hours for App Runner and ACM to retry the 
certiﬁcate renewal process. For instructions on how to add CNAME records, see the section called 
“Manage custom domains” (p. 89).
159AWS App Runner Developer Guide
Request routing error
The certiﬁcate has expired
•Disassociate (unlink) and then associate (link) the custom domain for your App Runner service using 
the App Runner console or API. App Runner creates a new certiﬁcate validation CNAME records.
•Add the new certiﬁcate validation CNAME records to your DNS server.
For instructions on how to disassociate (unlink) and associate (link) the custom domain, see the section 
called “Manage custom domains” (p. 89).
How do I verify that the certiﬁcate was successfully renewed
You can check the status of your certiﬁcate records to verify your certiﬁcate was successfully renewed. 
You can check the status of the certiﬁcates by using tools like curl.
For more information about certiﬁcate renewal, see the following links:
•Why is my ACM certiﬁcate marked as ineligible for renewal?
•Managed renewal for ACM certiﬁcates
•DNS validation
HTTP/HTTPS request routing error
This section covers how you can troubleshoot and resolve errors that you might run into when routing 
HTTP/HTTPS traﬃc to your App Runner service endpoints.
404 Not found error when sending HTTP/HTTPS 
traﬃc to App Runner service endpoints
•Verify that the Host Header  is pointing to the service URL in the HTTP request as App Runner 
uses the host header information to route requests. Most clients, like cURL, and web browsers 
automatically point the host header to the service URL. If your client doesn't set the service URL as the
Host Header , you receive a 404 Not Found  error.
Example Incorrect host header
$ ~ curl -I -H "host: foobar.com" https://testservice.awsapprunner.com/
HTTP/1.1 404 Not Found
transfer-encoding: chunked
Example Correct host header
$ ~ curl -I -H "host: testservice.awsapprunner.com" https://testservice.awsapprunner.com/
HTTP/1.1 200 OK
content-length: 11772
content-type: text/html; charset=utf-8
•Verify that your client is correctly setting the server name indicator (SNI) for requests routing to public 
or private services. For TLS termination and request routing, App Runner uses the SNI set in HTTPS 
connection.
160AWS App Runner Developer Guide
Data protection
Security in App Runner
Cloud security at AWS is the highest priority. As an AWS customer, you beneﬁt from data centers 
and network architectures that are built to meet the requirements of the most security-sensitive 
organizations.
Security is a shared responsibility between AWS and you. The shared responsibility model describes this 
as security of the cloud and security in the cloud:
•Security of the cloud – AWS is responsible for protecting the infrastructure that runs AWS services in 
the AWS Cloud. AWS also provides you with services that you can use securely. Third-party auditors 
regularly test and verify the eﬀectiveness of our security as part of the AWS Compliance Programs. To 
learn about the compliance programs that apply to AWS App Runner, see AWS Services in Scope by 
Compliance Program.
•Security in the cloud – Your responsibility is determined by the AWS service that you use. You are also 
responsible for other factors including the sensitivity of your data, your company’s requirements, and 
applicable laws and regulations.
This documentation helps you understand how to apply the shared responsibility model when using 
App Runner. The following topics show you how to conﬁgure App Runner to meet your security and 
compliance objectives. You also learn how to use other AWS services that help you to monitor and secure 
your App Runner resources.
Topics
•Data protection in App Runner (p. 161)
•Identity and access management for App Runner (p. 163)
•Logging and monitoring in App Runner  (p. 183)
•Compliance validation for App Runner (p. 184)
•Resilience in App Runner (p. 184)
•Infrastructure security in AWS App Runner (p. 185)
•Using App Runner with VPC endpoints  (p. 185)
•Conﬁguration and vulnerability analysis in App Runner (p. 186)
•Security best practices for App Runner (p. 186)
Data protection in App Runner
The AWS shared responsibility model applies to data protection in AWS App Runner. As described in 
this model, AWS is responsible for protecting the global infrastructure that runs all of the AWS Cloud. 
You are responsible for maintaining control over your content that is hosted on this infrastructure. This 
content includes the security conﬁguration and management tasks for the AWS services that you use. For 
more information about data privacy, see the Data Privacy FAQ. For information about data protection in 
Europe, see the AWS Shared Responsibility Model and GDPR blog post on the AWS Security Blog.
For data protection purposes, we recommend that you protect AWS account credentials and set up 
individual users with AWS IAM Identity Center (successor to AWS Single Sign-On) or AWS Identity and 
Access Management (IAM). That way, each user is given only the permissions necessary to fulﬁll their job 
duties. We also recommend that you secure your data in the following ways:
•Use multi-factor authentication (MFA) with each account.
•Use SSL/TLS to communicate with AWS resources. We require TLS 1.2 and recommend TLS 1.3.
161AWS App Runner Developer Guide
Data encryption
•Set up API and user activity logging with AWS CloudTrail.
•Use AWS encryption solutions, along with all default security controls within AWS services.
•Use advanced managed security services such as Amazon Macie, which assists in discovering and 
securing sensitive data that is stored in Amazon S3.
•If you require FIPS 140-2 validated cryptographic modules when accessing AWS through a command 
line interface or an API, use a FIPS endpoint. For more information about the available FIPS endpoints, 
see Federal Information Processing Standard (FIPS) 140-2.
We strongly recommend that you never put conﬁdential or sensitive information, such as your 
customers' email addresses, into tags or free-form text ﬁelds such as a Name  ﬁeld. This includes when 
you work with App Runner or other AWS services using the console, API, AWS CLI, or AWS SDKs. Any data 
that you enter into tags or free-form text ﬁelds used for names may be used for billing or diagnostic 
logs. If you provide a URL to an external server, we strongly recommend that you do not include 
credentials information in the URL to validate your request to that server.
For other App Runner security topics, see Security  (p. 161).
Topics
•Protecting data using encryption (p. 162)
•Internetwork traﬃc privacy (p. 163)
Protecting data using encryption
AWS App Runner reads your application source (source image or source code) from a repository that 
you specify and stores it for deployment to your service. For more information, see Architecture and 
concepts  (p. 18).
Data protection refers to protecting data while in transit  (as it travels to and from App Runner) and at 
rest (while it is stored in AWS data centers).
For more information about data protection, see the section called “Data protection” (p. 161).
For other App Runner security topics, see Security  (p. 161).
Encryption in transit
You can achieve data protection in transit in two ways: encrypt the connection using Transport Layer 
Security (TLS), or use client-side encryption (where the object is encrypted before it is sent). Both 
methods are valid for protecting your application data. To secure the connection, encrypt it using TLS 
whenever your application, its developers and administrators, and its end users send or receive any 
objects. App Runner sets up your application to receive traﬃc over TLS.
Client-side encryption isn't a valid method for protecting the source image or code that you provide 
to App Runner for deployment. App Runner needs access to your application source, so it can't be 
encrypted. Therefore, be sure to secure the connection between your development or deployment 
environment and App Runner.
Encryption at rest and key management
To protect your application's data at rest, App Runner encrypts all stored copies of your application 
source image or source bundle. When you create an App Runner service, you can provide an AWS KMS 
key. If you provide one, App Runner uses your provided key to encrypt your source. If you don't provide 
one, App Runner uses an AWS managed key instead.
For details about App Runner service creation parameters, see CreateService. For information about AWS 
Key Management Service (AWS KMS), see the AWS Key Management Service Developer Guide.
162AWS App Runner Developer Guide
Internetwork privacy
Internetwork traﬃc privacy
App Runner uses Amazon Virtual Private Cloud (Amazon VPC) to create boundaries between resources 
in your App Runner application and control traﬃc between them, your on-premises network, and the 
internet. For more information about Amazon VPC security, see Internetwork traﬃc privacy in Amazon 
VPC in the Amazon VPC User Guide .
For information about associating your App Runner application with a custom Amazon VPC, see the 
section called “Outgoing traﬃc” (p. 114).
For information about securing requests to App Runner using a VPC endpoint, see the section called 
“VPC endpoints” (p. 185).
For more information about data protection, see the section called “Data protection” (p. 161).
For other App Runner security topics, see Security  (p. 161).
Identity and access management for App Runner
AWS Identity and Access Management (IAM) is an AWS service that helps an administrator securely 
control access to AWS resources. IAM administrators control who can be authenticated  (signed in) and
authorized  (have permissions) to use App Runner resources. IAM is an AWS service that you can use with 
no additional charge.
For other App Runner security topics, see Security  (p. 161).
Topics
•Audience (p. 163)
•Authenticating with identities  (p. 164)
•Managing access using policies (p. 166)
•How App Runner works with IAM (p. 167)
•App Runner identity-based policy examples (p. 173)
•Using service-linked roles for App Runner (p. 176)
•AWS managed policies for AWS App Runner (p. 181)
•Troubleshooting App Runner identity and access (p. 182)
Audience
How you use AWS Identity and Access Management (IAM) diﬀers, depending on the work that you do in 
App Runner.
Service user – If you use the App Runner service to do your job, then your administrator provides you 
with the credentials and permissions that you need. As you use more App Runner features to do your 
work, you might need additional permissions. Understanding how access is managed can help you 
request the right permissions from your administrator. If you cannot access a feature in App Runner, see
Troubleshooting App Runner identity and access (p. 182).
Service administrator – If you're in charge of App Runner resources at your company, you probably 
have full access to App Runner. It's your job to determine which App Runner features and resources your 
service users should access. You must then submit requests to your IAM administrator to change the 
permissions of your service users. Review the information on this page to understand the basic concepts 
of IAM. To learn more about how your company can use IAM with App Runner, see How App Runner 
works with IAM (p. 167).
163AWS App Runner Developer Guide
Authenticating with identities
IAM administrator  – If you're an IAM administrator, you might want to learn details about how you can 
write policies to manage access to App Runner. To view example App Runner identity-based policies that 
you can use in IAM, see App Runner identity-based policy examples (p. 173).
Authenticating with identities
Authentication is how you sign in to AWS using your identity credentials. You must be authenticated
(signed in to AWS) as the AWS account root user, as an IAM user, or by assuming an IAM role.
You can sign in to AWS as a federated identity by using credentials provided through an identity source. 
AWS IAM Identity Center (successor to AWS Single Sign-On) (IAM Identity Center) users, your company's 
single sign-on authentication, and your Google or Facebook credentials are examples of federated 
identities. When you sign in as a federated identity, your administrator previously set up identity 
federation using IAM roles. When you access AWS by using federation, you are indirectly assuming a role.
Depending on the type of user you are, you can sign in to the AWS Management Console or the AWS 
access portal. For more information about signing in to AWS, see How to sign in to your AWS account in 
the AWS Sign-In User Guide.
If you access AWS programmatically, AWS provides a software development kit (SDK) and a command 
line interface (CLI) to cryptographically sign your requests by using your credentials. If you don't use AWS 
tools, you must sign requests yourself. For more information about using the recommended method to 
sign requests yourself, see Signing AWS API requests in the IAM User Guide .
Regardless of the authentication method that you use, you might be required to provide additional 
security information. For example, AWS recommends that you use multi-factor authentication (MFA) 
to increase the security of your account. To learn more, see Multi-factor authentication in the AWS IAM 
Identity Center (successor to AWS Single Sign-On) User Guide and Using multi-factor authentication (MFA) 
in AWS in the IAM User Guide .
AWS account root user
When you create an AWS account, you begin with one sign-in identity that has complete access to 
all AWS services and resources in the account. This identity is called the AWS account root user  and is 
accessed by signing in with the email address and password that you used to create the account. We 
strongly recommend that you don't use the root user for your everyday tasks. Safeguard your root user 
credentials and use them to perform the tasks that only the root user can perform. For the complete list 
of tasks that require you to sign in as the root user, see Tasks that require root user credentials in the
AWS Account Management Reference Guide.
IAM users and groups
An IAM user  is an identity within your AWS account that has speciﬁc permissions for a single person or 
application. Where possible, we recommend relying on temporary credentials instead of creating IAM 
users who have long-term credentials such as passwords and access keys. However, if you have speciﬁc 
use cases that require long-term credentials with IAM users, we recommend that you rotate access keys. 
For more information, see Rotate access keys regularly for use cases that require long-term credentials in 
the IAM User Guide .
An IAM group  is an identity that speciﬁes a collection of IAM users. You can't sign in as a group. You 
can use groups to specify permissions for multiple users at a time. Groups make permissions easier to 
manage for large sets of users. For example, you could have a group named IAMAdmins  and give that 
group permissions to administer IAM resources.
Users are diﬀerent from roles. A user is uniquely associated with one person or application, but a role 
is intended to be assumable by anyone who needs it. Users have permanent long-term credentials, but 
164AWS App Runner Developer Guide
Authenticating with identities
roles provide temporary credentials. To learn more, see When to create an IAM user (instead of a role) in 
the IAM User Guide .
IAM roles
An IAM role  is an identity within your AWS account that has speciﬁc permissions. It is similar to an IAM 
user, but is not associated with a speciﬁc person. You can temporarily assume an IAM role in the AWS 
Management Console by switching roles. You can assume a role by calling an AWS CLI or AWS API 
operation or by using a custom URL. For more information about methods for using roles, see Using IAM 
roles in the IAM User Guide .
IAM roles with temporary credentials are useful in the following situations:
•Federated user access – To assign permissions to a federated identity, you create a role and deﬁne 
permissions for the role. When a federated identity authenticates, the identity is associated with 
the role and is granted the permissions that are deﬁned by the role. For information about roles for 
federation, see  Creating a role for a third-party Identity Provider in the IAM User Guide . If you use IAM 
Identity Center, you conﬁgure a permission set. To control what your identities can access after they 
authenticate, IAM Identity Center correlates the permission set to a role in IAM. For information about 
permissions sets, see  Permission sets in the AWS IAM Identity Center (successor to AWS Single Sign-On) 
User Guide .
•Temporary IAM user permissions – An IAM user or role can assume an IAM role to temporarily take on 
diﬀerent permissions for a speciﬁc task.
•Cross-account access – You can use an IAM role to allow someone (a trusted principal) in a diﬀerent 
account to access resources in your account. Roles are the primary way to grant cross-account access. 
However, with some AWS services, you can attach a policy directly to a resource (instead of using a role 
as a proxy). To learn the diﬀerence between roles and resource-based policies for cross-account access, 
see How IAM roles diﬀer from resource-based policies in the IAM User Guide .
•Cross-service access – Some AWS services use features in other AWS services. For example, when you 
make a call in a service, it's common for that service to run applications in Amazon EC2 or store objects 
in Amazon S3. A service might do this using the calling principal's permissions, using a service role, or 
using a service-linked role.
•Principal permissions  – When you use an IAM user or role to perform actions in AWS, you are 
considered a principal. Policies grant permissions to a principal. When you use some services, you 
might perform an action that then triggers another action in a diﬀerent service. In this case, you 
must have permissions to perform both actions. To see whether an action requires additional 
dependent actions in a policy, see Actions, resources, and condition keys for AWS App Runner in the
Service Authorization Reference.
•Service role – A service role is an IAM role that a service assumes to perform actions on your behalf. 
An IAM administrator can create, modify, and delete a service role from within IAM. For more 
information, see Creating a role to delegate permissions to an AWS service in the IAM User Guide .
•Service-linked role – A service-linked role is a type of service role that is linked to an AWS service. 
The service can assume the role to perform an action on your behalf. Service-linked roles appear in 
your AWS account and are owned by the service. An IAM administrator can view, but not edit the 
permissions for service-linked roles.
•Applications running on Amazon EC2 – You can use an IAM role to manage temporary credentials 
for applications that are running on an EC2 instance and making AWS CLI or AWS API requests. 
This is preferable to storing access keys within the EC2 instance. To assign an AWS role to an EC2 
instance and make it available to all of its applications, you create an instance proﬁle that is attached 
to the instance. An instance proﬁle contains the role and enables programs that are running on the 
EC2 instance to get temporary credentials. For more information, see Using an IAM role to grant 
permissions to applications running on Amazon EC2 instances in the IAM User Guide .
To learn whether to use IAM roles or IAM users, see When to create an IAM role (instead of a user) in the
IAM User Guide .
165AWS App Runner Developer Guide
Managing access using policies
Managing access using policies
You control access in AWS by creating policies and attaching them to AWS identities or resources. A 
policy is an object in AWS that, when associated with an identity or resource, deﬁnes their permissions. 
AWS evaluates these policies when a principal (user, root user, or role session) makes a request. 
Permissions in the policies determine whether the request is allowed or denied. Most policies are stored 
in AWS as JSON documents. For more information about the structure and contents of JSON policy 
documents, see Overview of JSON policies in the IAM User Guide .
Administrators can use AWS JSON policies to specify who has access to what. That is, which principal  can 
perform actions on what resources, and under what conditions.
By default, users and roles have no permissions. To grant users permission to perform actions on the 
resources that they need, an IAM administrator can create IAM policies. The administrator can then add 
the IAM policies to roles, and users can assume the roles.
IAM policies deﬁne permissions for an action regardless of the method that you use to perform the 
operation. For example, suppose that you have a policy that allows the iam:GetRole  action. A user with 
that policy can get role information from the AWS Management Console, the AWS CLI, or the AWS API.
Identity-based policies
Identity-based policies are JSON permissions policy documents that you can attach to an identity, such 
as an IAM user, group of users, or role. These policies control what actions users and roles can perform, 
on which resources, and under what conditions. To learn how to create an identity-based policy, see
Creating IAM policies in the IAM User Guide .
Identity-based policies can be further categorized as inline policies  or managed policies . Inline policies 
are embedded directly into a single user, group, or role. Managed policies are standalone policies that 
you can attach to multiple users, groups, and roles in your AWS account. Managed policies include AWS 
managed policies and customer managed policies. To learn how to choose between a managed policy or 
an inline policy, see Choosing between managed policies and inline policies in the IAM User Guide .
Resource-based policies
Resource-based policies are JSON policy documents that you attach to a resource. Examples of resource-
based policies are IAM role trust policies  and Amazon S3 bucket policies . In services that support resource-
based policies, service administrators can use them to control access to a speciﬁc resource. For the 
resource where the policy is attached, the policy deﬁnes what actions a speciﬁed principal can perform 
on that resource and under what conditions. You must specify a principal in a resource-based policy. 
Principals can include accounts, users, roles, federated users, or AWS services.
Resource-based policies are inline policies that are located in that service. You can't use AWS managed 
policies from IAM in a resource-based policy.
Access control lists (ACLs)
Access control lists (ACLs) control which principals (account members, users, or roles) have permissions to 
access a resource. ACLs are similar to resource-based policies, although they do not use the JSON policy 
document format.
Amazon S3, AWS WAF, and Amazon VPC are examples of services that support ACLs. To learn more about 
ACLs, see Access control list (ACL) overview in the Amazon Simple Storage Service Developer Guide.
Other policy types
AWS supports additional, less-common policy types. These policy types can set the maximum 
permissions granted to you by the more common policy types.
166AWS App Runner Developer Guide
App Runner and IAM
•Permissions boundaries – A permissions boundary is an advanced feature in which you set the 
maximum permissions that an identity-based policy can grant to an IAM entity (IAM user or role). 
You can set a permissions boundary for an entity. The resulting permissions are the intersection of an 
entity's identity-based policies and its permissions boundaries. Resource-based policies that specify 
the user or role in the Principal  ﬁeld are not limited by the permissions boundary. An explicit deny 
in any of these policies overrides the allow. For more information about permissions boundaries, see
Permissions boundaries for IAM entities in the IAM User Guide .
•Service control policies (SCPs) – SCPs are JSON policies that specify the maximum permissions for 
an organization or organizational unit (OU) in AWS Organizations. AWS Organizations is a service for 
grouping and centrally managing multiple AWS accounts that your business owns. If you enable all 
features in an organization, then you can apply service control policies (SCPs) to any or all of your 
accounts. The SCP limits permissions for entities in member accounts, including each AWS account 
root user. For more information about Organizations and SCPs, see How SCPs work in the AWS 
Organizations User Guide .
•Session policies  – Session policies are advanced policies that you pass as a parameter when you 
programmatically create a temporary session for a role or federated user. The resulting session's 
permissions are the intersection of the user or role's identity-based policies and the session policies. 
Permissions can also come from a resource-based policy. An explicit deny in any of these policies 
overrides the allow. For more information, see Session policies  in the IAM User Guide .
Multiple policy types
When multiple types of policies apply to a request, the resulting permissions are more complicated to 
understand. To learn how AWS determines whether to allow a request when multiple policy types are 
involved, see Policy evaluation logic in the IAM User Guide .
How App Runner works with IAM
Before you use IAM to manage access to AWS App Runner, you should understand what IAM features are 
available to use with App Runner. To get a high-level view of how App Runner and other AWS services 
work with IAM, see AWS Services That Work with IAM in the IAM User Guide .
For other App Runner security topics, see Security  (p. 161).
Topics
•App Runner identity-based policies (p. 167)
•App Runner resource-based policies (p. 169)
•Authorization based on App Runner tags  (p. 169)
•App Runner user permissions  (p. 170)
•App Runner IAM roles (p. 171)
App Runner identity-based policies
With IAM identity-based policies, you can specify allowed or denied actions and resources as well as the 
conditions under which actions are allowed or denied. App Runner supports speciﬁc actions, resources, 
and condition keys. To learn about all of the elements that you use in a JSON policy, see IAM JSON Policy 
Elements Reference in the IAM User Guide .
Actions
Administrators can use AWS JSON policies to specify who has access to what. That is, which principal  can 
perform actions on what resources, and under what conditions.
167AWS App Runner Developer Guide
App Runner and IAM
The Action element of a JSON policy describes the actions that you can use to allow or deny access in a 
policy. Policy actions usually have the same name as the associated AWS API operation. There are some 
exceptions, such as permission-only actions that don't have a matching API operation. There are also 
some operations that require multiple actions in a policy. These additional actions are called dependent 
actions .
Include actions in a policy to grant permissions to perform the associated operation.
Policy actions in App Runner use the following preﬁx before the action: apprunner: . For example, to 
grant someone permission to run an Amazon EC2 instance with the Amazon EC2 RunInstances  API 
operation, you include the ec2:RunInstances  action in their policy. Policy statements must include 
either an Action  or NotAction  element. App Runner deﬁnes its own set of actions that describe tasks 
that you can perform with this service.
To specify multiple actions in a single statement, separate them with commas as follows:
"Action": [ 
   "apprunner:CreateService", 
   "apprunner:CreateConnection"
]
You can specify multiple actions using wildcards (*). For example, to specify all actions that begin with 
the word Describe , include the following action:
"Action": "apprunner:Describe*"
To see a list of App Runner actions, see Actions deﬁned by AWS App Runner in the Service Authorization 
Reference.
Resources
Administrators can use AWS JSON policies to specify who has access to what. That is, which principal  can 
perform actions on what resources, and under what conditions.
The Resource  JSON policy element speciﬁes the object or objects to which the action applies. 
Statements must include either a Resource  or a NotResource  element. As a best practice, specify 
a resource using its Amazon Resource Name (ARN). You can do this for actions that support a speciﬁc 
resource type, known as resource-level permissions .
For actions that don't support resource-level permissions, such as listing operations, use a wildcard (*) to 
indicate that the statement applies to all resources.
"Resource": "*"
App Runner resources have the following ARN structure:
arn:aws:apprunner: region:account-id :resource-type /resource-name [/resource-id ]
For more information about the format of ARNs, see Amazon Resource Names (ARNs) and AWS Service 
Namespaces in the AWS General Reference.
For example, to specify the my-service  service in your statement, use the following ARN:
"Resource": "arn:aws:apprunner:us-east-1:123456789012:service/my-service"
168AWS App Runner Developer Guide
App Runner and IAM
To specify all services that belong to a speciﬁc account, use the wildcard (*):
"Resource": "arn:aws:apprunner:us-east-1:123456789012:service/*"
Some App Runner actions, such as those for creating resources, cannot be performed on a speciﬁc 
resource. In those cases, you must use the wildcard (*).
"Resource": "*"
To see a list of App Runner resource types and their ARNs, see Resources deﬁned by AWS App Runner
in the Service Authorization Reference. To learn with which actions you can specify the ARN of each 
resource, see Actions deﬁned by AWS App Runner.
Condition keys
Administrators can use AWS JSON policies to specify who has access to what. That is, which principal  can 
perform actions on what resources, and under what conditions.
The Condition  element (or Condition  block ) lets you specify conditions in which a statement is in 
eﬀect. The Condition  element is optional. You can create conditional expressions that use condition 
operators , such as equals or less than, to match the condition in the policy with values in the request.
If you specify multiple Condition  elements in a statement, or multiple keys in a single Condition
element, AWS evaluates them using a logical AND operation. If you specify multiple values for a single 
condition key, AWS evaluates the condition using a logical OR operation. All of the conditions must be 
met before the statement's permissions are granted.
You can also use placeholder variables when you specify conditions. For example, you can grant an IAM 
user permission to access a resource only if it is tagged with their IAM user name. For more information, 
see IAM policy elements: variables and tags in the IAM User Guide .
AWS supports global condition keys and service-speciﬁc condition keys. To see all AWS global condition 
keys, see AWS global condition context keys in the IAM User Guide .
App Runner supports using some global condition keys. To see all AWS global condition keys, see AWS 
Global Condition Context Keys in the IAM User Guide .
App Runner deﬁnes a set of service-speciﬁc condition keys. In addition, App Runner supports tag-
based access control, which is implemented using condition keys. For details, see the section called 
“Authorization based on App Runner tags” (p. 169).
To see a list of App Runner condition keys, see Condition keys for AWS App Runner in the Service 
Authorization Reference. To learn with which actions and resources you can use a condition key, see
Actions deﬁned by AWS App Runner.
Examples
To view examples of App Runner identity-based policies, see App Runner identity-based policy 
examples  (p. 173).
App Runner resource-based policies
App Runner does not support resource-based policies.
Authorization based on App Runner tags
You can attach tags to App Runner resources or pass tags in a request to App Runner. To control 
access based on tags, you provide tag information in the condition element of a policy using 
169AWS App Runner Developer Guide
App Runner and IAM
the apprunner:ResourceTag/ key-name , aws:RequestTag/ key-name , or aws:TagKeys
condition keys. For more information about tagging App Runner resources, see the section called 
“Conﬁguration” (p. 78).
To view an example identity-based policy for limiting access to a resource based on the tags on that 
resource, see Controlling access to App Runner services based on tags (p. 175).
App Runner user permissions
To use App Runner, IAM users need permissions to App Runner actions. A common way to grant 
permissions to users is by attaching a policy to IAM users or groups. For more information about 
managing user permissions, see Changing permissions for an IAM user  in the IAM User Guide .
App Runner provides two managed policies that you can attach to your users.
•AWSAppRunnerReadOnlyAccess  – Grants permissions to list and view details about App Runner 
resources.
•AWSAppRunnerFullAccess  – Grants permissions to all App Runner actions.
For more granular control of user permissions, you can create a custom policy and attach it to your users. 
For details, see Creating IAM policies in the IAM User Guide .
For examples of user policies, see the section called “User policies” (p. 174).
AWSAppRunnerReadOnlyAccess
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "apprunner:List*", 
        "apprunner:Describe*" 
      ], 
      "Resource": "*" 
    } 
  ]
}
AWSAppRunnerFullAccess
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Action": "iam:CreateServiceLinkedRole", 
      "Resource": [ 
        "arn:aws:iam::*:role/aws-service-role/apprunner.amazonaws.com/
AWSServiceRoleForAppRunner", 
        "arn:aws:iam::*:role/aws-service-role/networking.apprunner.amazonaws.com/
AWSServiceRoleForAppRunnerNetworking" 
      ], 
      "Condition": { 
        "StringLike": { 
          "iam:AWSServiceName": [ 
            "apprunner.amazonaws.com", 
            "networking.apprunner.amazonaws.com" 
          ] 
170AWS App Runner Developer Guide
App Runner and IAM
        } 
      } 
    }, 
    { 
      "Effect": "Allow", 
      "Action": "iam:PassRole", 
      "Resource": "*", 
      "Condition": { 
        "StringLike": { 
          "iam:PassedToService": "apprunner.amazonaws.com" 
        } 
      } 
    }, 
    { 
      "Sid": "AppRunnerAdminAccess", 
      "Effect": "Allow", 
      "Action": "apprunner:*", 
      "Resource": "*" 
    } 
  ]
}
App Runner IAM roles
An IAM role is an entity within your AWS account that has speciﬁc permissions.
Service-linked roles
Service-linked roles allow AWS services to access resources in other services to complete an action on 
your behalf. Service-linked roles appear in your IAM account and are owned by the service. An IAM 
administrator can view but not edit the permissions for service-linked roles.
App Runner supports service-linked roles. For information about creating or managing App Runner 
service-linked roles, see the section called “Using service-linked roles” (p. 176).
Service roles
This feature allows a service to assume a service role on your behalf. This role allows the service to 
access resources in other services to complete an action on your behalf. Service roles appear in your IAM 
account and are owned by the account. This means that an IAM user can change the permissions for this 
role. However, doing so might break the functionality of the service.
App Runner supports a few service roles.
Access role
The access role is a role that App Runner uses for accessing images in Amazon Elastic Container 
Registry (Amazon ECR) in your account. It's required to access an image in Amazon ECR, and isn't 
required with Amazon ECR Public. Before creating a service based on an image in Amazon ECR, use 
IAM to create a service role and use the AWSAppRunnerServicePolicyForECRAccess  managed 
policy in it. You can then pass this role to App Runner when you call the CreateService API in the
AuthenticationConﬁguration  member of the SourceConﬁguration parameter, or when you use the App 
Runner console to create a service.
AWSAppRunnerServicePolicyForECRAccess
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
171AWS App Runner Developer Guide
App Runner and IAM
      "Action": [ 
        "ecr:GetDownloadUrlForLayer", 
        "ecr:BatchCheckLayerAvailability", 
        "ecr:BatchGetImage", 
        "ecr:DescribeImages", 
        "ecr:GetAuthorizationToken" 
      ], 
      "Resource": "*" 
    } 
  ]
}
Note
If you create your own custom policy for your access role, be sure to specify "Resource": "*"
for the ecr:GetAuthorizationToken  action. Tokens can be used to access any Amazon ECR 
registry that you have access to.
When you create your access role, be sure to add a trust policy that declares the App Runner service 
principal build.apprunner.amazonaws.com  as a trusted entity.
Trust policy for an access role
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Principal": { 
        "Service": "build.apprunner.amazonaws.com" 
      }, 
      "Action": "sts:AssumeRole" 
    } 
  ]
}
If you use the App Runner console to create a service, the console can automatically create an access role 
for you and choose it for the new service. The console also lists other roles in your account, and you can 
select a diﬀerent role if you like.
Instance role
The instance role is an optional role that App Runner uses to provide permissions to AWS service actions 
that your service's compute instances need. You need to provide an instance role to App Runner if your 
application code calls AWS actions (APIs). Either embed the required permissions in your instance role or 
create your own custom policy and use it in the instance role. We have no way to anticipate which calls 
your code uses. Therefore, we don't provide a managed policy for this purpose.
Before creating an App Runner service, use IAM to create a service role with the required custom or 
embedded policies. You can then pass this role to App Runner as the instance role when you call the
CreateService API in the InstanceRoleArn member of the InstanceConﬁguration parameter, or when you 
use the App Runner console to create a service.
When you create your instance role, be sure to add a trust policy that declares the App Runner service 
principal tasks.apprunner.amazonaws.com  as a trusted entity.
Trust policy for an instance role
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
172AWS App Runner Developer Guide
Identity-based policy examples
      "Effect": "Allow", 
      "Principal": { 
        "Service": "tasks.apprunner.amazonaws.com" 
      }, 
      "Action": "sts:AssumeRole" 
    } 
  ]
}
If you use the App Runner console to create a service, the console lists the roles in your account, and you 
can select the role that you created for this purpose.
For information about creating a service, see the section called “Creation” (p. 64).
App Runner identity-based policy examples
By default, IAM users and roles don't have permission to create or modify AWS App Runner resources. 
They also can't perform tasks using the AWS Management Console, AWS CLI, or AWS API. An IAM 
administrator must create IAM policies that grant users and roles permission to perform speciﬁc API 
operations on the speciﬁed resources they need. The administrator must then attach those policies to 
the IAM users or groups that require those permissions.
To learn how to create an IAM identity-based policy using these example JSON policy documents, see
Creating Policies on the JSON Tab in the IAM User Guide .
For other App Runner security topics, see Security  (p. 161).
Topics
•Policy best practices (p. 173)
•User policies  (p. 174)
•Controlling access to App Runner services based on tags (p. 175)
Policy best practices
Identity-based policies determine whether someone can create, access, or delete App Runner resources in 
your account. These actions can incur costs for your AWS account. When you create or edit identity-based 
policies, follow these guidelines and recommendations:
•Get started with AWS managed policies and move toward least-privilege permissions – To get 
started granting permissions to your users and workloads, use the AWS managed policies that grant 
permissions for many common use cases. They are available in your AWS account. We recommend that 
you reduce permissions further by deﬁning AWS customer managed policies that are speciﬁc to your 
use cases. For more information, see AWS managed policies or AWS managed policies for job functions
in the IAM User Guide .
•Apply least-privilege permissions – When you set permissions with IAM policies, grant only the 
permissions required to perform a task. You do this by deﬁning the actions that can be taken on 
speciﬁc resources under speciﬁc conditions, also known as least-privilege permissions . For more 
information about using IAM to apply permissions, see  Policies and permissions in IAM in the IAM User 
Guide .
•Use conditions in IAM policies to further restrict access – You can add a condition to your policies to 
limit access to actions and resources. For example, you can write a policy condition to specify that all 
requests must be sent using SSL. You can also use conditions to grant access to service actions if they 
are used through a speciﬁc AWS service, such as AWS CloudFormation. For more information, see  IAM 
JSON policy elements: Condition in the IAM User Guide .
•Use IAM Access Analyzer to validate your IAM policies to ensure secure and functional permissions
– IAM Access Analyzer validates new and existing policies so that the policies adhere to the IAM 
173AWS App Runner Developer Guide
Identity-based policy examples
policy language (JSON) and IAM best practices. IAM Access Analyzer provides more than 100 policy 
checks and actionable recommendations to help you author secure and functional policies. For more 
information, see IAM Access Analyzer policy validation in the IAM User Guide .
•Require multi-factor authentication (MFA) – If you have a scenario that requires IAM users or a root 
user in your AWS account, turn on MFA for additional security. To require MFA when API operations are 
called, add MFA conditions to your policies. For more information, see  Conﬁguring MFA-protected API 
access in the IAM User Guide .
For more information about best practices in IAM, see Security best practices in IAM in the IAM User 
Guide .
User policies
To access the App Runner console, IAM users must have a minimum set of permissions. These 
permissions must allow you to list and view details about the App Runner resources in your AWS account. 
If you create an identity-based policy that is more restrictive than the minimum required permissions, 
the console won't function as intended for users with that policy.
App Runner provides two managed policies that you can attach to your users.
•AWSAppRunnerReadOnlyAccess  – Grants permissions to list and view details about App Runner 
resources.
•AWSAppRunnerFullAccess  – Grants permissions to all App Runner actions.
To ensure that users can use the App Runner console, attach, at a minimum, the
AWSAppRunnerReadOnlyAccess  managed policy to the users. You can attach the
AWSAppRunnerFullAccess  managed policy instead, or add speciﬁc additional permissions, to allow 
users to create, modify, and delete resource. For more information, see Adding Permissions to a User in 
the IAM User Guide .
You don't need to allow minimum console permissions for users that are making calls only to the AWS 
CLI or the AWS API. Instead, allow access to only the actions that match the API operation that you want 
to allow users to perform.
The following examples demonstrate custom user policies. You can use them as starting points to 
deﬁning your own custom user policies. Copy the example, and or remove actions, scope down resources, 
and add conditions.
Example: console and connection management user policy
This example policy enables console access and allows connection creation and management. It doesn't 
allow App Runner service creation and management. It can be attached to a user whose role is to 
manage App Runner service access to source code assets.
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "apprunner:List*", 
        "apprunner:Describe*", 
        "apprunner:CreateConnection", 
        "apprunner:DeleteConnection" 
      ], 
      "Resource": "*" 
    } 
174AWS App Runner Developer Guide
Identity-based policy examples
  ]
}
Example: user policies that use condition keys
The examples in this section demonstrate conditional permissions that depend on some resource 
properties or action parameters.
This example policy enables creating an App Runner service but denies using a connection named prod .
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Sid": "AllowCreateAppRunnerServiceWithNonProdConnections", 
      "Effect": "Allow", 
      "Action": "apprunner:CreateService", 
      "Resource": "*", 
      "Condition": { 
        "ArnNotLike": { 
          "apprunner:ConnectionArn": "arn:aws:apprunner:*:*:connection/prod/*" 
        } 
      } 
    } 
  ]
}
This example policy enables updating an App Runner service named preprod  only with an auto scaling 
conﬁguration named preprod .
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Sid": "AllowUpdatePreProdAppRunnerServiceWithPreProdASConfig", 
      "Effect": "Allow", 
      "Action": "apprunner:UpdateService", 
      "Resource": "arn:aws:apprunner:*:*:service/preprod/*", 
      "Condition": { 
        "ArnLike": { 
          "apprunner:AutoScalingConfigurationArn": 
 "arn:aws:apprunner:*:*:autoscalingconfiguration/preprod/*" 
        } 
      } 
    } 
  ]
}
Controlling access to App Runner services based on tags
You can use conditions in your identity-based policy to control access to App Runner resources based 
on tags. This example shows how you might create a policy that allows deleting an App Runner service. 
However, permission is granted only if the service tag Owner has the value of that user's user name. This 
policy also grants the permissions necessary to complete this action on the console.
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Sid": "ListServicesInConsole", 
175AWS App Runner Developer Guide
Using service-linked roles
      "Effect": "Allow", 
      "Action": "apprunner:ListServices", 
      "Resource": "*" 
    }, 
    { 
      "Sid": "DeleteServiceIfOwner", 
      "Effect": "Allow", 
      "Action": "apprunner:DeleteService", 
      "Resource": "arn:aws:apprunner:*:*:service/*", 
      "Condition": { 
        "StringEquals": {"apprunner:ResourceTag/Owner": "${aws:username}"} 
      } 
    } 
  ]
}
You can attach this policy to the IAM users in your account. If a user named richard-roe  attempts to 
delete an App Runner service, the service must be tagged Owner=richard-roe  or owner=richard-
roe. Otherwise he is denied access. The condition tag key Owner  matches both Owner  and owner
because condition key names are not case-sensitive. For more information, see IAM JSON Policy 
Elements: Condition  in the IAM User Guide .
Using service-linked roles for App Runner
AWS App Runner uses AWS Identity and Access Management (IAM) service-linked roles. A service-linked 
role is a unique type of IAM role that is linked directly to App Runner. Service-linked roles are predeﬁned 
by App Runner and include all the permissions that the service requires to call other AWS services on 
your behalf.
Topics
•Using roles for management (p. 176)
•Using roles for networking (p. 179)
Using roles for management
AWS App Runner uses AWS Identity and Access Management (IAM) service-linked roles. A service-linked 
role is a unique type of IAM role that is linked directly to App Runner. Service-linked roles are predeﬁned 
by App Runner and include all the permissions that the service requires to call other AWS services on 
your behalf.
A service-linked role makes setting up App Runner easier because you don’t have to manually add the 
necessary permissions. App Runner deﬁnes the permissions of its service-linked roles, and unless deﬁned 
otherwise, only App Runner can assume its roles. The deﬁned permissions include the trust policy and 
the permissions policy, and that permissions policy cannot be attached to any other IAM entity.
You can delete a service-linked role only after ﬁrst deleting their related resources. This protects your 
App Runner resources because you can't inadvertently remove permission to access the resources.
For information about other services that support service-linked roles, see AWS Services That Work with 
IAM and look for the services that have Yes in the Service-Linked Role column. Choose a Yes with a link 
to view the service-linked role documentation for that service.
Service-linked role permissions for App Runner
App Runner uses the service-linked role named AWSServiceRoleForAppRunner.
The role allows App Runner to perform the following tasks:
176AWS App Runner Developer Guide
Using service-linked roles
•Push logs to Amazon CloudWatch Logs log groups.
•Create Amazon CloudWatch Events rules to subscribe to Amazon Elastic Container Registry (Amazon 
ECR) image pushes.
•Send tracing information to AWS X-Ray.
The AWSServiceRoleForAppRunner service-linked role trusts the following services to assume the role:
•apprunner.amazonaws.com
The permissions policies of the AWSServiceRoleForAppRunner service-linked role contain all of the 
permissions that App Runner needs to complete actions on your behalf.
AppRunnerServiceRolePolicy managed policy
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Action": [ 
        "logs:CreateLogGroup", 
        "logs:PutRetentionPolicy" 
      ], 
      "Effect": "Allow", 
      "Resource": "arn:aws:logs:*:*:log-group:/aws/apprunner/*" 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "logs:CreateLogStream", 
        "logs:PutLogEvents", 
        "logs:DescribeLogStreams" 
      ], 
      "Resource": [ 
        "arn:aws:logs:*:*:log-group:/aws/apprunner/*:log-stream:*" 
      ] 
    }, 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "events:PutRule", 
        "events:PutTargets", 
        "events:DeleteRule", 
        "events:RemoveTargets", 
        "events:DescribeRule", 
        "events:EnableRule", 
        "events:DisableRule" 
      ], 
      "Resource": "arn:aws:events:*:*:rule/AWSAppRunnerManagedRule*" 
    } 
  ]
}
Policy for X-Ray tracing
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Action": [ 
177AWS App Runner Developer Guide
Using service-linked roles
        "xray:PutTraceSegments", 
        "xray:PutTelemetryRecords", 
        "xray:GetSamplingRules", 
        "xray:GetSamplingTargets", 
        "xray:GetSamplingStatisticSummaries" 
      ], 
      "Resource": [ 
        "*" 
      ] 
    } 
  ]
}
You must conﬁgure permissions to allow an IAM entity (such as a user, group, or role) to create, edit, or 
delete a service-linked role. For more information, see Service-Linked Role Permissions in the IAM User 
Guide .
Creating a service-linked role for App Runner
You don't need to manually create a service-linked role. When you create an App Runner service in the 
AWS Management Console, the AWS CLI, or the AWS API, App Runner creates the service-linked role for 
you.
If you delete this service-linked role, and then need to create it again, you can use the same process 
to recreate the role in your account. When you create an App Runner service, App Runner creates the 
service-linked role for you again.
Editing a service-linked role for App Runner
App Runner does not allow you to edit the AWSServiceRoleForAppRunner service-linked role. After you 
create a service-linked role, you cannot change the name of the role because various entities might 
reference the role. However, you can edit the description of the role using IAM. For more information, see
Editing a Service-Linked Role in the IAM User Guide .
Deleting a service-linked role for App Runner
If you no longer need to use a feature or service that requires a service-linked role, we recommend 
that you delete that role. That way you don’t have an unused entity that is not actively monitored or 
maintained. However, you must clean up your service-linked role before you can manually delete it.
Cleaning up a service-linked role
Before you can use IAM to delete a service-linked role, you must ﬁrst delete any resources used by the 
role.
In App Runner, this means deleting all App Runner services in your account. To learn about deleting App 
Runner services, see the section called “Deletion” (p. 96).
Note
If the App Runner service is using the role when you try to delete the resources, then the 
deletion might fail. If that happens, wait for a few minutes and try the operation again.
Manually delete the service-linked role
Use the IAM console, the AWS CLI, or the AWS API to delete the AWSServiceRoleForAppRunner service-
linked role. For more information, see Deleting a Service-Linked Role in the IAM User Guide .
Supported regions for App Runner service-linked roles
App Runner supports using service-linked roles in all of the regions where the service is available. For 
more information, see AWS App Runner endpoints and quotas in the AWS General Reference.
178AWS App Runner Developer Guide
Using service-linked roles
Using roles for networking
AWS App Runner uses AWS Identity and Access Management (IAM) service-linked roles. A service-linked 
role is a unique type of IAM role that is linked directly to App Runner. Service-linked roles are predeﬁned 
by App Runner and include all the permissions that the service requires to call other AWS services on 
your behalf.
A service-linked role makes setting up App Runner easier because you don’t have to manually add the 
necessary permissions. App Runner deﬁnes the permissions of its service-linked roles, and unless deﬁned 
otherwise, only App Runner can assume its roles. The deﬁned permissions include the trust policy and 
the permissions policy, and that permissions policy cannot be attached to any other IAM entity.
You can delete a service-linked role only after ﬁrst deleting their related resources. This protects your 
App Runner resources because you can't inadvertently remove permission to access the resources.
For information about other services that support service-linked roles, see AWS Services That Work with 
IAM and look for the services that have Yes in the Service-Linked Role column. Choose a Yes with a link 
to view the service-linked role documentation for that service.
Service-linked role permissions for App Runner
App Runner uses the service-linked role named AWSServiceRoleForAppRunnerNetworking.
The role allows App Runner to perform the following tasks:
•Attach a VPC to your App Runner service and manage network interfaces.
The AWSServiceRoleForAppRunnerNetworking service-linked role trusts the following services to assume 
the role:
•networking.apprunner.amazonaws.com
The role permissions policy named AppRunnerNetworkingServiceRolePolicy contains all of the 
permissions that App Runner needs to complete actions on your behalf.
AppRunnerNetworkingServiceRolePolicy
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Action": [ 
        "ec2:DescribeNetworkInterfaces", 
        "ec2:DescribeVpcs", 
        "ec2:DescribeDhcpOptions", 
        "ec2:DescribeSubnets", 
        "ec2:DescribeSecurityGroups" 
      ], 
      "Resource": "*" 
    }, 
    { 
      "Effect": "Allow", 
      "Action": "ec2:CreateNetworkInterface", 
      "Resource": "*", 
      "Condition": { 
        "ForAllValues:StringEquals": { 
          "aws:TagKeys": [ 
            "AWSAppRunnerManaged" 
179AWS App Runner Developer Guide
Using service-linked roles
          ] 
        } 
      } 
    }, 
    { 
      "Effect": "Allow", 
      "Action": "ec2:CreateTags", 
      "Resource": "arn:aws:ec2:*:*:network-interface/*", 
      "Condition": { 
        "StringEquals": { 
          "ec2:CreateAction": "CreateNetworkInterface" 
        }, 
        "StringLike": { 
          "aws:RequestTag/AWSAppRunnerManaged": "*" 
        } 
      } 
    }, 
    { 
      "Effect": "Allow", 
      "Action": "ec2:DeleteNetworkInterface", 
      "Resource": "*", 
      "Condition": { 
        "Null": { 
          "ec2:ResourceTag/AWSAppRunnerManaged": "false" 
        } 
      } 
    } 
  ]
}
You must conﬁgure permissions to allow an IAM entity (such as a user, group, or role) to create, edit, or 
delete a service-linked role. For more information, see Service-Linked Role Permissions in the IAM User 
Guide .
Creating a service-linked role for App Runner
You don't need to manually create a service-linked role. When you create a VPC connector in the AWS 
Management Console, the AWS CLI, or the AWS API, App Runner creates the service-linked role for you.
If you delete this service-linked role, and then need to create it again, you can use the same process to 
recreate the role in your account. When you create a VPC connector, App Runner creates the service-
linked role for you again.
Editing a service-linked role for App Runner
App Runner does not allow you to edit the AWSServiceRoleForAppRunnerNetworking service-linked 
role. After you create a service-linked role, you cannot change the name of the role because various 
entities might reference the role. However, you can edit the description of the role using IAM. For more 
information, see Editing a Service-Linked Role in the IAM User Guide .
Deleting a service-linked role for App Runner
If you no longer need to use a feature or service that requires a service-linked role, we recommend 
that you delete that role. That way you don’t have an unused entity that is not actively monitored or 
maintained. However, you must clean up your service-linked role before you can manually delete it.
Cleaning Up a Service-Linked Role
Before you can use IAM to delete a service-linked role, you must ﬁrst delete any resources used by the 
role.
180AWS App Runner Developer Guide
AWS managed policies
In App Runner, this means disassociating VPC connectors from all App Runner services in your 
account, and deleting the VPC connectors. For more information, see the section called “Outgoing 
traﬃc” (p. 114).
Note
If the App Runner service is using the role when you try to delete the resources, then the 
deletion might fail. If that happens, wait for a few minutes and try the operation again.
Manually Delete the Service-Linked Role
Use the IAM console, the AWS CLI, or the AWS API to delete the 
AWSServiceRoleForAppRunnerNetworking service-linked role. For more information, see Deleting a 
Service-Linked Role in the IAM User Guide .
Supported regions for App Runner service-linked roles
App Runner supports using service-linked roles in all of the regions where the service is available. For 
more information, see AWS App Runner endpoints and quotas in the AWS General Reference.
AWS managed policies for AWS App Runner
An AWS managed policy is a standalone policy that is created and administered by AWS. AWS managed 
policies are designed to provide permissions for many common use cases so that you can start assigning 
permissions to users, groups, and roles.
Keep in mind that AWS managed policies might not grant least-privilege permissions for your speciﬁc 
use cases because they're available for all AWS customers to use. We recommend that you reduce 
permissions further by deﬁning  customer managed policies  that are speciﬁc to your use cases.
You cannot change the permissions deﬁned in AWS managed policies. If AWS updates the permissions 
deﬁned in an AWS managed policy, the update aﬀects all principal identities (users, groups, and roles) 
that the policy is attached to. AWS is most likely to update an AWS managed policy when a new AWS 
service is launched or new API operations become available for existing services.
For more information, see AWS managed policies in the IAM User Guide .
App Runner updates to AWS managed policies
View details about updates to AWS managed policies for App Runner since this service began tracking 
these changes. For automatic alerts about changes to this page, subscribe to the RSS feed on the App 
Runner Document history page.
Change Description Date
AWSAppRunnerReadOnlyAccess (p. 170) – 
New policyApp Runner added a new policy to allow 
users to list and view details about App 
Runner resources.Feb 24, 
2022
181AWS App Runner Developer Guide
Troubleshooting
Change Description Date
AWSAppRunnerFullAccess (p. 170) – 
Update to an existing policyApp Runner updated the resource list for 
the iam:CreateServiceLinkedRole
action to allow creation of
AWSServiceRoleForAppRunnerNetworking
service-linked role.Feb 8, 
2022
AppRunnerNetworkingServiceRolePolicy (p. 179)
– New policyApp Runner added a new policy to allow 
App Runner to make calls to Amazon 
Virtual Private Cloud to attach a VPC to 
your App Runner service and manage 
network interfaces on behalf of App 
Runner services. The policy is used in the
AWSServiceRoleForAppRunnerNetworking
service-linked role.Feb 8, 
2022
AWSAppRunnerFullAccess (p. 170) – New 
policyApp Runner added a new policy to allow 
users to perform all App Runner actions.Jan 10, 
2022
AppRunnerServiceRolePolicy (p. 176) – 
New policyApp Runner added a new policy to 
allow App Runner to make calls to 
Amazon CloudWatch Logs and Amazon 
CloudWatch Events on behalf of App 
Runner services. The policy is used in the
AWSServiceRoleForAppRunner  service-
linked role.Mar 1, 
2021
AWSAppRunnerServicePolicyForECRAccess (p. 171)
– New policyApp Runner added a new policy to allow 
App Runner to access Amazon Elastic 
Container Registry (Amazon ECR) images in 
your account.Mar 1, 
2021
App Runner started tracking changesApp Runner started tracking changes for its 
AWS managed policies.Mar 1, 
2021
Troubleshooting App Runner identity and access
Use the following information to help you diagnose and ﬁx common issues that you might encounter 
when working with AWS App Runner and IAM.
For other App Runner security topics, see Security  (p. 161).
Topics
•I'm not authorized to perform an action in App Runner (p. 182)
•I want to allow people outside of my AWS account to access my App Runner resources (p. 183)
I'm not authorized to perform an action in App Runner
If the AWS Management Console tells you that you're not authorized to perform an action, contact your 
administrator for assistance. Your administrator is the person that provided you with your AWS sign-in 
credentials.
The following example error occurs when an IAM user named marymajor  tries to use the console to view 
details about an App Runner service but doesn't have apprunner:DescribeService  permissions.
182AWS App Runner Developer Guide
Logging and monitoring
User: arn:aws:iam::123456789012:user/marymajor is not authorized to perform: 
 apprunner:DescribeService on resource: my-example-service
In this case, Mary asks her administrator to update her policies to allow her to access the my-example-
service resource using the apprunner:DescribeService  action.
I want to allow people outside of my AWS account to access my 
App Runner resources
You can create a role that users in other accounts or people outside of your organization can use to 
access your resources. You can specify who is trusted to assume the role. For services that support 
resource-based policies or access control lists (ACLs), you can use those policies to grant people access to 
your resources.
To learn more, consult the following:
•To learn whether App Runner supports these features, see How App Runner works with IAM (p. 167).
•To learn how to provide access to your resources across AWS accounts that you own, see Providing 
access to an IAM user in another AWS account that you own in the IAM User Guide .
•To learn how to provide access to your resources to third-party AWS accounts, see Providing access to 
AWS accounts owned by third parties in the IAM User Guide .
•To learn how to provide access through identity federation, see Providing access to externally 
authenticated users (identity federation) in the IAM User Guide .
•To learn the diﬀerence between using roles and resource-based policies for cross-account access, see
How IAM roles diﬀer from resource-based policies in the IAM User Guide .
Logging and monitoring in App Runner
Monitoring is an important part of maintaining the reliability, availability, and performance of your AWS 
App Runner service. Collecting monitoring data from all parts of your AWS solution allows you to more 
easily debug a failure if one occurs. App Runner integrates with several AWS tools for monitoring your 
App Runner services and responding to potential incidents.
Amazon CloudWatch alarms
With Amazon CloudWatch alarms, you can watch a service metric over a time period that you 
specify. If the metric exceeds a given threshold for a given number of periods, you receive a 
notiﬁcation.
App Runner collects a variety of metrics about the service as a whole and the instances (scaling 
units) that run your web service. For more information, see Metrics (CloudWatch) (p. 125).
Application logs
App Runner collects the output of your application code and streams it to Amazon CloudWatch Logs. 
What's in this output is up to you. For example, you could include detailed records of requests made 
to your web service. These log records might prove useful in security and access audits. For more 
information, see Logs (CloudWatch Logs) (p. 122).
AWS CloudTrail action logs
App Runner is integrated with AWS CloudTrail, a service that provides a record of actions taken by 
a user, role, or an AWS service in App Runner. CloudTrail captures all API calls for App Runner as 
events. You can view the most recent events in the CloudTrail console, and you can create a trail to 
enable continuous delivery of CloudTrail events to an Amazon Simple Storage Service (Amazon S3) 
bucket. For more information, see API actions (CloudTrail) (p. 132).
183AWS App Runner Developer Guide
Compliance validation
Compliance validation for App Runner
Third-party auditors assess the security and compliance of AWS App Runner as part of multiple AWS 
compliance programs. These include SOC, PCI, FedRAMP, HIPAA, and others.
To learn whether an AWS service is within the scope of speciﬁc compliance programs, see AWS services 
in Scope by Compliance Program and choose the compliance program that you are interested in. For 
general information, see AWS Compliance Programs.
You can download third-party audit reports using AWS Artifact. For more information, see Downloading 
Reports in AWS Artifact.
Your compliance responsibility when using AWS services is determined by the sensitivity of your data, 
your company's compliance objectives, and applicable laws and regulations. AWS provides the following 
resources to help with compliance:
•Security and Compliance Quick Start Guides – These deployment guides discuss architectural 
considerations and provide steps for deploying baseline environments on AWS that are security and 
compliance focused.
•Architecting for HIPAA Security and Compliance on Amazon Web Services – This whitepaper describes 
how companies can use AWS to create HIPAA-eligible applications.
Note
Not all AWS services are HIPAA eligible. For more information, see the HIPAA Eligible Services 
Reference.
•AWS Compliance Resources – This collection of workbooks and guides might apply to your industry 
and location.
•Evaluating Resources with Rules in the AWS Conﬁg Developer Guide – The AWS Conﬁg service assesses 
how well your resource conﬁgurations comply with internal practices, industry guidelines, and 
regulations.
•AWS Security Hub – This AWS service provides a comprehensive view of your security state within 
AWS. Security Hub uses security controls to evaluate your AWS resources and to check your compliance 
against security industry standards and best practices. For a list of supported services and controls, see
Security Hub controls reference.
•AWS Audit Manager – This AWS service helps you continuously audit your AWS usage to simplify how 
you manage risk and compliance with regulations and industry standards.
For other App Runner security topics, see Security  (p. 161).
Resilience in App Runner
The AWS global infrastructure is built around AWS Regions and Availability Zones. AWS Regions provide 
multiple physically separated and isolated Availability Zones, which are connected with low-latency, 
high-throughput, and highly redundant networking. With Availability Zones, you can design and operate 
applications and databases that automatically fail over between Availability Zones without interruption. 
Availability Zones are more highly available, fault tolerant, and scalable than traditional single or 
multiple data center infrastructures.
For more information about AWS Regions and Availability Zones, see AWS Global Infrastructure.
AWS App Runner manages and automates the use of the AWS global infrastructure on your behalf. When 
using App Runner, you beneﬁt from the availability and fault tolerance mechanisms that AWS oﬀers.
For other App Runner security topics, see Security  (p. 161).
184AWS App Runner Developer Guide
Infrastructure security
Infrastructure security in AWS App Runner
As a managed service, AWS App Runner is protected by the AWS global network security procedures that 
are described in the Amazon Web Services: Overview of Security Processes whitepaper.
You use AWS published API calls to access App Runner through the network. Clients must support 
Transport Layer Security (TLS) 1.2 or later. Clients must also support cipher suites with perfect forward 
secrecy (PFS) such as Ephemeral Diﬃe-Hellman (DHE) or Elliptic Curve Ephemeral Diﬃe-Hellman 
(ECDHE). Most modern systems such as Java 7 and later support these modes.
Additionally, requests must be signed by using an access key ID and a secret access key that is associated 
with an IAM principal. Or you can use the AWS Security Token Service (AWS STS) to generate temporary 
security credentials to sign requests.
For other App Runner security topics, see Security  (p. 161).
Using App Runner with VPC endpoints
Your AWS application might integrate AWS App Runner services with other AWS services that run in a 
VPC from Amazon Virtual Private Cloud (Amazon VPC). Parts of your application might make requests to 
App Runner from within the VPC. For example, you might use AWS CodePipeline to continuously deploy 
to your App Runner service. One way to improve the security of your application is to send these App 
Runner requests (and requests to other AWS services) over a VPC endpoint.
Using a VPC endpoint , you can privately connect your VPC to supported AWS services and VPC endpoint 
services that are powered by AWS PrivateLink. You don't need an internet gateway, NAT device, VPN 
connection, or AWS Direct Connect connection.
Resources in your VPC don't use public IP addresses to interact with App Runner resources. Traﬃc 
between your VPC and App Runner doesn't leave the Amazon network. For more information about VPC 
endpoints, see VPC endpoints  in the AWS PrivateLink Guide.
Note
By default, the web application in your App Runner service runs in a VPC that App Runner 
provides and conﬁgures. This VPC is public. It means that it's connected to the internet. You can 
optionally associate your application with a custom VPC. For more information, see the section 
called “Outgoing traﬃc” (p. 114).
You can conﬁgure your services to access the internet, including AWS APIs, even when your 
service is connected to a VPC. For instructions on how to enable public internet access for VPC 
outbound traﬃc, see the section called “Considerations when selecting a subnet ” (p. 115).
App Runner doesn't support creating a VPC endpoint for your application.
Setting up a VPC endpoint for App Runner
To create the interface VPC endpoint for the App Runner service in your VPC, follow the Create 
an interface endpoint procedure in the AWS PrivateLink Guide. For Service Name, choose
com.amazonaws. region.apprunner .
VPC network privacy considerations
Important
Using a VPC endpoint for App Runner doesn't ensure that all traﬃc from your VPC stays oﬀ of 
the internet. The VPC might be public. Moreover, some parts of your solution might not use 
VPC endpoints to make AWS API calls. For example, AWS services might call other services using 
their public endpoints. If traﬃc privacy is required for the solution in your VPC, read this section.
185AWS App Runner Developer Guide
Using endpoint policies to control 
access with VPC endpoints
To ensure privacy of network traﬃc in your VPC, consider the following:
•Enable DNS name  – Parts of your application might still send requests to App Runner over the internet 
using the apprunner. region.amazonaws.com  public endpoint. If your VPC is conﬁgured with 
internet access, these requests succeed with no indication to you. You can prevent this by ensuring that
Enable DNS name is enabled when you create the endpoint. By default, it's set to true. This adds a 
DNS entry in your VPC that maps the public service endpoint to the interface VPC endpoint.
•Conﬁgure VPC endpoints for additional services – Your solution might send requests to other AWS 
services. For example, AWS CodePipeline might send requests to AWS CodeBuild. Conﬁgure VPC 
endpoints for these services, and enable DNS names on these endpoints.
•Conﬁgure a private VPC  – If possible (if your solution doesn't need internet access at all), set up your 
VPC as private, which means that it has no internet connection. This ensures that a missing VPC 
endpoint causes a visible error, so that you can add the missing endpoint.
Using endpoint policies to control access with VPC 
endpoints
VPC endpoint policies are not supported for App Runner. By default, full access to App Runner is allowed 
through the interface endpoint. Alternatively, you can associate a security group with the endpoint 
network interfaces to control traﬃc to App Runner through the interface endpoint.
Integrating with interface endpoint
App Runner supports AWS PrivateLink, which provides private connectivity to App Runner and eliminates 
exposure of traﬃc to the internet. To enable your application to send requests to App Runner using AWS 
PrivateLink, conﬁgure a type of VPC endpoint known as an interface endpoint. For more information, see
Interface VPC endpoints (AWS PrivateLink) in the AWS PrivateLink Guide.
Conﬁguration and vulnerability analysis in App 
Runner
AWS and our customers share responsibility for achieving a high level of software component security 
and compliance. For more information, see the AWS shared responsibility model.
For other App Runner security topics, see Security  (p. 161).
Security best practices for App Runner
AWS App Runner provides several security features to consider as you develop and implement your 
own security policies. The following best practices are general guidelines and don’t represent a 
complete security solution. Because these best practices might not be appropriate or suﬃcient for your 
environment, treat them as helpful considerations, not prescriptions.
For other App Runner security topics, see Security  (p. 161).
Preventive security best practices
Preventive security controls attempt to prevent incidents before they occur.
186AWS App Runner Developer Guide
Detective security best practices
Implement least privilege access
App Runner provides AWS Identity and Access Management (IAM) managed policies for IAM 
users  (p. 174) and the access role (p. 171). These managed policies specify all permissions that might 
be necessary for the correct operation of your App Runner service.
Your application might not require all the permissions in our managed policies. You can customize them 
and grant only the permissions that are required for your users and your App Runner service to perform 
their tasks. This is particularly relevant to user policies, where diﬀerent user roles might have diﬀerent 
permission needs. Implementing least privilege access is fundamental in reducing security risk and the 
impact that could result from errors or malicious intent.
Detective security best practices
Detective security controls identify security violations after they have occurred. They can help you detect 
a potential security threat or incident.
Implement monitoring
Monitoring is an important part of maintaining the reliability, security, availability, and performance 
of your App Runner solutions. AWS provides several tools and services to help you monitor your AWS 
services.
The following are some examples of items to monitor:
•Amazon CloudWatch metrics for App Runner – Set alarms for key App Runner metrics and for your 
application's custom metrics. For details, see Metrics (CloudWatch) (p. 125).
•AWS CloudTrail entries – Track actions that might impact availability, like PauseService  or
DeleteConnection . For details, see API actions (CloudTrail) (p. 132).
187AWS App Runner Developer Guide
AWS glossary
For the latest AWS terminology, see the AWS glossary in the AWS Glossary Reference.
188